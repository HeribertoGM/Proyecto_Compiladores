
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN CHAR COLON COMMA CTE_CHAR CTE_FLOAT CTE_INT CTE_STRING C_ABRACKET C_CBRACKET C_PARENTHESIS DIVIDE ELSE EQUAL FLOAT FOR FUNCTION GREATER GREATER_EQUAL ID IF INT LESSER LESSER_EQUAL LET MAIN MINUS MODULE NOT_EQUAL OR O_ABRACKET O_CBRACKET O_PARENTHESIS PLUS PROGRAM READ RETURN SEMICOLON STRING TIMES TO VOID WHILE WRITE\n\tprograma : PROGRAM ID SEMICOLON declaracion funcion MAIN O_PARENTHESIS C_PARENTHESIS bloque\n\t\n\tbloque : O_CBRACKET bloque_prime C_CBRACKET\n\t\n\tbloque_prime : estatuto bloque_prime\n\t\t\t\t | epsilon\n\t\n\tdeclaracion : declaracion_base\n\t\t\t\t| declaracion_base declaracion\n\t\n\tdeclaracion_base : LET declaracion_prime COLON tipo SEMICOLON\n\t\n\tdeclaracion_prime : variable\n\t\t\t\t\t  | variable COMMA declaracion_prime\n\t\n\ttipo : INT\n\t\t | FLOAT\n\t\t | CHAR\n\t\t | STRING\n\t\n\tfuncion : funcion_base\n\t\t\t  | funcion_base funcion\n\t\n\tfuncion_base : FUNCTION funcion_tipo ID O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion bloque\n\t\n\tfuncion_prime : tipo ID\n\t\t\t\t  | tipo ID COMMA funcion_prime\n\t\n\tfuncion_tipo : VOID\n \t\t\t\t | tipo\n\t\n\tvariable : ID O_ABRACKET variable_tipo C_ABRACKET O_ABRACKET variable_tipo C_ABRACKET O_ABRACKET variable_tipo C_ABRACKET\n\t\t\t | ID O_ABRACKET variable_tipo C_ABRACKET O_ABRACKET variable_tipo C_ABRACKET\n\t\t\t | ID O_ABRACKET variable_tipo C_ABRACKET\n\t\t\t | ID \n\t\n\tvariable_tipo : CTE_INT\n\t\t\t\t  | exp\n\t\n\testatuto : asignacion SEMICOLON\n\t\t\t | llamada SEMICOLON\n\t\t\t | retorno SEMICOLON\n\t\t\t | lectura SEMICOLON\n\t\t\t | escritura SEMICOLON\n\t\t\t | decision\n\t\t\t | while\n\t\t\t | for\n\t\t\t | expr SEMICOLON\n\t\n\tasignacion : variable ASSIGN expr\n\t\n\tllamada : ID O_PARENTHESIS llamada_prime C_PARENTHESIS\n\t\n\tllamada_prime : exp\n\t\t\t\t  | exp COMMA llamada_prime\n\t\n\tretorno : RETURN O_PARENTHESIS expr C_PARENTHESIS\n\t\n\tlectura : READ O_PARENTHESIS lectura_prime C_PARENTHESIS\n\t\n\tlectura_prime : variable\n\t\t\t\t  | variable COMMA lectura_prime\n\t\n\tescritura : WRITE O_PARENTHESIS escritura_prime C_PARENTHESIS\n\t\n\tescritura_prime : expr\n\t\t\t\t\t| CTE_STRING\n\t\t\t\t\t| expr COMMA escritura_prime\n\t\t\t\t\t| CTE_STRING COMMA escritura_prime\n\t\n\tdecision : IF O_PARENTHESIS expr C_PARENTHESIS bloque else\n\t\n\telse : ELSE bloque\n\t\t | epsilon\n\t\n\twhile : WHILE O_PARENTHESIS expr C_PARENTHESIS bloque\n\t\n\tfor : FOR variable ASSIGN exp TO exp bloque\n\t\n\texpr : or\n\t\n\tor : and\n\t   | and OR or\n\t\n\tand : equal\n\t\t| equal AND and\n\t\n\tequal : compare\n\t\t  | compare EQUAL compare\n\t\t  | compare NOT_EQUAL compare\n\t\n\tcompare : exp\n\t\t\t| exp GREATER exp\n\t\t\t| exp LESSER exp\n\t\t\t| exp GREATER_EQUAL exp\n\t\t\t| exp LESSER_EQUAL exp\n\t\n\texp : termino\n\t\t| termino PLUS exp\n\t\t| termino MINUS exp\n\t\n\ttermino : factor\n\t\t\t| factor TIMES termino\n\t\t\t| factor DIVIDE termino\n\t\t\t| factor MODULE termino\n\t\n\tfactor : variable\n\t\t   | O_PARENTHESIS expr C_PARENTHESIS\n\t\t   | llamada\n\t\t   | cte\n\t\t   | PLUS cte\n\t\t   | MINUS cte\n\t\n\tcte : CTE_INT\n\t\t| CTE_FLOAT\n\t\n\tepsilon :\n\t'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,63,117,],[0,-1,-2,]),'ID':([2,7,17,18,19,20,21,22,23,25,26,40,47,49,50,54,55,56,64,66,69,76,77,78,79,80,81,82,83,85,92,93,94,103,107,117,119,120,121,122,123,124,125,126,127,128,129,130,145,148,151,153,154,162,163,164,166,168,170,171,],[3,14,28,-19,-20,-10,-11,-12,-13,14,31,31,31,31,31,31,31,31,97,105,31,31,31,31,31,31,31,31,31,97,-32,-33,-34,14,31,-2,-27,-28,-29,-30,-31,-35,31,31,14,31,31,31,31,31,14,31,31,-82,-52,31,-49,-51,-50,-53,]),'SEMICOLON':([3,20,21,22,23,29,31,35,38,39,41,42,43,48,51,52,53,58,59,60,61,62,70,71,72,73,74,75,87,88,89,90,91,95,96,97,106,109,110,111,112,113,114,115,116,135,136,149,150,152,165,],[4,-10,-11,-12,-13,46,-24,-67,-70,-74,-76,-77,-81,-23,-78,-80,-79,-54,-55,-57,-59,-62,-68,-69,-71,-72,-73,-75,119,120,121,122,123,124,-74,-24,-37,-56,-58,-60,-61,-63,-64,-65,-66,-22,-36,-40,-41,-44,-21,]),'LET':([4,6,46,104,],[7,7,-7,7,]),'FUNCTION':([5,6,9,11,46,117,146,],[10,-5,10,-6,-7,-2,-16,]),'O_CBRACKET':([6,11,31,35,38,39,41,42,43,44,46,48,51,52,53,70,71,72,73,74,75,106,132,135,155,156,165,167,169,],[-5,-6,-24,-67,-70,-74,-76,-77,-81,64,-7,-23,-78,-80,-79,-68,-69,-71,-72,-73,-75,-37,64,-22,64,64,-21,64,64,]),'MAIN':([8,9,16,117,146,],[15,-14,-15,-2,-16,]),'VOID':([10,],[18,]),'INT':([10,24,45,133,],[20,20,20,20,]),'FLOAT':([10,24,45,133,],[21,21,21,21,]),'CHAR':([10,24,45,133,],[22,22,22,22,]),'STRING':([10,24,45,133,],[23,23,23,23,]),'COLON':([12,13,14,30,48,135,165,],[24,-8,-24,-9,-23,-22,-21,]),'COMMA':([13,14,31,35,38,39,41,42,43,48,51,52,53,58,59,60,61,62,68,70,71,72,73,74,75,105,106,109,110,111,112,113,114,115,116,135,139,141,142,165,],[25,-24,-24,-67,-70,-74,-76,-77,-81,-23,-78,-80,-79,-54,-55,-57,-59,-62,107,-68,-69,-71,-72,-73,-75,133,-37,-56,-58,-60,-61,-63,-64,-65,-66,-22,151,153,154,-21,]),'O_ABRACKET':([14,31,48,97,135,],[26,26,69,26,148,]),'ASSIGN':([14,48,96,97,131,135,165,],[-24,-23,125,-24,145,-22,-21,]),'C_PARENTHESIS':([14,27,31,35,38,39,41,42,43,48,51,52,53,57,58,59,60,61,62,65,67,68,70,71,72,73,74,75,105,106,109,110,111,112,113,114,115,116,134,135,137,138,139,140,141,142,143,144,147,159,160,161,165,],[-24,44,-24,-67,-70,-74,-76,-77,-81,-23,-78,-80,-79,75,-54,-55,-57,-59,-62,104,106,-38,-68,-69,-71,-72,-73,-75,-17,-37,-56,-58,-60,-61,-63,-64,-65,-66,-39,-22,149,150,-42,152,-45,-46,155,156,-18,-43,-47,-48,-21,]),'O_PARENTHESIS':([15,26,28,31,40,47,49,50,54,55,56,64,69,76,77,78,79,80,81,82,83,85,92,93,94,97,98,99,100,101,102,107,117,119,120,121,122,123,124,125,126,128,129,130,145,148,153,154,162,163,164,166,168,170,171,],[27,40,45,47,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,-32,-33,-34,47,126,127,128,129,130,40,-2,-27,-28,-29,-30,-31,-35,40,40,40,40,40,40,40,40,40,-82,-52,40,-49,-51,-50,-53,]),'CTE_INT':([26,36,37,40,47,49,50,54,55,56,64,69,76,77,78,79,80,81,82,83,85,92,93,94,107,117,119,120,121,122,123,124,125,126,128,129,130,145,148,153,154,162,163,164,166,168,170,171,],[33,52,52,52,52,52,52,52,52,52,52,33,52,52,52,52,52,52,52,52,52,-32,-33,-34,52,-2,-27,-28,-29,-30,-31,-35,52,52,52,52,52,52,33,52,52,-82,-52,52,-49,-51,-50,-53,]),'PLUS':([26,31,33,35,38,39,40,41,42,43,47,48,49,50,51,52,53,54,55,56,64,69,72,73,74,75,76,77,78,79,80,81,82,83,85,88,92,93,94,96,97,106,107,117,119,120,121,122,123,124,125,126,128,129,130,135,145,148,153,154,162,163,164,165,166,168,170,171,],[36,-24,-80,49,-70,-74,36,-76,-77,-81,36,-23,36,36,-78,-80,-79,36,36,36,36,36,-71,-72,-73,-75,36,36,36,36,36,36,36,36,36,-76,-32,-33,-34,-74,-24,-37,36,-2,-27,-28,-29,-30,-31,-35,36,36,36,36,36,-22,36,36,36,36,-82,-52,36,-21,-49,-51,-50,-53,]),'MINUS':([26,31,33,35,38,39,40,41,42,43,47,48,49,50,51,52,53,54,55,56,64,69,72,73,74,75,76,77,78,79,80,81,82,83,85,88,92,93,94,96,97,106,107,117,119,120,121,122,123,124,125,126,128,129,130,135,145,148,153,154,162,163,164,165,166,168,170,171,],[37,-24,-80,50,-70,-74,37,-76,-77,-81,37,-23,37,37,-78,-80,-79,37,37,37,37,37,-71,-72,-73,-75,37,37,37,37,37,37,37,37,37,-76,-32,-33,-34,-74,-24,-37,37,-2,-27,-28,-29,-30,-31,-35,37,37,37,37,37,-22,37,37,37,37,-82,-52,37,-21,-49,-51,-50,-53,]),'CTE_FLOAT':([26,36,37,40,47,49,50,54,55,56,64,69,76,77,78,79,80,81,82,83,85,92,93,94,107,117,119,120,121,122,123,124,125,126,128,129,130,145,148,153,154,162,163,164,166,168,170,171,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,-32,-33,-34,43,-2,-27,-28,-29,-30,-31,-35,43,43,43,43,43,43,43,43,43,-82,-52,43,-49,-51,-50,-53,]),'TIMES':([31,33,38,39,41,42,43,48,51,52,53,75,88,96,97,106,135,165,],[-24,-80,54,-74,-76,-77,-81,-23,-78,-80,-79,-75,-76,-74,-24,-37,-22,-21,]),'DIVIDE':([31,33,38,39,41,42,43,48,51,52,53,75,88,96,97,106,135,165,],[-24,-80,55,-74,-76,-77,-81,-23,-78,-80,-79,-75,-76,-74,-24,-37,-22,-21,]),'MODULE':([31,33,38,39,41,42,43,48,51,52,53,75,88,96,97,106,135,165,],[-24,-80,56,-74,-76,-77,-81,-23,-78,-80,-79,-75,-76,-74,-24,-37,-22,-21,]),'C_ABRACKET':([31,32,33,34,35,38,39,41,42,43,48,51,52,53,70,71,72,73,74,75,106,108,135,158,165,],[-24,48,-25,-26,-67,-70,-74,-76,-77,-81,-23,-78,-80,-79,-68,-69,-71,-72,-73,-75,-37,135,-22,165,-21,]),'GREATER':([31,35,38,39,41,42,43,48,51,52,53,62,70,71,72,73,74,75,88,96,97,106,135,165,],[-24,-67,-70,-74,-76,-77,-81,-23,-78,-80,-79,80,-68,-69,-71,-72,-73,-75,-76,-74,-24,-37,-22,-21,]),'LESSER':([31,35,38,39,41,42,43,48,51,52,53,62,70,71,72,73,74,75,88,96,97,106,135,165,],[-24,-67,-70,-74,-76,-77,-81,-23,-78,-80,-79,81,-68,-69,-71,-72,-73,-75,-76,-74,-24,-37,-22,-21,]),'GREATER_EQUAL':([31,35,38,39,41,42,43,48,51,52,53,62,70,71,72,73,74,75,88,96,97,106,135,165,],[-24,-67,-70,-74,-76,-77,-81,-23,-78,-80,-79,82,-68,-69,-71,-72,-73,-75,-76,-74,-24,-37,-22,-21,]),'LESSER_EQUAL':([31,35,38,39,41,42,43,48,51,52,53,62,70,71,72,73,74,75,88,96,97,106,135,165,],[-24,-67,-70,-74,-76,-77,-81,-23,-78,-80,-79,83,-68,-69,-71,-72,-73,-75,-76,-74,-24,-37,-22,-21,]),'EQUAL':([31,35,38,39,41,42,43,48,51,52,53,61,62,70,71,72,73,74,75,88,96,97,106,113,114,115,116,135,165,],[-24,-67,-70,-74,-76,-77,-81,-23,-78,-80,-79,78,-62,-68,-69,-71,-72,-73,-75,-76,-74,-24,-37,-63,-64,-65,-66,-22,-21,]),'NOT_EQUAL':([31,35,38,39,41,42,43,48,51,52,53,61,62,70,71,72,73,74,75,88,96,97,106,113,114,115,116,135,165,],[-24,-67,-70,-74,-76,-77,-81,-23,-78,-80,-79,79,-62,-68,-69,-71,-72,-73,-75,-76,-74,-24,-37,-63,-64,-65,-66,-22,-21,]),'AND':([31,35,38,39,41,42,43,48,51,52,53,60,61,62,70,71,72,73,74,75,88,96,97,106,111,112,113,114,115,116,135,165,],[-24,-67,-70,-74,-76,-77,-81,-23,-78,-80,-79,77,-59,-62,-68,-69,-71,-72,-73,-75,-76,-74,-24,-37,-60,-61,-63,-64,-65,-66,-22,-21,]),'OR':([31,35,38,39,41,42,43,48,51,52,53,59,60,61,62,70,71,72,73,74,75,88,96,97,106,110,111,112,113,114,115,116,135,165,],[-24,-67,-70,-74,-76,-77,-81,-23,-78,-80,-79,76,-57,-59,-62,-68,-69,-71,-72,-73,-75,-76,-74,-24,-37,-58,-60,-61,-63,-64,-65,-66,-22,-21,]),'TO':([31,35,38,39,41,42,43,48,51,52,53,70,71,72,73,74,75,106,135,157,165,],[-24,-67,-70,-74,-76,-77,-81,-23,-78,-80,-79,-68,-69,-71,-72,-73,-75,-37,-22,164,-21,]),'C_CBRACKET':([64,84,85,86,92,93,94,117,118,119,120,121,122,123,124,162,163,166,168,170,171,],[-82,117,-82,-4,-32,-33,-34,-2,-3,-27,-28,-29,-30,-31,-35,-82,-52,-49,-51,-50,-53,]),'RETURN':([64,85,92,93,94,117,119,120,121,122,123,124,162,163,166,168,170,171,],[98,98,-32,-33,-34,-2,-27,-28,-29,-30,-31,-35,-82,-52,-49,-51,-50,-53,]),'READ':([64,85,92,93,94,117,119,120,121,122,123,124,162,163,166,168,170,171,],[99,99,-32,-33,-34,-2,-27,-28,-29,-30,-31,-35,-82,-52,-49,-51,-50,-53,]),'WRITE':([64,85,92,93,94,117,119,120,121,122,123,124,162,163,166,168,170,171,],[100,100,-32,-33,-34,-2,-27,-28,-29,-30,-31,-35,-82,-52,-49,-51,-50,-53,]),'IF':([64,85,92,93,94,117,119,120,121,122,123,124,162,163,166,168,170,171,],[101,101,-32,-33,-34,-2,-27,-28,-29,-30,-31,-35,-82,-52,-49,-51,-50,-53,]),'WHILE':([64,85,92,93,94,117,119,120,121,122,123,124,162,163,166,168,170,171,],[102,102,-32,-33,-34,-2,-27,-28,-29,-30,-31,-35,-82,-52,-49,-51,-50,-53,]),'FOR':([64,85,92,93,94,117,119,120,121,122,123,124,162,163,166,168,170,171,],[103,103,-32,-33,-34,-2,-27,-28,-29,-30,-31,-35,-82,-52,-49,-51,-50,-53,]),'ELSE':([117,162,],[-2,167,]),'CTE_STRING':([128,153,154,],[142,142,142,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'declaracion':([4,6,104,],[5,11,132,]),'declaracion_base':([4,6,104,],[6,6,6,]),'funcion':([5,9,],[8,16,]),'funcion_base':([5,9,],[9,9,]),'declaracion_prime':([7,25,],[12,30,]),'variable':([7,25,26,40,47,49,50,54,55,56,64,69,76,77,78,79,80,81,82,83,85,103,107,125,126,127,128,129,130,145,148,151,153,154,164,],[13,13,39,39,39,39,39,39,39,39,96,39,39,39,39,39,39,39,39,39,96,131,39,39,39,139,39,39,39,39,39,139,39,39,39,]),'funcion_tipo':([10,],[17,]),'tipo':([10,24,45,133,],[19,29,66,66,]),'variable_tipo':([26,69,148,],[32,108,158,]),'exp':([26,40,47,49,50,64,69,76,77,78,79,80,81,82,83,85,107,125,126,128,129,130,145,148,153,154,164,],[34,62,68,70,71,62,34,62,62,62,62,113,114,115,116,62,68,62,62,62,62,62,157,34,62,62,169,]),'termino':([26,40,47,49,50,54,55,56,64,69,76,77,78,79,80,81,82,83,85,107,125,126,128,129,130,145,148,153,154,164,],[35,35,35,35,35,72,73,74,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'factor':([26,40,47,49,50,54,55,56,64,69,76,77,78,79,80,81,82,83,85,107,125,126,128,129,130,145,148,153,154,164,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'llamada':([26,40,47,49,50,54,55,56,64,69,76,77,78,79,80,81,82,83,85,107,125,126,128,129,130,145,148,153,154,164,],[41,41,41,41,41,41,41,41,88,41,41,41,41,41,41,41,41,41,88,41,41,41,41,41,41,41,41,41,41,41,]),'cte':([26,36,37,40,47,49,50,54,55,56,64,69,76,77,78,79,80,81,82,83,85,107,125,126,128,129,130,145,148,153,154,164,],[42,51,53,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'expr':([40,64,85,125,126,128,129,130,153,154,],[57,95,95,136,137,141,143,144,141,141,]),'or':([40,64,76,85,125,126,128,129,130,153,154,],[58,58,109,58,58,58,58,58,58,58,58,]),'and':([40,64,76,77,85,125,126,128,129,130,153,154,],[59,59,59,110,59,59,59,59,59,59,59,59,]),'equal':([40,64,76,77,85,125,126,128,129,130,153,154,],[60,60,60,60,60,60,60,60,60,60,60,60,]),'compare':([40,64,76,77,78,79,85,125,126,128,129,130,153,154,],[61,61,61,61,111,112,61,61,61,61,61,61,61,61,]),'bloque':([44,132,155,156,167,169,],[63,146,162,163,170,171,]),'funcion_prime':([45,133,],[65,147,]),'llamada_prime':([47,107,],[67,134,]),'bloque_prime':([64,85,],[84,118,]),'estatuto':([64,85,],[85,85,]),'epsilon':([64,85,162,],[86,86,168,]),'asignacion':([64,85,],[87,87,]),'retorno':([64,85,],[89,89,]),'lectura':([64,85,],[90,90,]),'escritura':([64,85,],[91,91,]),'decision':([64,85,],[92,92,]),'while':([64,85,],[93,93,]),'for':([64,85,],[94,94,]),'lectura_prime':([127,151,],[138,159,]),'escritura_prime':([128,153,154,],[140,160,161,]),'else':([162,],[166,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> PROGRAM ID SEMICOLON declaracion funcion MAIN O_PARENTHESIS C_PARENTHESIS bloque','programa',9,'p_programa','Lexer_Parser.py',227),
  ('bloque -> O_CBRACKET bloque_prime C_CBRACKET','bloque',3,'p_bloque','Lexer_Parser.py',234),
  ('bloque_prime -> estatuto bloque_prime','bloque_prime',2,'p_bloque_prime','Lexer_Parser.py',240),
  ('bloque_prime -> epsilon','bloque_prime',1,'p_bloque_prime','Lexer_Parser.py',241),
  ('declaracion -> declaracion_base','declaracion',1,'p_declaracion','Lexer_Parser.py',248),
  ('declaracion -> declaracion_base declaracion','declaracion',2,'p_declaracion','Lexer_Parser.py',249),
  ('declaracion_base -> LET declaracion_prime COLON tipo SEMICOLON','declaracion_base',5,'p_declaracion_base','Lexer_Parser.py',255),
  ('declaracion_prime -> variable','declaracion_prime',1,'p_declaracion_prime','Lexer_Parser.py',261),
  ('declaracion_prime -> variable COMMA declaracion_prime','declaracion_prime',3,'p_declaracion_prime','Lexer_Parser.py',262),
  ('tipo -> INT','tipo',1,'p_tipo','Lexer_Parser.py',269),
  ('tipo -> FLOAT','tipo',1,'p_tipo','Lexer_Parser.py',270),
  ('tipo -> CHAR','tipo',1,'p_tipo','Lexer_Parser.py',271),
  ('tipo -> STRING','tipo',1,'p_tipo','Lexer_Parser.py',272),
  ('funcion -> funcion_base','funcion',1,'p_funcion','Lexer_Parser.py',279),
  ('funcion -> funcion_base funcion','funcion',2,'p_funcion','Lexer_Parser.py',280),
  ('funcion_base -> FUNCTION funcion_tipo ID O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion bloque','funcion_base',8,'p_funcion_base','Lexer_Parser.py',286),
  ('funcion_prime -> tipo ID','funcion_prime',2,'p_funcion_prime','Lexer_Parser.py',292),
  ('funcion_prime -> tipo ID COMMA funcion_prime','funcion_prime',4,'p_funcion_prime','Lexer_Parser.py',293),
  ('funcion_tipo -> VOID','funcion_tipo',1,'p_funcion_tipo','Lexer_Parser.py',299),
  ('funcion_tipo -> tipo','funcion_tipo',1,'p_funcion_tipo','Lexer_Parser.py',300),
  ('variable -> ID O_ABRACKET variable_tipo C_ABRACKET O_ABRACKET variable_tipo C_ABRACKET O_ABRACKET variable_tipo C_ABRACKET','variable',10,'p_variable','Lexer_Parser.py',307),
  ('variable -> ID O_ABRACKET variable_tipo C_ABRACKET O_ABRACKET variable_tipo C_ABRACKET','variable',7,'p_variable','Lexer_Parser.py',308),
  ('variable -> ID O_ABRACKET variable_tipo C_ABRACKET','variable',4,'p_variable','Lexer_Parser.py',309),
  ('variable -> ID','variable',1,'p_variable','Lexer_Parser.py',310),
  ('variable_tipo -> CTE_INT','variable_tipo',1,'p_variable_tipo','Lexer_Parser.py',316),
  ('variable_tipo -> exp','variable_tipo',1,'p_variable_tipo','Lexer_Parser.py',317),
  ('estatuto -> asignacion SEMICOLON','estatuto',2,'p_estatuto','Lexer_Parser.py',324),
  ('estatuto -> llamada SEMICOLON','estatuto',2,'p_estatuto','Lexer_Parser.py',325),
  ('estatuto -> retorno SEMICOLON','estatuto',2,'p_estatuto','Lexer_Parser.py',326),
  ('estatuto -> lectura SEMICOLON','estatuto',2,'p_estatuto','Lexer_Parser.py',327),
  ('estatuto -> escritura SEMICOLON','estatuto',2,'p_estatuto','Lexer_Parser.py',328),
  ('estatuto -> decision','estatuto',1,'p_estatuto','Lexer_Parser.py',329),
  ('estatuto -> while','estatuto',1,'p_estatuto','Lexer_Parser.py',330),
  ('estatuto -> for','estatuto',1,'p_estatuto','Lexer_Parser.py',331),
  ('estatuto -> expr SEMICOLON','estatuto',2,'p_estatuto','Lexer_Parser.py',332),
  ('asignacion -> variable ASSIGN expr','asignacion',3,'p_asignacion','Lexer_Parser.py',339),
  ('llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS','llamada',4,'p_llamada','Lexer_Parser.py',346),
  ('llamada_prime -> exp','llamada_prime',1,'p_llamada_prime','Lexer_Parser.py',352),
  ('llamada_prime -> exp COMMA llamada_prime','llamada_prime',3,'p_llamada_prime','Lexer_Parser.py',353),
  ('retorno -> RETURN O_PARENTHESIS expr C_PARENTHESIS','retorno',4,'p_retorno','Lexer_Parser.py',360),
  ('lectura -> READ O_PARENTHESIS lectura_prime C_PARENTHESIS','lectura',4,'p_lectura','Lexer_Parser.py',367),
  ('lectura_prime -> variable','lectura_prime',1,'p_lectura_prime','Lexer_Parser.py',373),
  ('lectura_prime -> variable COMMA lectura_prime','lectura_prime',3,'p_lectura_prime','Lexer_Parser.py',374),
  ('escritura -> WRITE O_PARENTHESIS escritura_prime C_PARENTHESIS','escritura',4,'p_escritura','Lexer_Parser.py',381),
  ('escritura_prime -> expr','escritura_prime',1,'p_escritura_prime','Lexer_Parser.py',387),
  ('escritura_prime -> CTE_STRING','escritura_prime',1,'p_escritura_prime','Lexer_Parser.py',388),
  ('escritura_prime -> expr COMMA escritura_prime','escritura_prime',3,'p_escritura_prime','Lexer_Parser.py',389),
  ('escritura_prime -> CTE_STRING COMMA escritura_prime','escritura_prime',3,'p_escritura_prime','Lexer_Parser.py',390),
  ('decision -> IF O_PARENTHESIS expr C_PARENTHESIS bloque else','decision',6,'p_decision','Lexer_Parser.py',397),
  ('else -> ELSE bloque','else',2,'p_else','Lexer_Parser.py',403),
  ('else -> epsilon','else',1,'p_else','Lexer_Parser.py',404),
  ('while -> WHILE O_PARENTHESIS expr C_PARENTHESIS bloque','while',5,'p_while','Lexer_Parser.py',411),
  ('for -> FOR variable ASSIGN exp TO exp bloque','for',7,'p_for','Lexer_Parser.py',418),
  ('expr -> or','expr',1,'p_expr','Lexer_Parser.py',425),
  ('or -> and','or',1,'p_or','Lexer_Parser.py',432),
  ('or -> and OR or','or',3,'p_or','Lexer_Parser.py',433),
  ('and -> equal','and',1,'p_and','Lexer_Parser.py',440),
  ('and -> equal AND and','and',3,'p_and','Lexer_Parser.py',441),
  ('equal -> compare','equal',1,'p_equal','Lexer_Parser.py',448),
  ('equal -> compare EQUAL compare','equal',3,'p_equal','Lexer_Parser.py',449),
  ('equal -> compare NOT_EQUAL compare','equal',3,'p_equal','Lexer_Parser.py',450),
  ('compare -> exp','compare',1,'p_compare','Lexer_Parser.py',457),
  ('compare -> exp GREATER exp','compare',3,'p_compare','Lexer_Parser.py',458),
  ('compare -> exp LESSER exp','compare',3,'p_compare','Lexer_Parser.py',459),
  ('compare -> exp GREATER_EQUAL exp','compare',3,'p_compare','Lexer_Parser.py',460),
  ('compare -> exp LESSER_EQUAL exp','compare',3,'p_compare','Lexer_Parser.py',461),
  ('exp -> termino','exp',1,'p_exp','Lexer_Parser.py',468),
  ('exp -> termino PLUS exp','exp',3,'p_exp','Lexer_Parser.py',469),
  ('exp -> termino MINUS exp','exp',3,'p_exp','Lexer_Parser.py',470),
  ('termino -> factor','termino',1,'p_termino','Lexer_Parser.py',477),
  ('termino -> factor TIMES termino','termino',3,'p_termino','Lexer_Parser.py',478),
  ('termino -> factor DIVIDE termino','termino',3,'p_termino','Lexer_Parser.py',479),
  ('termino -> factor MODULE termino','termino',3,'p_termino','Lexer_Parser.py',480),
  ('factor -> variable','factor',1,'p_factor','Lexer_Parser.py',487),
  ('factor -> O_PARENTHESIS expr C_PARENTHESIS','factor',3,'p_factor','Lexer_Parser.py',488),
  ('factor -> llamada','factor',1,'p_factor','Lexer_Parser.py',489),
  ('factor -> cte','factor',1,'p_factor','Lexer_Parser.py',490),
  ('factor -> PLUS cte','factor',2,'p_factor','Lexer_Parser.py',491),
  ('factor -> MINUS cte','factor',2,'p_factor','Lexer_Parser.py',492),
  ('cte -> CTE_INT','cte',1,'p_cte','Lexer_Parser.py',499),
  ('cte -> CTE_FLOAT','cte',1,'p_cte','Lexer_Parser.py',500),
  ('epsilon -> <empty>','epsilon',0,'p_epsilon','Lexer_Parser.py',507),
]
