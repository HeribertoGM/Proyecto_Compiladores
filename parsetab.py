
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN CHAR COLON COMMA CTE_CHAR CTE_FLOAT CTE_INT CTE_STRING C_ABRACKET C_CBRACKET C_PARENTHESIS DIVIDE ELSE EQUAL FLOAT FOR FUNCTION GREATER GREATER_EQUAL ID IF INT LESSER LESSER_EQUAL LET MAIN MINUS MODULE NOT_EQUAL OR O_ABRACKET O_CBRACKET O_PARENTHESIS PLUS PROGRAM READ RETURN SEMICOLON STRING TIMES TO VOID WHILE WRITE\n\tprograma : PROGRAM ID SEMICOLON declaracion_global funcion main bloque\n\t\n\tmain : MAIN O_PARENTHESIS C_PARENTHESIS\n\t\n\tbloque : O_CBRACKET bloque_prime C_CBRACKET\n\t\n\tbloque_prime : estatuto bloque_prime\n\t\t\t\t | epsilon\n\t\n\tdeclaracion_funcion : declaracion\n\t\n\tdeclaracion_global : declaracion\n\t\n\tdeclaracion : declaracion_base\n\t\t\t\t| declaracion_base declaracion\n\t\n\tdeclaracion_base : LET declaracion_prime COLON declaracion_tipo SEMICOLON\n\t\n\tdeclaracion_prime : declaracion_variable\n\t\t\t\t\t  | declaracion_variable COMMA declaracion_prime\n\t\n\tdeclaracion_variable : ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET\n\t\t\t\t\t\t | ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET\n\t\t\t\t\t\t | ID O_ABRACKET CTE_INT C_ABRACKET\n\t\t\t\t\t\t | ID \n\t\n\tdeclaracion_tipo : INT\n\t\t\t\t\t | FLOAT\n\t\t\t\t\t | CHAR\n\t\t\t\t\t | STRING\n\t\n\tparam_tipo : INT ID\n\t\t \t   | FLOAT ID\n\t\t \t   | CHAR ID\n\t\t \t   | STRING ID\n\t\n\tfuncion : funcion_base funcion\n\t\t\t| epsilon\n\t\n\tfuncion_base : FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque\n\t\n\tfuncion_prime : param_tipo\n\t\t\t\t  | param_tipo COMMA funcion_prime\n\t\n\tfuncion_ident : VOID ID\n \t\t\t\t  | INT ID\n\t\t\t\t  | FLOAT ID\n\t\t\t\t  | CHAR ID\n\t\t\t\t  | STRING ID\n\t\n\tvariable : var_array\n\t\t\t | ID \n\t\n\tvar_array : arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket\n\t\t\t  | arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket\n\t\t\t  | arr_id O_ABRACKET exp arr_close_bracket\n\t\n\tarr_id : ID\n\t\n\tarr_close_bracket : C_ABRACKET\n\t\n\tarr_open_bracket : O_ABRACKET\n\t\n\testatuto : asignacion SEMICOLON\n\t\t\t | llamada SEMICOLON\n\t\t\t | retorno SEMICOLON\n\t\t\t | lectura SEMICOLON\n\t\t\t | escritura SEMICOLON\n\t\t\t | decision\n\t\t\t | while\n\t\t\t | for\n\t\n\tasignacion : variable ASSIGN asignacion_expr\n\t\n\tasignacion_expr : expr\n\t\n\tllamada : function_id O_PARENTHESIS llamada_prime C_PARENTHESIS\n\t\n\tfunction_id : ID\n\t\n\tllamada_prime : llamada_exp\n\t\t\t\t  | llamada_exp llamada_comma llamada_prime\n\t\n\tllamada_exp : exp\n\t\n\tllamada_comma : COMMA\n\t\n\tretorno : RETURN O_PARENTHESIS expr C_PARENTHESIS\n\t\n\tlectura : READ O_PARENTHESIS lectura_prime C_PARENTHESIS\n\t\n\tlectura_prime : variable\n\t\t\t\t  | variable COMMA lectura_prime\n\t\n\tescritura : WRITE O_PARENTHESIS escritura_prime C_PARENTHESIS\n\t\n\tescritura_prime : expr\n\t\t\t\t\t| escritura_string\n\t\t\t\t\t| expr COMMA escritura_prime\n\t\t\t\t\t| escritura_string COMMA escritura_prime\n\t\n\tescritura_string : CTE_STRING\n\t\n\tdecision : IF O_PARENTHESIS decision_expr C_PARENTHESIS bloque else\n\t\n\tdecision_expr : expr\n\t\n\telse : else_prime bloque\n\t\t | epsilon\n\t\n\telse_prime : ELSE\n\t\n\twhile : while_prime while_expr bloque\n\t\n\twhile_prime : WHILE\n\t\n\twhile_expr : O_PARENTHESIS expr C_PARENTHESIS\n\t\n\tfor : FOR for_asignacion for_to for_exp bloque\n\t\n\tfor_asignacion : variable ASSIGN for_asignacion_expr\n\t\n\tfor_asignacion_expr : expr\n\t\n\tfor_to : TO\n\t\n\tfor_exp : exp\n\t\n\texpr : or\n\t\n\tor : and\n\t   | and or_operador or\n\t\n\tor_operador : OR\n\t\n\tand : equal\n\t\t| equal and_operador and\n\t\n\tand_operador : AND\n\t\n\tequal : compare\n\t\t  | compare equal_operador compare\n\t\n\tequal_operador : EQUAL\n\t\t\t\t   | NOT_EQUAL\n\t\n\tcompare : exp\n\t\t\t| exp compare_operador exp\n\t\n\tcompare_operador : GREATER\n\t\t\t\t\t | LESSER\n\t\t\t\t\t | GREATER_EQUAL\n\t\t\t\t\t | LESSER_EQUAL\n\t\n\texp : termino\n\t\t| termino exp_operador exp\n\t\n\texp_operador : PLUS\n\t\t\t | MINUS\n\t\n\ttermino : factor\n\t\t\t| factor termino_operador termino\n\t\n\ttermino_operador : TIMES\n\t\t\t\t\t | DIVIDE\n\t\t\t\t\t | MODULE\n\t\n\tfactor : variable\n\t\t   | O_PARENTHESIS expr C_PARENTHESIS\n\t\t   | llamada\n\t\t   | cte\n\t\t   | PLUS cte\n\t\t   | MINUS cte\n\t\n\tcte : CTE_INT\n\t\t| CTE_FLOAT\n\t\n\tepsilon :\n\t'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,29,77,],[0,-1,-3,]),'ID':([2,8,21,22,23,24,25,27,30,46,53,54,55,63,71,72,73,74,77,79,80,81,82,83,84,85,86,87,88,89,91,95,113,132,134,135,136,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,165,166,169,171,172,194,195,196,197,199,201,205,208,],[3,16,33,34,35,36,37,16,65,65,-48,-49,-50,94,98,99,100,101,-3,-43,-44,-45,-46,-47,65,65,65,94,65,65,65,65,65,-74,65,-80,65,65,-85,65,-88,65,-91,-92,65,-95,-96,-97,-98,65,-101,-102,65,-105,-106,-107,65,-58,94,65,65,-116,-77,-42,65,-69,-72,-71,65,]),'SEMICOLON':([3,38,39,40,41,42,48,49,50,51,52,64,65,103,104,105,106,107,108,109,110,111,112,114,115,118,119,162,163,164,167,168,170,179,180,183,184,185,186,187,188,189,206,210,],[4,75,-17,-18,-19,-20,79,80,81,82,83,-35,-36,-108,-51,-52,-82,-83,-86,-89,-93,-99,-103,-110,-111,-114,-115,-112,-113,-53,-59,-60,-63,-39,-41,-84,-87,-90,-94,-100,-104,-109,-38,-37,]),'LET':([4,7,75,96,],[8,8,-10,8,]),'FUNCTION':([5,6,7,10,13,75,77,181,],[12,-7,-8,12,-9,-10,-3,-27,]),'MAIN':([5,6,7,9,10,11,13,19,75,77,181,],[-116,-7,-8,18,-116,-26,-9,-25,-10,-3,-27,]),'O_CBRACKET':([7,13,17,64,65,68,75,90,103,111,112,114,115,118,119,138,139,162,163,164,173,174,175,176,179,180,187,188,189,200,202,206,210,],[-8,-9,30,-35,-36,-2,-10,30,-108,-99,-103,-110,-111,-114,-115,30,-6,-112,-113,-53,30,-76,30,-81,-39,-41,-100,-104,-109,30,-73,-38,-37,]),'VOID':([12,],[21,]),'INT':([12,26,32,97,],[22,39,71,71,]),'FLOAT':([12,26,32,97,],[23,40,72,72,]),'CHAR':([12,26,32,97,],[24,41,73,73,]),'STRING':([12,26,32,97,],[25,42,74,74,]),'COLON':([14,15,16,43,76,182,207,],[26,-11,-16,-12,-15,-14,-13,]),'COMMA':([15,16,64,65,70,76,94,98,99,100,101,103,106,107,108,109,110,111,112,114,115,118,119,121,122,125,127,128,129,162,163,164,179,180,182,183,184,185,186,187,188,189,206,207,210,],[27,-16,-35,-36,97,-15,-36,-21,-22,-23,-24,-108,-82,-83,-86,-89,-93,-99,-103,-110,-111,-114,-115,166,-57,169,171,172,-68,-112,-113,-53,-39,-41,-14,-84,-87,-90,-94,-100,-104,-109,-38,-13,-37,]),'O_ABRACKET':([16,65,67,76,94,179,180,182,206,],[28,-40,95,102,-40,196,-41,198,196,]),'O_PARENTHESIS':([18,20,33,34,35,36,37,57,58,59,60,61,62,65,66,84,85,86,88,89,91,95,113,134,135,136,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,165,166,171,172,196,197,208,],[31,32,-30,-31,-32,-33,-34,85,86,87,88,89,91,-54,-75,113,113,113,113,113,113,113,113,113,-80,113,113,-85,113,-88,113,-91,-92,113,-95,-96,-97,-98,113,-101,-102,113,-105,-106,-107,113,-58,113,113,-42,113,113,]),'CTE_INT':([28,84,85,86,88,89,91,95,102,113,116,117,134,135,136,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,165,166,171,172,196,197,198,208,],[44,118,118,118,118,118,118,118,141,118,118,118,118,-80,118,118,-85,118,-88,118,-91,-92,118,-95,-96,-97,-98,118,-101,-102,118,-105,-106,-107,118,-58,118,118,-42,118,204,118,]),'C_CBRACKET':([30,45,46,47,53,54,55,77,78,79,80,81,82,83,132,194,195,199,201,205,],[-116,77,-116,-5,-48,-49,-50,-3,-4,-43,-44,-45,-46,-47,-74,-116,-77,-69,-72,-71,]),'RETURN':([30,46,53,54,55,77,79,80,81,82,83,132,194,195,199,201,205,],[58,58,-48,-49,-50,-3,-43,-44,-45,-46,-47,-74,-116,-77,-69,-72,-71,]),'READ':([30,46,53,54,55,77,79,80,81,82,83,132,194,195,199,201,205,],[59,59,-48,-49,-50,-3,-43,-44,-45,-46,-47,-74,-116,-77,-69,-72,-71,]),'WRITE':([30,46,53,54,55,77,79,80,81,82,83,132,194,195,199,201,205,],[60,60,-48,-49,-50,-3,-43,-44,-45,-46,-47,-74,-116,-77,-69,-72,-71,]),'IF':([30,46,53,54,55,77,79,80,81,82,83,132,194,195,199,201,205,],[61,61,-48,-49,-50,-3,-43,-44,-45,-46,-47,-74,-116,-77,-69,-72,-71,]),'FOR':([30,46,53,54,55,77,79,80,81,82,83,132,194,195,199,201,205,],[63,63,-48,-49,-50,-3,-43,-44,-45,-46,-47,-74,-116,-77,-69,-72,-71,]),'WHILE':([30,46,53,54,55,77,79,80,81,82,83,132,194,195,199,201,205,],[66,66,-48,-49,-50,-3,-43,-44,-45,-46,-47,-74,-116,-77,-69,-72,-71,]),'C_PARENTHESIS':([31,64,65,69,70,94,98,99,100,101,103,106,107,108,109,110,111,112,114,115,118,119,120,121,122,123,124,125,126,127,128,129,130,131,133,140,161,162,163,164,179,180,183,184,185,186,187,188,189,190,191,192,193,206,210,],[68,-35,-36,96,-28,-36,-21,-22,-23,-24,-108,-82,-83,-86,-89,-93,-99,-103,-110,-111,-114,-115,164,-55,-57,167,168,-61,170,-64,-65,-68,173,-70,174,-29,189,-112,-113,-53,-39,-41,-84,-87,-90,-94,-100,-104,-109,-56,-62,-66,-67,-38,-37,]),'C_ABRACKET':([44,64,65,103,111,112,114,115,118,119,137,141,162,163,164,179,180,187,188,189,203,204,206,209,210,],[76,-35,-36,-108,-99,-103,-110,-111,-114,-115,180,182,-112,-113,-53,-39,-41,-100,-104,-109,180,207,-38,180,-37,]),'ASSIGN':([56,64,65,93,94,179,180,206,210,],[84,-35,-36,136,-36,-39,-41,-38,-37,]),'TIMES':([64,65,103,112,114,115,118,119,162,163,164,179,180,189,206,210,],[-35,-36,-108,158,-110,-111,-114,-115,-112,-113,-53,-39,-41,-109,-38,-37,]),'DIVIDE':([64,65,103,112,114,115,118,119,162,163,164,179,180,189,206,210,],[-35,-36,-108,159,-110,-111,-114,-115,-112,-113,-53,-39,-41,-109,-38,-37,]),'MODULE':([64,65,103,112,114,115,118,119,162,163,164,179,180,189,206,210,],[-35,-36,-108,160,-110,-111,-114,-115,-112,-113,-53,-39,-41,-109,-38,-37,]),'PLUS':([64,65,84,85,86,88,89,91,95,103,111,112,113,114,115,118,119,134,135,136,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,162,163,164,165,166,171,172,179,180,188,189,196,197,206,208,210,],[-35,-36,116,116,116,116,116,116,116,-108,155,-103,116,-110,-111,-114,-115,116,-80,116,116,-85,116,-88,116,-91,-92,116,-95,-96,-97,-98,116,-101,-102,116,-105,-106,-107,-112,-113,-53,116,-58,116,116,-39,-41,-104,-109,-42,116,-38,116,-37,]),'MINUS':([64,65,84,85,86,88,89,91,95,103,111,112,113,114,115,118,119,134,135,136,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,162,163,164,165,166,171,172,179,180,188,189,196,197,206,208,210,],[-35,-36,117,117,117,117,117,117,117,-108,156,-103,117,-110,-111,-114,-115,117,-80,117,117,-85,117,-88,117,-91,-92,117,-95,-96,-97,-98,117,-101,-102,117,-105,-106,-107,-112,-113,-53,117,-58,117,117,-39,-41,-104,-109,-42,117,-38,117,-37,]),'GREATER':([64,65,103,110,111,112,114,115,118,119,162,163,164,179,180,187,188,189,206,210,],[-35,-36,-108,150,-99,-103,-110,-111,-114,-115,-112,-113,-53,-39,-41,-100,-104,-109,-38,-37,]),'LESSER':([64,65,103,110,111,112,114,115,118,119,162,163,164,179,180,187,188,189,206,210,],[-35,-36,-108,151,-99,-103,-110,-111,-114,-115,-112,-113,-53,-39,-41,-100,-104,-109,-38,-37,]),'GREATER_EQUAL':([64,65,103,110,111,112,114,115,118,119,162,163,164,179,180,187,188,189,206,210,],[-35,-36,-108,152,-99,-103,-110,-111,-114,-115,-112,-113,-53,-39,-41,-100,-104,-109,-38,-37,]),'LESSER_EQUAL':([64,65,103,110,111,112,114,115,118,119,162,163,164,179,180,187,188,189,206,210,],[-35,-36,-108,153,-99,-103,-110,-111,-114,-115,-112,-113,-53,-39,-41,-100,-104,-109,-38,-37,]),'EQUAL':([64,65,103,109,110,111,112,114,115,118,119,162,163,164,179,180,186,187,188,189,206,210,],[-35,-36,-108,147,-93,-99,-103,-110,-111,-114,-115,-112,-113,-53,-39,-41,-94,-100,-104,-109,-38,-37,]),'NOT_EQUAL':([64,65,103,109,110,111,112,114,115,118,119,162,163,164,179,180,186,187,188,189,206,210,],[-35,-36,-108,148,-93,-99,-103,-110,-111,-114,-115,-112,-113,-53,-39,-41,-94,-100,-104,-109,-38,-37,]),'AND':([64,65,103,108,109,110,111,112,114,115,118,119,162,163,164,179,180,185,186,187,188,189,206,210,],[-35,-36,-108,145,-89,-93,-99,-103,-110,-111,-114,-115,-112,-113,-53,-39,-41,-90,-94,-100,-104,-109,-38,-37,]),'OR':([64,65,103,107,108,109,110,111,112,114,115,118,119,162,163,164,179,180,184,185,186,187,188,189,206,210,],[-35,-36,-108,143,-86,-89,-93,-99,-103,-110,-111,-114,-115,-112,-113,-53,-39,-41,-87,-90,-94,-100,-104,-109,-38,-37,]),'TO':([64,65,92,103,106,107,108,109,110,111,112,114,115,118,119,162,163,164,177,178,179,180,183,184,185,186,187,188,189,206,210,],[-35,-36,135,-108,-82,-83,-86,-89,-93,-99,-103,-110,-111,-114,-115,-112,-113,-53,-78,-79,-39,-41,-84,-87,-90,-94,-100,-104,-109,-38,-37,]),'ELSE':([77,194,],[-3,202,]),'CTE_FLOAT':([84,85,86,88,89,91,95,113,116,117,134,135,136,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,165,166,171,172,196,197,208,],[119,119,119,119,119,119,119,119,119,119,119,-80,119,119,-85,119,-88,119,-91,-92,119,-95,-96,-97,-98,119,-101,-102,119,-105,-106,-107,119,-58,119,119,-42,119,119,]),'CTE_STRING':([88,171,172,],[129,129,129,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'declaracion_global':([4,],[5,]),'declaracion':([4,7,96,],[6,13,139,]),'declaracion_base':([4,7,96,],[7,7,7,]),'funcion':([5,10,],[9,19,]),'funcion_base':([5,10,],[10,10,]),'epsilon':([5,10,30,46,194,],[11,11,47,47,201,]),'declaracion_prime':([8,27,],[14,43,]),'declaracion_variable':([8,27,],[15,15,]),'main':([9,],[17,]),'funcion_ident':([12,],[20,]),'bloque':([17,90,138,173,175,200,],[29,132,181,194,195,205,]),'declaracion_tipo':([26,],[38,]),'bloque_prime':([30,46,],[45,78,]),'estatuto':([30,46,],[46,46,]),'asignacion':([30,46,],[48,48,]),'llamada':([30,46,84,85,86,88,89,91,95,113,134,136,142,144,146,149,154,157,165,171,172,197,208,],[49,49,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,]),'retorno':([30,46,],[50,50,]),'lectura':([30,46,],[51,51,]),'escritura':([30,46,],[52,52,]),'decision':([30,46,],[53,53,]),'while':([30,46,],[54,54,]),'for':([30,46,],[55,55,]),'variable':([30,46,63,84,85,86,87,88,89,91,95,113,134,136,142,144,146,149,154,157,165,169,171,172,197,208,],[56,56,93,103,103,103,125,103,103,103,103,103,103,103,103,103,103,103,103,103,103,125,103,103,103,103,]),'function_id':([30,46,84,85,86,88,89,91,95,113,134,136,142,144,146,149,154,157,165,171,172,197,208,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'while_prime':([30,46,],[62,62,]),'var_array':([30,46,63,84,85,86,87,88,89,91,95,113,134,136,142,144,146,149,154,157,165,169,171,172,197,208,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'arr_id':([30,46,63,84,85,86,87,88,89,91,95,113,134,136,142,144,146,149,154,157,165,169,171,172,197,208,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'funcion_prime':([32,97,],[69,140,]),'param_tipo':([32,97,],[70,70,]),'while_expr':([62,],[90,]),'for_asignacion':([63,],[92,]),'asignacion_expr':([84,],[104,]),'expr':([84,86,88,89,91,113,136,171,172,],[105,123,127,131,133,161,178,127,127,]),'or':([84,86,88,89,91,113,136,142,171,172,],[106,106,106,106,106,106,106,183,106,106,]),'and':([84,86,88,89,91,113,136,142,144,171,172,],[107,107,107,107,107,107,107,107,184,107,107,]),'equal':([84,86,88,89,91,113,136,142,144,171,172,],[108,108,108,108,108,108,108,108,108,108,108,]),'compare':([84,86,88,89,91,113,136,142,144,146,171,172,],[109,109,109,109,109,109,109,109,109,185,109,109,]),'exp':([84,85,86,88,89,91,95,113,134,136,142,144,146,149,154,165,171,172,197,208,],[110,122,110,110,110,110,137,110,176,110,110,110,110,186,187,122,110,110,203,209,]),'termino':([84,85,86,88,89,91,95,113,134,136,142,144,146,149,154,157,165,171,172,197,208,],[111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,188,111,111,111,111,111,]),'factor':([84,85,86,88,89,91,95,113,134,136,142,144,146,149,154,157,165,171,172,197,208,],[112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,]),'cte':([84,85,86,88,89,91,95,113,116,117,134,136,142,144,146,149,154,157,165,171,172,197,208,],[115,115,115,115,115,115,115,115,162,163,115,115,115,115,115,115,115,115,115,115,115,115,115,]),'llamada_prime':([85,165,],[120,190,]),'llamada_exp':([85,165,],[121,121,]),'lectura_prime':([87,169,],[124,191,]),'escritura_prime':([88,171,172,],[126,192,193,]),'escritura_string':([88,171,172,],[128,128,128,]),'decision_expr':([89,],[130,]),'for_to':([92,],[134,]),'declaracion_funcion':([96,],[138,]),'or_operador':([107,],[142,]),'and_operador':([108,],[144,]),'equal_operador':([109,],[146,]),'compare_operador':([110,],[149,]),'exp_operador':([111,],[154,]),'termino_operador':([112,],[157,]),'llamada_comma':([121,],[165,]),'for_exp':([134,],[175,]),'for_asignacion_expr':([136,],[177,]),'arr_close_bracket':([137,203,209,],[179,206,210,]),'arr_open_bracket':([179,206,],[197,208,]),'else':([194,],[199,]),'else_prime':([194,],[200,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> PROGRAM ID SEMICOLON declaracion_global funcion main bloque','programa',7,'p_programa','Parser.py',10),
  ('main -> MAIN O_PARENTHESIS C_PARENTHESIS','main',3,'p_main','Parser.py',25),
  ('bloque -> O_CBRACKET bloque_prime C_CBRACKET','bloque',3,'p_bloque','Parser.py',38),
  ('bloque_prime -> estatuto bloque_prime','bloque_prime',2,'p_bloque_prime','Parser.py',44),
  ('bloque_prime -> epsilon','bloque_prime',1,'p_bloque_prime','Parser.py',45),
  ('declaracion_funcion -> declaracion','declaracion_funcion',1,'p_declaracion_funcion','Parser.py',52),
  ('declaracion_global -> declaracion','declaracion_global',1,'p_declaracion_global','Parser.py',61),
  ('declaracion -> declaracion_base','declaracion',1,'p_declaracion','Parser.py',69),
  ('declaracion -> declaracion_base declaracion','declaracion',2,'p_declaracion','Parser.py',70),
  ('declaracion_base -> LET declaracion_prime COLON declaracion_tipo SEMICOLON','declaracion_base',5,'p_declaracion_base','Parser.py',76),
  ('declaracion_prime -> declaracion_variable','declaracion_prime',1,'p_declaracion_prime','Parser.py',82),
  ('declaracion_prime -> declaracion_variable COMMA declaracion_prime','declaracion_prime',3,'p_declaracion_prime','Parser.py',83),
  ('declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET','declaracion_variable',10,'p_declaracion_variable','Parser.py',90),
  ('declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET','declaracion_variable',7,'p_declaracion_variable','Parser.py',91),
  ('declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET','declaracion_variable',4,'p_declaracion_variable','Parser.py',92),
  ('declaracion_variable -> ID','declaracion_variable',1,'p_declaracion_variable','Parser.py',93),
  ('declaracion_tipo -> INT','declaracion_tipo',1,'p_declaracion_tipo','Parser.py',113),
  ('declaracion_tipo -> FLOAT','declaracion_tipo',1,'p_declaracion_tipo','Parser.py',114),
  ('declaracion_tipo -> CHAR','declaracion_tipo',1,'p_declaracion_tipo','Parser.py',115),
  ('declaracion_tipo -> STRING','declaracion_tipo',1,'p_declaracion_tipo','Parser.py',116),
  ('param_tipo -> INT ID','param_tipo',2,'p_param_tipo','Parser.py',130),
  ('param_tipo -> FLOAT ID','param_tipo',2,'p_param_tipo','Parser.py',131),
  ('param_tipo -> CHAR ID','param_tipo',2,'p_param_tipo','Parser.py',132),
  ('param_tipo -> STRING ID','param_tipo',2,'p_param_tipo','Parser.py',133),
  ('funcion -> funcion_base funcion','funcion',2,'p_funcion','Parser.py',150),
  ('funcion -> epsilon','funcion',1,'p_funcion','Parser.py',151),
  ('funcion_base -> FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque','funcion_base',7,'p_funcion_base','Parser.py',157),
  ('funcion_prime -> param_tipo','funcion_prime',1,'p_funcion_prime','Parser.py',167),
  ('funcion_prime -> param_tipo COMMA funcion_prime','funcion_prime',3,'p_funcion_prime','Parser.py',168),
  ('funcion_ident -> VOID ID','funcion_ident',2,'p_funcion_ident','Parser.py',175),
  ('funcion_ident -> INT ID','funcion_ident',2,'p_funcion_ident','Parser.py',176),
  ('funcion_ident -> FLOAT ID','funcion_ident',2,'p_funcion_ident','Parser.py',177),
  ('funcion_ident -> CHAR ID','funcion_ident',2,'p_funcion_ident','Parser.py',178),
  ('funcion_ident -> STRING ID','funcion_ident',2,'p_funcion_ident','Parser.py',179),
  ('variable -> var_array','variable',1,'p_variable','Parser.py',187),
  ('variable -> ID','variable',1,'p_variable','Parser.py',188),
  ('var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket','var_array',10,'p_var_array','Parser.py',208),
  ('var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket','var_array',7,'p_var_array','Parser.py',209),
  ('var_array -> arr_id O_ABRACKET exp arr_close_bracket','var_array',4,'p_var_array','Parser.py',210),
  ('arr_id -> ID','arr_id',1,'p_arr_id','Parser.py',234),
  ('arr_close_bracket -> C_ABRACKET','arr_close_bracket',1,'p_arr_close_bracket','Parser.py',253),
  ('arr_open_bracket -> O_ABRACKET','arr_open_bracket',1,'p_arr_open_bracket','Parser.py',300),
  ('estatuto -> asignacion SEMICOLON','estatuto',2,'p_estatuto','Parser.py',310),
  ('estatuto -> llamada SEMICOLON','estatuto',2,'p_estatuto','Parser.py',311),
  ('estatuto -> retorno SEMICOLON','estatuto',2,'p_estatuto','Parser.py',312),
  ('estatuto -> lectura SEMICOLON','estatuto',2,'p_estatuto','Parser.py',313),
  ('estatuto -> escritura SEMICOLON','estatuto',2,'p_estatuto','Parser.py',314),
  ('estatuto -> decision','estatuto',1,'p_estatuto','Parser.py',315),
  ('estatuto -> while','estatuto',1,'p_estatuto','Parser.py',316),
  ('estatuto -> for','estatuto',1,'p_estatuto','Parser.py',317),
  ('asignacion -> variable ASSIGN asignacion_expr','asignacion',3,'p_asignacion','Parser.py',324),
  ('asignacion_expr -> expr','asignacion_expr',1,'p_asignacion_expr','Parser.py',330),
  ('llamada -> function_id O_PARENTHESIS llamada_prime C_PARENTHESIS','llamada',4,'p_llamada','Parser.py',349),
  ('function_id -> ID','function_id',1,'p_function_id','Parser.py',362),
  ('llamada_prime -> llamada_exp','llamada_prime',1,'p_llamada_prime','Parser.py',380),
  ('llamada_prime -> llamada_exp llamada_comma llamada_prime','llamada_prime',3,'p_llamada_prime','Parser.py',381),
  ('llamada_exp -> exp','llamada_exp',1,'p_llamada_exp','Parser.py',391),
  ('llamada_comma -> COMMA','llamada_comma',1,'p_llamada_comma','Parser.py',413),
  ('retorno -> RETURN O_PARENTHESIS expr C_PARENTHESIS','retorno',4,'p_retorno','Parser.py',423),
  ('lectura -> READ O_PARENTHESIS lectura_prime C_PARENTHESIS','lectura',4,'p_lectura','Parser.py',430),
  ('lectura_prime -> variable','lectura_prime',1,'p_lectura_prime','Parser.py',436),
  ('lectura_prime -> variable COMMA lectura_prime','lectura_prime',3,'p_lectura_prime','Parser.py',437),
  ('escritura -> WRITE O_PARENTHESIS escritura_prime C_PARENTHESIS','escritura',4,'p_escritura','Parser.py',449),
  ('escritura_prime -> expr','escritura_prime',1,'p_escritura_prime','Parser.py',455),
  ('escritura_prime -> escritura_string','escritura_prime',1,'p_escritura_prime','Parser.py',456),
  ('escritura_prime -> expr COMMA escritura_prime','escritura_prime',3,'p_escritura_prime','Parser.py',457),
  ('escritura_prime -> escritura_string COMMA escritura_prime','escritura_prime',3,'p_escritura_prime','Parser.py',458),
  ('escritura_string -> CTE_STRING','escritura_string',1,'p_escritura_string','Parser.py',469),
  ('decision -> IF O_PARENTHESIS decision_expr C_PARENTHESIS bloque else','decision',6,'p_decision','Parser.py',482),
  ('decision_expr -> expr','decision_expr',1,'p_decision_expr','Parser.py',488),
  ('else -> else_prime bloque','else',2,'p_else','Parser.py',506),
  ('else -> epsilon','else',1,'p_else','Parser.py',507),
  ('else_prime -> ELSE','else_prime',1,'p_else_prime','Parser.py',514),
  ('while -> while_prime while_expr bloque','while',3,'p_while','Parser.py',529),
  ('while_prime -> WHILE','while_prime',1,'p_while_prime','Parser.py',543),
  ('while_expr -> O_PARENTHESIS expr C_PARENTHESIS','while_expr',3,'p_while_expr','Parser.py',550),
  ('for -> FOR for_asignacion for_to for_exp bloque','for',5,'p_for','Parser.py',568),
  ('for_asignacion -> variable ASSIGN for_asignacion_expr','for_asignacion',3,'p_for_asignacion','Parser.py',594),
  ('for_asignacion_expr -> expr','for_asignacion_expr',1,'p_for_asignacion_expr','Parser.py',600),
  ('for_to -> TO','for_to',1,'p_for_to','Parser.py',620),
  ('for_exp -> exp','for_exp',1,'p_for_exp','Parser.py',627),
  ('expr -> or','expr',1,'p_expr','Parser.py',659),
  ('or -> and','or',1,'p_or','Parser.py',666),
  ('or -> and or_operador or','or',3,'p_or','Parser.py',667),
  ('or_operador -> OR','or_operador',1,'p_or_operador','Parser.py',701),
  ('and -> equal','and',1,'p_and','Parser.py',709),
  ('and -> equal and_operador and','and',3,'p_and','Parser.py',710),
  ('and_operador -> AND','and_operador',1,'p_and_operador','Parser.py',744),
  ('equal -> compare','equal',1,'p_equal','Parser.py',752),
  ('equal -> compare equal_operador compare','equal',3,'p_equal','Parser.py',753),
  ('equal_operador -> EQUAL','equal_operador',1,'p_equal_operador','Parser.py',787),
  ('equal_operador -> NOT_EQUAL','equal_operador',1,'p_equal_operador','Parser.py',788),
  ('compare -> exp','compare',1,'p_compare','Parser.py',796),
  ('compare -> exp compare_operador exp','compare',3,'p_compare','Parser.py',797),
  ('compare_operador -> GREATER','compare_operador',1,'p_compare_operador','Parser.py',831),
  ('compare_operador -> LESSER','compare_operador',1,'p_compare_operador','Parser.py',832),
  ('compare_operador -> GREATER_EQUAL','compare_operador',1,'p_compare_operador','Parser.py',833),
  ('compare_operador -> LESSER_EQUAL','compare_operador',1,'p_compare_operador','Parser.py',834),
  ('exp -> termino','exp',1,'p_exp','Parser.py',842),
  ('exp -> termino exp_operador exp','exp',3,'p_exp','Parser.py',843),
  ('exp_operador -> PLUS','exp_operador',1,'p_exp_operador','Parser.py',880),
  ('exp_operador -> MINUS','exp_operador',1,'p_exp_operador','Parser.py',881),
  ('termino -> factor','termino',1,'p_termino','Parser.py',889),
  ('termino -> factor termino_operador termino','termino',3,'p_termino','Parser.py',890),
  ('termino_operador -> TIMES','termino_operador',1,'p_termino_operador','Parser.py',925),
  ('termino_operador -> DIVIDE','termino_operador',1,'p_termino_operador','Parser.py',926),
  ('termino_operador -> MODULE','termino_operador',1,'p_termino_operador','Parser.py',927),
  ('factor -> variable','factor',1,'p_factor','Parser.py',935),
  ('factor -> O_PARENTHESIS expr C_PARENTHESIS','factor',3,'p_factor','Parser.py',936),
  ('factor -> llamada','factor',1,'p_factor','Parser.py',937),
  ('factor -> cte','factor',1,'p_factor','Parser.py',938),
  ('factor -> PLUS cte','factor',2,'p_factor','Parser.py',939),
  ('factor -> MINUS cte','factor',2,'p_factor','Parser.py',940),
  ('cte -> CTE_INT','cte',1,'p_cte','Parser.py',948),
  ('cte -> CTE_FLOAT','cte',1,'p_cte','Parser.py',949),
  ('epsilon -> <empty>','epsilon',0,'p_epsilon','Parser.py',963),
]
