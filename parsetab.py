
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN CHAR COLON COMMA CTE_CHAR CTE_FLOAT CTE_INT CTE_STRING C_ABRACKET C_CBRACKET C_PARENTHESIS DIVIDE ELSE EQUAL FLOAT FOR FUNCTION GREATER GREATER_EQUAL ID IF INT LESSER LESSER_EQUAL LET MAIN MINUS MODULE NOT_EQUAL OR O_ABRACKET O_CBRACKET O_PARENTHESIS PLUS PROGRAM READ RETURN SEMICOLON STRING TIMES TO VOID WHILE WRITE\n\tprograma : PROGRAM ID SEMICOLON declaracion_global funcion MAIN O_PARENTHESIS C_PARENTHESIS bloque\n\t\n\tbloque : O_CBRACKET bloque_prime C_CBRACKET\n\t\n\tbloque_prime : estatuto bloque_prime\n\t\t\t\t | epsilon\n\t\n\tdeclaracion_funcion : declaracion\n\t\n\tdeclaracion_global : declaracion\n\t\n\tdeclaracion : declaracion_base\n\t\t\t\t| declaracion_base declaracion\n\t\n\tdeclaracion_base : LET declaracion_prime COLON declaracion_tipo SEMICOLON\n\t\n\tdeclaracion_prime : declaracion_variable\n\t\t\t\t\t  | declaracion_variable COMMA declaracion_prime\n\t\n\tdeclaracion_variable : ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET\n\t\t\t\t\t\t | ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET\n\t\t\t\t\t\t | ID O_ABRACKET CTE_INT C_ABRACKET\n\t\t\t\t\t\t | ID \n\t\n\tdeclaracion_tipo : INT\n\t\t\t\t\t | FLOAT\n\t\t\t\t\t | CHAR\n\t\t\t\t\t | STRING\n\t\n\ttipo : INT\n\t\t | FLOAT\n\t\t | CHAR\n\t\t | STRING\n\t\n\tfuncion : funcion_base funcion\n\t\t\t| epsilon\n\t\n\tfuncion_base : FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque\n\t\n\tfuncion_prime : tipo ID\n\t\t\t\t  | tipo ID COMMA funcion_prime\n\t\n\tfuncion_ident : VOID ID\n \t\t\t\t  | INT ID\n\t\t\t\t  | FLOAT ID\n\t\t\t\t  | CHAR ID\n\t\t\t\t  | STRING ID\n\t\n\tvariable : ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET\n\t\t\t | ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET\n\t\t\t | ID O_ABRACKET exp C_ABRACKET\n\t\t\t | ID \n\t\n\testatuto : asignacion SEMICOLON\n\t\t\t | llamada SEMICOLON\n\t\t\t | retorno SEMICOLON\n\t\t\t | lectura SEMICOLON\n\t\t\t | escritura SEMICOLON\n\t\t\t | decision\n\t\t\t | while\n\t\t\t | for\n\t\n\tasignacion : variable ASSIGN expr\n\t\n\tllamada : ID O_PARENTHESIS llamada_prime C_PARENTHESIS\n\t\n\tllamada_prime : exp\n\t\t\t\t  | exp COMMA llamada_prime\n\t\n\tretorno : RETURN O_PARENTHESIS expr C_PARENTHESIS\n\t\n\tlectura : READ O_PARENTHESIS lectura_prime C_PARENTHESIS\n\t\n\tlectura_prime : variable\n\t\t\t\t  | variable COMMA lectura_prime\n\t\n\tescritura : WRITE O_PARENTHESIS escritura_prime C_PARENTHESIS\n\t\n\tescritura_prime : expr\n\t\t\t\t\t| CTE_STRING\n\t\t\t\t\t| expr COMMA escritura_prime\n\t\t\t\t\t| CTE_STRING COMMA escritura_prime\n\t\n\tdecision : IF O_PARENTHESIS expr C_PARENTHESIS bloque else\n\t\n\telse : ELSE bloque\n\t\t | epsilon\n\t\n\twhile : WHILE O_PARENTHESIS expr C_PARENTHESIS bloque\n\t\n\tfor : FOR variable ASSIGN exp TO exp bloque\n\t\n\texpr : or\n\t\n\tor : and\n\t   | and OR or\n\t\n\tand : equal\n\t\t| equal AND and\n\t\n\tequal : compare\n\t\t  | compare EQUAL compare\n\t\t  | compare NOT_EQUAL compare\n\t\n\tcompare : exp\n\t\t\t| exp GREATER exp\n\t\t\t| exp LESSER exp\n\t\t\t| exp GREATER_EQUAL exp\n\t\t\t| exp LESSER_EQUAL exp\n\t\n\texp : termino\n\t\t| termino PLUS exp\n\t\t| termino MINUS exp\n\t\n\ttermino : factor\n\t\t\t| factor TIMES termino\n\t\t\t| factor DIVIDE termino\n\t\t\t| factor MODULE termino\n\t\n\tfactor : variable\n\t\t   | O_PARENTHESIS expr C_PARENTHESIS\n\t\t   | llamada\n\t\t   | cte\n\t\t   | PLUS cte\n\t\t   | MINUS cte\n\t\n\tcte : CTE_INT\n\t\t| CTE_FLOAT\n\t\n\tepsilon :\n\t'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,51,79,],[0,-1,-2,]),'ID':([2,8,20,21,22,23,24,26,44,45,46,47,48,52,57,64,65,66,74,79,81,82,83,84,85,86,87,88,89,90,91,92,93,110,127,129,130,131,132,133,134,135,136,137,138,141,142,143,146,150,152,153,173,177,178,179,182,184,187,188,189,],[3,16,30,31,32,33,34,16,54,-20,-21,-22,-23,68,68,-43,-44,-45,95,-2,-38,-39,-40,-41,-42,113,113,113,113,95,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,95,113,113,113,-92,-62,113,-59,-61,-60,-63,113,]),'SEMICOLON':([3,35,36,37,38,39,59,60,61,62,63,99,100,101,102,103,104,105,106,109,111,112,113,114,115,139,140,145,147,148,149,151,158,159,160,161,162,163,164,165,166,167,168,169,170,171,186,191,],[4,49,-16,-17,-18,-19,81,82,83,84,85,-84,-46,-64,-65,-67,-69,-72,-77,-80,-86,-87,-37,-90,-91,-88,-89,-47,-36,-50,-51,-54,-66,-68,-70,-71,-73,-74,-75,-76,-78,-79,-81,-82,-83,-85,-35,-34,]),'LET':([4,7,49,53,],[8,8,-9,8,]),'FUNCTION':([5,6,7,10,13,49,79,96,],[12,-6,-7,12,-8,-9,-2,-26,]),'MAIN':([5,6,7,9,10,11,13,18,49,79,96,],[-92,-6,-7,17,-92,-25,-8,-24,-9,-2,-26,]),'O_CBRACKET':([7,13,42,49,75,76,99,106,109,111,112,113,114,115,139,140,145,147,154,155,166,167,168,169,170,171,183,185,186,191,],[-7,-8,52,-9,52,-5,-84,-77,-80,-86,-87,-37,-90,-91,-88,-89,-47,-36,52,52,-78,-79,-81,-82,-83,-85,52,52,-35,-34,]),'VOID':([12,],[20,]),'INT':([12,25,29,77,],[21,36,45,45,]),'FLOAT':([12,25,29,77,],[22,37,46,46,]),'CHAR':([12,25,29,77,],[23,38,47,47,]),'STRING':([12,25,29,77,],[24,39,48,48,]),'COLON':([14,15,16,40,50,98,180,],[25,-10,-15,-11,-14,-13,-12,]),'COMMA':([15,16,50,54,95,98,99,101,102,103,104,105,106,109,111,112,113,114,115,117,121,123,124,139,140,145,147,158,159,160,161,162,163,164,165,166,167,168,169,170,171,180,186,191,],[26,-15,-14,77,-37,-13,-84,-64,-65,-67,-69,-72,-77,-80,-86,-87,-37,-90,-91,146,150,152,153,-88,-89,-47,-36,-66,-68,-70,-71,-73,-74,-75,-76,-78,-79,-81,-82,-83,-85,-12,-35,-34,]),'O_ABRACKET':([16,50,68,95,98,113,147,186,],[27,55,88,88,128,88,173,189,]),'O_PARENTHESIS':([17,19,30,31,32,33,34,68,69,70,71,72,73,86,87,88,89,91,92,93,110,113,127,129,130,131,132,133,134,135,136,137,138,141,142,143,146,152,153,173,179,189,],[28,29,-29,-30,-31,-32,-33,87,89,90,91,92,93,110,110,110,110,110,110,110,110,87,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,]),'CTE_INT':([27,55,86,87,88,89,91,92,93,107,108,110,127,128,129,130,131,132,133,134,135,136,137,138,141,142,143,146,152,153,173,179,189,],[41,78,114,114,114,114,114,114,114,114,114,114,114,157,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,]),'C_PARENTHESIS':([28,43,54,95,97,99,101,102,103,104,105,106,109,111,112,113,114,115,116,117,119,120,121,122,123,124,125,126,139,140,144,145,147,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,174,175,176,186,191,],[42,53,-27,-37,-28,-84,-64,-65,-67,-69,-72,-77,-80,-86,-87,-37,-90,-91,145,-48,148,149,-52,151,-55,-56,154,155,-88,-89,171,-47,-36,-66,-68,-70,-71,-73,-74,-75,-76,-78,-79,-81,-82,-83,-85,-49,-53,-57,-58,-35,-34,]),'C_ABRACKET':([41,78,99,106,109,111,112,113,114,115,118,139,140,145,147,157,166,167,168,169,170,171,181,186,190,191,],[50,98,-84,-77,-80,-86,-87,-37,-90,-91,147,-88,-89,-47,-36,180,-78,-79,-81,-82,-83,-85,186,-35,191,-34,]),'C_CBRACKET':([52,56,57,58,64,65,66,79,80,81,82,83,84,85,177,178,182,184,187,188,],[-92,79,-92,-4,-43,-44,-45,-2,-3,-38,-39,-40,-41,-42,-92,-62,-59,-61,-60,-63,]),'RETURN':([52,57,64,65,66,79,81,82,83,84,85,177,178,182,184,187,188,],[69,69,-43,-44,-45,-2,-38,-39,-40,-41,-42,-92,-62,-59,-61,-60,-63,]),'READ':([52,57,64,65,66,79,81,82,83,84,85,177,178,182,184,187,188,],[70,70,-43,-44,-45,-2,-38,-39,-40,-41,-42,-92,-62,-59,-61,-60,-63,]),'WRITE':([52,57,64,65,66,79,81,82,83,84,85,177,178,182,184,187,188,],[71,71,-43,-44,-45,-2,-38,-39,-40,-41,-42,-92,-62,-59,-61,-60,-63,]),'IF':([52,57,64,65,66,79,81,82,83,84,85,177,178,182,184,187,188,],[72,72,-43,-44,-45,-2,-38,-39,-40,-41,-42,-92,-62,-59,-61,-60,-63,]),'WHILE':([52,57,64,65,66,79,81,82,83,84,85,177,178,182,184,187,188,],[73,73,-43,-44,-45,-2,-38,-39,-40,-41,-42,-92,-62,-59,-61,-60,-63,]),'FOR':([52,57,64,65,66,79,81,82,83,84,85,177,178,182,184,187,188,],[74,74,-43,-44,-45,-2,-38,-39,-40,-41,-42,-92,-62,-59,-61,-60,-63,]),'ASSIGN':([67,68,94,95,147,186,191,],[86,-37,127,-37,-36,-35,-34,]),'ELSE':([79,177,],[-2,183,]),'PLUS':([86,87,88,89,91,92,93,99,106,109,110,111,112,113,114,115,127,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,145,146,147,152,153,168,169,170,171,173,179,186,189,191,],[107,107,107,107,107,107,107,-84,137,-80,107,-86,-87,-37,-90,-91,107,107,107,107,107,107,107,107,107,107,107,-88,-89,107,107,107,-47,107,-36,107,107,-81,-82,-83,-85,107,107,-35,107,-34,]),'MINUS':([86,87,88,89,91,92,93,99,106,109,110,111,112,113,114,115,127,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,145,146,147,152,153,168,169,170,171,173,179,186,189,191,],[108,108,108,108,108,108,108,-84,138,-80,108,-86,-87,-37,-90,-91,108,108,108,108,108,108,108,108,108,108,108,-88,-89,108,108,108,-47,108,-36,108,108,-81,-82,-83,-85,108,108,-35,108,-34,]),'CTE_FLOAT':([86,87,88,89,91,92,93,107,108,110,127,129,130,131,132,133,134,135,136,137,138,141,142,143,146,152,153,173,179,189,],[115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,]),'CTE_STRING':([91,152,153,],[124,124,124,]),'TIMES':([99,109,111,112,113,114,115,139,140,145,147,171,186,191,],[-84,141,-86,-87,-37,-90,-91,-88,-89,-47,-36,-85,-35,-34,]),'DIVIDE':([99,109,111,112,113,114,115,139,140,145,147,171,186,191,],[-84,142,-86,-87,-37,-90,-91,-88,-89,-47,-36,-85,-35,-34,]),'MODULE':([99,109,111,112,113,114,115,139,140,145,147,171,186,191,],[-84,143,-86,-87,-37,-90,-91,-88,-89,-47,-36,-85,-35,-34,]),'GREATER':([99,105,106,109,111,112,113,114,115,139,140,145,147,166,167,168,169,170,171,186,191,],[-84,133,-77,-80,-86,-87,-37,-90,-91,-88,-89,-47,-36,-78,-79,-81,-82,-83,-85,-35,-34,]),'LESSER':([99,105,106,109,111,112,113,114,115,139,140,145,147,166,167,168,169,170,171,186,191,],[-84,134,-77,-80,-86,-87,-37,-90,-91,-88,-89,-47,-36,-78,-79,-81,-82,-83,-85,-35,-34,]),'GREATER_EQUAL':([99,105,106,109,111,112,113,114,115,139,140,145,147,166,167,168,169,170,171,186,191,],[-84,135,-77,-80,-86,-87,-37,-90,-91,-88,-89,-47,-36,-78,-79,-81,-82,-83,-85,-35,-34,]),'LESSER_EQUAL':([99,105,106,109,111,112,113,114,115,139,140,145,147,166,167,168,169,170,171,186,191,],[-84,136,-77,-80,-86,-87,-37,-90,-91,-88,-89,-47,-36,-78,-79,-81,-82,-83,-85,-35,-34,]),'EQUAL':([99,104,105,106,109,111,112,113,114,115,139,140,145,147,162,163,164,165,166,167,168,169,170,171,186,191,],[-84,131,-72,-77,-80,-86,-87,-37,-90,-91,-88,-89,-47,-36,-73,-74,-75,-76,-78,-79,-81,-82,-83,-85,-35,-34,]),'NOT_EQUAL':([99,104,105,106,109,111,112,113,114,115,139,140,145,147,162,163,164,165,166,167,168,169,170,171,186,191,],[-84,132,-72,-77,-80,-86,-87,-37,-90,-91,-88,-89,-47,-36,-73,-74,-75,-76,-78,-79,-81,-82,-83,-85,-35,-34,]),'AND':([99,103,104,105,106,109,111,112,113,114,115,139,140,145,147,160,161,162,163,164,165,166,167,168,169,170,171,186,191,],[-84,130,-69,-72,-77,-80,-86,-87,-37,-90,-91,-88,-89,-47,-36,-70,-71,-73,-74,-75,-76,-78,-79,-81,-82,-83,-85,-35,-34,]),'OR':([99,102,103,104,105,106,109,111,112,113,114,115,139,140,145,147,159,160,161,162,163,164,165,166,167,168,169,170,171,186,191,],[-84,129,-67,-69,-72,-77,-80,-86,-87,-37,-90,-91,-88,-89,-47,-36,-68,-70,-71,-73,-74,-75,-76,-78,-79,-81,-82,-83,-85,-35,-34,]),'TO':([99,106,109,111,112,113,114,115,139,140,145,147,156,166,167,168,169,170,171,186,191,],[-84,-77,-80,-86,-87,-37,-90,-91,-88,-89,-47,-36,179,-78,-79,-81,-82,-83,-85,-35,-34,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'declaracion_global':([4,],[5,]),'declaracion':([4,7,53,],[6,13,76,]),'declaracion_base':([4,7,53,],[7,7,7,]),'funcion':([5,10,],[9,18,]),'funcion_base':([5,10,],[10,10,]),'epsilon':([5,10,52,57,177,],[11,11,58,58,184,]),'declaracion_prime':([8,26,],[14,40,]),'declaracion_variable':([8,26,],[15,15,]),'funcion_ident':([12,],[19,]),'declaracion_tipo':([25,],[35,]),'funcion_prime':([29,77,],[43,97,]),'tipo':([29,77,],[44,44,]),'bloque':([42,75,154,155,183,185,],[51,96,177,178,187,188,]),'bloque_prime':([52,57,],[56,80,]),'estatuto':([52,57,],[57,57,]),'asignacion':([52,57,],[59,59,]),'llamada':([52,57,86,87,88,89,91,92,93,110,127,129,130,131,132,133,134,135,136,137,138,141,142,143,146,152,153,173,179,189,],[60,60,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,]),'retorno':([52,57,],[61,61,]),'lectura':([52,57,],[62,62,]),'escritura':([52,57,],[63,63,]),'decision':([52,57,],[64,64,]),'while':([52,57,],[65,65,]),'for':([52,57,],[66,66,]),'variable':([52,57,74,86,87,88,89,90,91,92,93,110,127,129,130,131,132,133,134,135,136,137,138,141,142,143,146,150,152,153,173,179,189,],[67,67,94,99,99,99,99,121,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,121,99,99,99,99,99,]),'declaracion_funcion':([53,],[75,]),'expr':([86,89,91,92,93,110,152,153,],[100,119,123,125,126,144,123,123,]),'or':([86,89,91,92,93,110,129,152,153,],[101,101,101,101,101,101,158,101,101,]),'and':([86,89,91,92,93,110,129,130,152,153,],[102,102,102,102,102,102,102,159,102,102,]),'equal':([86,89,91,92,93,110,129,130,152,153,],[103,103,103,103,103,103,103,103,103,103,]),'compare':([86,89,91,92,93,110,129,130,131,132,152,153,],[104,104,104,104,104,104,104,104,160,161,104,104,]),'exp':([86,87,88,89,91,92,93,110,127,129,130,131,132,133,134,135,136,137,138,146,152,153,173,179,189,],[105,117,118,105,105,105,105,105,156,105,105,105,105,162,163,164,165,166,167,117,105,105,181,185,190,]),'termino':([86,87,88,89,91,92,93,110,127,129,130,131,132,133,134,135,136,137,138,141,142,143,146,152,153,173,179,189,],[106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,168,169,170,106,106,106,106,106,106,]),'factor':([86,87,88,89,91,92,93,110,127,129,130,131,132,133,134,135,136,137,138,141,142,143,146,152,153,173,179,189,],[109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,]),'cte':([86,87,88,89,91,92,93,107,108,110,127,129,130,131,132,133,134,135,136,137,138,141,142,143,146,152,153,173,179,189,],[112,112,112,112,112,112,112,139,140,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,]),'llamada_prime':([87,146,],[116,172,]),'lectura_prime':([90,150,],[120,174,]),'escritura_prime':([91,152,153,],[122,175,176,]),'else':([177,],[182,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> PROGRAM ID SEMICOLON declaracion_global funcion MAIN O_PARENTHESIS C_PARENTHESIS bloque','programa',9,'p_programa','Lexer_Parser.py',229),
  ('bloque -> O_CBRACKET bloque_prime C_CBRACKET','bloque',3,'p_bloque','Lexer_Parser.py',238),
  ('bloque_prime -> estatuto bloque_prime','bloque_prime',2,'p_bloque_prime','Lexer_Parser.py',244),
  ('bloque_prime -> epsilon','bloque_prime',1,'p_bloque_prime','Lexer_Parser.py',245),
  ('declaracion_funcion -> declaracion','declaracion_funcion',1,'p_declaracion_funcion','Lexer_Parser.py',252),
  ('declaracion_global -> declaracion','declaracion_global',1,'p_declaracion_global','Lexer_Parser.py',259),
  ('declaracion -> declaracion_base','declaracion',1,'p_declaracion','Lexer_Parser.py',266),
  ('declaracion -> declaracion_base declaracion','declaracion',2,'p_declaracion','Lexer_Parser.py',267),
  ('declaracion_base -> LET declaracion_prime COLON declaracion_tipo SEMICOLON','declaracion_base',5,'p_declaracion_base','Lexer_Parser.py',273),
  ('declaracion_prime -> declaracion_variable','declaracion_prime',1,'p_declaracion_prime','Lexer_Parser.py',279),
  ('declaracion_prime -> declaracion_variable COMMA declaracion_prime','declaracion_prime',3,'p_declaracion_prime','Lexer_Parser.py',280),
  ('declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET','declaracion_variable',10,'p_declaracion_variable','Lexer_Parser.py',287),
  ('declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET','declaracion_variable',7,'p_declaracion_variable','Lexer_Parser.py',288),
  ('declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET','declaracion_variable',4,'p_declaracion_variable','Lexer_Parser.py',289),
  ('declaracion_variable -> ID','declaracion_variable',1,'p_declaracion_variable','Lexer_Parser.py',290),
  ('declaracion_tipo -> INT','declaracion_tipo',1,'p_declaracion_tipo','Lexer_Parser.py',309),
  ('declaracion_tipo -> FLOAT','declaracion_tipo',1,'p_declaracion_tipo','Lexer_Parser.py',310),
  ('declaracion_tipo -> CHAR','declaracion_tipo',1,'p_declaracion_tipo','Lexer_Parser.py',311),
  ('declaracion_tipo -> STRING','declaracion_tipo',1,'p_declaracion_tipo','Lexer_Parser.py',312),
  ('tipo -> INT','tipo',1,'p_tipo','Lexer_Parser.py',320),
  ('tipo -> FLOAT','tipo',1,'p_tipo','Lexer_Parser.py',321),
  ('tipo -> CHAR','tipo',1,'p_tipo','Lexer_Parser.py',322),
  ('tipo -> STRING','tipo',1,'p_tipo','Lexer_Parser.py',323),
  ('funcion -> funcion_base funcion','funcion',2,'p_funcion','Lexer_Parser.py',330),
  ('funcion -> epsilon','funcion',1,'p_funcion','Lexer_Parser.py',331),
  ('funcion_base -> FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque','funcion_base',7,'p_funcion_base','Lexer_Parser.py',337),
  ('funcion_prime -> tipo ID','funcion_prime',2,'p_funcion_prime','Lexer_Parser.py',343),
  ('funcion_prime -> tipo ID COMMA funcion_prime','funcion_prime',4,'p_funcion_prime','Lexer_Parser.py',344),
  ('funcion_ident -> VOID ID','funcion_ident',2,'p_funcion_ident','Lexer_Parser.py',350),
  ('funcion_ident -> INT ID','funcion_ident',2,'p_funcion_ident','Lexer_Parser.py',351),
  ('funcion_ident -> FLOAT ID','funcion_ident',2,'p_funcion_ident','Lexer_Parser.py',352),
  ('funcion_ident -> CHAR ID','funcion_ident',2,'p_funcion_ident','Lexer_Parser.py',353),
  ('funcion_ident -> STRING ID','funcion_ident',2,'p_funcion_ident','Lexer_Parser.py',354),
  ('variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET','variable',10,'p_variable','Lexer_Parser.py',362),
  ('variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET','variable',7,'p_variable','Lexer_Parser.py',363),
  ('variable -> ID O_ABRACKET exp C_ABRACKET','variable',4,'p_variable','Lexer_Parser.py',364),
  ('variable -> ID','variable',1,'p_variable','Lexer_Parser.py',365),
  ('estatuto -> asignacion SEMICOLON','estatuto',2,'p_estatuto','Lexer_Parser.py',372),
  ('estatuto -> llamada SEMICOLON','estatuto',2,'p_estatuto','Lexer_Parser.py',373),
  ('estatuto -> retorno SEMICOLON','estatuto',2,'p_estatuto','Lexer_Parser.py',374),
  ('estatuto -> lectura SEMICOLON','estatuto',2,'p_estatuto','Lexer_Parser.py',375),
  ('estatuto -> escritura SEMICOLON','estatuto',2,'p_estatuto','Lexer_Parser.py',376),
  ('estatuto -> decision','estatuto',1,'p_estatuto','Lexer_Parser.py',377),
  ('estatuto -> while','estatuto',1,'p_estatuto','Lexer_Parser.py',378),
  ('estatuto -> for','estatuto',1,'p_estatuto','Lexer_Parser.py',379),
  ('asignacion -> variable ASSIGN expr','asignacion',3,'p_asignacion','Lexer_Parser.py',386),
  ('llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS','llamada',4,'p_llamada','Lexer_Parser.py',393),
  ('llamada_prime -> exp','llamada_prime',1,'p_llamada_prime','Lexer_Parser.py',399),
  ('llamada_prime -> exp COMMA llamada_prime','llamada_prime',3,'p_llamada_prime','Lexer_Parser.py',400),
  ('retorno -> RETURN O_PARENTHESIS expr C_PARENTHESIS','retorno',4,'p_retorno','Lexer_Parser.py',407),
  ('lectura -> READ O_PARENTHESIS lectura_prime C_PARENTHESIS','lectura',4,'p_lectura','Lexer_Parser.py',414),
  ('lectura_prime -> variable','lectura_prime',1,'p_lectura_prime','Lexer_Parser.py',420),
  ('lectura_prime -> variable COMMA lectura_prime','lectura_prime',3,'p_lectura_prime','Lexer_Parser.py',421),
  ('escritura -> WRITE O_PARENTHESIS escritura_prime C_PARENTHESIS','escritura',4,'p_escritura','Lexer_Parser.py',428),
  ('escritura_prime -> expr','escritura_prime',1,'p_escritura_prime','Lexer_Parser.py',434),
  ('escritura_prime -> CTE_STRING','escritura_prime',1,'p_escritura_prime','Lexer_Parser.py',435),
  ('escritura_prime -> expr COMMA escritura_prime','escritura_prime',3,'p_escritura_prime','Lexer_Parser.py',436),
  ('escritura_prime -> CTE_STRING COMMA escritura_prime','escritura_prime',3,'p_escritura_prime','Lexer_Parser.py',437),
  ('decision -> IF O_PARENTHESIS expr C_PARENTHESIS bloque else','decision',6,'p_decision','Lexer_Parser.py',444),
  ('else -> ELSE bloque','else',2,'p_else','Lexer_Parser.py',450),
  ('else -> epsilon','else',1,'p_else','Lexer_Parser.py',451),
  ('while -> WHILE O_PARENTHESIS expr C_PARENTHESIS bloque','while',5,'p_while','Lexer_Parser.py',458),
  ('for -> FOR variable ASSIGN exp TO exp bloque','for',7,'p_for','Lexer_Parser.py',465),
  ('expr -> or','expr',1,'p_expr','Lexer_Parser.py',472),
  ('or -> and','or',1,'p_or','Lexer_Parser.py',479),
  ('or -> and OR or','or',3,'p_or','Lexer_Parser.py',480),
  ('and -> equal','and',1,'p_and','Lexer_Parser.py',487),
  ('and -> equal AND and','and',3,'p_and','Lexer_Parser.py',488),
  ('equal -> compare','equal',1,'p_equal','Lexer_Parser.py',495),
  ('equal -> compare EQUAL compare','equal',3,'p_equal','Lexer_Parser.py',496),
  ('equal -> compare NOT_EQUAL compare','equal',3,'p_equal','Lexer_Parser.py',497),
  ('compare -> exp','compare',1,'p_compare','Lexer_Parser.py',504),
  ('compare -> exp GREATER exp','compare',3,'p_compare','Lexer_Parser.py',505),
  ('compare -> exp LESSER exp','compare',3,'p_compare','Lexer_Parser.py',506),
  ('compare -> exp GREATER_EQUAL exp','compare',3,'p_compare','Lexer_Parser.py',507),
  ('compare -> exp LESSER_EQUAL exp','compare',3,'p_compare','Lexer_Parser.py',508),
  ('exp -> termino','exp',1,'p_exp','Lexer_Parser.py',515),
  ('exp -> termino PLUS exp','exp',3,'p_exp','Lexer_Parser.py',516),
  ('exp -> termino MINUS exp','exp',3,'p_exp','Lexer_Parser.py',517),
  ('termino -> factor','termino',1,'p_termino','Lexer_Parser.py',524),
  ('termino -> factor TIMES termino','termino',3,'p_termino','Lexer_Parser.py',525),
  ('termino -> factor DIVIDE termino','termino',3,'p_termino','Lexer_Parser.py',526),
  ('termino -> factor MODULE termino','termino',3,'p_termino','Lexer_Parser.py',527),
  ('factor -> variable','factor',1,'p_factor','Lexer_Parser.py',534),
  ('factor -> O_PARENTHESIS expr C_PARENTHESIS','factor',3,'p_factor','Lexer_Parser.py',535),
  ('factor -> llamada','factor',1,'p_factor','Lexer_Parser.py',536),
  ('factor -> cte','factor',1,'p_factor','Lexer_Parser.py',537),
  ('factor -> PLUS cte','factor',2,'p_factor','Lexer_Parser.py',538),
  ('factor -> MINUS cte','factor',2,'p_factor','Lexer_Parser.py',539),
  ('cte -> CTE_INT','cte',1,'p_cte','Lexer_Parser.py',546),
  ('cte -> CTE_FLOAT','cte',1,'p_cte','Lexer_Parser.py',547),
  ('epsilon -> <empty>','epsilon',0,'p_epsilon','Lexer_Parser.py',554),
]
