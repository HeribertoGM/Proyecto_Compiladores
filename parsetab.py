
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN CHAR COLON COMMA CTE_CHAR CTE_FLOAT CTE_INT CTE_STRING C_ABRACKET C_CBRACKET C_PARENTHESIS DIVIDE ELSE EQUAL FLOAT FOR FUNCTION GREATER GREATER_EQUAL ID IF INT LESSER LESSER_EQUAL LET MAIN MINUS MODULE NOT_EQUAL OR O_ABRACKET O_CBRACKET O_PARENTHESIS PLUS PROGRAM READ RETURN SEMICOLON STRING TIMES TO VOID WHILE WRITE\n\tprograma : PROGRAM ID SEMICOLON declaracion funcion MAIN O_PARENTHESIS C_PARENTHESIS bloque\n\t\n\tbloque : O_CBRACKET bloque_prime C_CBRACKET\n\t\n\tbloque_prime : estatuto bloque_prime\n\t\t\t\t | epsilon\n\t\n\tdeclaracion : declaracion_base\n\t\t\t\t| declaracion_base declaracion\n\t\n\tdeclaracion_base : LET declaracion_prime COLON declaracion_tipo SEMICOLON\n\t\n\tdeclaracion_prime : declaracion_variable\n\t\t\t\t\t  | declaracion_variable COMMA declaracion_prime\n\t\n\tdeclaracion_variable : ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET\n\t\t\t\t\t\t | ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET\n\t\t\t\t\t\t | ID O_ABRACKET CTE_INT C_ABRACKET\n\t\t\t\t\t\t | ID \n\t\n\tdeclaracion_tipo : INT\n\t\t\t\t\t | FLOAT\n\t\t\t\t\t | CHAR\n\t\t\t\t\t | STRING\n\t\n\ttipo : INT\n\t\t | FLOAT\n\t\t | CHAR\n\t\t | STRING\n\t\n\tfuncion : funcion_base funcion\n\t\t\t| epsilon\n\t\n\tfuncion_base : FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion bloque\n\t\n\tfuncion_prime : tipo ID\n\t\t\t\t  | tipo ID COMMA funcion_prime\n\t\n\tfuncion_ident : VOID ID\n \t\t\t\t  | INT ID\n\t\t\t\t  | FLOAT ID\n\t\t\t\t  | CHAR ID\n\t\t\t\t  | STRING ID\n\t\n\tvariable : ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET\n\t\t\t | ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET\n\t\t\t | ID O_ABRACKET exp C_ABRACKET\n\t\t\t | ID \n\t\n\testatuto : asignacion SEMICOLON\n\t\t\t | llamada SEMICOLON\n\t\t\t | retorno SEMICOLON\n\t\t\t | lectura SEMICOLON\n\t\t\t | escritura SEMICOLON\n\t\t\t | decision\n\t\t\t | while\n\t\t\t | for\n\t\n\tasignacion : variable ASSIGN expr\n\t\n\tllamada : ID O_PARENTHESIS llamada_prime C_PARENTHESIS\n\t\n\tllamada_prime : exp\n\t\t\t\t  | exp COMMA llamada_prime\n\t\n\tretorno : RETURN O_PARENTHESIS expr C_PARENTHESIS\n\t\n\tlectura : READ O_PARENTHESIS lectura_prime C_PARENTHESIS\n\t\n\tlectura_prime : variable\n\t\t\t\t  | variable COMMA lectura_prime\n\t\n\tescritura : WRITE O_PARENTHESIS escritura_prime C_PARENTHESIS\n\t\n\tescritura_prime : expr\n\t\t\t\t\t| CTE_STRING\n\t\t\t\t\t| expr COMMA escritura_prime\n\t\t\t\t\t| CTE_STRING COMMA escritura_prime\n\t\n\tdecision : IF O_PARENTHESIS expr C_PARENTHESIS bloque else\n\t\n\telse : ELSE bloque\n\t\t | epsilon\n\t\n\twhile : WHILE O_PARENTHESIS expr C_PARENTHESIS bloque\n\t\n\tfor : FOR variable ASSIGN exp TO exp bloque\n\t\n\texpr : or\n\t\n\tor : and\n\t   | and OR or\n\t\n\tand : equal\n\t\t| equal AND and\n\t\n\tequal : compare\n\t\t  | compare EQUAL compare\n\t\t  | compare NOT_EQUAL compare\n\t\n\tcompare : exp\n\t\t\t| exp GREATER exp\n\t\t\t| exp LESSER exp\n\t\t\t| exp GREATER_EQUAL exp\n\t\t\t| exp LESSER_EQUAL exp\n\t\n\texp : termino\n\t\t| termino PLUS exp\n\t\t| termino MINUS exp\n\t\n\ttermino : factor\n\t\t\t| factor TIMES termino\n\t\t\t| factor DIVIDE termino\n\t\t\t| factor MODULE termino\n\t\n\tfactor : variable\n\t\t   | O_PARENTHESIS expr C_PARENTHESIS\n\t\t   | llamada\n\t\t   | cte\n\t\t   | PLUS cte\n\t\t   | MINUS cte\n\t\n\tcte : CTE_INT\n\t\t| CTE_FLOAT\n\t\n\tepsilon :\n\t'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,50,77,],[0,-1,-2,]),'ID':([2,7,19,20,21,22,23,25,43,44,45,46,47,51,56,63,64,65,73,77,79,80,81,82,83,84,85,86,87,88,89,90,91,108,125,127,128,129,130,131,132,133,134,135,136,139,140,141,144,148,150,151,171,175,176,177,180,182,185,186,187,],[3,15,29,30,31,32,33,15,53,-18,-19,-20,-21,67,67,-41,-42,-43,93,-2,-36,-37,-38,-39,-40,111,111,111,111,93,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,93,111,111,111,-90,-60,111,-57,-59,-58,-61,111,]),'SEMICOLON':([3,34,35,36,37,38,58,59,60,61,62,97,98,99,100,101,102,103,104,107,109,110,111,112,113,137,138,143,145,146,147,149,156,157,158,159,160,161,162,163,164,165,166,167,168,169,184,189,],[4,48,-14,-15,-16,-17,79,80,81,82,83,-82,-44,-62,-63,-65,-67,-70,-75,-78,-84,-85,-35,-88,-89,-86,-87,-45,-34,-48,-49,-52,-64,-66,-68,-69,-71,-72,-73,-74,-76,-77,-79,-80,-81,-83,-33,-32,]),'LET':([4,6,48,52,],[7,7,-7,7,]),'FUNCTION':([5,6,9,12,48,77,94,],[11,-5,11,-6,-7,-2,-24,]),'MAIN':([5,6,8,9,10,12,17,48,77,94,],[-90,-5,16,-90,-23,-6,-22,-7,-2,-24,]),'O_CBRACKET':([6,12,41,48,74,97,104,107,109,110,111,112,113,137,138,143,145,152,153,164,165,166,167,168,169,181,183,184,189,],[-5,-6,51,-7,51,-82,-75,-78,-84,-85,-35,-88,-89,-86,-87,-45,-34,51,51,-76,-77,-79,-80,-81,-83,51,51,-33,-32,]),'VOID':([11,],[19,]),'INT':([11,24,28,75,],[20,35,44,44,]),'FLOAT':([11,24,28,75,],[21,36,45,45,]),'CHAR':([11,24,28,75,],[22,37,46,46,]),'STRING':([11,24,28,75,],[23,38,47,47,]),'COLON':([13,14,15,39,49,96,178,],[24,-8,-13,-9,-12,-11,-10,]),'COMMA':([14,15,49,53,93,96,97,99,100,101,102,103,104,107,109,110,111,112,113,115,119,121,122,137,138,143,145,156,157,158,159,160,161,162,163,164,165,166,167,168,169,178,184,189,],[25,-13,-12,75,-35,-11,-82,-62,-63,-65,-67,-70,-75,-78,-84,-85,-35,-88,-89,144,148,150,151,-86,-87,-45,-34,-64,-66,-68,-69,-71,-72,-73,-74,-76,-77,-79,-80,-81,-83,-10,-33,-32,]),'O_ABRACKET':([15,49,67,93,96,111,145,184,],[26,54,86,86,126,86,171,187,]),'O_PARENTHESIS':([16,18,29,30,31,32,33,67,68,69,70,71,72,84,85,86,87,89,90,91,108,111,125,127,128,129,130,131,132,133,134,135,136,139,140,141,144,150,151,171,177,187,],[27,28,-27,-28,-29,-30,-31,85,87,88,89,90,91,108,108,108,108,108,108,108,108,85,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,]),'CTE_INT':([26,54,84,85,86,87,89,90,91,105,106,108,125,126,127,128,129,130,131,132,133,134,135,136,139,140,141,144,150,151,171,177,187,],[40,76,112,112,112,112,112,112,112,112,112,112,112,155,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,]),'C_PARENTHESIS':([27,42,53,93,95,97,99,100,101,102,103,104,107,109,110,111,112,113,114,115,117,118,119,120,121,122,123,124,137,138,142,143,145,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,172,173,174,184,189,],[41,52,-25,-35,-26,-82,-62,-63,-65,-67,-70,-75,-78,-84,-85,-35,-88,-89,143,-46,146,147,-50,149,-53,-54,152,153,-86,-87,169,-45,-34,-64,-66,-68,-69,-71,-72,-73,-74,-76,-77,-79,-80,-81,-83,-47,-51,-55,-56,-33,-32,]),'C_ABRACKET':([40,76,97,104,107,109,110,111,112,113,116,137,138,143,145,155,164,165,166,167,168,169,179,184,188,189,],[49,96,-82,-75,-78,-84,-85,-35,-88,-89,145,-86,-87,-45,-34,178,-76,-77,-79,-80,-81,-83,184,-33,189,-32,]),'C_CBRACKET':([51,55,56,57,63,64,65,77,78,79,80,81,82,83,175,176,180,182,185,186,],[-90,77,-90,-4,-41,-42,-43,-2,-3,-36,-37,-38,-39,-40,-90,-60,-57,-59,-58,-61,]),'RETURN':([51,56,63,64,65,77,79,80,81,82,83,175,176,180,182,185,186,],[68,68,-41,-42,-43,-2,-36,-37,-38,-39,-40,-90,-60,-57,-59,-58,-61,]),'READ':([51,56,63,64,65,77,79,80,81,82,83,175,176,180,182,185,186,],[69,69,-41,-42,-43,-2,-36,-37,-38,-39,-40,-90,-60,-57,-59,-58,-61,]),'WRITE':([51,56,63,64,65,77,79,80,81,82,83,175,176,180,182,185,186,],[70,70,-41,-42,-43,-2,-36,-37,-38,-39,-40,-90,-60,-57,-59,-58,-61,]),'IF':([51,56,63,64,65,77,79,80,81,82,83,175,176,180,182,185,186,],[71,71,-41,-42,-43,-2,-36,-37,-38,-39,-40,-90,-60,-57,-59,-58,-61,]),'WHILE':([51,56,63,64,65,77,79,80,81,82,83,175,176,180,182,185,186,],[72,72,-41,-42,-43,-2,-36,-37,-38,-39,-40,-90,-60,-57,-59,-58,-61,]),'FOR':([51,56,63,64,65,77,79,80,81,82,83,175,176,180,182,185,186,],[73,73,-41,-42,-43,-2,-36,-37,-38,-39,-40,-90,-60,-57,-59,-58,-61,]),'ASSIGN':([66,67,92,93,145,184,189,],[84,-35,125,-35,-34,-33,-32,]),'ELSE':([77,175,],[-2,181,]),'PLUS':([84,85,86,87,89,90,91,97,104,107,108,109,110,111,112,113,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,143,144,145,150,151,166,167,168,169,171,177,184,187,189,],[105,105,105,105,105,105,105,-82,135,-78,105,-84,-85,-35,-88,-89,105,105,105,105,105,105,105,105,105,105,105,-86,-87,105,105,105,-45,105,-34,105,105,-79,-80,-81,-83,105,105,-33,105,-32,]),'MINUS':([84,85,86,87,89,90,91,97,104,107,108,109,110,111,112,113,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,143,144,145,150,151,166,167,168,169,171,177,184,187,189,],[106,106,106,106,106,106,106,-82,136,-78,106,-84,-85,-35,-88,-89,106,106,106,106,106,106,106,106,106,106,106,-86,-87,106,106,106,-45,106,-34,106,106,-79,-80,-81,-83,106,106,-33,106,-32,]),'CTE_FLOAT':([84,85,86,87,89,90,91,105,106,108,125,127,128,129,130,131,132,133,134,135,136,139,140,141,144,150,151,171,177,187,],[113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,]),'CTE_STRING':([89,150,151,],[122,122,122,]),'TIMES':([97,107,109,110,111,112,113,137,138,143,145,169,184,189,],[-82,139,-84,-85,-35,-88,-89,-86,-87,-45,-34,-83,-33,-32,]),'DIVIDE':([97,107,109,110,111,112,113,137,138,143,145,169,184,189,],[-82,140,-84,-85,-35,-88,-89,-86,-87,-45,-34,-83,-33,-32,]),'MODULE':([97,107,109,110,111,112,113,137,138,143,145,169,184,189,],[-82,141,-84,-85,-35,-88,-89,-86,-87,-45,-34,-83,-33,-32,]),'GREATER':([97,103,104,107,109,110,111,112,113,137,138,143,145,164,165,166,167,168,169,184,189,],[-82,131,-75,-78,-84,-85,-35,-88,-89,-86,-87,-45,-34,-76,-77,-79,-80,-81,-83,-33,-32,]),'LESSER':([97,103,104,107,109,110,111,112,113,137,138,143,145,164,165,166,167,168,169,184,189,],[-82,132,-75,-78,-84,-85,-35,-88,-89,-86,-87,-45,-34,-76,-77,-79,-80,-81,-83,-33,-32,]),'GREATER_EQUAL':([97,103,104,107,109,110,111,112,113,137,138,143,145,164,165,166,167,168,169,184,189,],[-82,133,-75,-78,-84,-85,-35,-88,-89,-86,-87,-45,-34,-76,-77,-79,-80,-81,-83,-33,-32,]),'LESSER_EQUAL':([97,103,104,107,109,110,111,112,113,137,138,143,145,164,165,166,167,168,169,184,189,],[-82,134,-75,-78,-84,-85,-35,-88,-89,-86,-87,-45,-34,-76,-77,-79,-80,-81,-83,-33,-32,]),'EQUAL':([97,102,103,104,107,109,110,111,112,113,137,138,143,145,160,161,162,163,164,165,166,167,168,169,184,189,],[-82,129,-70,-75,-78,-84,-85,-35,-88,-89,-86,-87,-45,-34,-71,-72,-73,-74,-76,-77,-79,-80,-81,-83,-33,-32,]),'NOT_EQUAL':([97,102,103,104,107,109,110,111,112,113,137,138,143,145,160,161,162,163,164,165,166,167,168,169,184,189,],[-82,130,-70,-75,-78,-84,-85,-35,-88,-89,-86,-87,-45,-34,-71,-72,-73,-74,-76,-77,-79,-80,-81,-83,-33,-32,]),'AND':([97,101,102,103,104,107,109,110,111,112,113,137,138,143,145,158,159,160,161,162,163,164,165,166,167,168,169,184,189,],[-82,128,-67,-70,-75,-78,-84,-85,-35,-88,-89,-86,-87,-45,-34,-68,-69,-71,-72,-73,-74,-76,-77,-79,-80,-81,-83,-33,-32,]),'OR':([97,100,101,102,103,104,107,109,110,111,112,113,137,138,143,145,157,158,159,160,161,162,163,164,165,166,167,168,169,184,189,],[-82,127,-65,-67,-70,-75,-78,-84,-85,-35,-88,-89,-86,-87,-45,-34,-66,-68,-69,-71,-72,-73,-74,-76,-77,-79,-80,-81,-83,-33,-32,]),'TO':([97,104,107,109,110,111,112,113,137,138,143,145,154,164,165,166,167,168,169,184,189,],[-82,-75,-78,-84,-85,-35,-88,-89,-86,-87,-45,-34,177,-76,-77,-79,-80,-81,-83,-33,-32,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'declaracion':([4,6,52,],[5,12,74,]),'declaracion_base':([4,6,52,],[6,6,6,]),'funcion':([5,9,],[8,17,]),'funcion_base':([5,9,],[9,9,]),'epsilon':([5,9,51,56,175,],[10,10,57,57,182,]),'declaracion_prime':([7,25,],[13,39,]),'declaracion_variable':([7,25,],[14,14,]),'funcion_ident':([11,],[18,]),'declaracion_tipo':([24,],[34,]),'funcion_prime':([28,75,],[42,95,]),'tipo':([28,75,],[43,43,]),'bloque':([41,74,152,153,181,183,],[50,94,175,176,185,186,]),'bloque_prime':([51,56,],[55,78,]),'estatuto':([51,56,],[56,56,]),'asignacion':([51,56,],[58,58,]),'llamada':([51,56,84,85,86,87,89,90,91,108,125,127,128,129,130,131,132,133,134,135,136,139,140,141,144,150,151,171,177,187,],[59,59,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,]),'retorno':([51,56,],[60,60,]),'lectura':([51,56,],[61,61,]),'escritura':([51,56,],[62,62,]),'decision':([51,56,],[63,63,]),'while':([51,56,],[64,64,]),'for':([51,56,],[65,65,]),'variable':([51,56,73,84,85,86,87,88,89,90,91,108,125,127,128,129,130,131,132,133,134,135,136,139,140,141,144,148,150,151,171,177,187,],[66,66,92,97,97,97,97,119,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,119,97,97,97,97,97,]),'expr':([84,87,89,90,91,108,150,151,],[98,117,121,123,124,142,121,121,]),'or':([84,87,89,90,91,108,127,150,151,],[99,99,99,99,99,99,156,99,99,]),'and':([84,87,89,90,91,108,127,128,150,151,],[100,100,100,100,100,100,100,157,100,100,]),'equal':([84,87,89,90,91,108,127,128,150,151,],[101,101,101,101,101,101,101,101,101,101,]),'compare':([84,87,89,90,91,108,127,128,129,130,150,151,],[102,102,102,102,102,102,102,102,158,159,102,102,]),'exp':([84,85,86,87,89,90,91,108,125,127,128,129,130,131,132,133,134,135,136,144,150,151,171,177,187,],[103,115,116,103,103,103,103,103,154,103,103,103,103,160,161,162,163,164,165,115,103,103,179,183,188,]),'termino':([84,85,86,87,89,90,91,108,125,127,128,129,130,131,132,133,134,135,136,139,140,141,144,150,151,171,177,187,],[104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,166,167,168,104,104,104,104,104,104,]),'factor':([84,85,86,87,89,90,91,108,125,127,128,129,130,131,132,133,134,135,136,139,140,141,144,150,151,171,177,187,],[107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,]),'cte':([84,85,86,87,89,90,91,105,106,108,125,127,128,129,130,131,132,133,134,135,136,139,140,141,144,150,151,171,177,187,],[110,110,110,110,110,110,110,137,138,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,]),'llamada_prime':([85,144,],[114,170,]),'lectura_prime':([88,148,],[118,172,]),'escritura_prime':([89,150,151,],[120,173,174,]),'else':([175,],[180,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> PROGRAM ID SEMICOLON declaracion funcion MAIN O_PARENTHESIS C_PARENTHESIS bloque','programa',9,'p_programa','Lexer_Parser.py',229),
  ('bloque -> O_CBRACKET bloque_prime C_CBRACKET','bloque',3,'p_bloque','Lexer_Parser.py',238),
  ('bloque_prime -> estatuto bloque_prime','bloque_prime',2,'p_bloque_prime','Lexer_Parser.py',244),
  ('bloque_prime -> epsilon','bloque_prime',1,'p_bloque_prime','Lexer_Parser.py',245),
  ('declaracion -> declaracion_base','declaracion',1,'p_declaracion','Lexer_Parser.py',252),
  ('declaracion -> declaracion_base declaracion','declaracion',2,'p_declaracion','Lexer_Parser.py',253),
  ('declaracion_base -> LET declaracion_prime COLON declaracion_tipo SEMICOLON','declaracion_base',5,'p_declaracion_base','Lexer_Parser.py',259),
  ('declaracion_prime -> declaracion_variable','declaracion_prime',1,'p_declaracion_prime','Lexer_Parser.py',265),
  ('declaracion_prime -> declaracion_variable COMMA declaracion_prime','declaracion_prime',3,'p_declaracion_prime','Lexer_Parser.py',266),
  ('declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET','declaracion_variable',10,'p_declaracion_variable','Lexer_Parser.py',273),
  ('declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET','declaracion_variable',7,'p_declaracion_variable','Lexer_Parser.py',274),
  ('declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET','declaracion_variable',4,'p_declaracion_variable','Lexer_Parser.py',275),
  ('declaracion_variable -> ID','declaracion_variable',1,'p_declaracion_variable','Lexer_Parser.py',276),
  ('declaracion_tipo -> INT','declaracion_tipo',1,'p_declaracion_tipo','Lexer_Parser.py',296),
  ('declaracion_tipo -> FLOAT','declaracion_tipo',1,'p_declaracion_tipo','Lexer_Parser.py',297),
  ('declaracion_tipo -> CHAR','declaracion_tipo',1,'p_declaracion_tipo','Lexer_Parser.py',298),
  ('declaracion_tipo -> STRING','declaracion_tipo',1,'p_declaracion_tipo','Lexer_Parser.py',299),
  ('tipo -> INT','tipo',1,'p_tipo','Lexer_Parser.py',307),
  ('tipo -> FLOAT','tipo',1,'p_tipo','Lexer_Parser.py',308),
  ('tipo -> CHAR','tipo',1,'p_tipo','Lexer_Parser.py',309),
  ('tipo -> STRING','tipo',1,'p_tipo','Lexer_Parser.py',310),
  ('funcion -> funcion_base funcion','funcion',2,'p_funcion','Lexer_Parser.py',317),
  ('funcion -> epsilon','funcion',1,'p_funcion','Lexer_Parser.py',318),
  ('funcion_base -> FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion bloque','funcion_base',7,'p_funcion_base','Lexer_Parser.py',324),
  ('funcion_prime -> tipo ID','funcion_prime',2,'p_funcion_prime','Lexer_Parser.py',330),
  ('funcion_prime -> tipo ID COMMA funcion_prime','funcion_prime',4,'p_funcion_prime','Lexer_Parser.py',331),
  ('funcion_ident -> VOID ID','funcion_ident',2,'p_funcion_ident','Lexer_Parser.py',337),
  ('funcion_ident -> INT ID','funcion_ident',2,'p_funcion_ident','Lexer_Parser.py',338),
  ('funcion_ident -> FLOAT ID','funcion_ident',2,'p_funcion_ident','Lexer_Parser.py',339),
  ('funcion_ident -> CHAR ID','funcion_ident',2,'p_funcion_ident','Lexer_Parser.py',340),
  ('funcion_ident -> STRING ID','funcion_ident',2,'p_funcion_ident','Lexer_Parser.py',341),
  ('variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET','variable',10,'p_variable','Lexer_Parser.py',349),
  ('variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET','variable',7,'p_variable','Lexer_Parser.py',350),
  ('variable -> ID O_ABRACKET exp C_ABRACKET','variable',4,'p_variable','Lexer_Parser.py',351),
  ('variable -> ID','variable',1,'p_variable','Lexer_Parser.py',352),
  ('estatuto -> asignacion SEMICOLON','estatuto',2,'p_estatuto','Lexer_Parser.py',359),
  ('estatuto -> llamada SEMICOLON','estatuto',2,'p_estatuto','Lexer_Parser.py',360),
  ('estatuto -> retorno SEMICOLON','estatuto',2,'p_estatuto','Lexer_Parser.py',361),
  ('estatuto -> lectura SEMICOLON','estatuto',2,'p_estatuto','Lexer_Parser.py',362),
  ('estatuto -> escritura SEMICOLON','estatuto',2,'p_estatuto','Lexer_Parser.py',363),
  ('estatuto -> decision','estatuto',1,'p_estatuto','Lexer_Parser.py',364),
  ('estatuto -> while','estatuto',1,'p_estatuto','Lexer_Parser.py',365),
  ('estatuto -> for','estatuto',1,'p_estatuto','Lexer_Parser.py',366),
  ('asignacion -> variable ASSIGN expr','asignacion',3,'p_asignacion','Lexer_Parser.py',373),
  ('llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS','llamada',4,'p_llamada','Lexer_Parser.py',380),
  ('llamada_prime -> exp','llamada_prime',1,'p_llamada_prime','Lexer_Parser.py',386),
  ('llamada_prime -> exp COMMA llamada_prime','llamada_prime',3,'p_llamada_prime','Lexer_Parser.py',387),
  ('retorno -> RETURN O_PARENTHESIS expr C_PARENTHESIS','retorno',4,'p_retorno','Lexer_Parser.py',394),
  ('lectura -> READ O_PARENTHESIS lectura_prime C_PARENTHESIS','lectura',4,'p_lectura','Lexer_Parser.py',401),
  ('lectura_prime -> variable','lectura_prime',1,'p_lectura_prime','Lexer_Parser.py',407),
  ('lectura_prime -> variable COMMA lectura_prime','lectura_prime',3,'p_lectura_prime','Lexer_Parser.py',408),
  ('escritura -> WRITE O_PARENTHESIS escritura_prime C_PARENTHESIS','escritura',4,'p_escritura','Lexer_Parser.py',415),
  ('escritura_prime -> expr','escritura_prime',1,'p_escritura_prime','Lexer_Parser.py',421),
  ('escritura_prime -> CTE_STRING','escritura_prime',1,'p_escritura_prime','Lexer_Parser.py',422),
  ('escritura_prime -> expr COMMA escritura_prime','escritura_prime',3,'p_escritura_prime','Lexer_Parser.py',423),
  ('escritura_prime -> CTE_STRING COMMA escritura_prime','escritura_prime',3,'p_escritura_prime','Lexer_Parser.py',424),
  ('decision -> IF O_PARENTHESIS expr C_PARENTHESIS bloque else','decision',6,'p_decision','Lexer_Parser.py',431),
  ('else -> ELSE bloque','else',2,'p_else','Lexer_Parser.py',437),
  ('else -> epsilon','else',1,'p_else','Lexer_Parser.py',438),
  ('while -> WHILE O_PARENTHESIS expr C_PARENTHESIS bloque','while',5,'p_while','Lexer_Parser.py',445),
  ('for -> FOR variable ASSIGN exp TO exp bloque','for',7,'p_for','Lexer_Parser.py',452),
  ('expr -> or','expr',1,'p_expr','Lexer_Parser.py',459),
  ('or -> and','or',1,'p_or','Lexer_Parser.py',466),
  ('or -> and OR or','or',3,'p_or','Lexer_Parser.py',467),
  ('and -> equal','and',1,'p_and','Lexer_Parser.py',474),
  ('and -> equal AND and','and',3,'p_and','Lexer_Parser.py',475),
  ('equal -> compare','equal',1,'p_equal','Lexer_Parser.py',482),
  ('equal -> compare EQUAL compare','equal',3,'p_equal','Lexer_Parser.py',483),
  ('equal -> compare NOT_EQUAL compare','equal',3,'p_equal','Lexer_Parser.py',484),
  ('compare -> exp','compare',1,'p_compare','Lexer_Parser.py',491),
  ('compare -> exp GREATER exp','compare',3,'p_compare','Lexer_Parser.py',492),
  ('compare -> exp LESSER exp','compare',3,'p_compare','Lexer_Parser.py',493),
  ('compare -> exp GREATER_EQUAL exp','compare',3,'p_compare','Lexer_Parser.py',494),
  ('compare -> exp LESSER_EQUAL exp','compare',3,'p_compare','Lexer_Parser.py',495),
  ('exp -> termino','exp',1,'p_exp','Lexer_Parser.py',502),
  ('exp -> termino PLUS exp','exp',3,'p_exp','Lexer_Parser.py',503),
  ('exp -> termino MINUS exp','exp',3,'p_exp','Lexer_Parser.py',504),
  ('termino -> factor','termino',1,'p_termino','Lexer_Parser.py',511),
  ('termino -> factor TIMES termino','termino',3,'p_termino','Lexer_Parser.py',512),
  ('termino -> factor DIVIDE termino','termino',3,'p_termino','Lexer_Parser.py',513),
  ('termino -> factor MODULE termino','termino',3,'p_termino','Lexer_Parser.py',514),
  ('factor -> variable','factor',1,'p_factor','Lexer_Parser.py',521),
  ('factor -> O_PARENTHESIS expr C_PARENTHESIS','factor',3,'p_factor','Lexer_Parser.py',522),
  ('factor -> llamada','factor',1,'p_factor','Lexer_Parser.py',523),
  ('factor -> cte','factor',1,'p_factor','Lexer_Parser.py',524),
  ('factor -> PLUS cte','factor',2,'p_factor','Lexer_Parser.py',525),
  ('factor -> MINUS cte','factor',2,'p_factor','Lexer_Parser.py',526),
  ('cte -> CTE_INT','cte',1,'p_cte','Lexer_Parser.py',533),
  ('cte -> CTE_FLOAT','cte',1,'p_cte','Lexer_Parser.py',534),
  ('epsilon -> <empty>','epsilon',0,'p_epsilon','Lexer_Parser.py',541),
]
