
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN CHAR COLON COMMA CTE_CHAR CTE_FLOAT CTE_INT CTE_STRING C_ABRACKET C_CBRACKET C_PARENTHESIS DIVIDE ELSE EQUAL FLOAT FOR FUNCTION GREATER GREATER_EQUAL ID IF INT LESSER LESSER_EQUAL LET MAIN MINUS MODULE NOT_EQUAL OR O_ABRACKET O_CBRACKET O_PARENTHESIS PLUS PROGRAM READ RETURN SEMICOLON STRING TIMES TO VOID WHILE WRITE\n\tprograma : PROGRAM ID SEMICOLON declaracion funcion MAIN O_PARENTHESIS C_PARENTHESIS bloque\n\t\n\tbloque : O_CBRACKET bloque_prime C_CBRACKET\n\t\n\tbloque_prime : estatuto bloque_prime\n\t\t\t\t | epsilon\n\t\n\tdeclaracion : declaracion_base\n\t\t\t\t| declaracion_base declaracion\n\t\n\tdeclaracion_base : LET declaracion_prime COLON tipo SEMICOLON\n\t\n\tdeclaracion_prime : variable\n\t\t\t\t\t  | variable COMMA declaracion_prime\n\t\n\ttipo : INT\n\t\t | FLOAT\n\t\t | CHAR\n\t\t | STRING\n\t\n\tfuncion : funcion_base\n\t\t\t  | funcion_base funcion\n\t\n\tfuncion_base : FUNCTION funcion_tipo ID O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion bloque\n\t\n\tfuncion_prime : tipo ID\n\t\t\t\t  | tipo ID COMMA funcion_prime\n\t\n\tfuncion_tipo : VOID\n \t\t\t\t | tipo\n\t\n\tvariable : ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET\n\t\t\t | ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET\n\t\t\t | ID O_ABRACKET exp C_ABRACKET\n\t\t\t | ID \n\t\n\testatuto : asignacion SEMICOLON\n\t\t\t | llamada SEMICOLON\n\t\t\t | retorno SEMICOLON\n\t\t\t | lectura SEMICOLON\n\t\t\t | escritura SEMICOLON\n\t\t\t | decision\n\t\t\t | while\n\t\t\t | for\n\t\t\t | expr SEMICOLON\n\t\n\tasignacion : variable ASSIGN expr\n\t\n\tllamada : ID O_PARENTHESIS llamada_prime C_PARENTHESIS\n\t\n\tllamada_prime : exp\n\t\t\t\t  | exp COMMA llamada_prime\n\t\n\tretorno : RETURN O_PARENTHESIS expr C_PARENTHESIS\n\t\n\tlectura : READ O_PARENTHESIS lectura_prime C_PARENTHESIS\n\t\n\tlectura_prime : variable\n\t\t\t\t  | variable COMMA lectura_prime\n\t\n\tescritura : WRITE O_PARENTHESIS escritura_prime C_PARENTHESIS\n\t\n\tescritura_prime : expr\n\t\t\t\t\t| CTE_STRING\n\t\t\t\t\t| expr COMMA escritura_prime\n\t\t\t\t\t| CTE_STRING COMMA escritura_prime\n\t\n\tdecision : IF O_PARENTHESIS expr C_PARENTHESIS bloque else\n\t\n\telse : ELSE bloque\n\t\t | epsilon\n\t\n\twhile : WHILE O_PARENTHESIS expr C_PARENTHESIS bloque\n\t\n\tfor : FOR variable ASSIGN exp TO exp bloque\n\t\n\texpr : or\n\t\n\tor : and\n\t   | and OR or\n\t\n\tand : equal\n\t\t| equal AND and\n\t\n\tequal : compare\n\t\t  | compare EQUAL compare\n\t\t  | compare NOT_EQUAL compare\n\t\n\tcompare : exp\n\t\t\t| exp GREATER exp\n\t\t\t| exp LESSER exp\n\t\t\t| exp GREATER_EQUAL exp\n\t\t\t| exp LESSER_EQUAL exp\n\t\n\texp : termino\n\t\t| termino PLUS exp\n\t\t| termino MINUS exp\n\t\n\ttermino : factor\n\t\t\t| factor TIMES termino\n\t\t\t| factor DIVIDE termino\n\t\t\t| factor MODULE termino\n\t\n\tfactor : variable\n\t\t   | O_PARENTHESIS expr C_PARENTHESIS\n\t\t   | llamada\n\t\t   | cte\n\t\t   | PLUS cte\n\t\t   | MINUS cte\n\t\n\tcte : CTE_INT\n\t\t| CTE_FLOAT\n\t\n\tepsilon :\n\t'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,61,115,],[0,-1,-2,]),'ID':([2,7,17,18,19,20,21,22,23,25,26,38,46,48,49,52,53,54,62,64,67,74,75,76,77,78,79,80,81,83,90,91,92,101,105,115,117,118,119,120,121,122,123,124,125,126,127,128,143,146,149,151,152,160,161,162,164,166,168,169,],[3,14,28,-19,-20,-10,-11,-12,-13,14,31,31,31,31,31,31,31,31,95,103,31,31,31,31,31,31,31,31,31,95,-30,-31,-32,14,31,-2,-25,-26,-27,-28,-29,-33,31,31,14,31,31,31,31,31,14,31,31,-80,-50,31,-47,-49,-48,-51,]),'SEMICOLON':([3,20,21,22,23,29,31,33,36,37,39,40,41,42,47,50,51,56,57,58,59,60,68,69,70,71,72,73,85,86,87,88,89,93,94,95,104,107,108,109,110,111,112,113,114,133,134,147,148,150,163,],[4,-10,-11,-12,-13,45,-24,-65,-68,-72,-74,-75,-78,-79,-23,-76,-77,-52,-53,-55,-57,-60,-66,-67,-69,-70,-71,-73,117,118,119,120,121,122,-72,-24,-35,-54,-56,-58,-59,-61,-62,-63,-64,-22,-34,-38,-39,-42,-21,]),'LET':([4,6,45,102,],[7,7,-7,7,]),'FUNCTION':([5,6,9,11,45,115,144,],[10,-5,10,-6,-7,-2,-16,]),'O_CBRACKET':([6,11,31,33,36,37,39,40,41,42,43,45,47,50,51,68,69,70,71,72,73,104,130,133,153,154,163,165,167,],[-5,-6,-24,-65,-68,-72,-74,-75,-78,-79,62,-7,-23,-76,-77,-66,-67,-69,-70,-71,-73,-35,62,-22,62,62,-21,62,62,]),'MAIN':([8,9,16,115,144,],[15,-14,-15,-2,-16,]),'VOID':([10,],[18,]),'INT':([10,24,44,131,],[20,20,20,20,]),'FLOAT':([10,24,44,131,],[21,21,21,21,]),'CHAR':([10,24,44,131,],[22,22,22,22,]),'STRING':([10,24,44,131,],[23,23,23,23,]),'COLON':([12,13,14,30,47,133,163,],[24,-8,-24,-9,-23,-22,-21,]),'COMMA':([13,14,31,33,36,37,39,40,41,42,47,50,51,56,57,58,59,60,66,68,69,70,71,72,73,103,104,107,108,109,110,111,112,113,114,133,137,139,140,163,],[25,-24,-24,-65,-68,-72,-74,-75,-78,-79,-23,-76,-77,-52,-53,-55,-57,-60,105,-66,-67,-69,-70,-71,-73,131,-35,-54,-56,-58,-59,-61,-62,-63,-64,-22,149,151,152,-21,]),'O_ABRACKET':([14,31,47,95,133,],[26,26,67,26,146,]),'ASSIGN':([14,47,94,95,129,133,163,],[-24,-23,123,-24,143,-22,-21,]),'C_PARENTHESIS':([14,27,31,33,36,37,39,40,41,42,47,50,51,55,56,57,58,59,60,63,65,66,68,69,70,71,72,73,103,104,107,108,109,110,111,112,113,114,132,133,135,136,137,138,139,140,141,142,145,157,158,159,163,],[-24,43,-24,-65,-68,-72,-74,-75,-78,-79,-23,-76,-77,73,-52,-53,-55,-57,-60,102,104,-36,-66,-67,-69,-70,-71,-73,-17,-35,-54,-56,-58,-59,-61,-62,-63,-64,-37,-22,147,148,-40,150,-43,-44,153,154,-18,-41,-45,-46,-21,]),'O_PARENTHESIS':([15,26,28,31,38,46,48,49,52,53,54,62,67,74,75,76,77,78,79,80,81,83,90,91,92,95,96,97,98,99,100,105,115,117,118,119,120,121,122,123,124,126,127,128,143,146,151,152,160,161,162,164,166,168,169,],[27,38,44,46,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,-30,-31,-32,46,124,125,126,127,128,38,-2,-25,-26,-27,-28,-29,-33,38,38,38,38,38,38,38,38,38,-80,-50,38,-47,-49,-48,-51,]),'PLUS':([26,31,33,36,37,38,39,40,41,42,46,47,48,49,50,51,52,53,54,62,67,70,71,72,73,74,75,76,77,78,79,80,81,83,86,90,91,92,94,95,104,105,115,117,118,119,120,121,122,123,124,126,127,128,133,143,146,151,152,160,161,162,163,164,166,168,169,],[34,-24,48,-68,-72,34,-74,-75,-78,-79,34,-23,34,34,-76,-77,34,34,34,34,34,-69,-70,-71,-73,34,34,34,34,34,34,34,34,34,-74,-30,-31,-32,-72,-24,-35,34,-2,-25,-26,-27,-28,-29,-33,34,34,34,34,34,-22,34,34,34,34,-80,-50,34,-21,-47,-49,-48,-51,]),'MINUS':([26,31,33,36,37,38,39,40,41,42,46,47,48,49,50,51,52,53,54,62,67,70,71,72,73,74,75,76,77,78,79,80,81,83,86,90,91,92,94,95,104,105,115,117,118,119,120,121,122,123,124,126,127,128,133,143,146,151,152,160,161,162,163,164,166,168,169,],[35,-24,49,-68,-72,35,-74,-75,-78,-79,35,-23,35,35,-76,-77,35,35,35,35,35,-69,-70,-71,-73,35,35,35,35,35,35,35,35,35,-74,-30,-31,-32,-72,-24,-35,35,-2,-25,-26,-27,-28,-29,-33,35,35,35,35,35,-22,35,35,35,35,-80,-50,35,-21,-47,-49,-48,-51,]),'CTE_INT':([26,34,35,38,46,48,49,52,53,54,62,67,74,75,76,77,78,79,80,81,83,90,91,92,105,115,117,118,119,120,121,122,123,124,126,127,128,143,146,151,152,160,161,162,164,166,168,169,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,-30,-31,-32,41,-2,-25,-26,-27,-28,-29,-33,41,41,41,41,41,41,41,41,41,-80,-50,41,-47,-49,-48,-51,]),'CTE_FLOAT':([26,34,35,38,46,48,49,52,53,54,62,67,74,75,76,77,78,79,80,81,83,90,91,92,105,115,117,118,119,120,121,122,123,124,126,127,128,143,146,151,152,160,161,162,164,166,168,169,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,-30,-31,-32,42,-2,-25,-26,-27,-28,-29,-33,42,42,42,42,42,42,42,42,42,-80,-50,42,-47,-49,-48,-51,]),'TIMES':([31,36,37,39,40,41,42,47,50,51,73,86,94,95,104,133,163,],[-24,52,-72,-74,-75,-78,-79,-23,-76,-77,-73,-74,-72,-24,-35,-22,-21,]),'DIVIDE':([31,36,37,39,40,41,42,47,50,51,73,86,94,95,104,133,163,],[-24,53,-72,-74,-75,-78,-79,-23,-76,-77,-73,-74,-72,-24,-35,-22,-21,]),'MODULE':([31,36,37,39,40,41,42,47,50,51,73,86,94,95,104,133,163,],[-24,54,-72,-74,-75,-78,-79,-23,-76,-77,-73,-74,-72,-24,-35,-22,-21,]),'C_ABRACKET':([31,32,33,36,37,39,40,41,42,47,50,51,68,69,70,71,72,73,104,106,133,156,163,],[-24,47,-65,-68,-72,-74,-75,-78,-79,-23,-76,-77,-66,-67,-69,-70,-71,-73,-35,133,-22,163,-21,]),'GREATER':([31,33,36,37,39,40,41,42,47,50,51,60,68,69,70,71,72,73,86,94,95,104,133,163,],[-24,-65,-68,-72,-74,-75,-78,-79,-23,-76,-77,78,-66,-67,-69,-70,-71,-73,-74,-72,-24,-35,-22,-21,]),'LESSER':([31,33,36,37,39,40,41,42,47,50,51,60,68,69,70,71,72,73,86,94,95,104,133,163,],[-24,-65,-68,-72,-74,-75,-78,-79,-23,-76,-77,79,-66,-67,-69,-70,-71,-73,-74,-72,-24,-35,-22,-21,]),'GREATER_EQUAL':([31,33,36,37,39,40,41,42,47,50,51,60,68,69,70,71,72,73,86,94,95,104,133,163,],[-24,-65,-68,-72,-74,-75,-78,-79,-23,-76,-77,80,-66,-67,-69,-70,-71,-73,-74,-72,-24,-35,-22,-21,]),'LESSER_EQUAL':([31,33,36,37,39,40,41,42,47,50,51,60,68,69,70,71,72,73,86,94,95,104,133,163,],[-24,-65,-68,-72,-74,-75,-78,-79,-23,-76,-77,81,-66,-67,-69,-70,-71,-73,-74,-72,-24,-35,-22,-21,]),'EQUAL':([31,33,36,37,39,40,41,42,47,50,51,59,60,68,69,70,71,72,73,86,94,95,104,111,112,113,114,133,163,],[-24,-65,-68,-72,-74,-75,-78,-79,-23,-76,-77,76,-60,-66,-67,-69,-70,-71,-73,-74,-72,-24,-35,-61,-62,-63,-64,-22,-21,]),'NOT_EQUAL':([31,33,36,37,39,40,41,42,47,50,51,59,60,68,69,70,71,72,73,86,94,95,104,111,112,113,114,133,163,],[-24,-65,-68,-72,-74,-75,-78,-79,-23,-76,-77,77,-60,-66,-67,-69,-70,-71,-73,-74,-72,-24,-35,-61,-62,-63,-64,-22,-21,]),'AND':([31,33,36,37,39,40,41,42,47,50,51,58,59,60,68,69,70,71,72,73,86,94,95,104,109,110,111,112,113,114,133,163,],[-24,-65,-68,-72,-74,-75,-78,-79,-23,-76,-77,75,-57,-60,-66,-67,-69,-70,-71,-73,-74,-72,-24,-35,-58,-59,-61,-62,-63,-64,-22,-21,]),'OR':([31,33,36,37,39,40,41,42,47,50,51,57,58,59,60,68,69,70,71,72,73,86,94,95,104,108,109,110,111,112,113,114,133,163,],[-24,-65,-68,-72,-74,-75,-78,-79,-23,-76,-77,74,-55,-57,-60,-66,-67,-69,-70,-71,-73,-74,-72,-24,-35,-56,-58,-59,-61,-62,-63,-64,-22,-21,]),'TO':([31,33,36,37,39,40,41,42,47,50,51,68,69,70,71,72,73,104,133,155,163,],[-24,-65,-68,-72,-74,-75,-78,-79,-23,-76,-77,-66,-67,-69,-70,-71,-73,-35,-22,162,-21,]),'C_CBRACKET':([62,82,83,84,90,91,92,115,116,117,118,119,120,121,122,160,161,164,166,168,169,],[-80,115,-80,-4,-30,-31,-32,-2,-3,-25,-26,-27,-28,-29,-33,-80,-50,-47,-49,-48,-51,]),'RETURN':([62,83,90,91,92,115,117,118,119,120,121,122,160,161,164,166,168,169,],[96,96,-30,-31,-32,-2,-25,-26,-27,-28,-29,-33,-80,-50,-47,-49,-48,-51,]),'READ':([62,83,90,91,92,115,117,118,119,120,121,122,160,161,164,166,168,169,],[97,97,-30,-31,-32,-2,-25,-26,-27,-28,-29,-33,-80,-50,-47,-49,-48,-51,]),'WRITE':([62,83,90,91,92,115,117,118,119,120,121,122,160,161,164,166,168,169,],[98,98,-30,-31,-32,-2,-25,-26,-27,-28,-29,-33,-80,-50,-47,-49,-48,-51,]),'IF':([62,83,90,91,92,115,117,118,119,120,121,122,160,161,164,166,168,169,],[99,99,-30,-31,-32,-2,-25,-26,-27,-28,-29,-33,-80,-50,-47,-49,-48,-51,]),'WHILE':([62,83,90,91,92,115,117,118,119,120,121,122,160,161,164,166,168,169,],[100,100,-30,-31,-32,-2,-25,-26,-27,-28,-29,-33,-80,-50,-47,-49,-48,-51,]),'FOR':([62,83,90,91,92,115,117,118,119,120,121,122,160,161,164,166,168,169,],[101,101,-30,-31,-32,-2,-25,-26,-27,-28,-29,-33,-80,-50,-47,-49,-48,-51,]),'ELSE':([115,160,],[-2,165,]),'CTE_STRING':([126,151,152,],[140,140,140,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'declaracion':([4,6,102,],[5,11,130,]),'declaracion_base':([4,6,102,],[6,6,6,]),'funcion':([5,9,],[8,16,]),'funcion_base':([5,9,],[9,9,]),'declaracion_prime':([7,25,],[12,30,]),'variable':([7,25,26,38,46,48,49,52,53,54,62,67,74,75,76,77,78,79,80,81,83,101,105,123,124,125,126,127,128,143,146,149,151,152,162,],[13,13,37,37,37,37,37,37,37,37,94,37,37,37,37,37,37,37,37,37,94,129,37,37,37,137,37,37,37,37,37,137,37,37,37,]),'funcion_tipo':([10,],[17,]),'tipo':([10,24,44,131,],[19,29,64,64,]),'exp':([26,38,46,48,49,62,67,74,75,76,77,78,79,80,81,83,105,123,124,126,127,128,143,146,151,152,162,],[32,60,66,68,69,60,106,60,60,60,60,111,112,113,114,60,66,60,60,60,60,60,155,156,60,60,167,]),'termino':([26,38,46,48,49,52,53,54,62,67,74,75,76,77,78,79,80,81,83,105,123,124,126,127,128,143,146,151,152,162,],[33,33,33,33,33,70,71,72,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'factor':([26,38,46,48,49,52,53,54,62,67,74,75,76,77,78,79,80,81,83,105,123,124,126,127,128,143,146,151,152,162,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'llamada':([26,38,46,48,49,52,53,54,62,67,74,75,76,77,78,79,80,81,83,105,123,124,126,127,128,143,146,151,152,162,],[39,39,39,39,39,39,39,39,86,39,39,39,39,39,39,39,39,39,86,39,39,39,39,39,39,39,39,39,39,39,]),'cte':([26,34,35,38,46,48,49,52,53,54,62,67,74,75,76,77,78,79,80,81,83,105,123,124,126,127,128,143,146,151,152,162,],[40,50,51,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'expr':([38,62,83,123,124,126,127,128,151,152,],[55,93,93,134,135,139,141,142,139,139,]),'or':([38,62,74,83,123,124,126,127,128,151,152,],[56,56,107,56,56,56,56,56,56,56,56,]),'and':([38,62,74,75,83,123,124,126,127,128,151,152,],[57,57,57,108,57,57,57,57,57,57,57,57,]),'equal':([38,62,74,75,83,123,124,126,127,128,151,152,],[58,58,58,58,58,58,58,58,58,58,58,58,]),'compare':([38,62,74,75,76,77,83,123,124,126,127,128,151,152,],[59,59,59,59,109,110,59,59,59,59,59,59,59,59,]),'bloque':([43,130,153,154,165,167,],[61,144,160,161,168,169,]),'funcion_prime':([44,131,],[63,145,]),'llamada_prime':([46,105,],[65,132,]),'bloque_prime':([62,83,],[82,116,]),'estatuto':([62,83,],[83,83,]),'epsilon':([62,83,160,],[84,84,166,]),'asignacion':([62,83,],[85,85,]),'retorno':([62,83,],[87,87,]),'lectura':([62,83,],[88,88,]),'escritura':([62,83,],[89,89,]),'decision':([62,83,],[90,90,]),'while':([62,83,],[91,91,]),'for':([62,83,],[92,92,]),'lectura_prime':([125,149,],[136,157,]),'escritura_prime':([126,151,152,],[138,158,159,]),'else':([160,],[164,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> PROGRAM ID SEMICOLON declaracion funcion MAIN O_PARENTHESIS C_PARENTHESIS bloque','programa',9,'p_programa','Lexer_Parser.py',227),
  ('bloque -> O_CBRACKET bloque_prime C_CBRACKET','bloque',3,'p_bloque','Lexer_Parser.py',234),
  ('bloque_prime -> estatuto bloque_prime','bloque_prime',2,'p_bloque_prime','Lexer_Parser.py',240),
  ('bloque_prime -> epsilon','bloque_prime',1,'p_bloque_prime','Lexer_Parser.py',241),
  ('declaracion -> declaracion_base','declaracion',1,'p_declaracion','Lexer_Parser.py',248),
  ('declaracion -> declaracion_base declaracion','declaracion',2,'p_declaracion','Lexer_Parser.py',249),
  ('declaracion_base -> LET declaracion_prime COLON tipo SEMICOLON','declaracion_base',5,'p_declaracion_base','Lexer_Parser.py',255),
  ('declaracion_prime -> variable','declaracion_prime',1,'p_declaracion_prime','Lexer_Parser.py',261),
  ('declaracion_prime -> variable COMMA declaracion_prime','declaracion_prime',3,'p_declaracion_prime','Lexer_Parser.py',262),
  ('tipo -> INT','tipo',1,'p_tipo','Lexer_Parser.py',269),
  ('tipo -> FLOAT','tipo',1,'p_tipo','Lexer_Parser.py',270),
  ('tipo -> CHAR','tipo',1,'p_tipo','Lexer_Parser.py',271),
  ('tipo -> STRING','tipo',1,'p_tipo','Lexer_Parser.py',272),
  ('funcion -> funcion_base','funcion',1,'p_funcion','Lexer_Parser.py',279),
  ('funcion -> funcion_base funcion','funcion',2,'p_funcion','Lexer_Parser.py',280),
  ('funcion_base -> FUNCTION funcion_tipo ID O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion bloque','funcion_base',8,'p_funcion_base','Lexer_Parser.py',286),
  ('funcion_prime -> tipo ID','funcion_prime',2,'p_funcion_prime','Lexer_Parser.py',292),
  ('funcion_prime -> tipo ID COMMA funcion_prime','funcion_prime',4,'p_funcion_prime','Lexer_Parser.py',293),
  ('funcion_tipo -> VOID','funcion_tipo',1,'p_funcion_tipo','Lexer_Parser.py',299),
  ('funcion_tipo -> tipo','funcion_tipo',1,'p_funcion_tipo','Lexer_Parser.py',300),
  ('variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET','variable',10,'p_variable','Lexer_Parser.py',307),
  ('variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET','variable',7,'p_variable','Lexer_Parser.py',308),
  ('variable -> ID O_ABRACKET exp C_ABRACKET','variable',4,'p_variable','Lexer_Parser.py',309),
  ('variable -> ID','variable',1,'p_variable','Lexer_Parser.py',310),
  ('estatuto -> asignacion SEMICOLON','estatuto',2,'p_estatuto','Lexer_Parser.py',317),
  ('estatuto -> llamada SEMICOLON','estatuto',2,'p_estatuto','Lexer_Parser.py',318),
  ('estatuto -> retorno SEMICOLON','estatuto',2,'p_estatuto','Lexer_Parser.py',319),
  ('estatuto -> lectura SEMICOLON','estatuto',2,'p_estatuto','Lexer_Parser.py',320),
  ('estatuto -> escritura SEMICOLON','estatuto',2,'p_estatuto','Lexer_Parser.py',321),
  ('estatuto -> decision','estatuto',1,'p_estatuto','Lexer_Parser.py',322),
  ('estatuto -> while','estatuto',1,'p_estatuto','Lexer_Parser.py',323),
  ('estatuto -> for','estatuto',1,'p_estatuto','Lexer_Parser.py',324),
  ('estatuto -> expr SEMICOLON','estatuto',2,'p_estatuto','Lexer_Parser.py',325),
  ('asignacion -> variable ASSIGN expr','asignacion',3,'p_asignacion','Lexer_Parser.py',332),
  ('llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS','llamada',4,'p_llamada','Lexer_Parser.py',339),
  ('llamada_prime -> exp','llamada_prime',1,'p_llamada_prime','Lexer_Parser.py',345),
  ('llamada_prime -> exp COMMA llamada_prime','llamada_prime',3,'p_llamada_prime','Lexer_Parser.py',346),
  ('retorno -> RETURN O_PARENTHESIS expr C_PARENTHESIS','retorno',4,'p_retorno','Lexer_Parser.py',353),
  ('lectura -> READ O_PARENTHESIS lectura_prime C_PARENTHESIS','lectura',4,'p_lectura','Lexer_Parser.py',360),
  ('lectura_prime -> variable','lectura_prime',1,'p_lectura_prime','Lexer_Parser.py',366),
  ('lectura_prime -> variable COMMA lectura_prime','lectura_prime',3,'p_lectura_prime','Lexer_Parser.py',367),
  ('escritura -> WRITE O_PARENTHESIS escritura_prime C_PARENTHESIS','escritura',4,'p_escritura','Lexer_Parser.py',374),
  ('escritura_prime -> expr','escritura_prime',1,'p_escritura_prime','Lexer_Parser.py',380),
  ('escritura_prime -> CTE_STRING','escritura_prime',1,'p_escritura_prime','Lexer_Parser.py',381),
  ('escritura_prime -> expr COMMA escritura_prime','escritura_prime',3,'p_escritura_prime','Lexer_Parser.py',382),
  ('escritura_prime -> CTE_STRING COMMA escritura_prime','escritura_prime',3,'p_escritura_prime','Lexer_Parser.py',383),
  ('decision -> IF O_PARENTHESIS expr C_PARENTHESIS bloque else','decision',6,'p_decision','Lexer_Parser.py',390),
  ('else -> ELSE bloque','else',2,'p_else','Lexer_Parser.py',396),
  ('else -> epsilon','else',1,'p_else','Lexer_Parser.py',397),
  ('while -> WHILE O_PARENTHESIS expr C_PARENTHESIS bloque','while',5,'p_while','Lexer_Parser.py',404),
  ('for -> FOR variable ASSIGN exp TO exp bloque','for',7,'p_for','Lexer_Parser.py',411),
  ('expr -> or','expr',1,'p_expr','Lexer_Parser.py',418),
  ('or -> and','or',1,'p_or','Lexer_Parser.py',425),
  ('or -> and OR or','or',3,'p_or','Lexer_Parser.py',426),
  ('and -> equal','and',1,'p_and','Lexer_Parser.py',433),
  ('and -> equal AND and','and',3,'p_and','Lexer_Parser.py',434),
  ('equal -> compare','equal',1,'p_equal','Lexer_Parser.py',441),
  ('equal -> compare EQUAL compare','equal',3,'p_equal','Lexer_Parser.py',442),
  ('equal -> compare NOT_EQUAL compare','equal',3,'p_equal','Lexer_Parser.py',443),
  ('compare -> exp','compare',1,'p_compare','Lexer_Parser.py',450),
  ('compare -> exp GREATER exp','compare',3,'p_compare','Lexer_Parser.py',451),
  ('compare -> exp LESSER exp','compare',3,'p_compare','Lexer_Parser.py',452),
  ('compare -> exp GREATER_EQUAL exp','compare',3,'p_compare','Lexer_Parser.py',453),
  ('compare -> exp LESSER_EQUAL exp','compare',3,'p_compare','Lexer_Parser.py',454),
  ('exp -> termino','exp',1,'p_exp','Lexer_Parser.py',461),
  ('exp -> termino PLUS exp','exp',3,'p_exp','Lexer_Parser.py',462),
  ('exp -> termino MINUS exp','exp',3,'p_exp','Lexer_Parser.py',463),
  ('termino -> factor','termino',1,'p_termino','Lexer_Parser.py',470),
  ('termino -> factor TIMES termino','termino',3,'p_termino','Lexer_Parser.py',471),
  ('termino -> factor DIVIDE termino','termino',3,'p_termino','Lexer_Parser.py',472),
  ('termino -> factor MODULE termino','termino',3,'p_termino','Lexer_Parser.py',473),
  ('factor -> variable','factor',1,'p_factor','Lexer_Parser.py',480),
  ('factor -> O_PARENTHESIS expr C_PARENTHESIS','factor',3,'p_factor','Lexer_Parser.py',481),
  ('factor -> llamada','factor',1,'p_factor','Lexer_Parser.py',482),
  ('factor -> cte','factor',1,'p_factor','Lexer_Parser.py',483),
  ('factor -> PLUS cte','factor',2,'p_factor','Lexer_Parser.py',484),
  ('factor -> MINUS cte','factor',2,'p_factor','Lexer_Parser.py',485),
  ('cte -> CTE_INT','cte',1,'p_cte','Lexer_Parser.py',492),
  ('cte -> CTE_FLOAT','cte',1,'p_cte','Lexer_Parser.py',493),
  ('epsilon -> <empty>','epsilon',0,'p_epsilon','Lexer_Parser.py',500),
]
