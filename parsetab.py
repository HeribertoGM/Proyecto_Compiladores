
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN CHAR COLON COMMA CTE_CHAR CTE_FLOAT CTE_INT CTE_STRING C_ABRACKET C_CBRACKET C_PARENTHESIS DIVIDE ELSE EQUAL FLOAT FOR FUNCTION GREATER GREATER_EQUAL ID IF INT LESSER LESSER_EQUAL LET MAIN MINUS MODULE NOT_EQUAL OR O_ABRACKET O_CBRACKET O_PARENTHESIS PLUS PROGRAM READ RETURN SEMICOLON STRING TIMES TO VOID WHILE WRITE\n\tprograma : PROGRAM ID SEMICOLON declaracion_global funcion main bloque\n\t\n\tmain : MAIN O_PARENTHESIS C_PARENTHESIS\n\t\n\tbloque : O_CBRACKET bloque_prime C_CBRACKET\n\t\n\tbloque_prime : estatuto bloque_prime\n\t\t\t\t | epsilon\n\t\n\tdeclaracion_funcion : declaracion\n\t\n\tdeclaracion_global : declaracion\n\t\n\tdeclaracion : declaracion_base\n\t\t\t\t| declaracion_base declaracion\n\t\n\tdeclaracion_base : LET declaracion_prime COLON declaracion_tipo SEMICOLON\n\t\n\tdeclaracion_prime : declaracion_variable\n\t\t\t\t\t  | declaracion_variable COMMA declaracion_prime\n\t\n\tdeclaracion_variable : ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET\n\t\t\t\t\t\t | ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET\n\t\t\t\t\t\t | ID O_ABRACKET CTE_INT C_ABRACKET\n\t\t\t\t\t\t | ID \n\t\n\tdeclaracion_tipo : INT\n\t\t\t\t\t | FLOAT\n\t\t\t\t\t | CHAR\n\t\t\t\t\t | STRING\n\t\n\ttipo : INT\n\t\t | FLOAT\n\t\t | CHAR\n\t\t | STRING\n\t\n\tfuncion : funcion_base funcion\n\t\t\t| epsilon\n\t\n\tfuncion_base : FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque\n\t\n\tfuncion_prime : tipo ID\n\t\t\t\t  | tipo ID COMMA funcion_prime\n\t\n\tfuncion_ident : VOID ID\n \t\t\t\t  | INT ID\n\t\t\t\t  | FLOAT ID\n\t\t\t\t  | CHAR ID\n\t\t\t\t  | STRING ID\n\t\n\tvariable : ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET\n\t\t\t | ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET\n\t\t\t | ID O_ABRACKET exp C_ABRACKET\n\t\t\t | ID \n\t\n\testatuto : asignacion SEMICOLON\n\t\t\t | llamada SEMICOLON\n\t\t\t | retorno SEMICOLON\n\t\t\t | lectura SEMICOLON\n\t\t\t | escritura SEMICOLON\n\t\t\t | decision\n\t\t\t | while\n\t\t\t | for\n\t\n\tasignacion : variable ASSIGN asignacion_expr\n\t\n\tasignacion_expr : expr\n\t\n\tllamada : ID O_PARENTHESIS llamada_prime C_PARENTHESIS\n\t\n\tllamada_prime : exp\n\t\t\t\t  | exp COMMA llamada_prime\n\t\n\tretorno : RETURN O_PARENTHESIS expr C_PARENTHESIS\n\t\n\tlectura : READ O_PARENTHESIS lectura_prime C_PARENTHESIS\n\t\n\tlectura_prime : variable\n\t\t\t\t  | variable COMMA lectura_prime\n\t\n\tescritura : WRITE O_PARENTHESIS escritura_prime C_PARENTHESIS\n\t\n\tescritura_prime : expr\n\t\t\t\t\t| escritura_string\n\t\t\t\t\t| expr COMMA escritura_prime\n\t\t\t\t\t| escritura_string COMMA escritura_prime\n\t\n\tescritura_string : CTE_STRING\n\t\n\tdecision : IF O_PARENTHESIS expr C_PARENTHESIS bloque else\n\t\n\telse : ELSE bloque\n\t\t | epsilon\n\t\n\twhile : WHILE O_PARENTHESIS expr C_PARENTHESIS bloque\n\t\n\tfor : FOR variable ASSIGN exp TO exp bloque\n\t\n\texpr : or\n\t\n\tor : and\n\t   | and OR or\n\t\n\tand : equal\n\t\t| equal AND and\n\t\n\tequal : compare\n\t\t  | compare EQUAL compare\n\t\t  | compare NOT_EQUAL compare\n\t\n\tcompare : exp\n\t\t\t| exp GREATER exp\n\t\t\t| exp LESSER exp\n\t\t\t| exp GREATER_EQUAL exp\n\t\t\t| exp LESSER_EQUAL exp\n\t\n\texp : termino\n\t\t| termino exp_operador exp\n\t\n\texp_operador : PLUS\n\t\t\t\t | MINUS\n\t\n\ttermino : factor\n\t\t\t| factor termino_operador termino\n\t\n\ttermino_operador : TIMES\n\t\t\t\t\t | DIVIDE\n\t\t\t\t\t | MODULE\n\t\n\tfactor : variable\n\t\t   | O_PARENTHESIS expr C_PARENTHESIS\n\t\t   | llamada\n\t\t   | cte\n\t\t   | PLUS cte\n\t\t   | MINUS cte\n\t\n\tcte : CTE_INT\n\t\t| CTE_FLOAT\n\t\n\tepsilon :\n\t'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,29,73,],[0,-1,-3,]),'ID':([2,8,21,22,23,24,25,27,30,46,53,54,55,63,66,67,68,69,70,73,75,76,77,78,79,80,81,82,83,84,85,86,87,103,123,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,147,151,153,154,173,177,178,179,182,184,188,189,191,],[3,16,33,34,35,36,37,16,57,57,-44,-45,-46,89,91,-21,-22,-23,-24,-3,-39,-40,-41,-42,-43,108,108,108,108,89,108,108,108,108,108,108,108,108,108,108,108,108,108,108,-82,-83,108,-86,-87,-88,108,89,108,108,108,-97,-65,108,-62,-64,-63,-66,108,]),'SEMICOLON':([3,38,39,40,41,42,48,49,50,51,52,93,94,95,96,97,98,99,100,101,102,104,105,108,109,110,144,145,146,148,149,150,152,161,162,163,164,165,166,167,168,169,170,171,187,193,],[4,71,-17,-18,-19,-20,75,76,77,78,79,-89,-47,-48,-67,-68,-70,-72,-75,-80,-84,-91,-92,-38,-95,-96,-93,-94,-49,-37,-52,-53,-56,-69,-71,-73,-74,-76,-77,-78,-79,-81,-85,-90,-36,-35,]),'LET':([4,7,71,90,],[8,8,-10,8,]),'FUNCTION':([5,6,7,10,13,71,73,158,],[12,-7,-8,12,-9,-10,-3,-27,]),'MAIN':([5,6,7,9,10,11,13,19,71,73,158,],[-97,-7,-8,18,-97,-26,-9,-25,-10,-3,-27,]),'O_CBRACKET':([7,13,17,64,71,93,101,102,104,105,108,109,110,124,125,144,145,146,148,155,156,169,170,171,183,185,187,193,],[-8,-9,30,-2,-10,-89,-80,-84,-91,-92,-38,-95,-96,30,-6,-93,-94,-49,-37,30,30,-81,-85,-90,30,30,-36,-35,]),'VOID':([12,],[21,]),'INT':([12,26,32,126,],[22,39,67,67,]),'FLOAT':([12,26,32,126,],[23,40,68,68,]),'CHAR':([12,26,32,126,],[24,41,69,69,]),'STRING':([12,26,32,126,],[25,42,70,70,]),'COLON':([14,15,16,43,72,160,190,],[26,-11,-16,-12,-15,-14,-13,]),'COMMA':([15,16,72,89,91,93,96,97,98,99,100,101,102,104,105,108,109,110,112,116,118,119,120,144,145,146,148,160,161,162,163,164,165,166,167,168,169,170,171,187,190,193,],[27,-16,-15,-38,126,-89,-67,-68,-70,-72,-75,-80,-84,-91,-92,-38,-95,-96,147,151,153,154,-61,-93,-94,-49,-37,-14,-69,-71,-73,-74,-76,-77,-78,-79,-81,-85,-90,-36,-13,-35,]),'O_ABRACKET':([16,57,72,89,108,148,160,187,],[28,82,92,82,82,173,180,191,]),'O_PARENTHESIS':([18,20,33,34,35,36,37,57,58,59,60,61,62,80,81,82,83,85,86,87,103,108,123,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,147,153,154,173,179,191,],[31,32,-30,-31,-32,-33,-34,81,83,84,85,86,87,103,103,103,103,103,103,103,103,81,103,103,103,103,103,103,103,103,103,103,-82,-83,103,-86,-87,-88,103,103,103,103,103,103,]),'CTE_INT':([28,80,81,82,83,85,86,87,92,103,106,107,123,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,147,153,154,173,179,180,191,],[44,109,109,109,109,109,109,109,127,109,109,109,109,109,109,109,109,109,109,109,109,109,-82,-83,109,-86,-87,-88,109,109,109,109,109,186,109,]),'C_CBRACKET':([30,45,46,47,53,54,55,73,74,75,76,77,78,79,177,178,182,184,188,189,],[-97,73,-97,-5,-44,-45,-46,-3,-4,-39,-40,-41,-42,-43,-97,-65,-62,-64,-63,-66,]),'RETURN':([30,46,53,54,55,73,75,76,77,78,79,177,178,182,184,188,189,],[58,58,-44,-45,-46,-3,-39,-40,-41,-42,-43,-97,-65,-62,-64,-63,-66,]),'READ':([30,46,53,54,55,73,75,76,77,78,79,177,178,182,184,188,189,],[59,59,-44,-45,-46,-3,-39,-40,-41,-42,-43,-97,-65,-62,-64,-63,-66,]),'WRITE':([30,46,53,54,55,73,75,76,77,78,79,177,178,182,184,188,189,],[60,60,-44,-45,-46,-3,-39,-40,-41,-42,-43,-97,-65,-62,-64,-63,-66,]),'IF':([30,46,53,54,55,73,75,76,77,78,79,177,178,182,184,188,189,],[61,61,-44,-45,-46,-3,-39,-40,-41,-42,-43,-97,-65,-62,-64,-63,-66,]),'WHILE':([30,46,53,54,55,73,75,76,77,78,79,177,178,182,184,188,189,],[62,62,-44,-45,-46,-3,-39,-40,-41,-42,-43,-97,-65,-62,-64,-63,-66,]),'FOR':([30,46,53,54,55,73,75,76,77,78,79,177,178,182,184,188,189,],[63,63,-44,-45,-46,-3,-39,-40,-41,-42,-43,-97,-65,-62,-64,-63,-66,]),'C_PARENTHESIS':([31,65,89,91,93,96,97,98,99,100,101,102,104,105,108,109,110,111,112,114,115,116,117,118,119,120,121,122,143,144,145,146,148,159,161,162,163,164,165,166,167,168,169,170,171,172,174,175,176,187,193,],[64,90,-38,-28,-89,-67,-68,-70,-72,-75,-80,-84,-91,-92,-38,-95,-96,146,-50,149,150,-54,152,-57,-58,-61,155,156,171,-93,-94,-49,-37,-29,-69,-71,-73,-74,-76,-77,-78,-79,-81,-85,-90,-51,-55,-59,-60,-36,-35,]),'C_ABRACKET':([44,93,101,102,104,105,108,109,110,113,127,144,145,146,148,169,170,171,181,186,187,192,193,],[72,-89,-80,-84,-91,-92,-38,-95,-96,148,160,-93,-94,-49,-37,-81,-85,-90,187,190,-36,193,-35,]),'ASSIGN':([56,57,88,89,148,187,193,],[80,-38,123,-38,-37,-36,-35,]),'ELSE':([73,177,],[-3,183,]),'PLUS':([80,81,82,83,85,86,87,93,101,102,103,104,105,108,109,110,123,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,144,145,146,147,148,153,154,170,171,173,179,187,191,193,],[106,106,106,106,106,106,106,-89,137,-84,106,-91,-92,-38,-95,-96,106,106,106,106,106,106,106,106,106,106,-82,-83,106,-86,-87,-88,-93,-94,-49,106,-37,106,106,-85,-90,106,106,-36,106,-35,]),'MINUS':([80,81,82,83,85,86,87,93,101,102,103,104,105,108,109,110,123,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,144,145,146,147,148,153,154,170,171,173,179,187,191,193,],[107,107,107,107,107,107,107,-89,138,-84,107,-91,-92,-38,-95,-96,107,107,107,107,107,107,107,107,107,107,-82,-83,107,-86,-87,-88,-93,-94,-49,107,-37,107,107,-85,-90,107,107,-36,107,-35,]),'CTE_FLOAT':([80,81,82,83,85,86,87,103,106,107,123,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,147,153,154,173,179,191,],[110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,-82,-83,110,-86,-87,-88,110,110,110,110,110,110,]),'CTE_STRING':([85,153,154,],[120,120,120,]),'TIMES':([93,102,104,105,108,109,110,144,145,146,148,171,187,193,],[-89,140,-91,-92,-38,-95,-96,-93,-94,-49,-37,-90,-36,-35,]),'DIVIDE':([93,102,104,105,108,109,110,144,145,146,148,171,187,193,],[-89,141,-91,-92,-38,-95,-96,-93,-94,-49,-37,-90,-36,-35,]),'MODULE':([93,102,104,105,108,109,110,144,145,146,148,171,187,193,],[-89,142,-91,-92,-38,-95,-96,-93,-94,-49,-37,-90,-36,-35,]),'GREATER':([93,100,101,102,104,105,108,109,110,144,145,146,148,169,170,171,187,193,],[-89,132,-80,-84,-91,-92,-38,-95,-96,-93,-94,-49,-37,-81,-85,-90,-36,-35,]),'LESSER':([93,100,101,102,104,105,108,109,110,144,145,146,148,169,170,171,187,193,],[-89,133,-80,-84,-91,-92,-38,-95,-96,-93,-94,-49,-37,-81,-85,-90,-36,-35,]),'GREATER_EQUAL':([93,100,101,102,104,105,108,109,110,144,145,146,148,169,170,171,187,193,],[-89,134,-80,-84,-91,-92,-38,-95,-96,-93,-94,-49,-37,-81,-85,-90,-36,-35,]),'LESSER_EQUAL':([93,100,101,102,104,105,108,109,110,144,145,146,148,169,170,171,187,193,],[-89,135,-80,-84,-91,-92,-38,-95,-96,-93,-94,-49,-37,-81,-85,-90,-36,-35,]),'EQUAL':([93,99,100,101,102,104,105,108,109,110,144,145,146,148,165,166,167,168,169,170,171,187,193,],[-89,130,-75,-80,-84,-91,-92,-38,-95,-96,-93,-94,-49,-37,-76,-77,-78,-79,-81,-85,-90,-36,-35,]),'NOT_EQUAL':([93,99,100,101,102,104,105,108,109,110,144,145,146,148,165,166,167,168,169,170,171,187,193,],[-89,131,-75,-80,-84,-91,-92,-38,-95,-96,-93,-94,-49,-37,-76,-77,-78,-79,-81,-85,-90,-36,-35,]),'AND':([93,98,99,100,101,102,104,105,108,109,110,144,145,146,148,163,164,165,166,167,168,169,170,171,187,193,],[-89,129,-72,-75,-80,-84,-91,-92,-38,-95,-96,-93,-94,-49,-37,-73,-74,-76,-77,-78,-79,-81,-85,-90,-36,-35,]),'OR':([93,97,98,99,100,101,102,104,105,108,109,110,144,145,146,148,162,163,164,165,166,167,168,169,170,171,187,193,],[-89,128,-70,-72,-75,-80,-84,-91,-92,-38,-95,-96,-93,-94,-49,-37,-71,-73,-74,-76,-77,-78,-79,-81,-85,-90,-36,-35,]),'TO':([93,101,102,104,105,108,109,110,144,145,146,148,157,169,170,171,187,193,],[-89,-80,-84,-91,-92,-38,-95,-96,-93,-94,-49,-37,179,-81,-85,-90,-36,-35,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'declaracion_global':([4,],[5,]),'declaracion':([4,7,90,],[6,13,125,]),'declaracion_base':([4,7,90,],[7,7,7,]),'funcion':([5,10,],[9,19,]),'funcion_base':([5,10,],[10,10,]),'epsilon':([5,10,30,46,177,],[11,11,47,47,184,]),'declaracion_prime':([8,27,],[14,43,]),'declaracion_variable':([8,27,],[15,15,]),'main':([9,],[17,]),'funcion_ident':([12,],[20,]),'bloque':([17,124,155,156,183,185,],[29,158,177,178,188,189,]),'declaracion_tipo':([26,],[38,]),'bloque_prime':([30,46,],[45,74,]),'estatuto':([30,46,],[46,46,]),'asignacion':([30,46,],[48,48,]),'llamada':([30,46,80,81,82,83,85,86,87,103,123,128,129,130,131,132,133,134,135,136,139,147,153,154,173,179,191,],[49,49,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,]),'retorno':([30,46,],[50,50,]),'lectura':([30,46,],[51,51,]),'escritura':([30,46,],[52,52,]),'decision':([30,46,],[53,53,]),'while':([30,46,],[54,54,]),'for':([30,46,],[55,55,]),'variable':([30,46,63,80,81,82,83,84,85,86,87,103,123,128,129,130,131,132,133,134,135,136,139,147,151,153,154,173,179,191,],[56,56,88,93,93,93,93,116,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,116,93,93,93,93,93,]),'funcion_prime':([32,126,],[65,159,]),'tipo':([32,126,],[66,66,]),'asignacion_expr':([80,],[94,]),'expr':([80,83,85,86,87,103,153,154,],[95,114,118,121,122,143,118,118,]),'or':([80,83,85,86,87,103,128,153,154,],[96,96,96,96,96,96,161,96,96,]),'and':([80,83,85,86,87,103,128,129,153,154,],[97,97,97,97,97,97,97,162,97,97,]),'equal':([80,83,85,86,87,103,128,129,153,154,],[98,98,98,98,98,98,98,98,98,98,]),'compare':([80,83,85,86,87,103,128,129,130,131,153,154,],[99,99,99,99,99,99,99,99,163,164,99,99,]),'exp':([80,81,82,83,85,86,87,103,123,128,129,130,131,132,133,134,135,136,147,153,154,173,179,191,],[100,112,113,100,100,100,100,100,157,100,100,100,100,165,166,167,168,169,112,100,100,181,185,192,]),'termino':([80,81,82,83,85,86,87,103,123,128,129,130,131,132,133,134,135,136,139,147,153,154,173,179,191,],[101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,170,101,101,101,101,101,101,]),'factor':([80,81,82,83,85,86,87,103,123,128,129,130,131,132,133,134,135,136,139,147,153,154,173,179,191,],[102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,]),'cte':([80,81,82,83,85,86,87,103,106,107,123,128,129,130,131,132,133,134,135,136,139,147,153,154,173,179,191,],[105,105,105,105,105,105,105,105,144,145,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,]),'llamada_prime':([81,147,],[111,172,]),'lectura_prime':([84,151,],[115,174,]),'escritura_prime':([85,153,154,],[117,175,176,]),'escritura_string':([85,153,154,],[119,119,119,]),'declaracion_funcion':([90,],[124,]),'exp_operador':([101,],[136,]),'termino_operador':([102,],[139,]),'else':([177,],[182,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> PROGRAM ID SEMICOLON declaracion_global funcion main bloque','programa',7,'p_programa','Parser.py',9),
  ('main -> MAIN O_PARENTHESIS C_PARENTHESIS','main',3,'p_main','Parser.py',19),
  ('bloque -> O_CBRACKET bloque_prime C_CBRACKET','bloque',3,'p_bloque','Parser.py',28),
  ('bloque_prime -> estatuto bloque_prime','bloque_prime',2,'p_bloque_prime','Parser.py',34),
  ('bloque_prime -> epsilon','bloque_prime',1,'p_bloque_prime','Parser.py',35),
  ('declaracion_funcion -> declaracion','declaracion_funcion',1,'p_declaracion_funcion','Parser.py',42),
  ('declaracion_global -> declaracion','declaracion_global',1,'p_declaracion_global','Parser.py',51),
  ('declaracion -> declaracion_base','declaracion',1,'p_declaracion','Parser.py',59),
  ('declaracion -> declaracion_base declaracion','declaracion',2,'p_declaracion','Parser.py',60),
  ('declaracion_base -> LET declaracion_prime COLON declaracion_tipo SEMICOLON','declaracion_base',5,'p_declaracion_base','Parser.py',66),
  ('declaracion_prime -> declaracion_variable','declaracion_prime',1,'p_declaracion_prime','Parser.py',72),
  ('declaracion_prime -> declaracion_variable COMMA declaracion_prime','declaracion_prime',3,'p_declaracion_prime','Parser.py',73),
  ('declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET','declaracion_variable',10,'p_declaracion_variable','Parser.py',80),
  ('declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET','declaracion_variable',7,'p_declaracion_variable','Parser.py',81),
  ('declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET','declaracion_variable',4,'p_declaracion_variable','Parser.py',82),
  ('declaracion_variable -> ID','declaracion_variable',1,'p_declaracion_variable','Parser.py',83),
  ('declaracion_tipo -> INT','declaracion_tipo',1,'p_declaracion_tipo','Parser.py',102),
  ('declaracion_tipo -> FLOAT','declaracion_tipo',1,'p_declaracion_tipo','Parser.py',103),
  ('declaracion_tipo -> CHAR','declaracion_tipo',1,'p_declaracion_tipo','Parser.py',104),
  ('declaracion_tipo -> STRING','declaracion_tipo',1,'p_declaracion_tipo','Parser.py',105),
  ('tipo -> INT','tipo',1,'p_tipo','Parser.py',119),
  ('tipo -> FLOAT','tipo',1,'p_tipo','Parser.py',120),
  ('tipo -> CHAR','tipo',1,'p_tipo','Parser.py',121),
  ('tipo -> STRING','tipo',1,'p_tipo','Parser.py',122),
  ('funcion -> funcion_base funcion','funcion',2,'p_funcion','Parser.py',129),
  ('funcion -> epsilon','funcion',1,'p_funcion','Parser.py',130),
  ('funcion_base -> FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque','funcion_base',7,'p_funcion_base','Parser.py',136),
  ('funcion_prime -> tipo ID','funcion_prime',2,'p_funcion_prime','Parser.py',142),
  ('funcion_prime -> tipo ID COMMA funcion_prime','funcion_prime',4,'p_funcion_prime','Parser.py',143),
  ('funcion_ident -> VOID ID','funcion_ident',2,'p_funcion_ident','Parser.py',149),
  ('funcion_ident -> INT ID','funcion_ident',2,'p_funcion_ident','Parser.py',150),
  ('funcion_ident -> FLOAT ID','funcion_ident',2,'p_funcion_ident','Parser.py',151),
  ('funcion_ident -> CHAR ID','funcion_ident',2,'p_funcion_ident','Parser.py',152),
  ('funcion_ident -> STRING ID','funcion_ident',2,'p_funcion_ident','Parser.py',153),
  ('variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET','variable',10,'p_variable','Parser.py',161),
  ('variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET','variable',7,'p_variable','Parser.py',162),
  ('variable -> ID O_ABRACKET exp C_ABRACKET','variable',4,'p_variable','Parser.py',163),
  ('variable -> ID','variable',1,'p_variable','Parser.py',164),
  ('estatuto -> asignacion SEMICOLON','estatuto',2,'p_estatuto','Parser.py',181),
  ('estatuto -> llamada SEMICOLON','estatuto',2,'p_estatuto','Parser.py',182),
  ('estatuto -> retorno SEMICOLON','estatuto',2,'p_estatuto','Parser.py',183),
  ('estatuto -> lectura SEMICOLON','estatuto',2,'p_estatuto','Parser.py',184),
  ('estatuto -> escritura SEMICOLON','estatuto',2,'p_estatuto','Parser.py',185),
  ('estatuto -> decision','estatuto',1,'p_estatuto','Parser.py',186),
  ('estatuto -> while','estatuto',1,'p_estatuto','Parser.py',187),
  ('estatuto -> for','estatuto',1,'p_estatuto','Parser.py',188),
  ('asignacion -> variable ASSIGN asignacion_expr','asignacion',3,'p_asignacion','Parser.py',195),
  ('asignacion_expr -> expr','asignacion_expr',1,'p_asignacion_expr','Parser.py',201),
  ('llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS','llamada',4,'p_llamada','Parser.py',216),
  ('llamada_prime -> exp','llamada_prime',1,'p_llamada_prime','Parser.py',222),
  ('llamada_prime -> exp COMMA llamada_prime','llamada_prime',3,'p_llamada_prime','Parser.py',223),
  ('retorno -> RETURN O_PARENTHESIS expr C_PARENTHESIS','retorno',4,'p_retorno','Parser.py',231),
  ('lectura -> READ O_PARENTHESIS lectura_prime C_PARENTHESIS','lectura',4,'p_lectura','Parser.py',238),
  ('lectura_prime -> variable','lectura_prime',1,'p_lectura_prime','Parser.py',244),
  ('lectura_prime -> variable COMMA lectura_prime','lectura_prime',3,'p_lectura_prime','Parser.py',245),
  ('escritura -> WRITE O_PARENTHESIS escritura_prime C_PARENTHESIS','escritura',4,'p_escritura','Parser.py',254),
  ('escritura_prime -> expr','escritura_prime',1,'p_escritura_prime','Parser.py',260),
  ('escritura_prime -> escritura_string','escritura_prime',1,'p_escritura_prime','Parser.py',261),
  ('escritura_prime -> expr COMMA escritura_prime','escritura_prime',3,'p_escritura_prime','Parser.py',262),
  ('escritura_prime -> escritura_string COMMA escritura_prime','escritura_prime',3,'p_escritura_prime','Parser.py',263),
  ('escritura_string -> CTE_STRING','escritura_string',1,'p_escritura_string','Parser.py',269),
  ('decision -> IF O_PARENTHESIS expr C_PARENTHESIS bloque else','decision',6,'p_decision','Parser.py',278),
  ('else -> ELSE bloque','else',2,'p_else','Parser.py',284),
  ('else -> epsilon','else',1,'p_else','Parser.py',285),
  ('while -> WHILE O_PARENTHESIS expr C_PARENTHESIS bloque','while',5,'p_while','Parser.py',292),
  ('for -> FOR variable ASSIGN exp TO exp bloque','for',7,'p_for','Parser.py',299),
  ('expr -> or','expr',1,'p_expr','Parser.py',306),
  ('or -> and','or',1,'p_or','Parser.py',313),
  ('or -> and OR or','or',3,'p_or','Parser.py',314),
  ('and -> equal','and',1,'p_and','Parser.py',321),
  ('and -> equal AND and','and',3,'p_and','Parser.py',322),
  ('equal -> compare','equal',1,'p_equal','Parser.py',329),
  ('equal -> compare EQUAL compare','equal',3,'p_equal','Parser.py',330),
  ('equal -> compare NOT_EQUAL compare','equal',3,'p_equal','Parser.py',331),
  ('compare -> exp','compare',1,'p_compare','Parser.py',338),
  ('compare -> exp GREATER exp','compare',3,'p_compare','Parser.py',339),
  ('compare -> exp LESSER exp','compare',3,'p_compare','Parser.py',340),
  ('compare -> exp GREATER_EQUAL exp','compare',3,'p_compare','Parser.py',341),
  ('compare -> exp LESSER_EQUAL exp','compare',3,'p_compare','Parser.py',342),
  ('exp -> termino','exp',1,'p_exp','Parser.py',349),
  ('exp -> termino exp_operador exp','exp',3,'p_exp','Parser.py',350),
  ('exp_operador -> PLUS','exp_operador',1,'p_exp_operador','Parser.py',379),
  ('exp_operador -> MINUS','exp_operador',1,'p_exp_operador','Parser.py',380),
  ('termino -> factor','termino',1,'p_termino','Parser.py',388),
  ('termino -> factor termino_operador termino','termino',3,'p_termino','Parser.py',389),
  ('termino_operador -> TIMES','termino_operador',1,'p_termino_operador','Parser.py',416),
  ('termino_operador -> DIVIDE','termino_operador',1,'p_termino_operador','Parser.py',417),
  ('termino_operador -> MODULE','termino_operador',1,'p_termino_operador','Parser.py',418),
  ('factor -> variable','factor',1,'p_factor','Parser.py',426),
  ('factor -> O_PARENTHESIS expr C_PARENTHESIS','factor',3,'p_factor','Parser.py',427),
  ('factor -> llamada','factor',1,'p_factor','Parser.py',428),
  ('factor -> cte','factor',1,'p_factor','Parser.py',429),
  ('factor -> PLUS cte','factor',2,'p_factor','Parser.py',430),
  ('factor -> MINUS cte','factor',2,'p_factor','Parser.py',431),
  ('cte -> CTE_INT','cte',1,'p_cte','Parser.py',439),
  ('cte -> CTE_FLOAT','cte',1,'p_cte','Parser.py',440),
  ('epsilon -> <empty>','epsilon',0,'p_epsilon','Parser.py',451),
]
