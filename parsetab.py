
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN CHAR COLON COMMA CTE_CHAR CTE_FLOAT CTE_INT CTE_STRING C_ABRACKET C_CBRACKET C_PARENTHESIS DIVIDE ELSE EQUAL FLOAT FOR FUNCTION GREATER GREATER_EQUAL ID IF INT LESSER LESSER_EQUAL LET MAIN MINUS MODULE NOT_EQUAL OR O_ABRACKET O_CBRACKET O_PARENTHESIS PLUS PROGRAM READ RETURN SEMICOLON STRING TIMES TO VOID WHILE WRITE\n\tprograma : PROGRAM ID SEMICOLON declaracion_global funcion main bloque\n\t\n\tmain : MAIN O_PARENTHESIS C_PARENTHESIS\n\t\n\tbloque : O_CBRACKET bloque_prime C_CBRACKET\n\t\n\tbloque_prime : estatuto bloque_prime\n\t\t\t\t | epsilon\n\t\n\tdeclaracion_funcion : declaracion\n\t\n\tdeclaracion_global : declaracion\n\t\n\tdeclaracion : declaracion_base\n\t\t\t\t| declaracion_base declaracion\n\t\n\tdeclaracion_base : LET declaracion_prime COLON declaracion_tipo SEMICOLON\n\t\n\tdeclaracion_prime : declaracion_variable\n\t\t\t\t\t  | declaracion_variable COMMA declaracion_prime\n\t\n\tdeclaracion_variable : ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET\n\t\t\t\t\t\t | ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET\n\t\t\t\t\t\t | ID O_ABRACKET CTE_INT C_ABRACKET\n\t\t\t\t\t\t | ID \n\t\n\tdeclaracion_tipo : INT\n\t\t\t\t\t | FLOAT\n\t\t\t\t\t | CHAR\n\t\t\t\t\t | STRING\n\t\n\ttipo : INT\n\t\t | FLOAT\n\t\t | CHAR\n\t\t | STRING\n\t\n\tfuncion : funcion_base funcion\n\t\t\t| epsilon\n\t\n\tfuncion_base : FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque\n\t\n\tfuncion_prime : tipo ID\n\t\t\t\t  | tipo ID COMMA funcion_prime\n\t\n\tfuncion_ident : VOID ID\n \t\t\t\t  | INT ID\n\t\t\t\t  | FLOAT ID\n\t\t\t\t  | CHAR ID\n\t\t\t\t  | STRING ID\n\t\n\tvariable : var_array\n\t\t\t | ID \n\t\n\tvar_array : arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket\n\t\t\t  | arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket\n\t\t\t  | arr_id O_ABRACKET exp arr_close_bracket\n\t\n\tarr_id : ID\n\t\n\tarr_close_bracket : C_ABRACKET\n\t\n\tarr_open_bracket : O_ABRACKET\n\t\n\testatuto : asignacion SEMICOLON\n\t\t\t | llamada SEMICOLON\n\t\t\t | retorno SEMICOLON\n\t\t\t | lectura SEMICOLON\n\t\t\t | escritura SEMICOLON\n\t\t\t | decision\n\t\t\t | while\n\t\t\t | for\n\t\n\tasignacion : variable ASSIGN asignacion_expr\n\t\n\tasignacion_expr : expr\n\t\n\tllamada : ID O_PARENTHESIS llamada_prime C_PARENTHESIS\n\t\n\tllamada_prime : exp\n\t\t\t\t  | exp COMMA llamada_prime\n\t\n\tretorno : RETURN O_PARENTHESIS expr C_PARENTHESIS\n\t\n\tlectura : READ O_PARENTHESIS lectura_prime C_PARENTHESIS\n\t\n\tlectura_prime : variable\n\t\t\t\t  | variable COMMA lectura_prime\n\t\n\tescritura : WRITE O_PARENTHESIS escritura_prime C_PARENTHESIS\n\t\n\tescritura_prime : expr\n\t\t\t\t\t| escritura_string\n\t\t\t\t\t| expr COMMA escritura_prime\n\t\t\t\t\t| escritura_string COMMA escritura_prime\n\t\n\tescritura_string : CTE_STRING\n\t\n\tdecision : IF O_PARENTHESIS decision_expr C_PARENTHESIS bloque else\n\t\n\tdecision_expr : expr\n\t\n\telse : else_prime bloque\n\t\t | epsilon\n\t\n\telse_prime : ELSE\n\t\n\twhile : while_prime while_expr bloque\n\t\n\twhile_prime : WHILE\n\t\n\twhile_expr : O_PARENTHESIS expr C_PARENTHESIS\n\t\n\tfor : FOR for_asignacion for_to for_exp bloque\n\t\n\tfor_asignacion : variable ASSIGN for_asignacion_expr\n\t\n\tfor_asignacion_expr : expr\n\t\n\tfor_to : TO\n\t\n\tfor_exp : exp\n\t\n\texpr : or\n\t\n\tor : and\n\t   | and or_operador or\n\t\n\tor_operador : OR\n\t\n\tand : equal\n\t\t| equal and_operador and\n\t\n\tand_operador : AND\n\t\n\tequal : compare\n\t\t  | compare equal_operador compare\n\t\n\tequal_operador : EQUAL\n\t\t\t\t   | NOT_EQUAL\n\t\n\tcompare : exp\n\t\t\t| exp compare_operador exp\n\t\n\tcompare_operador : GREATER\n\t\t\t\t\t | LESSER\n\t\t\t\t\t | GREATER_EQUAL\n\t\t\t\t\t | LESSER_EQUAL\n\t\n\texp : termino\n\t\t| termino exp_operador exp\n\t\n\texp_operador : PLUS\n\t\t\t | MINUS\n\t\n\ttermino : factor\n\t\t\t| factor termino_operador termino\n\t\n\ttermino_operador : TIMES\n\t\t\t\t\t | DIVIDE\n\t\t\t\t\t | MODULE\n\t\n\tfactor : variable\n\t\t   | O_PARENTHESIS expr C_PARENTHESIS\n\t\t   | llamada\n\t\t   | cte\n\t\t   | PLUS cte\n\t\t   | MINUS cte\n\t\n\tcte : CTE_INT\n\t\t| CTE_FLOAT\n\t\n\tepsilon :\n\t'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,29,76,],[0,-1,-3,]),'ID':([2,8,21,22,23,24,25,27,30,46,53,54,55,63,69,70,71,72,73,76,78,79,80,81,82,83,84,85,86,87,88,90,94,108,127,129,130,131,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,160,163,165,166,189,190,191,192,194,196,200,203,],[3,16,33,34,35,36,37,16,57,57,-48,-49,-50,93,96,-21,-22,-23,-24,-3,-43,-44,-45,-46,-47,113,113,113,93,113,113,113,113,113,-71,113,-77,113,113,-82,113,-85,113,-88,-89,113,-92,-93,-94,-95,113,-98,-99,113,-102,-103,-104,113,93,113,113,-113,-74,-42,113,-66,-69,-68,113,]),'SEMICOLON':([3,38,39,40,41,42,48,49,50,51,52,64,98,99,100,101,102,103,104,105,106,107,109,110,113,114,115,157,158,159,161,162,164,173,174,178,179,180,181,182,183,184,201,205,],[4,74,-17,-18,-19,-20,78,79,80,81,82,-35,-105,-51,-52,-79,-80,-83,-86,-90,-96,-100,-107,-108,-36,-111,-112,-109,-110,-53,-56,-57,-60,-39,-41,-81,-84,-87,-91,-97,-101,-106,-38,-37,]),'LET':([4,7,74,95,],[8,8,-10,8,]),'FUNCTION':([5,6,7,10,13,74,76,175,],[12,-7,-8,12,-9,-10,-3,-27,]),'MAIN':([5,6,7,9,10,11,13,19,74,76,175,],[-113,-7,-8,18,-113,-26,-9,-25,-10,-3,-27,]),'O_CBRACKET':([7,13,17,64,67,74,89,98,106,107,109,110,113,114,115,133,134,157,158,159,167,168,169,170,173,174,182,183,184,195,197,201,205,],[-8,-9,30,-35,-2,-10,30,-105,-96,-100,-107,-108,-36,-111,-112,30,-6,-109,-110,-53,30,-73,30,-78,-39,-41,-97,-101,-106,30,-70,-38,-37,]),'VOID':([12,],[21,]),'INT':([12,26,32,135,],[22,39,70,70,]),'FLOAT':([12,26,32,135,],[23,40,71,71,]),'CHAR':([12,26,32,135,],[24,41,72,72,]),'STRING':([12,26,32,135,],[25,42,73,73,]),'COLON':([14,15,16,43,75,177,202,],[26,-11,-16,-12,-15,-14,-13,]),'COMMA':([15,16,64,75,93,96,98,101,102,103,104,105,106,107,109,110,113,114,115,117,120,122,123,124,157,158,159,173,174,177,178,179,180,181,182,183,184,201,202,205,],[27,-16,-35,-15,-36,135,-105,-79,-80,-83,-86,-90,-96,-100,-107,-108,-36,-111,-112,160,163,165,166,-65,-109,-110,-53,-39,-41,-14,-81,-84,-87,-91,-97,-101,-106,-38,-13,-37,]),'O_ABRACKET':([16,57,66,75,93,113,173,174,177,201,],[28,-40,94,97,-40,-40,191,-41,193,191,]),'O_PARENTHESIS':([18,20,33,34,35,36,37,57,58,59,60,61,62,65,83,84,85,87,88,90,94,108,113,129,130,131,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,160,165,166,191,192,203,],[31,32,-30,-31,-32,-33,-34,84,85,86,87,88,90,-72,108,108,108,108,108,108,108,108,84,108,-77,108,108,-82,108,-85,108,-88,-89,108,-92,-93,-94,-95,108,-98,-99,108,-102,-103,-104,108,108,108,-42,108,108,]),'CTE_INT':([28,83,84,85,87,88,90,94,97,108,111,112,129,130,131,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,160,165,166,191,192,193,203,],[44,114,114,114,114,114,114,114,136,114,114,114,114,-77,114,114,-82,114,-85,114,-88,-89,114,-92,-93,-94,-95,114,-98,-99,114,-102,-103,-104,114,114,114,-42,114,199,114,]),'C_CBRACKET':([30,45,46,47,53,54,55,76,77,78,79,80,81,82,127,189,190,194,196,200,],[-113,76,-113,-5,-48,-49,-50,-3,-4,-43,-44,-45,-46,-47,-71,-113,-74,-66,-69,-68,]),'RETURN':([30,46,53,54,55,76,78,79,80,81,82,127,189,190,194,196,200,],[58,58,-48,-49,-50,-3,-43,-44,-45,-46,-47,-71,-113,-74,-66,-69,-68,]),'READ':([30,46,53,54,55,76,78,79,80,81,82,127,189,190,194,196,200,],[59,59,-48,-49,-50,-3,-43,-44,-45,-46,-47,-71,-113,-74,-66,-69,-68,]),'WRITE':([30,46,53,54,55,76,78,79,80,81,82,127,189,190,194,196,200,],[60,60,-48,-49,-50,-3,-43,-44,-45,-46,-47,-71,-113,-74,-66,-69,-68,]),'IF':([30,46,53,54,55,76,78,79,80,81,82,127,189,190,194,196,200,],[61,61,-48,-49,-50,-3,-43,-44,-45,-46,-47,-71,-113,-74,-66,-69,-68,]),'FOR':([30,46,53,54,55,76,78,79,80,81,82,127,189,190,194,196,200,],[63,63,-48,-49,-50,-3,-43,-44,-45,-46,-47,-71,-113,-74,-66,-69,-68,]),'WHILE':([30,46,53,54,55,76,78,79,80,81,82,127,189,190,194,196,200,],[65,65,-48,-49,-50,-3,-43,-44,-45,-46,-47,-71,-113,-74,-66,-69,-68,]),'C_PARENTHESIS':([31,64,68,93,96,98,101,102,103,104,105,106,107,109,110,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,156,157,158,159,173,174,176,178,179,180,181,182,183,184,185,186,187,188,201,205,],[67,-35,95,-36,-28,-105,-79,-80,-83,-86,-90,-96,-100,-107,-108,-36,-111,-112,159,-54,161,162,-58,164,-61,-62,-65,167,-67,168,184,-109,-110,-53,-39,-41,-29,-81,-84,-87,-91,-97,-101,-106,-55,-59,-63,-64,-38,-37,]),'C_ABRACKET':([44,64,98,106,107,109,110,113,114,115,132,136,157,158,159,173,174,182,183,184,198,199,201,204,205,],[75,-35,-105,-96,-100,-107,-108,-36,-111,-112,174,177,-109,-110,-53,-39,-41,-97,-101,-106,174,202,-38,174,-37,]),'ASSIGN':([56,57,64,92,93,173,174,201,205,],[83,-36,-35,131,-36,-39,-41,-38,-37,]),'TIMES':([64,98,107,109,110,113,114,115,157,158,159,173,174,184,201,205,],[-35,-105,153,-107,-108,-36,-111,-112,-109,-110,-53,-39,-41,-106,-38,-37,]),'DIVIDE':([64,98,107,109,110,113,114,115,157,158,159,173,174,184,201,205,],[-35,-105,154,-107,-108,-36,-111,-112,-109,-110,-53,-39,-41,-106,-38,-37,]),'MODULE':([64,98,107,109,110,113,114,115,157,158,159,173,174,184,201,205,],[-35,-105,155,-107,-108,-36,-111,-112,-109,-110,-53,-39,-41,-106,-38,-37,]),'PLUS':([64,83,84,85,87,88,90,94,98,106,107,108,109,110,113,114,115,129,130,131,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,157,158,159,160,165,166,173,174,183,184,191,192,201,203,205,],[-35,111,111,111,111,111,111,111,-105,150,-100,111,-107,-108,-36,-111,-112,111,-77,111,111,-82,111,-85,111,-88,-89,111,-92,-93,-94,-95,111,-98,-99,111,-102,-103,-104,-109,-110,-53,111,111,111,-39,-41,-101,-106,-42,111,-38,111,-37,]),'MINUS':([64,83,84,85,87,88,90,94,98,106,107,108,109,110,113,114,115,129,130,131,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,157,158,159,160,165,166,173,174,183,184,191,192,201,203,205,],[-35,112,112,112,112,112,112,112,-105,151,-100,112,-107,-108,-36,-111,-112,112,-77,112,112,-82,112,-85,112,-88,-89,112,-92,-93,-94,-95,112,-98,-99,112,-102,-103,-104,-109,-110,-53,112,112,112,-39,-41,-101,-106,-42,112,-38,112,-37,]),'GREATER':([64,98,105,106,107,109,110,113,114,115,157,158,159,173,174,182,183,184,201,205,],[-35,-105,145,-96,-100,-107,-108,-36,-111,-112,-109,-110,-53,-39,-41,-97,-101,-106,-38,-37,]),'LESSER':([64,98,105,106,107,109,110,113,114,115,157,158,159,173,174,182,183,184,201,205,],[-35,-105,146,-96,-100,-107,-108,-36,-111,-112,-109,-110,-53,-39,-41,-97,-101,-106,-38,-37,]),'GREATER_EQUAL':([64,98,105,106,107,109,110,113,114,115,157,158,159,173,174,182,183,184,201,205,],[-35,-105,147,-96,-100,-107,-108,-36,-111,-112,-109,-110,-53,-39,-41,-97,-101,-106,-38,-37,]),'LESSER_EQUAL':([64,98,105,106,107,109,110,113,114,115,157,158,159,173,174,182,183,184,201,205,],[-35,-105,148,-96,-100,-107,-108,-36,-111,-112,-109,-110,-53,-39,-41,-97,-101,-106,-38,-37,]),'EQUAL':([64,98,104,105,106,107,109,110,113,114,115,157,158,159,173,174,181,182,183,184,201,205,],[-35,-105,142,-90,-96,-100,-107,-108,-36,-111,-112,-109,-110,-53,-39,-41,-91,-97,-101,-106,-38,-37,]),'NOT_EQUAL':([64,98,104,105,106,107,109,110,113,114,115,157,158,159,173,174,181,182,183,184,201,205,],[-35,-105,143,-90,-96,-100,-107,-108,-36,-111,-112,-109,-110,-53,-39,-41,-91,-97,-101,-106,-38,-37,]),'AND':([64,98,103,104,105,106,107,109,110,113,114,115,157,158,159,173,174,180,181,182,183,184,201,205,],[-35,-105,140,-86,-90,-96,-100,-107,-108,-36,-111,-112,-109,-110,-53,-39,-41,-87,-91,-97,-101,-106,-38,-37,]),'OR':([64,98,102,103,104,105,106,107,109,110,113,114,115,157,158,159,173,174,179,180,181,182,183,184,201,205,],[-35,-105,138,-83,-86,-90,-96,-100,-107,-108,-36,-111,-112,-109,-110,-53,-39,-41,-84,-87,-91,-97,-101,-106,-38,-37,]),'TO':([64,91,98,101,102,103,104,105,106,107,109,110,113,114,115,157,158,159,171,172,173,174,178,179,180,181,182,183,184,201,205,],[-35,130,-105,-79,-80,-83,-86,-90,-96,-100,-107,-108,-36,-111,-112,-109,-110,-53,-75,-76,-39,-41,-81,-84,-87,-91,-97,-101,-106,-38,-37,]),'ELSE':([76,189,],[-3,197,]),'CTE_FLOAT':([83,84,85,87,88,90,94,108,111,112,129,130,131,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,160,165,166,191,192,203,],[115,115,115,115,115,115,115,115,115,115,115,-77,115,115,-82,115,-85,115,-88,-89,115,-92,-93,-94,-95,115,-98,-99,115,-102,-103,-104,115,115,115,-42,115,115,]),'CTE_STRING':([87,165,166,],[124,124,124,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'declaracion_global':([4,],[5,]),'declaracion':([4,7,95,],[6,13,134,]),'declaracion_base':([4,7,95,],[7,7,7,]),'funcion':([5,10,],[9,19,]),'funcion_base':([5,10,],[10,10,]),'epsilon':([5,10,30,46,189,],[11,11,47,47,196,]),'declaracion_prime':([8,27,],[14,43,]),'declaracion_variable':([8,27,],[15,15,]),'main':([9,],[17,]),'funcion_ident':([12,],[20,]),'bloque':([17,89,133,167,169,195,],[29,127,175,189,190,200,]),'declaracion_tipo':([26,],[38,]),'bloque_prime':([30,46,],[45,77,]),'estatuto':([30,46,],[46,46,]),'asignacion':([30,46,],[48,48,]),'llamada':([30,46,83,84,85,87,88,90,94,108,129,131,137,139,141,144,149,152,160,165,166,192,203,],[49,49,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,]),'retorno':([30,46,],[50,50,]),'lectura':([30,46,],[51,51,]),'escritura':([30,46,],[52,52,]),'decision':([30,46,],[53,53,]),'while':([30,46,],[54,54,]),'for':([30,46,],[55,55,]),'variable':([30,46,63,83,84,85,86,87,88,90,94,108,129,131,137,139,141,144,149,152,160,163,165,166,192,203,],[56,56,92,98,98,98,120,98,98,98,98,98,98,98,98,98,98,98,98,98,98,120,98,98,98,98,]),'while_prime':([30,46,],[62,62,]),'var_array':([30,46,63,83,84,85,86,87,88,90,94,108,129,131,137,139,141,144,149,152,160,163,165,166,192,203,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'arr_id':([30,46,63,83,84,85,86,87,88,90,94,108,129,131,137,139,141,144,149,152,160,163,165,166,192,203,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'funcion_prime':([32,135,],[68,176,]),'tipo':([32,135,],[69,69,]),'while_expr':([62,],[89,]),'for_asignacion':([63,],[91,]),'asignacion_expr':([83,],[99,]),'expr':([83,85,87,88,90,108,131,165,166,],[100,118,122,126,128,156,172,122,122,]),'or':([83,85,87,88,90,108,131,137,165,166,],[101,101,101,101,101,101,101,178,101,101,]),'and':([83,85,87,88,90,108,131,137,139,165,166,],[102,102,102,102,102,102,102,102,179,102,102,]),'equal':([83,85,87,88,90,108,131,137,139,165,166,],[103,103,103,103,103,103,103,103,103,103,103,]),'compare':([83,85,87,88,90,108,131,137,139,141,165,166,],[104,104,104,104,104,104,104,104,104,180,104,104,]),'exp':([83,84,85,87,88,90,94,108,129,131,137,139,141,144,149,160,165,166,192,203,],[105,117,105,105,105,105,132,105,170,105,105,105,105,181,182,117,105,105,198,204,]),'termino':([83,84,85,87,88,90,94,108,129,131,137,139,141,144,149,152,160,165,166,192,203,],[106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,183,106,106,106,106,106,]),'factor':([83,84,85,87,88,90,94,108,129,131,137,139,141,144,149,152,160,165,166,192,203,],[107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,]),'cte':([83,84,85,87,88,90,94,108,111,112,129,131,137,139,141,144,149,152,160,165,166,192,203,],[110,110,110,110,110,110,110,110,157,158,110,110,110,110,110,110,110,110,110,110,110,110,110,]),'llamada_prime':([84,160,],[116,185,]),'lectura_prime':([86,163,],[119,186,]),'escritura_prime':([87,165,166,],[121,187,188,]),'escritura_string':([87,165,166,],[123,123,123,]),'decision_expr':([88,],[125,]),'for_to':([91,],[129,]),'declaracion_funcion':([95,],[133,]),'or_operador':([102,],[137,]),'and_operador':([103,],[139,]),'equal_operador':([104,],[141,]),'compare_operador':([105,],[144,]),'exp_operador':([106,],[149,]),'termino_operador':([107,],[152,]),'for_exp':([129,],[169,]),'for_asignacion_expr':([131,],[171,]),'arr_close_bracket':([132,198,204,],[173,201,205,]),'arr_open_bracket':([173,201,],[192,203,]),'else':([189,],[194,]),'else_prime':([189,],[195,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> PROGRAM ID SEMICOLON declaracion_global funcion main bloque','programa',7,'p_programa','Parser.py',10),
  ('main -> MAIN O_PARENTHESIS C_PARENTHESIS','main',3,'p_main','Parser.py',25),
  ('bloque -> O_CBRACKET bloque_prime C_CBRACKET','bloque',3,'p_bloque','Parser.py',38),
  ('bloque_prime -> estatuto bloque_prime','bloque_prime',2,'p_bloque_prime','Parser.py',44),
  ('bloque_prime -> epsilon','bloque_prime',1,'p_bloque_prime','Parser.py',45),
  ('declaracion_funcion -> declaracion','declaracion_funcion',1,'p_declaracion_funcion','Parser.py',52),
  ('declaracion_global -> declaracion','declaracion_global',1,'p_declaracion_global','Parser.py',61),
  ('declaracion -> declaracion_base','declaracion',1,'p_declaracion','Parser.py',69),
  ('declaracion -> declaracion_base declaracion','declaracion',2,'p_declaracion','Parser.py',70),
  ('declaracion_base -> LET declaracion_prime COLON declaracion_tipo SEMICOLON','declaracion_base',5,'p_declaracion_base','Parser.py',76),
  ('declaracion_prime -> declaracion_variable','declaracion_prime',1,'p_declaracion_prime','Parser.py',82),
  ('declaracion_prime -> declaracion_variable COMMA declaracion_prime','declaracion_prime',3,'p_declaracion_prime','Parser.py',83),
  ('declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET','declaracion_variable',10,'p_declaracion_variable','Parser.py',90),
  ('declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET','declaracion_variable',7,'p_declaracion_variable','Parser.py',91),
  ('declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET','declaracion_variable',4,'p_declaracion_variable','Parser.py',92),
  ('declaracion_variable -> ID','declaracion_variable',1,'p_declaracion_variable','Parser.py',93),
  ('declaracion_tipo -> INT','declaracion_tipo',1,'p_declaracion_tipo','Parser.py',113),
  ('declaracion_tipo -> FLOAT','declaracion_tipo',1,'p_declaracion_tipo','Parser.py',114),
  ('declaracion_tipo -> CHAR','declaracion_tipo',1,'p_declaracion_tipo','Parser.py',115),
  ('declaracion_tipo -> STRING','declaracion_tipo',1,'p_declaracion_tipo','Parser.py',116),
  ('tipo -> INT','tipo',1,'p_tipo','Parser.py',130),
  ('tipo -> FLOAT','tipo',1,'p_tipo','Parser.py',131),
  ('tipo -> CHAR','tipo',1,'p_tipo','Parser.py',132),
  ('tipo -> STRING','tipo',1,'p_tipo','Parser.py',133),
  ('funcion -> funcion_base funcion','funcion',2,'p_funcion','Parser.py',140),
  ('funcion -> epsilon','funcion',1,'p_funcion','Parser.py',141),
  ('funcion_base -> FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque','funcion_base',7,'p_funcion_base','Parser.py',147),
  ('funcion_prime -> tipo ID','funcion_prime',2,'p_funcion_prime','Parser.py',153),
  ('funcion_prime -> tipo ID COMMA funcion_prime','funcion_prime',4,'p_funcion_prime','Parser.py',154),
  ('funcion_ident -> VOID ID','funcion_ident',2,'p_funcion_ident','Parser.py',160),
  ('funcion_ident -> INT ID','funcion_ident',2,'p_funcion_ident','Parser.py',161),
  ('funcion_ident -> FLOAT ID','funcion_ident',2,'p_funcion_ident','Parser.py',162),
  ('funcion_ident -> CHAR ID','funcion_ident',2,'p_funcion_ident','Parser.py',163),
  ('funcion_ident -> STRING ID','funcion_ident',2,'p_funcion_ident','Parser.py',164),
  ('variable -> var_array','variable',1,'p_variable','Parser.py',172),
  ('variable -> ID','variable',1,'p_variable','Parser.py',173),
  ('var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket','var_array',10,'p_var_array','Parser.py',193),
  ('var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket','var_array',7,'p_var_array','Parser.py',194),
  ('var_array -> arr_id O_ABRACKET exp arr_close_bracket','var_array',4,'p_var_array','Parser.py',195),
  ('arr_id -> ID','arr_id',1,'p_arr_id','Parser.py',211),
  ('arr_close_bracket -> C_ABRACKET','arr_close_bracket',1,'p_arr_close_bracket','Parser.py',232),
  ('arr_open_bracket -> O_ABRACKET','arr_open_bracket',1,'p_arr_open_bracket','Parser.py',255),
  ('estatuto -> asignacion SEMICOLON','estatuto',2,'p_estatuto','Parser.py',265),
  ('estatuto -> llamada SEMICOLON','estatuto',2,'p_estatuto','Parser.py',266),
  ('estatuto -> retorno SEMICOLON','estatuto',2,'p_estatuto','Parser.py',267),
  ('estatuto -> lectura SEMICOLON','estatuto',2,'p_estatuto','Parser.py',268),
  ('estatuto -> escritura SEMICOLON','estatuto',2,'p_estatuto','Parser.py',269),
  ('estatuto -> decision','estatuto',1,'p_estatuto','Parser.py',270),
  ('estatuto -> while','estatuto',1,'p_estatuto','Parser.py',271),
  ('estatuto -> for','estatuto',1,'p_estatuto','Parser.py',272),
  ('asignacion -> variable ASSIGN asignacion_expr','asignacion',3,'p_asignacion','Parser.py',279),
  ('asignacion_expr -> expr','asignacion_expr',1,'p_asignacion_expr','Parser.py',285),
  ('llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS','llamada',4,'p_llamada','Parser.py',304),
  ('llamada_prime -> exp','llamada_prime',1,'p_llamada_prime','Parser.py',310),
  ('llamada_prime -> exp COMMA llamada_prime','llamada_prime',3,'p_llamada_prime','Parser.py',311),
  ('retorno -> RETURN O_PARENTHESIS expr C_PARENTHESIS','retorno',4,'p_retorno','Parser.py',319),
  ('lectura -> READ O_PARENTHESIS lectura_prime C_PARENTHESIS','lectura',4,'p_lectura','Parser.py',326),
  ('lectura_prime -> variable','lectura_prime',1,'p_lectura_prime','Parser.py',332),
  ('lectura_prime -> variable COMMA lectura_prime','lectura_prime',3,'p_lectura_prime','Parser.py',333),
  ('escritura -> WRITE O_PARENTHESIS escritura_prime C_PARENTHESIS','escritura',4,'p_escritura','Parser.py',345),
  ('escritura_prime -> expr','escritura_prime',1,'p_escritura_prime','Parser.py',351),
  ('escritura_prime -> escritura_string','escritura_prime',1,'p_escritura_prime','Parser.py',352),
  ('escritura_prime -> expr COMMA escritura_prime','escritura_prime',3,'p_escritura_prime','Parser.py',353),
  ('escritura_prime -> escritura_string COMMA escritura_prime','escritura_prime',3,'p_escritura_prime','Parser.py',354),
  ('escritura_string -> CTE_STRING','escritura_string',1,'p_escritura_string','Parser.py',365),
  ('decision -> IF O_PARENTHESIS decision_expr C_PARENTHESIS bloque else','decision',6,'p_decision','Parser.py',378),
  ('decision_expr -> expr','decision_expr',1,'p_decision_expr','Parser.py',384),
  ('else -> else_prime bloque','else',2,'p_else','Parser.py',402),
  ('else -> epsilon','else',1,'p_else','Parser.py',403),
  ('else_prime -> ELSE','else_prime',1,'p_else_prime','Parser.py',410),
  ('while -> while_prime while_expr bloque','while',3,'p_while','Parser.py',425),
  ('while_prime -> WHILE','while_prime',1,'p_while_prime','Parser.py',439),
  ('while_expr -> O_PARENTHESIS expr C_PARENTHESIS','while_expr',3,'p_while_expr','Parser.py',446),
  ('for -> FOR for_asignacion for_to for_exp bloque','for',5,'p_for','Parser.py',464),
  ('for_asignacion -> variable ASSIGN for_asignacion_expr','for_asignacion',3,'p_for_asignacion','Parser.py',490),
  ('for_asignacion_expr -> expr','for_asignacion_expr',1,'p_for_asignacion_expr','Parser.py',496),
  ('for_to -> TO','for_to',1,'p_for_to','Parser.py',516),
  ('for_exp -> exp','for_exp',1,'p_for_exp','Parser.py',523),
  ('expr -> or','expr',1,'p_expr','Parser.py',555),
  ('or -> and','or',1,'p_or','Parser.py',562),
  ('or -> and or_operador or','or',3,'p_or','Parser.py',563),
  ('or_operador -> OR','or_operador',1,'p_or_operador','Parser.py',597),
  ('and -> equal','and',1,'p_and','Parser.py',605),
  ('and -> equal and_operador and','and',3,'p_and','Parser.py',606),
  ('and_operador -> AND','and_operador',1,'p_and_operador','Parser.py',640),
  ('equal -> compare','equal',1,'p_equal','Parser.py',648),
  ('equal -> compare equal_operador compare','equal',3,'p_equal','Parser.py',649),
  ('equal_operador -> EQUAL','equal_operador',1,'p_equal_operador','Parser.py',683),
  ('equal_operador -> NOT_EQUAL','equal_operador',1,'p_equal_operador','Parser.py',684),
  ('compare -> exp','compare',1,'p_compare','Parser.py',692),
  ('compare -> exp compare_operador exp','compare',3,'p_compare','Parser.py',693),
  ('compare_operador -> GREATER','compare_operador',1,'p_compare_operador','Parser.py',727),
  ('compare_operador -> LESSER','compare_operador',1,'p_compare_operador','Parser.py',728),
  ('compare_operador -> GREATER_EQUAL','compare_operador',1,'p_compare_operador','Parser.py',729),
  ('compare_operador -> LESSER_EQUAL','compare_operador',1,'p_compare_operador','Parser.py',730),
  ('exp -> termino','exp',1,'p_exp','Parser.py',738),
  ('exp -> termino exp_operador exp','exp',3,'p_exp','Parser.py',739),
  ('exp_operador -> PLUS','exp_operador',1,'p_exp_operador','Parser.py',776),
  ('exp_operador -> MINUS','exp_operador',1,'p_exp_operador','Parser.py',777),
  ('termino -> factor','termino',1,'p_termino','Parser.py',785),
  ('termino -> factor termino_operador termino','termino',3,'p_termino','Parser.py',786),
  ('termino_operador -> TIMES','termino_operador',1,'p_termino_operador','Parser.py',821),
  ('termino_operador -> DIVIDE','termino_operador',1,'p_termino_operador','Parser.py',822),
  ('termino_operador -> MODULE','termino_operador',1,'p_termino_operador','Parser.py',823),
  ('factor -> variable','factor',1,'p_factor','Parser.py',831),
  ('factor -> O_PARENTHESIS expr C_PARENTHESIS','factor',3,'p_factor','Parser.py',832),
  ('factor -> llamada','factor',1,'p_factor','Parser.py',833),
  ('factor -> cte','factor',1,'p_factor','Parser.py',834),
  ('factor -> PLUS cte','factor',2,'p_factor','Parser.py',835),
  ('factor -> MINUS cte','factor',2,'p_factor','Parser.py',836),
  ('cte -> CTE_INT','cte',1,'p_cte','Parser.py',844),
  ('cte -> CTE_FLOAT','cte',1,'p_cte','Parser.py',845),
  ('epsilon -> <empty>','epsilon',0,'p_epsilon','Parser.py',859),
]
