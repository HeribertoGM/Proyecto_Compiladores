
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN CHAR COLON COMMA CTE_CHAR CTE_FLOAT CTE_INT CTE_STRING C_ABRACKET C_CBRACKET C_PARENTHESIS DIVIDE ELSE EQUAL FLOAT FOR FUNCTION GREATER GREATER_EQUAL ID IF INT LESSER LESSER_EQUAL LET MAIN MINUS MODULE NOT_EQUAL OR O_ABRACKET O_CBRACKET O_PARENTHESIS PLUS PROGRAM READ RETURN SEMICOLON STRING TIMES TO VOID WHILE WRITE\n\tprograma : PROGRAM ID SEMICOLON declaracion_global funcion MAIN O_PARENTHESIS C_PARENTHESIS bloque\n\t\n\tbloque : O_CBRACKET bloque_prime C_CBRACKET\n\t\n\tbloque_prime : estatuto bloque_prime\n\t\t\t\t | epsilon\n\t\n\tdeclaracion_funcion : declaracion\n\t\n\tdeclaracion_global : declaracion\n\t\n\tdeclaracion : declaracion_base\n\t\t\t\t| declaracion_base declaracion\n\t\n\tdeclaracion_base : LET declaracion_prime COLON declaracion_tipo SEMICOLON\n\t\n\tdeclaracion_prime : declaracion_variable\n\t\t\t\t\t  | declaracion_variable COMMA declaracion_prime\n\t\n\tdeclaracion_variable : ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET\n\t\t\t\t\t\t | ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET\n\t\t\t\t\t\t | ID O_ABRACKET CTE_INT C_ABRACKET\n\t\t\t\t\t\t | ID \n\t\n\tdeclaracion_tipo : INT\n\t\t\t\t\t | FLOAT\n\t\t\t\t\t | CHAR\n\t\t\t\t\t | STRING\n\t\n\ttipo : INT\n\t\t | FLOAT\n\t\t | CHAR\n\t\t | STRING\n\t\n\tfuncion : funcion_base funcion\n\t\t\t| epsilon\n\t\n\tfuncion_base : FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque\n\t\n\tfuncion_prime : tipo ID\n\t\t\t\t  | tipo ID COMMA funcion_prime\n\t\n\tfuncion_ident : VOID ID\n \t\t\t\t  | INT ID\n\t\t\t\t  | FLOAT ID\n\t\t\t\t  | CHAR ID\n\t\t\t\t  | STRING ID\n\t\n\tvariable : ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET\n\t\t\t | ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET\n\t\t\t | ID O_ABRACKET exp C_ABRACKET\n\t\t\t | ID \n\t\n\testatuto : asignacion SEMICOLON\n\t\t\t | llamada SEMICOLON\n\t\t\t | retorno SEMICOLON\n\t\t\t | lectura SEMICOLON\n\t\t\t | escritura SEMICOLON\n\t\t\t | decision\n\t\t\t | while\n\t\t\t | for\n\t\n\tasignacion : variable ASSIGN expr\n\t\n\tllamada : ID O_PARENTHESIS llamada_prime C_PARENTHESIS\n\t\n\tllamada_prime : exp\n\t\t\t\t  | exp COMMA llamada_prime\n\t\n\tretorno : RETURN O_PARENTHESIS expr C_PARENTHESIS\n\t\n\tlectura : READ O_PARENTHESIS lectura_prime C_PARENTHESIS\n\t\n\tlectura_prime : variable\n\t\t\t\t  | variable COMMA lectura_prime\n\t\n\tescritura : WRITE O_PARENTHESIS escritura_prime C_PARENTHESIS\n\t\n\tescritura_prime : expr\n\t\t\t\t\t| CTE_STRING\n\t\t\t\t\t| expr COMMA escritura_prime\n\t\t\t\t\t| CTE_STRING COMMA escritura_prime\n\t\n\tdecision : IF O_PARENTHESIS expr C_PARENTHESIS bloque else\n\t\n\telse : ELSE bloque\n\t\t | epsilon\n\t\n\twhile : WHILE O_PARENTHESIS expr C_PARENTHESIS bloque\n\t\n\tfor : FOR variable ASSIGN exp TO exp bloque\n\t\n\texpr : or\n\t\n\tor : and\n\t   | and OR or\n\t\n\tand : equal\n\t\t| equal AND and\n\t\n\tequal : compare\n\t\t  | compare EQUAL compare\n\t\t  | compare NOT_EQUAL compare\n\t\n\tcompare : exp\n\t\t\t| exp GREATER exp\n\t\t\t| exp LESSER exp\n\t\t\t| exp GREATER_EQUAL exp\n\t\t\t| exp LESSER_EQUAL exp\n\t\n\texp : termino\n\t\t| termino exp_operador exp\n\t\n\texp_operador : PLUS\n\t\t\t\t | MINUS\n\t\n\ttermino : factor\n\t\t\t| factor termino_operador termino\n\t\n\ttermino_operador : TIMES\n\t\t\t\t\t | DIVIDE\n\t\t\t\t\t | MODULE\n\t\n\tfactor : variable\n\t\t   | O_PARENTHESIS expr C_PARENTHESIS\n\t\t   | llamada\n\t\t   | cte\n\t\t   | PLUS cte\n\t\t   | MINUS cte\n\t\n\tcte : CTE_INT\n\t\t| CTE_FLOAT\n\t\n\tepsilon :\n\t'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,51,79,],[0,-1,-2,]),'ID':([2,8,20,21,22,23,24,26,44,45,46,47,48,52,57,64,65,66,74,79,81,82,83,84,85,86,87,88,89,90,91,92,93,108,127,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,148,152,154,155,172,176,177,178,181,183,186,187,188,],[3,16,30,31,32,33,34,16,54,-20,-21,-22,-23,68,68,-43,-44,-45,95,-2,-38,-39,-40,-41,-42,113,113,113,113,95,113,113,113,113,113,113,113,113,113,113,113,113,113,113,-79,-80,113,-83,-84,-85,113,95,113,113,113,-94,-62,113,-59,-61,-60,-63,113,]),'SEMICOLON':([3,35,36,37,38,39,59,60,61,62,63,99,100,101,102,103,104,105,106,107,109,110,113,114,115,145,146,147,149,150,151,153,160,161,162,163,164,165,166,167,168,169,170,185,190,],[4,49,-16,-17,-18,-19,81,82,83,84,85,-86,-46,-64,-65,-67,-69,-72,-77,-81,-88,-89,-37,-92,-93,-90,-91,-47,-36,-50,-51,-54,-66,-68,-70,-71,-73,-74,-75,-76,-78,-82,-87,-35,-34,]),'LET':([4,7,49,53,],[8,8,-9,8,]),'FUNCTION':([5,6,7,10,13,49,79,96,],[12,-6,-7,12,-8,-9,-2,-26,]),'MAIN':([5,6,7,9,10,11,13,18,49,79,96,],[-94,-6,-7,17,-94,-25,-8,-24,-9,-2,-26,]),'O_CBRACKET':([7,13,42,49,75,76,99,106,107,109,110,113,114,115,145,146,147,149,156,157,168,169,170,182,184,185,190,],[-7,-8,52,-9,52,-5,-86,-77,-81,-88,-89,-37,-92,-93,-90,-91,-47,-36,52,52,-78,-82,-87,52,52,-35,-34,]),'VOID':([12,],[20,]),'INT':([12,25,29,77,],[21,36,45,45,]),'FLOAT':([12,25,29,77,],[22,37,46,46,]),'CHAR':([12,25,29,77,],[23,38,47,47,]),'STRING':([12,25,29,77,],[24,39,48,48,]),'COLON':([14,15,16,40,50,98,179,],[25,-10,-15,-11,-14,-13,-12,]),'COMMA':([15,16,50,54,95,98,99,101,102,103,104,105,106,107,109,110,113,114,115,117,121,123,124,145,146,147,149,160,161,162,163,164,165,166,167,168,169,170,179,185,190,],[26,-15,-14,77,-37,-13,-86,-64,-65,-67,-69,-72,-77,-81,-88,-89,-37,-92,-93,148,152,154,155,-90,-91,-47,-36,-66,-68,-70,-71,-73,-74,-75,-76,-78,-82,-87,-12,-35,-34,]),'O_ABRACKET':([16,50,68,95,98,113,149,185,],[27,55,88,88,128,88,172,188,]),'O_PARENTHESIS':([17,19,30,31,32,33,34,68,69,70,71,72,73,86,87,88,89,91,92,93,108,113,127,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,148,154,155,172,178,188,],[28,29,-29,-30,-31,-32,-33,87,89,90,91,92,93,108,108,108,108,108,108,108,108,87,108,108,108,108,108,108,108,108,108,108,-79,-80,108,-83,-84,-85,108,108,108,108,108,108,]),'CTE_INT':([27,55,86,87,88,89,91,92,93,108,111,112,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,148,154,155,172,178,188,],[41,78,114,114,114,114,114,114,114,114,114,114,114,159,114,114,114,114,114,114,114,114,114,-79,-80,114,-83,-84,-85,114,114,114,114,114,114,]),'C_PARENTHESIS':([28,43,54,95,97,99,101,102,103,104,105,106,107,109,110,113,114,115,116,117,119,120,121,122,123,124,125,126,144,145,146,147,149,160,161,162,163,164,165,166,167,168,169,170,171,173,174,175,185,190,],[42,53,-27,-37,-28,-86,-64,-65,-67,-69,-72,-77,-81,-88,-89,-37,-92,-93,147,-48,150,151,-52,153,-55,-56,156,157,170,-90,-91,-47,-36,-66,-68,-70,-71,-73,-74,-75,-76,-78,-82,-87,-49,-53,-57,-58,-35,-34,]),'C_ABRACKET':([41,78,99,106,107,109,110,113,114,115,118,145,146,147,149,159,168,169,170,180,185,189,190,],[50,98,-86,-77,-81,-88,-89,-37,-92,-93,149,-90,-91,-47,-36,179,-78,-82,-87,185,-35,190,-34,]),'C_CBRACKET':([52,56,57,58,64,65,66,79,80,81,82,83,84,85,176,177,181,183,186,187,],[-94,79,-94,-4,-43,-44,-45,-2,-3,-38,-39,-40,-41,-42,-94,-62,-59,-61,-60,-63,]),'RETURN':([52,57,64,65,66,79,81,82,83,84,85,176,177,181,183,186,187,],[69,69,-43,-44,-45,-2,-38,-39,-40,-41,-42,-94,-62,-59,-61,-60,-63,]),'READ':([52,57,64,65,66,79,81,82,83,84,85,176,177,181,183,186,187,],[70,70,-43,-44,-45,-2,-38,-39,-40,-41,-42,-94,-62,-59,-61,-60,-63,]),'WRITE':([52,57,64,65,66,79,81,82,83,84,85,176,177,181,183,186,187,],[71,71,-43,-44,-45,-2,-38,-39,-40,-41,-42,-94,-62,-59,-61,-60,-63,]),'IF':([52,57,64,65,66,79,81,82,83,84,85,176,177,181,183,186,187,],[72,72,-43,-44,-45,-2,-38,-39,-40,-41,-42,-94,-62,-59,-61,-60,-63,]),'WHILE':([52,57,64,65,66,79,81,82,83,84,85,176,177,181,183,186,187,],[73,73,-43,-44,-45,-2,-38,-39,-40,-41,-42,-94,-62,-59,-61,-60,-63,]),'FOR':([52,57,64,65,66,79,81,82,83,84,85,176,177,181,183,186,187,],[74,74,-43,-44,-45,-2,-38,-39,-40,-41,-42,-94,-62,-59,-61,-60,-63,]),'ASSIGN':([67,68,94,95,149,185,190,],[86,-37,127,-37,-36,-35,-34,]),'ELSE':([79,176,],[-2,182,]),'PLUS':([86,87,88,89,91,92,93,99,106,107,108,109,110,113,114,115,127,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,145,146,147,148,149,154,155,169,170,172,178,185,188,190,],[111,111,111,111,111,111,111,-86,138,-81,111,-88,-89,-37,-92,-93,111,111,111,111,111,111,111,111,111,111,-79,-80,111,-83,-84,-85,-90,-91,-47,111,-36,111,111,-82,-87,111,111,-35,111,-34,]),'MINUS':([86,87,88,89,91,92,93,99,106,107,108,109,110,113,114,115,127,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,145,146,147,148,149,154,155,169,170,172,178,185,188,190,],[112,112,112,112,112,112,112,-86,139,-81,112,-88,-89,-37,-92,-93,112,112,112,112,112,112,112,112,112,112,-79,-80,112,-83,-84,-85,-90,-91,-47,112,-36,112,112,-82,-87,112,112,-35,112,-34,]),'CTE_FLOAT':([86,87,88,89,91,92,93,108,111,112,127,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,148,154,155,172,178,188,],[115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,-79,-80,115,-83,-84,-85,115,115,115,115,115,115,]),'CTE_STRING':([91,154,155,],[124,124,124,]),'TIMES':([99,107,109,110,113,114,115,145,146,147,149,170,185,190,],[-86,141,-88,-89,-37,-92,-93,-90,-91,-47,-36,-87,-35,-34,]),'DIVIDE':([99,107,109,110,113,114,115,145,146,147,149,170,185,190,],[-86,142,-88,-89,-37,-92,-93,-90,-91,-47,-36,-87,-35,-34,]),'MODULE':([99,107,109,110,113,114,115,145,146,147,149,170,185,190,],[-86,143,-88,-89,-37,-92,-93,-90,-91,-47,-36,-87,-35,-34,]),'GREATER':([99,105,106,107,109,110,113,114,115,145,146,147,149,168,169,170,185,190,],[-86,133,-77,-81,-88,-89,-37,-92,-93,-90,-91,-47,-36,-78,-82,-87,-35,-34,]),'LESSER':([99,105,106,107,109,110,113,114,115,145,146,147,149,168,169,170,185,190,],[-86,134,-77,-81,-88,-89,-37,-92,-93,-90,-91,-47,-36,-78,-82,-87,-35,-34,]),'GREATER_EQUAL':([99,105,106,107,109,110,113,114,115,145,146,147,149,168,169,170,185,190,],[-86,135,-77,-81,-88,-89,-37,-92,-93,-90,-91,-47,-36,-78,-82,-87,-35,-34,]),'LESSER_EQUAL':([99,105,106,107,109,110,113,114,115,145,146,147,149,168,169,170,185,190,],[-86,136,-77,-81,-88,-89,-37,-92,-93,-90,-91,-47,-36,-78,-82,-87,-35,-34,]),'EQUAL':([99,104,105,106,107,109,110,113,114,115,145,146,147,149,164,165,166,167,168,169,170,185,190,],[-86,131,-72,-77,-81,-88,-89,-37,-92,-93,-90,-91,-47,-36,-73,-74,-75,-76,-78,-82,-87,-35,-34,]),'NOT_EQUAL':([99,104,105,106,107,109,110,113,114,115,145,146,147,149,164,165,166,167,168,169,170,185,190,],[-86,132,-72,-77,-81,-88,-89,-37,-92,-93,-90,-91,-47,-36,-73,-74,-75,-76,-78,-82,-87,-35,-34,]),'AND':([99,103,104,105,106,107,109,110,113,114,115,145,146,147,149,162,163,164,165,166,167,168,169,170,185,190,],[-86,130,-69,-72,-77,-81,-88,-89,-37,-92,-93,-90,-91,-47,-36,-70,-71,-73,-74,-75,-76,-78,-82,-87,-35,-34,]),'OR':([99,102,103,104,105,106,107,109,110,113,114,115,145,146,147,149,161,162,163,164,165,166,167,168,169,170,185,190,],[-86,129,-67,-69,-72,-77,-81,-88,-89,-37,-92,-93,-90,-91,-47,-36,-68,-70,-71,-73,-74,-75,-76,-78,-82,-87,-35,-34,]),'TO':([99,106,107,109,110,113,114,115,145,146,147,149,158,168,169,170,185,190,],[-86,-77,-81,-88,-89,-37,-92,-93,-90,-91,-47,-36,178,-78,-82,-87,-35,-34,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'declaracion_global':([4,],[5,]),'declaracion':([4,7,53,],[6,13,76,]),'declaracion_base':([4,7,53,],[7,7,7,]),'funcion':([5,10,],[9,18,]),'funcion_base':([5,10,],[10,10,]),'epsilon':([5,10,52,57,176,],[11,11,58,58,183,]),'declaracion_prime':([8,26,],[14,40,]),'declaracion_variable':([8,26,],[15,15,]),'funcion_ident':([12,],[19,]),'declaracion_tipo':([25,],[35,]),'funcion_prime':([29,77,],[43,97,]),'tipo':([29,77,],[44,44,]),'bloque':([42,75,156,157,182,184,],[51,96,176,177,186,187,]),'bloque_prime':([52,57,],[56,80,]),'estatuto':([52,57,],[57,57,]),'asignacion':([52,57,],[59,59,]),'llamada':([52,57,86,87,88,89,91,92,93,108,127,129,130,131,132,133,134,135,136,137,140,148,154,155,172,178,188,],[60,60,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,]),'retorno':([52,57,],[61,61,]),'lectura':([52,57,],[62,62,]),'escritura':([52,57,],[63,63,]),'decision':([52,57,],[64,64,]),'while':([52,57,],[65,65,]),'for':([52,57,],[66,66,]),'variable':([52,57,74,86,87,88,89,90,91,92,93,108,127,129,130,131,132,133,134,135,136,137,140,148,152,154,155,172,178,188,],[67,67,94,99,99,99,99,121,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,121,99,99,99,99,99,]),'declaracion_funcion':([53,],[75,]),'expr':([86,89,91,92,93,108,154,155,],[100,119,123,125,126,144,123,123,]),'or':([86,89,91,92,93,108,129,154,155,],[101,101,101,101,101,101,160,101,101,]),'and':([86,89,91,92,93,108,129,130,154,155,],[102,102,102,102,102,102,102,161,102,102,]),'equal':([86,89,91,92,93,108,129,130,154,155,],[103,103,103,103,103,103,103,103,103,103,]),'compare':([86,89,91,92,93,108,129,130,131,132,154,155,],[104,104,104,104,104,104,104,104,162,163,104,104,]),'exp':([86,87,88,89,91,92,93,108,127,129,130,131,132,133,134,135,136,137,148,154,155,172,178,188,],[105,117,118,105,105,105,105,105,158,105,105,105,105,164,165,166,167,168,117,105,105,180,184,189,]),'termino':([86,87,88,89,91,92,93,108,127,129,130,131,132,133,134,135,136,137,140,148,154,155,172,178,188,],[106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,169,106,106,106,106,106,106,]),'factor':([86,87,88,89,91,92,93,108,127,129,130,131,132,133,134,135,136,137,140,148,154,155,172,178,188,],[107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,]),'cte':([86,87,88,89,91,92,93,108,111,112,127,129,130,131,132,133,134,135,136,137,140,148,154,155,172,178,188,],[110,110,110,110,110,110,110,110,145,146,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,]),'llamada_prime':([87,148,],[116,171,]),'lectura_prime':([90,152,],[120,173,]),'escritura_prime':([91,154,155,],[122,174,175,]),'exp_operador':([106,],[137,]),'termino_operador':([107,],[140,]),'else':([176,],[181,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> PROGRAM ID SEMICOLON declaracion_global funcion MAIN O_PARENTHESIS C_PARENTHESIS bloque','programa',9,'p_programa','Parser.py',8),
  ('bloque -> O_CBRACKET bloque_prime C_CBRACKET','bloque',3,'p_bloque','Parser.py',19),
  ('bloque_prime -> estatuto bloque_prime','bloque_prime',2,'p_bloque_prime','Parser.py',25),
  ('bloque_prime -> epsilon','bloque_prime',1,'p_bloque_prime','Parser.py',26),
  ('declaracion_funcion -> declaracion','declaracion_funcion',1,'p_declaracion_funcion','Parser.py',33),
  ('declaracion_global -> declaracion','declaracion_global',1,'p_declaracion_global','Parser.py',40),
  ('declaracion -> declaracion_base','declaracion',1,'p_declaracion','Parser.py',47),
  ('declaracion -> declaracion_base declaracion','declaracion',2,'p_declaracion','Parser.py',48),
  ('declaracion_base -> LET declaracion_prime COLON declaracion_tipo SEMICOLON','declaracion_base',5,'p_declaracion_base','Parser.py',54),
  ('declaracion_prime -> declaracion_variable','declaracion_prime',1,'p_declaracion_prime','Parser.py',60),
  ('declaracion_prime -> declaracion_variable COMMA declaracion_prime','declaracion_prime',3,'p_declaracion_prime','Parser.py',61),
  ('declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET','declaracion_variable',10,'p_declaracion_variable','Parser.py',68),
  ('declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET','declaracion_variable',7,'p_declaracion_variable','Parser.py',69),
  ('declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET','declaracion_variable',4,'p_declaracion_variable','Parser.py',70),
  ('declaracion_variable -> ID','declaracion_variable',1,'p_declaracion_variable','Parser.py',71),
  ('declaracion_tipo -> INT','declaracion_tipo',1,'p_declaracion_tipo','Parser.py',90),
  ('declaracion_tipo -> FLOAT','declaracion_tipo',1,'p_declaracion_tipo','Parser.py',91),
  ('declaracion_tipo -> CHAR','declaracion_tipo',1,'p_declaracion_tipo','Parser.py',92),
  ('declaracion_tipo -> STRING','declaracion_tipo',1,'p_declaracion_tipo','Parser.py',93),
  ('tipo -> INT','tipo',1,'p_tipo','Parser.py',107),
  ('tipo -> FLOAT','tipo',1,'p_tipo','Parser.py',108),
  ('tipo -> CHAR','tipo',1,'p_tipo','Parser.py',109),
  ('tipo -> STRING','tipo',1,'p_tipo','Parser.py',110),
  ('funcion -> funcion_base funcion','funcion',2,'p_funcion','Parser.py',117),
  ('funcion -> epsilon','funcion',1,'p_funcion','Parser.py',118),
  ('funcion_base -> FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque','funcion_base',7,'p_funcion_base','Parser.py',124),
  ('funcion_prime -> tipo ID','funcion_prime',2,'p_funcion_prime','Parser.py',130),
  ('funcion_prime -> tipo ID COMMA funcion_prime','funcion_prime',4,'p_funcion_prime','Parser.py',131),
  ('funcion_ident -> VOID ID','funcion_ident',2,'p_funcion_ident','Parser.py',137),
  ('funcion_ident -> INT ID','funcion_ident',2,'p_funcion_ident','Parser.py',138),
  ('funcion_ident -> FLOAT ID','funcion_ident',2,'p_funcion_ident','Parser.py',139),
  ('funcion_ident -> CHAR ID','funcion_ident',2,'p_funcion_ident','Parser.py',140),
  ('funcion_ident -> STRING ID','funcion_ident',2,'p_funcion_ident','Parser.py',141),
  ('variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET','variable',10,'p_variable','Parser.py',149),
  ('variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET','variable',7,'p_variable','Parser.py',150),
  ('variable -> ID O_ABRACKET exp C_ABRACKET','variable',4,'p_variable','Parser.py',151),
  ('variable -> ID','variable',1,'p_variable','Parser.py',152),
  ('estatuto -> asignacion SEMICOLON','estatuto',2,'p_estatuto','Parser.py',162),
  ('estatuto -> llamada SEMICOLON','estatuto',2,'p_estatuto','Parser.py',163),
  ('estatuto -> retorno SEMICOLON','estatuto',2,'p_estatuto','Parser.py',164),
  ('estatuto -> lectura SEMICOLON','estatuto',2,'p_estatuto','Parser.py',165),
  ('estatuto -> escritura SEMICOLON','estatuto',2,'p_estatuto','Parser.py',166),
  ('estatuto -> decision','estatuto',1,'p_estatuto','Parser.py',167),
  ('estatuto -> while','estatuto',1,'p_estatuto','Parser.py',168),
  ('estatuto -> for','estatuto',1,'p_estatuto','Parser.py',169),
  ('asignacion -> variable ASSIGN expr','asignacion',3,'p_asignacion','Parser.py',176),
  ('llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS','llamada',4,'p_llamada','Parser.py',183),
  ('llamada_prime -> exp','llamada_prime',1,'p_llamada_prime','Parser.py',189),
  ('llamada_prime -> exp COMMA llamada_prime','llamada_prime',3,'p_llamada_prime','Parser.py',190),
  ('retorno -> RETURN O_PARENTHESIS expr C_PARENTHESIS','retorno',4,'p_retorno','Parser.py',198),
  ('lectura -> READ O_PARENTHESIS lectura_prime C_PARENTHESIS','lectura',4,'p_lectura','Parser.py',205),
  ('lectura_prime -> variable','lectura_prime',1,'p_lectura_prime','Parser.py',211),
  ('lectura_prime -> variable COMMA lectura_prime','lectura_prime',3,'p_lectura_prime','Parser.py',212),
  ('escritura -> WRITE O_PARENTHESIS escritura_prime C_PARENTHESIS','escritura',4,'p_escritura','Parser.py',219),
  ('escritura_prime -> expr','escritura_prime',1,'p_escritura_prime','Parser.py',225),
  ('escritura_prime -> CTE_STRING','escritura_prime',1,'p_escritura_prime','Parser.py',226),
  ('escritura_prime -> expr COMMA escritura_prime','escritura_prime',3,'p_escritura_prime','Parser.py',227),
  ('escritura_prime -> CTE_STRING COMMA escritura_prime','escritura_prime',3,'p_escritura_prime','Parser.py',228),
  ('decision -> IF O_PARENTHESIS expr C_PARENTHESIS bloque else','decision',6,'p_decision','Parser.py',236),
  ('else -> ELSE bloque','else',2,'p_else','Parser.py',242),
  ('else -> epsilon','else',1,'p_else','Parser.py',243),
  ('while -> WHILE O_PARENTHESIS expr C_PARENTHESIS bloque','while',5,'p_while','Parser.py',250),
  ('for -> FOR variable ASSIGN exp TO exp bloque','for',7,'p_for','Parser.py',257),
  ('expr -> or','expr',1,'p_expr','Parser.py',264),
  ('or -> and','or',1,'p_or','Parser.py',271),
  ('or -> and OR or','or',3,'p_or','Parser.py',272),
  ('and -> equal','and',1,'p_and','Parser.py',279),
  ('and -> equal AND and','and',3,'p_and','Parser.py',280),
  ('equal -> compare','equal',1,'p_equal','Parser.py',287),
  ('equal -> compare EQUAL compare','equal',3,'p_equal','Parser.py',288),
  ('equal -> compare NOT_EQUAL compare','equal',3,'p_equal','Parser.py',289),
  ('compare -> exp','compare',1,'p_compare','Parser.py',296),
  ('compare -> exp GREATER exp','compare',3,'p_compare','Parser.py',297),
  ('compare -> exp LESSER exp','compare',3,'p_compare','Parser.py',298),
  ('compare -> exp GREATER_EQUAL exp','compare',3,'p_compare','Parser.py',299),
  ('compare -> exp LESSER_EQUAL exp','compare',3,'p_compare','Parser.py',300),
  ('exp -> termino','exp',1,'p_exp','Parser.py',307),
  ('exp -> termino exp_operador exp','exp',3,'p_exp','Parser.py',308),
  ('exp_operador -> PLUS','exp_operador',1,'p_exp_operador','Parser.py',316),
  ('exp_operador -> MINUS','exp_operador',1,'p_exp_operador','Parser.py',317),
  ('termino -> factor','termino',1,'p_termino','Parser.py',325),
  ('termino -> factor termino_operador termino','termino',3,'p_termino','Parser.py',326),
  ('termino_operador -> TIMES','termino_operador',1,'p_termino_operador','Parser.py',352),
  ('termino_operador -> DIVIDE','termino_operador',1,'p_termino_operador','Parser.py',353),
  ('termino_operador -> MODULE','termino_operador',1,'p_termino_operador','Parser.py',354),
  ('factor -> variable','factor',1,'p_factor','Parser.py',362),
  ('factor -> O_PARENTHESIS expr C_PARENTHESIS','factor',3,'p_factor','Parser.py',363),
  ('factor -> llamada','factor',1,'p_factor','Parser.py',364),
  ('factor -> cte','factor',1,'p_factor','Parser.py',365),
  ('factor -> PLUS cte','factor',2,'p_factor','Parser.py',366),
  ('factor -> MINUS cte','factor',2,'p_factor','Parser.py',367),
  ('cte -> CTE_INT','cte',1,'p_cte','Parser.py',375),
  ('cte -> CTE_FLOAT','cte',1,'p_cte','Parser.py',376),
  ('epsilon -> <empty>','epsilon',0,'p_epsilon','Parser.py',384),
]
