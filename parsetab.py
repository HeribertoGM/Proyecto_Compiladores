
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN CHAR COLON COMMA CTE_CHAR CTE_FLOAT CTE_INT CTE_STRING C_ABRACKET C_CBRACKET C_PARENTHESIS DIVIDE ELSE EQUAL FLOAT FOR FUNCTION GREATER GREATER_EQUAL ID IF INT LESSER LESSER_EQUAL LET MAIN MINUS MODULE NOT_EQUAL OR O_ABRACKET O_CBRACKET O_PARENTHESIS PLUS PROGRAM READ RETURN SEMICOLON STRING TIMES TO VOID WHILE WRITE\n\tprograma : PROGRAM ID SEMICOLON declaracion_global funcion main bloque\n\t\n\tmain : MAIN O_PARENTHESIS C_PARENTHESIS\n\t\n\tbloque : O_CBRACKET bloque_prime C_CBRACKET\n\t\n\tbloque_prime : estatuto bloque_prime\n\t\t\t\t | epsilon\n\t\n\tdeclaracion_funcion : declaracion\n\t\n\tdeclaracion_global : declaracion\n\t\n\tdeclaracion : declaracion_base\n\t\t\t\t| declaracion_base declaracion\n\t\n\tdeclaracion_base : LET declaracion_prime COLON declaracion_tipo SEMICOLON\n\t\n\tdeclaracion_prime : declaracion_variable\n\t\t\t\t\t  | declaracion_variable COMMA declaracion_prime\n\t\n\tdeclaracion_variable : ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET\n\t\t\t\t\t\t | ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET\n\t\t\t\t\t\t | ID O_ABRACKET CTE_INT C_ABRACKET\n\t\t\t\t\t\t | ID \n\t\n\tdeclaracion_tipo : INT\n\t\t\t\t\t | FLOAT\n\t\t\t\t\t | CHAR\n\t\t\t\t\t | STRING\n\t\n\tparam_tipo : INT ID\n\t\t \t   | FLOAT ID\n\t\t \t   | CHAR ID\n\t\t \t   | STRING ID\n\t\n\tfuncion : funcion_base funcion\n\t\t\t| epsilon\n\t\n\tfuncion_base : FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque\n\t\n\tfuncion_prime : param_tipo\n\t\t\t\t  | param_tipo COMMA funcion_prime\n\t\n\tfuncion_ident : VOID ID\n \t\t\t\t  | INT ID\n\t\t\t\t  | FLOAT ID\n\t\t\t\t  | CHAR ID\n\t\t\t\t  | STRING ID\n\t\n\tvariable : var_array\n\t\t\t | ID \n\t\n\tvar_array : arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket\n\t\t\t  | arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket\n\t\t\t  | arr_id O_ABRACKET exp arr_close_bracket\n\t\n\tarr_id : ID\n\t\n\tarr_close_bracket : C_ABRACKET\n\t\n\tarr_open_bracket : O_ABRACKET\n\t\n\testatuto : asignacion SEMICOLON\n\t\t\t | llamada SEMICOLON\n\t\t\t | retorno SEMICOLON\n\t\t\t | lectura SEMICOLON\n\t\t\t | escritura SEMICOLON\n\t\t\t | decision\n\t\t\t | while\n\t\t\t | for\n\t\n\tasignacion : variable ASSIGN asignacion_expr\n\t\n\tasignacion_expr : expr\n\t\n\tllamada : function_id O_PARENTHESIS llamada_prime C_PARENTHESIS\n\t\n\tfunction_id : ID\n\t\n\tllamada_prime : llamada_exp\n\t\t\t\t  | llamada_exp llamada_comma llamada_prime\n\t\n\tllamada_exp : exp\n\t\n\tllamada_comma : COMMA\n\t\n\tretorno : RETURN expr\n\t\n\tlectura : READ O_PARENTHESIS lectura_prime C_PARENTHESIS\n\t\n\tlectura_prime : variable\n\t\t\t\t  | variable COMMA lectura_prime\n\t\n\tescritura : WRITE O_PARENTHESIS escritura_prime C_PARENTHESIS\n\t\n\tescritura_prime : expr\n\t\t\t\t\t| escritura_string\n\t\t\t\t\t| expr COMMA escritura_prime\n\t\t\t\t\t| escritura_string COMMA escritura_prime\n\t\n\tescritura_string : CTE_STRING\n\t\n\tdecision : IF O_PARENTHESIS decision_expr C_PARENTHESIS bloque else\n\t\n\tdecision_expr : expr\n\t\n\telse : else_prime bloque\n\t\t | epsilon\n\t\n\telse_prime : ELSE\n\t\n\twhile : while_prime while_expr bloque\n\t\n\twhile_prime : WHILE\n\t\n\twhile_expr : O_PARENTHESIS expr C_PARENTHESIS\n\t\n\tfor : FOR for_asignacion for_to for_exp bloque\n\t\n\tfor_asignacion : variable ASSIGN for_asignacion_expr\n\t\n\tfor_asignacion_expr : expr\n\t\n\tfor_to : TO\n\t\n\tfor_exp : exp\n\t\n\texpr : or\n\t\n\tor : and\n\t   | and or_operador or\n\t\n\tor_operador : OR\n\t\n\tand : equal\n\t\t| equal and_operador and\n\t\n\tand_operador : AND\n\t\n\tequal : compare\n\t\t  | compare equal_operador compare\n\t\n\tequal_operador : EQUAL\n\t\t\t\t   | NOT_EQUAL\n\t\n\tcompare : exp\n\t\t\t| exp compare_operador exp\n\t\n\tcompare_operador : GREATER\n\t\t\t\t\t | LESSER\n\t\t\t\t\t | GREATER_EQUAL\n\t\t\t\t\t | LESSER_EQUAL\n\t\n\texp : termino\n\t\t| termino exp_operador exp\n\t\n\texp_operador : PLUS\n\t\t\t | MINUS\n\t\n\ttermino : factor\n\t\t\t| factor termino_operador termino\n\t\n\ttermino_operador : TIMES\n\t\t\t\t\t | DIVIDE\n\t\t\t\t\t | MODULE\n\t\n\tfactor : variable\n\t\t   | O_PARENTHESIS expr C_PARENTHESIS\n\t\t   | llamada\n\t\t   | cte\n\t\t   | PLUS cte\n\t\t   | MINUS cte\n\t\n\tcte : CTE_INT\n\t\t| CTE_FLOAT\n\t\n\tepsilon :\n\t'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,29,77,],[0,-1,-3,]),'ID':([2,8,21,22,23,24,25,27,30,46,53,54,55,58,63,71,72,73,74,77,79,80,81,82,83,84,85,95,102,103,104,106,110,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,153,155,156,157,164,165,174,176,177,192,193,194,195,197,199,203,206,],[3,16,33,34,35,36,37,16,65,65,-48,-49,-50,65,109,113,114,115,116,-3,-43,-44,-45,-46,-47,65,65,65,109,65,65,65,65,65,-85,65,-88,65,-91,-92,65,-95,-96,-97,-98,65,-101,-102,65,-105,-106,-107,-74,65,-80,65,65,-58,109,65,65,-116,-77,-42,65,-69,-72,-71,65,]),'SEMICOLON':([3,38,39,40,41,42,48,49,50,51,52,64,65,86,87,88,89,90,91,92,93,94,96,97,100,101,118,119,143,144,163,166,167,168,169,170,171,172,173,175,184,185,204,208,],[4,75,-17,-18,-19,-20,79,80,81,82,83,-35,-36,-59,-82,-83,-86,-89,-93,-99,-103,-108,-110,-111,-114,-115,-51,-52,-112,-113,-53,-84,-87,-90,-94,-100,-104,-109,-60,-63,-39,-41,-38,-37,]),'LET':([4,7,75,111,],[8,8,-10,8,]),'FUNCTION':([5,6,7,10,13,75,77,186,],[12,-7,-8,12,-9,-10,-3,-27,]),'MAIN':([5,6,7,9,10,11,13,19,75,77,186,],[-116,-7,-8,18,-116,-26,-9,-25,-10,-3,-27,]),'O_CBRACKET':([7,13,17,64,65,68,75,92,93,94,96,97,100,101,105,143,144,159,160,163,170,171,172,178,179,180,181,184,185,198,200,204,208,],[-8,-9,30,-35,-36,-2,-10,-99,-103,-108,-110,-111,-114,-115,30,-112,-113,30,-6,-53,-100,-104,-109,30,-76,30,-81,-39,-41,30,-73,-38,-37,]),'VOID':([12,],[21,]),'INT':([12,26,32,112,],[22,39,71,71,]),'FLOAT':([12,26,32,112,],[23,40,72,72,]),'CHAR':([12,26,32,112,],[24,41,73,73,]),'STRING':([12,26,32,112,],[25,42,74,74,]),'COLON':([14,15,16,43,76,187,205,],[26,-11,-16,-12,-15,-14,-13,]),'COMMA':([15,16,64,65,70,76,87,88,89,90,91,92,93,94,96,97,100,101,109,113,114,115,116,121,122,143,144,146,148,149,150,163,166,167,168,169,170,171,172,184,185,187,204,205,208,],[27,-16,-35,-36,112,-15,-82,-83,-86,-89,-93,-99,-103,-108,-110,-111,-114,-115,-36,-21,-22,-23,-24,165,-57,-112,-113,174,176,177,-68,-53,-84,-87,-90,-94,-100,-104,-109,-39,-41,-14,-38,-13,-37,]),'O_ABRACKET':([16,65,67,76,109,184,185,187,204,],[28,-40,110,117,-40,194,-41,196,194,]),'O_PARENTHESIS':([18,20,33,34,35,36,37,57,58,59,60,61,62,65,66,84,85,95,103,104,106,110,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,155,156,157,164,165,176,177,194,195,206,],[31,32,-30,-31,-32,-33,-34,85,95,102,103,104,106,-54,-75,95,95,95,95,95,95,95,95,-85,95,-88,95,-91,-92,95,-95,-96,-97,-98,95,-101,-102,95,-105,-106,-107,95,-80,95,95,-58,95,95,-42,95,95,]),'CTE_INT':([28,58,84,85,95,98,99,103,104,106,110,117,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,155,156,157,164,165,176,177,194,195,196,206,],[44,100,100,100,100,100,100,100,100,100,100,162,100,-85,100,-88,100,-91,-92,100,-95,-96,-97,-98,100,-101,-102,100,-105,-106,-107,100,-80,100,100,-58,100,100,-42,100,202,100,]),'C_CBRACKET':([30,45,46,47,53,54,55,77,78,79,80,81,82,83,153,192,193,197,199,203,],[-116,77,-116,-5,-48,-49,-50,-3,-4,-43,-44,-45,-46,-47,-74,-116,-77,-69,-72,-71,]),'RETURN':([30,46,53,54,55,77,79,80,81,82,83,153,192,193,197,199,203,],[58,58,-48,-49,-50,-3,-43,-44,-45,-46,-47,-74,-116,-77,-69,-72,-71,]),'READ':([30,46,53,54,55,77,79,80,81,82,83,153,192,193,197,199,203,],[59,59,-48,-49,-50,-3,-43,-44,-45,-46,-47,-74,-116,-77,-69,-72,-71,]),'WRITE':([30,46,53,54,55,77,79,80,81,82,83,153,192,193,197,199,203,],[60,60,-48,-49,-50,-3,-43,-44,-45,-46,-47,-74,-116,-77,-69,-72,-71,]),'IF':([30,46,53,54,55,77,79,80,81,82,83,153,192,193,197,199,203,],[61,61,-48,-49,-50,-3,-43,-44,-45,-46,-47,-74,-116,-77,-69,-72,-71,]),'FOR':([30,46,53,54,55,77,79,80,81,82,83,153,192,193,197,199,203,],[63,63,-48,-49,-50,-3,-43,-44,-45,-46,-47,-74,-116,-77,-69,-72,-71,]),'WHILE':([30,46,53,54,55,77,79,80,81,82,83,153,192,193,197,199,203,],[66,66,-48,-49,-50,-3,-43,-44,-45,-46,-47,-74,-116,-77,-69,-72,-71,]),'C_PARENTHESIS':([31,64,65,69,70,87,88,89,90,91,92,93,94,96,97,100,101,109,113,114,115,116,120,121,122,142,143,144,145,146,147,148,149,150,151,152,154,161,163,166,167,168,169,170,171,172,184,185,188,189,190,191,204,208,],[68,-35,-36,111,-28,-82,-83,-86,-89,-93,-99,-103,-108,-110,-111,-114,-115,-36,-21,-22,-23,-24,163,-55,-57,172,-112,-113,173,-61,175,-64,-65,-68,178,-70,179,-29,-53,-84,-87,-90,-94,-100,-104,-109,-39,-41,-56,-62,-66,-67,-38,-37,]),'C_ABRACKET':([44,64,65,92,93,94,96,97,100,101,143,144,158,162,163,170,171,172,184,185,201,202,204,207,208,],[76,-35,-36,-99,-103,-108,-110,-111,-114,-115,-112,-113,185,187,-53,-100,-104,-109,-39,-41,185,205,-38,185,-37,]),'ASSIGN':([56,64,65,108,109,184,185,204,208,],[84,-35,-36,157,-36,-39,-41,-38,-37,]),'PLUS':([58,64,65,84,85,92,93,94,95,96,97,100,101,103,104,106,110,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,143,144,155,156,157,163,164,165,171,172,176,177,184,185,194,195,204,206,208,],[98,-35,-36,98,98,136,-103,-108,98,-110,-111,-114,-115,98,98,98,98,98,-85,98,-88,98,-91,-92,98,-95,-96,-97,-98,98,-101,-102,98,-105,-106,-107,-112,-113,98,-80,98,-53,98,-58,-104,-109,98,98,-39,-41,-42,98,-38,98,-37,]),'MINUS':([58,64,65,84,85,92,93,94,95,96,97,100,101,103,104,106,110,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,143,144,155,156,157,163,164,165,171,172,176,177,184,185,194,195,204,206,208,],[99,-35,-36,99,99,137,-103,-108,99,-110,-111,-114,-115,99,99,99,99,99,-85,99,-88,99,-91,-92,99,-95,-96,-97,-98,99,-101,-102,99,-105,-106,-107,-112,-113,99,-80,99,-53,99,-58,-104,-109,99,99,-39,-41,-42,99,-38,99,-37,]),'CTE_FLOAT':([58,84,85,95,98,99,103,104,106,110,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,155,156,157,164,165,176,177,194,195,206,],[101,101,101,101,101,101,101,101,101,101,101,-85,101,-88,101,-91,-92,101,-95,-96,-97,-98,101,-101,-102,101,-105,-106,-107,101,-80,101,101,-58,101,101,-42,101,101,]),'TIMES':([64,65,93,94,96,97,100,101,143,144,163,172,184,185,204,208,],[-35,-36,139,-108,-110,-111,-114,-115,-112,-113,-53,-109,-39,-41,-38,-37,]),'DIVIDE':([64,65,93,94,96,97,100,101,143,144,163,172,184,185,204,208,],[-35,-36,140,-108,-110,-111,-114,-115,-112,-113,-53,-109,-39,-41,-38,-37,]),'MODULE':([64,65,93,94,96,97,100,101,143,144,163,172,184,185,204,208,],[-35,-36,141,-108,-110,-111,-114,-115,-112,-113,-53,-109,-39,-41,-38,-37,]),'GREATER':([64,65,91,92,93,94,96,97,100,101,143,144,163,170,171,172,184,185,204,208,],[-35,-36,131,-99,-103,-108,-110,-111,-114,-115,-112,-113,-53,-100,-104,-109,-39,-41,-38,-37,]),'LESSER':([64,65,91,92,93,94,96,97,100,101,143,144,163,170,171,172,184,185,204,208,],[-35,-36,132,-99,-103,-108,-110,-111,-114,-115,-112,-113,-53,-100,-104,-109,-39,-41,-38,-37,]),'GREATER_EQUAL':([64,65,91,92,93,94,96,97,100,101,143,144,163,170,171,172,184,185,204,208,],[-35,-36,133,-99,-103,-108,-110,-111,-114,-115,-112,-113,-53,-100,-104,-109,-39,-41,-38,-37,]),'LESSER_EQUAL':([64,65,91,92,93,94,96,97,100,101,143,144,163,170,171,172,184,185,204,208,],[-35,-36,134,-99,-103,-108,-110,-111,-114,-115,-112,-113,-53,-100,-104,-109,-39,-41,-38,-37,]),'EQUAL':([64,65,90,91,92,93,94,96,97,100,101,143,144,163,169,170,171,172,184,185,204,208,],[-35,-36,128,-93,-99,-103,-108,-110,-111,-114,-115,-112,-113,-53,-94,-100,-104,-109,-39,-41,-38,-37,]),'NOT_EQUAL':([64,65,90,91,92,93,94,96,97,100,101,143,144,163,169,170,171,172,184,185,204,208,],[-35,-36,129,-93,-99,-103,-108,-110,-111,-114,-115,-112,-113,-53,-94,-100,-104,-109,-39,-41,-38,-37,]),'AND':([64,65,89,90,91,92,93,94,96,97,100,101,143,144,163,168,169,170,171,172,184,185,204,208,],[-35,-36,126,-89,-93,-99,-103,-108,-110,-111,-114,-115,-112,-113,-53,-90,-94,-100,-104,-109,-39,-41,-38,-37,]),'OR':([64,65,88,89,90,91,92,93,94,96,97,100,101,143,144,163,167,168,169,170,171,172,184,185,204,208,],[-35,-36,124,-86,-89,-93,-99,-103,-108,-110,-111,-114,-115,-112,-113,-53,-87,-90,-94,-100,-104,-109,-39,-41,-38,-37,]),'TO':([64,65,87,88,89,90,91,92,93,94,96,97,100,101,107,143,144,163,166,167,168,169,170,171,172,182,183,184,185,204,208,],[-35,-36,-82,-83,-86,-89,-93,-99,-103,-108,-110,-111,-114,-115,156,-112,-113,-53,-84,-87,-90,-94,-100,-104,-109,-78,-79,-39,-41,-38,-37,]),'ELSE':([77,192,],[-3,200,]),'CTE_STRING':([103,176,177,],[150,150,150,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'declaracion_global':([4,],[5,]),'declaracion':([4,7,111,],[6,13,160,]),'declaracion_base':([4,7,111,],[7,7,7,]),'funcion':([5,10,],[9,19,]),'funcion_base':([5,10,],[10,10,]),'epsilon':([5,10,30,46,192,],[11,11,47,47,199,]),'declaracion_prime':([8,27,],[14,43,]),'declaracion_variable':([8,27,],[15,15,]),'main':([9,],[17,]),'funcion_ident':([12,],[20,]),'bloque':([17,105,159,178,180,198,],[29,153,186,192,193,203,]),'declaracion_tipo':([26,],[38,]),'bloque_prime':([30,46,],[45,78,]),'estatuto':([30,46,],[46,46,]),'asignacion':([30,46,],[48,48,]),'llamada':([30,46,58,84,85,95,103,104,106,110,123,125,127,130,135,138,155,157,164,176,177,195,206,],[49,49,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,]),'retorno':([30,46,],[50,50,]),'lectura':([30,46,],[51,51,]),'escritura':([30,46,],[52,52,]),'decision':([30,46,],[53,53,]),'while':([30,46,],[54,54,]),'for':([30,46,],[55,55,]),'variable':([30,46,58,63,84,85,95,102,103,104,106,110,123,125,127,130,135,138,155,157,164,174,176,177,195,206,],[56,56,94,108,94,94,94,146,94,94,94,94,94,94,94,94,94,94,94,94,94,146,94,94,94,94,]),'function_id':([30,46,58,84,85,95,103,104,106,110,123,125,127,130,135,138,155,157,164,176,177,195,206,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'while_prime':([30,46,],[62,62,]),'var_array':([30,46,58,63,84,85,95,102,103,104,106,110,123,125,127,130,135,138,155,157,164,174,176,177,195,206,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'arr_id':([30,46,58,63,84,85,95,102,103,104,106,110,123,125,127,130,135,138,155,157,164,174,176,177,195,206,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'funcion_prime':([32,112,],[69,161,]),'param_tipo':([32,112,],[70,70,]),'expr':([58,84,95,103,104,106,157,176,177,],[86,119,142,148,152,154,183,148,148,]),'or':([58,84,95,103,104,106,123,157,176,177,],[87,87,87,87,87,87,166,87,87,87,]),'and':([58,84,95,103,104,106,123,125,157,176,177,],[88,88,88,88,88,88,88,167,88,88,88,]),'equal':([58,84,95,103,104,106,123,125,157,176,177,],[89,89,89,89,89,89,89,89,89,89,89,]),'compare':([58,84,95,103,104,106,123,125,127,157,176,177,],[90,90,90,90,90,90,90,90,168,90,90,90,]),'exp':([58,84,85,95,103,104,106,110,123,125,127,130,135,155,157,164,176,177,195,206,],[91,91,122,91,91,91,91,158,91,91,91,169,170,181,91,122,91,91,201,207,]),'termino':([58,84,85,95,103,104,106,110,123,125,127,130,135,138,155,157,164,176,177,195,206,],[92,92,92,92,92,92,92,92,92,92,92,92,92,171,92,92,92,92,92,92,92,]),'factor':([58,84,85,95,103,104,106,110,123,125,127,130,135,138,155,157,164,176,177,195,206,],[93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,]),'cte':([58,84,85,95,98,99,103,104,106,110,123,125,127,130,135,138,155,157,164,176,177,195,206,],[97,97,97,97,143,144,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,]),'while_expr':([62,],[105,]),'for_asignacion':([63,],[107,]),'asignacion_expr':([84,],[118,]),'llamada_prime':([85,164,],[120,188,]),'llamada_exp':([85,164,],[121,121,]),'or_operador':([88,],[123,]),'and_operador':([89,],[125,]),'equal_operador':([90,],[127,]),'compare_operador':([91,],[130,]),'exp_operador':([92,],[135,]),'termino_operador':([93,],[138,]),'lectura_prime':([102,174,],[145,189,]),'escritura_prime':([103,176,177,],[147,190,191,]),'escritura_string':([103,176,177,],[149,149,149,]),'decision_expr':([104,],[151,]),'for_to':([107,],[155,]),'declaracion_funcion':([111,],[159,]),'llamada_comma':([121,],[164,]),'for_exp':([155,],[180,]),'for_asignacion_expr':([157,],[182,]),'arr_close_bracket':([158,201,207,],[184,204,208,]),'arr_open_bracket':([184,204,],[195,206,]),'else':([192,],[197,]),'else_prime':([192,],[198,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> PROGRAM ID SEMICOLON declaracion_global funcion main bloque','programa',7,'p_programa','Parser.py',11),
  ('main -> MAIN O_PARENTHESIS C_PARENTHESIS','main',3,'p_main','Parser.py',26),
  ('bloque -> O_CBRACKET bloque_prime C_CBRACKET','bloque',3,'p_bloque','Parser.py',39),
  ('bloque_prime -> estatuto bloque_prime','bloque_prime',2,'p_bloque_prime','Parser.py',45),
  ('bloque_prime -> epsilon','bloque_prime',1,'p_bloque_prime','Parser.py',46),
  ('declaracion_funcion -> declaracion','declaracion_funcion',1,'p_declaracion_funcion','Parser.py',53),
  ('declaracion_global -> declaracion','declaracion_global',1,'p_declaracion_global','Parser.py',62),
  ('declaracion -> declaracion_base','declaracion',1,'p_declaracion','Parser.py',70),
  ('declaracion -> declaracion_base declaracion','declaracion',2,'p_declaracion','Parser.py',71),
  ('declaracion_base -> LET declaracion_prime COLON declaracion_tipo SEMICOLON','declaracion_base',5,'p_declaracion_base','Parser.py',77),
  ('declaracion_prime -> declaracion_variable','declaracion_prime',1,'p_declaracion_prime','Parser.py',83),
  ('declaracion_prime -> declaracion_variable COMMA declaracion_prime','declaracion_prime',3,'p_declaracion_prime','Parser.py',84),
  ('declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET','declaracion_variable',10,'p_declaracion_variable','Parser.py',91),
  ('declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET','declaracion_variable',7,'p_declaracion_variable','Parser.py',92),
  ('declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET','declaracion_variable',4,'p_declaracion_variable','Parser.py',93),
  ('declaracion_variable -> ID','declaracion_variable',1,'p_declaracion_variable','Parser.py',94),
  ('declaracion_tipo -> INT','declaracion_tipo',1,'p_declaracion_tipo','Parser.py',114),
  ('declaracion_tipo -> FLOAT','declaracion_tipo',1,'p_declaracion_tipo','Parser.py',115),
  ('declaracion_tipo -> CHAR','declaracion_tipo',1,'p_declaracion_tipo','Parser.py',116),
  ('declaracion_tipo -> STRING','declaracion_tipo',1,'p_declaracion_tipo','Parser.py',117),
  ('param_tipo -> INT ID','param_tipo',2,'p_param_tipo','Parser.py',131),
  ('param_tipo -> FLOAT ID','param_tipo',2,'p_param_tipo','Parser.py',132),
  ('param_tipo -> CHAR ID','param_tipo',2,'p_param_tipo','Parser.py',133),
  ('param_tipo -> STRING ID','param_tipo',2,'p_param_tipo','Parser.py',134),
  ('funcion -> funcion_base funcion','funcion',2,'p_funcion','Parser.py',151),
  ('funcion -> epsilon','funcion',1,'p_funcion','Parser.py',152),
  ('funcion_base -> FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque','funcion_base',7,'p_funcion_base','Parser.py',158),
  ('funcion_prime -> param_tipo','funcion_prime',1,'p_funcion_prime','Parser.py',168),
  ('funcion_prime -> param_tipo COMMA funcion_prime','funcion_prime',3,'p_funcion_prime','Parser.py',169),
  ('funcion_ident -> VOID ID','funcion_ident',2,'p_funcion_ident','Parser.py',176),
  ('funcion_ident -> INT ID','funcion_ident',2,'p_funcion_ident','Parser.py',177),
  ('funcion_ident -> FLOAT ID','funcion_ident',2,'p_funcion_ident','Parser.py',178),
  ('funcion_ident -> CHAR ID','funcion_ident',2,'p_funcion_ident','Parser.py',179),
  ('funcion_ident -> STRING ID','funcion_ident',2,'p_funcion_ident','Parser.py',180),
  ('variable -> var_array','variable',1,'p_variable','Parser.py',206),
  ('variable -> ID','variable',1,'p_variable','Parser.py',207),
  ('var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket','var_array',10,'p_var_array','Parser.py',227),
  ('var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket','var_array',7,'p_var_array','Parser.py',228),
  ('var_array -> arr_id O_ABRACKET exp arr_close_bracket','var_array',4,'p_var_array','Parser.py',229),
  ('arr_id -> ID','arr_id',1,'p_arr_id','Parser.py',253),
  ('arr_close_bracket -> C_ABRACKET','arr_close_bracket',1,'p_arr_close_bracket','Parser.py',272),
  ('arr_open_bracket -> O_ABRACKET','arr_open_bracket',1,'p_arr_open_bracket','Parser.py',318),
  ('estatuto -> asignacion SEMICOLON','estatuto',2,'p_estatuto','Parser.py',328),
  ('estatuto -> llamada SEMICOLON','estatuto',2,'p_estatuto','Parser.py',329),
  ('estatuto -> retorno SEMICOLON','estatuto',2,'p_estatuto','Parser.py',330),
  ('estatuto -> lectura SEMICOLON','estatuto',2,'p_estatuto','Parser.py',331),
  ('estatuto -> escritura SEMICOLON','estatuto',2,'p_estatuto','Parser.py',332),
  ('estatuto -> decision','estatuto',1,'p_estatuto','Parser.py',333),
  ('estatuto -> while','estatuto',1,'p_estatuto','Parser.py',334),
  ('estatuto -> for','estatuto',1,'p_estatuto','Parser.py',335),
  ('asignacion -> variable ASSIGN asignacion_expr','asignacion',3,'p_asignacion','Parser.py',342),
  ('asignacion_expr -> expr','asignacion_expr',1,'p_asignacion_expr','Parser.py',348),
  ('llamada -> function_id O_PARENTHESIS llamada_prime C_PARENTHESIS','llamada',4,'p_llamada','Parser.py',367),
  ('function_id -> ID','function_id',1,'p_function_id','Parser.py',381),
  ('llamada_prime -> llamada_exp','llamada_prime',1,'p_llamada_prime','Parser.py',399),
  ('llamada_prime -> llamada_exp llamada_comma llamada_prime','llamada_prime',3,'p_llamada_prime','Parser.py',400),
  ('llamada_exp -> exp','llamada_exp',1,'p_llamada_exp','Parser.py',410),
  ('llamada_comma -> COMMA','llamada_comma',1,'p_llamada_comma','Parser.py',431),
  ('retorno -> RETURN expr','retorno',2,'p_retorno','Parser.py',440),
  ('lectura -> READ O_PARENTHESIS lectura_prime C_PARENTHESIS','lectura',4,'p_lectura','Parser.py',455),
  ('lectura_prime -> variable','lectura_prime',1,'p_lectura_prime','Parser.py',461),
  ('lectura_prime -> variable COMMA lectura_prime','lectura_prime',3,'p_lectura_prime','Parser.py',462),
  ('escritura -> WRITE O_PARENTHESIS escritura_prime C_PARENTHESIS','escritura',4,'p_escritura','Parser.py',474),
  ('escritura_prime -> expr','escritura_prime',1,'p_escritura_prime','Parser.py',480),
  ('escritura_prime -> escritura_string','escritura_prime',1,'p_escritura_prime','Parser.py',481),
  ('escritura_prime -> expr COMMA escritura_prime','escritura_prime',3,'p_escritura_prime','Parser.py',482),
  ('escritura_prime -> escritura_string COMMA escritura_prime','escritura_prime',3,'p_escritura_prime','Parser.py',483),
  ('escritura_string -> CTE_STRING','escritura_string',1,'p_escritura_string','Parser.py',494),
  ('decision -> IF O_PARENTHESIS decision_expr C_PARENTHESIS bloque else','decision',6,'p_decision','Parser.py',507),
  ('decision_expr -> expr','decision_expr',1,'p_decision_expr','Parser.py',513),
  ('else -> else_prime bloque','else',2,'p_else','Parser.py',531),
  ('else -> epsilon','else',1,'p_else','Parser.py',532),
  ('else_prime -> ELSE','else_prime',1,'p_else_prime','Parser.py',539),
  ('while -> while_prime while_expr bloque','while',3,'p_while','Parser.py',554),
  ('while_prime -> WHILE','while_prime',1,'p_while_prime','Parser.py',568),
  ('while_expr -> O_PARENTHESIS expr C_PARENTHESIS','while_expr',3,'p_while_expr','Parser.py',575),
  ('for -> FOR for_asignacion for_to for_exp bloque','for',5,'p_for','Parser.py',593),
  ('for_asignacion -> variable ASSIGN for_asignacion_expr','for_asignacion',3,'p_for_asignacion','Parser.py',619),
  ('for_asignacion_expr -> expr','for_asignacion_expr',1,'p_for_asignacion_expr','Parser.py',625),
  ('for_to -> TO','for_to',1,'p_for_to','Parser.py',645),
  ('for_exp -> exp','for_exp',1,'p_for_exp','Parser.py',652),
  ('expr -> or','expr',1,'p_expr','Parser.py',684),
  ('or -> and','or',1,'p_or','Parser.py',691),
  ('or -> and or_operador or','or',3,'p_or','Parser.py',692),
  ('or_operador -> OR','or_operador',1,'p_or_operador','Parser.py',726),
  ('and -> equal','and',1,'p_and','Parser.py',734),
  ('and -> equal and_operador and','and',3,'p_and','Parser.py',735),
  ('and_operador -> AND','and_operador',1,'p_and_operador','Parser.py',769),
  ('equal -> compare','equal',1,'p_equal','Parser.py',777),
  ('equal -> compare equal_operador compare','equal',3,'p_equal','Parser.py',778),
  ('equal_operador -> EQUAL','equal_operador',1,'p_equal_operador','Parser.py',812),
  ('equal_operador -> NOT_EQUAL','equal_operador',1,'p_equal_operador','Parser.py',813),
  ('compare -> exp','compare',1,'p_compare','Parser.py',821),
  ('compare -> exp compare_operador exp','compare',3,'p_compare','Parser.py',822),
  ('compare_operador -> GREATER','compare_operador',1,'p_compare_operador','Parser.py',856),
  ('compare_operador -> LESSER','compare_operador',1,'p_compare_operador','Parser.py',857),
  ('compare_operador -> GREATER_EQUAL','compare_operador',1,'p_compare_operador','Parser.py',858),
  ('compare_operador -> LESSER_EQUAL','compare_operador',1,'p_compare_operador','Parser.py',859),
  ('exp -> termino','exp',1,'p_exp','Parser.py',867),
  ('exp -> termino exp_operador exp','exp',3,'p_exp','Parser.py',868),
  ('exp_operador -> PLUS','exp_operador',1,'p_exp_operador','Parser.py',905),
  ('exp_operador -> MINUS','exp_operador',1,'p_exp_operador','Parser.py',906),
  ('termino -> factor','termino',1,'p_termino','Parser.py',914),
  ('termino -> factor termino_operador termino','termino',3,'p_termino','Parser.py',915),
  ('termino_operador -> TIMES','termino_operador',1,'p_termino_operador','Parser.py',950),
  ('termino_operador -> DIVIDE','termino_operador',1,'p_termino_operador','Parser.py',951),
  ('termino_operador -> MODULE','termino_operador',1,'p_termino_operador','Parser.py',952),
  ('factor -> variable','factor',1,'p_factor','Parser.py',960),
  ('factor -> O_PARENTHESIS expr C_PARENTHESIS','factor',3,'p_factor','Parser.py',961),
  ('factor -> llamada','factor',1,'p_factor','Parser.py',962),
  ('factor -> cte','factor',1,'p_factor','Parser.py',963),
  ('factor -> PLUS cte','factor',2,'p_factor','Parser.py',964),
  ('factor -> MINUS cte','factor',2,'p_factor','Parser.py',965),
  ('cte -> CTE_INT','cte',1,'p_cte','Parser.py',973),
  ('cte -> CTE_FLOAT','cte',1,'p_cte','Parser.py',974),
  ('epsilon -> <empty>','epsilon',0,'p_epsilon','Parser.py',988),
]
