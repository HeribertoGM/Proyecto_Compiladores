
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN CHAR COLON COMMA CTE_CHAR CTE_FLOAT CTE_INT CTE_STRING C_ABRACKET C_CBRACKET C_PARENTHESIS DIVIDE ELSE EQUAL FLOAT FOR FUNCTION GREATER GREATER_EQUAL ID IF INT LESSER LESSER_EQUAL LET MAIN MINUS MODULE NOT_EQUAL OR O_ABRACKET O_CBRACKET O_PARENTHESIS PLUS PROGRAM READ RETURN SEMICOLON STRING TIMES TO VOID WHILE WRITE\n\tprograma : PROGRAM ID SEMICOLON declaracion_global funcion main bloque\n\t\n\tmain : MAIN O_PARENTHESIS C_PARENTHESIS\n\t\n\tbloque : O_CBRACKET bloque_prime C_CBRACKET\n\t\n\tbloque_prime : estatuto bloque_prime\n\t\t\t\t | epsilon\n\t\n\tdeclaracion_funcion : declaracion\n\t\n\tdeclaracion_global : declaracion\n\t\n\tdeclaracion : declaracion_base\n\t\t\t\t| declaracion_base declaracion\n\t\n\tdeclaracion_base : LET declaracion_prime COLON declaracion_tipo SEMICOLON\n\t\n\tdeclaracion_prime : declaracion_variable\n\t\t\t\t\t  | declaracion_variable COMMA declaracion_prime\n\t\n\tdeclaracion_variable : ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET\n\t\t\t\t\t\t | ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET\n\t\t\t\t\t\t | ID O_ABRACKET CTE_INT C_ABRACKET\n\t\t\t\t\t\t | ID \n\t\n\tdeclaracion_tipo : INT\n\t\t\t\t\t | FLOAT\n\t\t\t\t\t | CHAR\n\t\t\t\t\t | STRING\n\t\n\ttipo : INT\n\t\t | FLOAT\n\t\t | CHAR\n\t\t | STRING\n\t\n\tfuncion : funcion_base funcion\n\t\t\t| epsilon\n\t\n\tfuncion_base : FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque\n\t\n\tfuncion_prime : tipo ID\n\t\t\t\t  | tipo ID COMMA funcion_prime\n\t\n\tfuncion_ident : VOID ID\n \t\t\t\t  | INT ID\n\t\t\t\t  | FLOAT ID\n\t\t\t\t  | CHAR ID\n\t\t\t\t  | STRING ID\n\t\n\tvariable : ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET\n\t\t\t | ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET\n\t\t\t | ID O_ABRACKET exp C_ABRACKET\n\t\t\t | ID \n\t\n\testatuto : asignacion SEMICOLON\n\t\t\t | llamada SEMICOLON\n\t\t\t | retorno SEMICOLON\n\t\t\t | lectura SEMICOLON\n\t\t\t | escritura SEMICOLON\n\t\t\t | decision\n\t\t\t | while\n\t\t\t | for\n\t\n\tasignacion : variable ASSIGN asignacion_expr\n\t\n\tasignacion_expr : expr\n\t\n\tllamada : ID O_PARENTHESIS llamada_prime C_PARENTHESIS\n\t\n\tllamada_prime : exp\n\t\t\t\t  | exp COMMA llamada_prime\n\t\n\tretorno : RETURN O_PARENTHESIS expr C_PARENTHESIS\n\t\n\tlectura : READ O_PARENTHESIS lectura_prime C_PARENTHESIS\n\t\n\tlectura_prime : variable\n\t\t\t\t  | variable COMMA lectura_prime\n\t\n\tescritura : WRITE O_PARENTHESIS escritura_prime C_PARENTHESIS\n\t\n\tescritura_prime : expr\n\t\t\t\t\t| escritura_string\n\t\t\t\t\t| expr COMMA escritura_prime\n\t\t\t\t\t| escritura_string COMMA escritura_prime\n\t\n\tescritura_string : CTE_STRING\n\t\n\tdecision : IF O_PARENTHESIS decision_expr C_PARENTHESIS bloque else\n\t\n\tdecision_expr : expr\n\t\n\telse : else_prime bloque\n\t\t | epsilon\n\t\n\telse_prime : ELSE\n\t\n\twhile : while_prime while_expr bloque\n\t\n\twhile_prime : WHILE\n\t\n\twhile_expr : O_PARENTHESIS expr C_PARENTHESIS\n\t\n\tfor : FOR for_asignacion for_to for_exp bloque\n\t\n\tfor_asignacion : variable ASSIGN for_asignacion_expr\n\t\n\tfor_asignacion_expr : expr\n\t\n\tfor_to : TO\n\t\n\tfor_exp : exp\n\t\n\texpr : or\n\t\n\tor : and\n\t   | and or_operador or\n\t\n\tor_operador : OR\n\t\n\tand : equal\n\t\t| equal and_operador and\n\t\n\tand_operador : AND\n\t\n\tequal : compare\n\t\t  | compare equal_operador compare\n\t\n\tequal_operador : EQUAL\n\t\t\t\t   | NOT_EQUAL\n\t\n\tcompare : exp\n\t\t\t| exp compare_operador exp\n\t\n\tcompare_operador : GREATER\n\t\t\t\t\t | LESSER\n\t\t\t\t\t | GREATER_EQUAL\n\t\t\t\t\t | LESSER_EQUAL\n\t\n\texp : termino\n\t\t| termino exp_operador exp\n\t\n\texp_operador : PLUS\n\t\t\t | MINUS\n\t\n\ttermino : factor\n\t\t\t| factor termino_operador termino\n\t\n\ttermino_operador : TIMES\n\t\t\t\t\t | DIVIDE\n\t\t\t\t\t | MODULE\n\t\n\tfactor : variable\n\t\t   | O_PARENTHESIS expr C_PARENTHESIS\n\t\t   | llamada\n\t\t   | cte\n\t\t   | PLUS cte\n\t\t   | MINUS cte\n\t\n\tcte : CTE_INT\n\t\t| CTE_FLOAT\n\t\n\tepsilon :\n\t'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,29,74,],[0,-1,-3,]),'ID':([2,8,21,22,23,24,25,27,30,46,53,54,55,63,67,68,69,70,71,74,76,77,78,79,80,81,82,83,84,85,86,87,89,106,126,128,129,130,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,158,162,164,165,183,187,188,191,193,197,199,],[3,16,33,34,35,36,37,16,57,57,-44,-45,-46,92,94,-21,-22,-23,-24,-3,-39,-40,-41,-42,-43,111,111,111,111,92,111,111,111,111,-67,111,-73,111,111,-78,111,-81,111,-84,-85,111,-88,-89,-90,-91,111,-94,-95,111,-98,-99,-100,111,92,111,111,111,-109,-70,-62,-65,-64,111,]),'SEMICOLON':([3,38,39,40,41,42,48,49,50,51,52,96,97,98,99,100,101,102,103,104,105,107,108,111,112,113,155,156,157,159,160,161,163,175,176,177,178,179,180,181,196,201,],[4,72,-17,-18,-19,-20,76,77,78,79,80,-101,-47,-48,-75,-76,-79,-82,-86,-92,-96,-103,-104,-38,-107,-108,-105,-106,-49,-37,-52,-53,-56,-77,-80,-83,-87,-93,-97,-102,-36,-35,]),'LET':([4,7,72,93,],[8,8,-10,8,]),'FUNCTION':([5,6,7,10,13,72,74,172,],[12,-7,-8,12,-9,-10,-3,-27,]),'MAIN':([5,6,7,9,10,11,13,19,72,74,172,],[-109,-7,-8,18,-109,-26,-9,-25,-10,-3,-27,]),'O_CBRACKET':([7,13,17,65,72,88,96,104,105,107,108,111,112,113,131,132,155,156,157,159,166,167,168,169,179,180,181,192,194,196,201,],[-8,-9,30,-2,-10,30,-101,-92,-96,-103,-104,-38,-107,-108,30,-6,-105,-106,-49,-37,30,-69,30,-74,-93,-97,-102,30,-66,-36,-35,]),'VOID':([12,],[21,]),'INT':([12,26,32,133,],[22,39,68,68,]),'FLOAT':([12,26,32,133,],[23,40,69,69,]),'CHAR':([12,26,32,133,],[24,41,70,70,]),'STRING':([12,26,32,133,],[25,42,71,71,]),'COLON':([14,15,16,43,73,174,198,],[26,-11,-16,-12,-15,-14,-13,]),'COMMA':([15,16,73,92,94,96,99,100,101,102,103,104,105,107,108,111,112,113,115,119,121,122,123,155,156,157,159,174,175,176,177,178,179,180,181,196,198,201,],[27,-16,-15,-38,133,-101,-75,-76,-79,-82,-86,-92,-96,-103,-104,-38,-107,-108,158,162,164,165,-61,-105,-106,-49,-37,-14,-77,-80,-83,-87,-93,-97,-102,-36,-13,-35,]),'O_ABRACKET':([16,57,73,92,111,159,174,196,],[28,83,95,83,83,183,189,199,]),'O_PARENTHESIS':([18,20,33,34,35,36,37,57,58,59,60,61,62,64,81,82,83,84,86,87,89,106,111,128,129,130,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,158,164,165,183,199,],[31,32,-30,-31,-32,-33,-34,82,84,85,86,87,89,-68,106,106,106,106,106,106,106,106,82,106,-73,106,106,-78,106,-81,106,-84,-85,106,-88,-89,-90,-91,106,-94,-95,106,-98,-99,-100,106,106,106,106,106,]),'CTE_INT':([28,81,82,83,84,86,87,89,95,106,109,110,128,129,130,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,158,164,165,183,189,199,],[44,112,112,112,112,112,112,112,134,112,112,112,112,-73,112,112,-78,112,-81,112,-84,-85,112,-88,-89,-90,-91,112,-94,-95,112,-98,-99,-100,112,112,112,112,195,112,]),'C_CBRACKET':([30,45,46,47,53,54,55,74,75,76,77,78,79,80,126,187,188,191,193,197,],[-109,74,-109,-5,-44,-45,-46,-3,-4,-39,-40,-41,-42,-43,-67,-109,-70,-62,-65,-64,]),'RETURN':([30,46,53,54,55,74,76,77,78,79,80,126,187,188,191,193,197,],[58,58,-44,-45,-46,-3,-39,-40,-41,-42,-43,-67,-109,-70,-62,-65,-64,]),'READ':([30,46,53,54,55,74,76,77,78,79,80,126,187,188,191,193,197,],[59,59,-44,-45,-46,-3,-39,-40,-41,-42,-43,-67,-109,-70,-62,-65,-64,]),'WRITE':([30,46,53,54,55,74,76,77,78,79,80,126,187,188,191,193,197,],[60,60,-44,-45,-46,-3,-39,-40,-41,-42,-43,-67,-109,-70,-62,-65,-64,]),'IF':([30,46,53,54,55,74,76,77,78,79,80,126,187,188,191,193,197,],[61,61,-44,-45,-46,-3,-39,-40,-41,-42,-43,-67,-109,-70,-62,-65,-64,]),'FOR':([30,46,53,54,55,74,76,77,78,79,80,126,187,188,191,193,197,],[63,63,-44,-45,-46,-3,-39,-40,-41,-42,-43,-67,-109,-70,-62,-65,-64,]),'WHILE':([30,46,53,54,55,74,76,77,78,79,80,126,187,188,191,193,197,],[64,64,-44,-45,-46,-3,-39,-40,-41,-42,-43,-67,-109,-70,-62,-65,-64,]),'C_PARENTHESIS':([31,66,92,94,96,99,100,101,102,103,104,105,107,108,111,112,113,114,115,117,118,119,120,121,122,123,124,125,127,154,155,156,157,159,173,175,176,177,178,179,180,181,182,184,185,186,196,201,],[65,93,-38,-28,-101,-75,-76,-79,-82,-86,-92,-96,-103,-104,-38,-107,-108,157,-50,160,161,-54,163,-57,-58,-61,166,-63,167,181,-105,-106,-49,-37,-29,-77,-80,-83,-87,-93,-97,-102,-51,-55,-59,-60,-36,-35,]),'C_ABRACKET':([44,96,104,105,107,108,111,112,113,116,134,155,156,157,159,179,180,181,190,195,196,200,201,],[73,-101,-92,-96,-103,-104,-38,-107,-108,159,174,-105,-106,-49,-37,-93,-97,-102,196,198,-36,201,-35,]),'ASSIGN':([56,57,91,92,159,196,201,],[81,-38,130,-38,-37,-36,-35,]),'ELSE':([74,187,],[-3,194,]),'PLUS':([81,82,83,84,86,87,89,96,104,105,106,107,108,111,112,113,128,129,130,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,156,157,158,159,164,165,180,181,183,196,199,201,],[109,109,109,109,109,109,109,-101,148,-96,109,-103,-104,-38,-107,-108,109,-73,109,109,-78,109,-81,109,-84,-85,109,-88,-89,-90,-91,109,-94,-95,109,-98,-99,-100,-105,-106,-49,109,-37,109,109,-97,-102,109,-36,109,-35,]),'MINUS':([81,82,83,84,86,87,89,96,104,105,106,107,108,111,112,113,128,129,130,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,156,157,158,159,164,165,180,181,183,196,199,201,],[110,110,110,110,110,110,110,-101,149,-96,110,-103,-104,-38,-107,-108,110,-73,110,110,-78,110,-81,110,-84,-85,110,-88,-89,-90,-91,110,-94,-95,110,-98,-99,-100,-105,-106,-49,110,-37,110,110,-97,-102,110,-36,110,-35,]),'CTE_FLOAT':([81,82,83,84,86,87,89,106,109,110,128,129,130,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,158,164,165,183,199,],[113,113,113,113,113,113,113,113,113,113,113,-73,113,113,-78,113,-81,113,-84,-85,113,-88,-89,-90,-91,113,-94,-95,113,-98,-99,-100,113,113,113,113,113,]),'CTE_STRING':([86,164,165,],[123,123,123,]),'TO':([90,96,99,100,101,102,103,104,105,107,108,111,112,113,155,156,157,159,170,171,175,176,177,178,179,180,181,196,201,],[129,-101,-75,-76,-79,-82,-86,-92,-96,-103,-104,-38,-107,-108,-105,-106,-49,-37,-71,-72,-77,-80,-83,-87,-93,-97,-102,-36,-35,]),'TIMES':([96,105,107,108,111,112,113,155,156,157,159,181,196,201,],[-101,151,-103,-104,-38,-107,-108,-105,-106,-49,-37,-102,-36,-35,]),'DIVIDE':([96,105,107,108,111,112,113,155,156,157,159,181,196,201,],[-101,152,-103,-104,-38,-107,-108,-105,-106,-49,-37,-102,-36,-35,]),'MODULE':([96,105,107,108,111,112,113,155,156,157,159,181,196,201,],[-101,153,-103,-104,-38,-107,-108,-105,-106,-49,-37,-102,-36,-35,]),'GREATER':([96,103,104,105,107,108,111,112,113,155,156,157,159,179,180,181,196,201,],[-101,143,-92,-96,-103,-104,-38,-107,-108,-105,-106,-49,-37,-93,-97,-102,-36,-35,]),'LESSER':([96,103,104,105,107,108,111,112,113,155,156,157,159,179,180,181,196,201,],[-101,144,-92,-96,-103,-104,-38,-107,-108,-105,-106,-49,-37,-93,-97,-102,-36,-35,]),'GREATER_EQUAL':([96,103,104,105,107,108,111,112,113,155,156,157,159,179,180,181,196,201,],[-101,145,-92,-96,-103,-104,-38,-107,-108,-105,-106,-49,-37,-93,-97,-102,-36,-35,]),'LESSER_EQUAL':([96,103,104,105,107,108,111,112,113,155,156,157,159,179,180,181,196,201,],[-101,146,-92,-96,-103,-104,-38,-107,-108,-105,-106,-49,-37,-93,-97,-102,-36,-35,]),'EQUAL':([96,102,103,104,105,107,108,111,112,113,155,156,157,159,178,179,180,181,196,201,],[-101,140,-86,-92,-96,-103,-104,-38,-107,-108,-105,-106,-49,-37,-87,-93,-97,-102,-36,-35,]),'NOT_EQUAL':([96,102,103,104,105,107,108,111,112,113,155,156,157,159,178,179,180,181,196,201,],[-101,141,-86,-92,-96,-103,-104,-38,-107,-108,-105,-106,-49,-37,-87,-93,-97,-102,-36,-35,]),'AND':([96,101,102,103,104,105,107,108,111,112,113,155,156,157,159,177,178,179,180,181,196,201,],[-101,138,-82,-86,-92,-96,-103,-104,-38,-107,-108,-105,-106,-49,-37,-83,-87,-93,-97,-102,-36,-35,]),'OR':([96,100,101,102,103,104,105,107,108,111,112,113,155,156,157,159,176,177,178,179,180,181,196,201,],[-101,136,-79,-82,-86,-92,-96,-103,-104,-38,-107,-108,-105,-106,-49,-37,-80,-83,-87,-93,-97,-102,-36,-35,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'declaracion_global':([4,],[5,]),'declaracion':([4,7,93,],[6,13,132,]),'declaracion_base':([4,7,93,],[7,7,7,]),'funcion':([5,10,],[9,19,]),'funcion_base':([5,10,],[10,10,]),'epsilon':([5,10,30,46,187,],[11,11,47,47,193,]),'declaracion_prime':([8,27,],[14,43,]),'declaracion_variable':([8,27,],[15,15,]),'main':([9,],[17,]),'funcion_ident':([12,],[20,]),'bloque':([17,88,131,166,168,192,],[29,126,172,187,188,197,]),'declaracion_tipo':([26,],[38,]),'bloque_prime':([30,46,],[45,75,]),'estatuto':([30,46,],[46,46,]),'asignacion':([30,46,],[48,48,]),'llamada':([30,46,81,82,83,84,86,87,89,106,128,130,135,137,139,142,147,150,158,164,165,183,199,],[49,49,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,]),'retorno':([30,46,],[50,50,]),'lectura':([30,46,],[51,51,]),'escritura':([30,46,],[52,52,]),'decision':([30,46,],[53,53,]),'while':([30,46,],[54,54,]),'for':([30,46,],[55,55,]),'variable':([30,46,63,81,82,83,84,85,86,87,89,106,128,130,135,137,139,142,147,150,158,162,164,165,183,199,],[56,56,91,96,96,96,96,119,96,96,96,96,96,96,96,96,96,96,96,96,96,119,96,96,96,96,]),'while_prime':([30,46,],[62,62,]),'funcion_prime':([32,133,],[66,173,]),'tipo':([32,133,],[67,67,]),'while_expr':([62,],[88,]),'for_asignacion':([63,],[90,]),'asignacion_expr':([81,],[97,]),'expr':([81,84,86,87,89,106,130,164,165,],[98,117,121,125,127,154,171,121,121,]),'or':([81,84,86,87,89,106,130,135,164,165,],[99,99,99,99,99,99,99,175,99,99,]),'and':([81,84,86,87,89,106,130,135,137,164,165,],[100,100,100,100,100,100,100,100,176,100,100,]),'equal':([81,84,86,87,89,106,130,135,137,164,165,],[101,101,101,101,101,101,101,101,101,101,101,]),'compare':([81,84,86,87,89,106,130,135,137,139,164,165,],[102,102,102,102,102,102,102,102,102,177,102,102,]),'exp':([81,82,83,84,86,87,89,106,128,130,135,137,139,142,147,158,164,165,183,199,],[103,115,116,103,103,103,103,103,169,103,103,103,103,178,179,115,103,103,190,200,]),'termino':([81,82,83,84,86,87,89,106,128,130,135,137,139,142,147,150,158,164,165,183,199,],[104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,180,104,104,104,104,104,]),'factor':([81,82,83,84,86,87,89,106,128,130,135,137,139,142,147,150,158,164,165,183,199,],[105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,]),'cte':([81,82,83,84,86,87,89,106,109,110,128,130,135,137,139,142,147,150,158,164,165,183,199,],[108,108,108,108,108,108,108,108,155,156,108,108,108,108,108,108,108,108,108,108,108,108,108,]),'llamada_prime':([82,158,],[114,182,]),'lectura_prime':([85,162,],[118,184,]),'escritura_prime':([86,164,165,],[120,185,186,]),'escritura_string':([86,164,165,],[122,122,122,]),'decision_expr':([87,],[124,]),'for_to':([90,],[128,]),'declaracion_funcion':([93,],[131,]),'or_operador':([100,],[135,]),'and_operador':([101,],[137,]),'equal_operador':([102,],[139,]),'compare_operador':([103,],[142,]),'exp_operador':([104,],[147,]),'termino_operador':([105,],[150,]),'for_exp':([128,],[168,]),'for_asignacion_expr':([130,],[170,]),'else':([187,],[191,]),'else_prime':([187,],[192,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> PROGRAM ID SEMICOLON declaracion_global funcion main bloque','programa',7,'p_programa','Parser.py',9),
  ('main -> MAIN O_PARENTHESIS C_PARENTHESIS','main',3,'p_main','Parser.py',20),
  ('bloque -> O_CBRACKET bloque_prime C_CBRACKET','bloque',3,'p_bloque','Parser.py',30),
  ('bloque_prime -> estatuto bloque_prime','bloque_prime',2,'p_bloque_prime','Parser.py',36),
  ('bloque_prime -> epsilon','bloque_prime',1,'p_bloque_prime','Parser.py',37),
  ('declaracion_funcion -> declaracion','declaracion_funcion',1,'p_declaracion_funcion','Parser.py',44),
  ('declaracion_global -> declaracion','declaracion_global',1,'p_declaracion_global','Parser.py',53),
  ('declaracion -> declaracion_base','declaracion',1,'p_declaracion','Parser.py',61),
  ('declaracion -> declaracion_base declaracion','declaracion',2,'p_declaracion','Parser.py',62),
  ('declaracion_base -> LET declaracion_prime COLON declaracion_tipo SEMICOLON','declaracion_base',5,'p_declaracion_base','Parser.py',68),
  ('declaracion_prime -> declaracion_variable','declaracion_prime',1,'p_declaracion_prime','Parser.py',74),
  ('declaracion_prime -> declaracion_variable COMMA declaracion_prime','declaracion_prime',3,'p_declaracion_prime','Parser.py',75),
  ('declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET','declaracion_variable',10,'p_declaracion_variable','Parser.py',82),
  ('declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET','declaracion_variable',7,'p_declaracion_variable','Parser.py',83),
  ('declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET','declaracion_variable',4,'p_declaracion_variable','Parser.py',84),
  ('declaracion_variable -> ID','declaracion_variable',1,'p_declaracion_variable','Parser.py',85),
  ('declaracion_tipo -> INT','declaracion_tipo',1,'p_declaracion_tipo','Parser.py',104),
  ('declaracion_tipo -> FLOAT','declaracion_tipo',1,'p_declaracion_tipo','Parser.py',105),
  ('declaracion_tipo -> CHAR','declaracion_tipo',1,'p_declaracion_tipo','Parser.py',106),
  ('declaracion_tipo -> STRING','declaracion_tipo',1,'p_declaracion_tipo','Parser.py',107),
  ('tipo -> INT','tipo',1,'p_tipo','Parser.py',121),
  ('tipo -> FLOAT','tipo',1,'p_tipo','Parser.py',122),
  ('tipo -> CHAR','tipo',1,'p_tipo','Parser.py',123),
  ('tipo -> STRING','tipo',1,'p_tipo','Parser.py',124),
  ('funcion -> funcion_base funcion','funcion',2,'p_funcion','Parser.py',131),
  ('funcion -> epsilon','funcion',1,'p_funcion','Parser.py',132),
  ('funcion_base -> FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque','funcion_base',7,'p_funcion_base','Parser.py',138),
  ('funcion_prime -> tipo ID','funcion_prime',2,'p_funcion_prime','Parser.py',144),
  ('funcion_prime -> tipo ID COMMA funcion_prime','funcion_prime',4,'p_funcion_prime','Parser.py',145),
  ('funcion_ident -> VOID ID','funcion_ident',2,'p_funcion_ident','Parser.py',151),
  ('funcion_ident -> INT ID','funcion_ident',2,'p_funcion_ident','Parser.py',152),
  ('funcion_ident -> FLOAT ID','funcion_ident',2,'p_funcion_ident','Parser.py',153),
  ('funcion_ident -> CHAR ID','funcion_ident',2,'p_funcion_ident','Parser.py',154),
  ('funcion_ident -> STRING ID','funcion_ident',2,'p_funcion_ident','Parser.py',155),
  ('variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET','variable',10,'p_variable','Parser.py',163),
  ('variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET','variable',7,'p_variable','Parser.py',164),
  ('variable -> ID O_ABRACKET exp C_ABRACKET','variable',4,'p_variable','Parser.py',165),
  ('variable -> ID','variable',1,'p_variable','Parser.py',166),
  ('estatuto -> asignacion SEMICOLON','estatuto',2,'p_estatuto','Parser.py',183),
  ('estatuto -> llamada SEMICOLON','estatuto',2,'p_estatuto','Parser.py',184),
  ('estatuto -> retorno SEMICOLON','estatuto',2,'p_estatuto','Parser.py',185),
  ('estatuto -> lectura SEMICOLON','estatuto',2,'p_estatuto','Parser.py',186),
  ('estatuto -> escritura SEMICOLON','estatuto',2,'p_estatuto','Parser.py',187),
  ('estatuto -> decision','estatuto',1,'p_estatuto','Parser.py',188),
  ('estatuto -> while','estatuto',1,'p_estatuto','Parser.py',189),
  ('estatuto -> for','estatuto',1,'p_estatuto','Parser.py',190),
  ('asignacion -> variable ASSIGN asignacion_expr','asignacion',3,'p_asignacion','Parser.py',197),
  ('asignacion_expr -> expr','asignacion_expr',1,'p_asignacion_expr','Parser.py',203),
  ('llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS','llamada',4,'p_llamada','Parser.py',218),
  ('llamada_prime -> exp','llamada_prime',1,'p_llamada_prime','Parser.py',224),
  ('llamada_prime -> exp COMMA llamada_prime','llamada_prime',3,'p_llamada_prime','Parser.py',225),
  ('retorno -> RETURN O_PARENTHESIS expr C_PARENTHESIS','retorno',4,'p_retorno','Parser.py',233),
  ('lectura -> READ O_PARENTHESIS lectura_prime C_PARENTHESIS','lectura',4,'p_lectura','Parser.py',240),
  ('lectura_prime -> variable','lectura_prime',1,'p_lectura_prime','Parser.py',246),
  ('lectura_prime -> variable COMMA lectura_prime','lectura_prime',3,'p_lectura_prime','Parser.py',247),
  ('escritura -> WRITE O_PARENTHESIS escritura_prime C_PARENTHESIS','escritura',4,'p_escritura','Parser.py',256),
  ('escritura_prime -> expr','escritura_prime',1,'p_escritura_prime','Parser.py',262),
  ('escritura_prime -> escritura_string','escritura_prime',1,'p_escritura_prime','Parser.py',263),
  ('escritura_prime -> expr COMMA escritura_prime','escritura_prime',3,'p_escritura_prime','Parser.py',264),
  ('escritura_prime -> escritura_string COMMA escritura_prime','escritura_prime',3,'p_escritura_prime','Parser.py',265),
  ('escritura_string -> CTE_STRING','escritura_string',1,'p_escritura_string','Parser.py',274),
  ('decision -> IF O_PARENTHESIS decision_expr C_PARENTHESIS bloque else','decision',6,'p_decision','Parser.py',284),
  ('decision_expr -> expr','decision_expr',1,'p_decision_expr','Parser.py',290),
  ('else -> else_prime bloque','else',2,'p_else','Parser.py',305),
  ('else -> epsilon','else',1,'p_else','Parser.py',306),
  ('else_prime -> ELSE','else_prime',1,'p_else_prime','Parser.py',313),
  ('while -> while_prime while_expr bloque','while',3,'p_while','Parser.py',324),
  ('while_prime -> WHILE','while_prime',1,'p_while_prime','Parser.py',334),
  ('while_expr -> O_PARENTHESIS expr C_PARENTHESIS','while_expr',3,'p_while_expr','Parser.py',341),
  ('for -> FOR for_asignacion for_to for_exp bloque','for',5,'p_for','Parser.py',356),
  ('for_asignacion -> variable ASSIGN for_asignacion_expr','for_asignacion',3,'p_for_asignacion','Parser.py',373),
  ('for_asignacion_expr -> expr','for_asignacion_expr',1,'p_for_asignacion_expr','Parser.py',379),
  ('for_to -> TO','for_to',1,'p_for_to','Parser.py',392),
  ('for_exp -> exp','for_exp',1,'p_for_exp','Parser.py',399),
  ('expr -> or','expr',1,'p_expr','Parser.py',422),
  ('or -> and','or',1,'p_or','Parser.py',429),
  ('or -> and or_operador or','or',3,'p_or','Parser.py',430),
  ('or_operador -> OR','or_operador',1,'p_or_operador','Parser.py',456),
  ('and -> equal','and',1,'p_and','Parser.py',464),
  ('and -> equal and_operador and','and',3,'p_and','Parser.py',465),
  ('and_operador -> AND','and_operador',1,'p_and_operador','Parser.py',492),
  ('equal -> compare','equal',1,'p_equal','Parser.py',500),
  ('equal -> compare equal_operador compare','equal',3,'p_equal','Parser.py',501),
  ('equal_operador -> EQUAL','equal_operador',1,'p_equal_operador','Parser.py',528),
  ('equal_operador -> NOT_EQUAL','equal_operador',1,'p_equal_operador','Parser.py',529),
  ('compare -> exp','compare',1,'p_compare','Parser.py',537),
  ('compare -> exp compare_operador exp','compare',3,'p_compare','Parser.py',538),
  ('compare_operador -> GREATER','compare_operador',1,'p_compare_operador','Parser.py',564),
  ('compare_operador -> LESSER','compare_operador',1,'p_compare_operador','Parser.py',565),
  ('compare_operador -> GREATER_EQUAL','compare_operador',1,'p_compare_operador','Parser.py',566),
  ('compare_operador -> LESSER_EQUAL','compare_operador',1,'p_compare_operador','Parser.py',567),
  ('exp -> termino','exp',1,'p_exp','Parser.py',575),
  ('exp -> termino exp_operador exp','exp',3,'p_exp','Parser.py',576),
  ('exp_operador -> PLUS','exp_operador',1,'p_exp_operador','Parser.py',605),
  ('exp_operador -> MINUS','exp_operador',1,'p_exp_operador','Parser.py',606),
  ('termino -> factor','termino',1,'p_termino','Parser.py',614),
  ('termino -> factor termino_operador termino','termino',3,'p_termino','Parser.py',615),
  ('termino_operador -> TIMES','termino_operador',1,'p_termino_operador','Parser.py',642),
  ('termino_operador -> DIVIDE','termino_operador',1,'p_termino_operador','Parser.py',643),
  ('termino_operador -> MODULE','termino_operador',1,'p_termino_operador','Parser.py',644),
  ('factor -> variable','factor',1,'p_factor','Parser.py',652),
  ('factor -> O_PARENTHESIS expr C_PARENTHESIS','factor',3,'p_factor','Parser.py',653),
  ('factor -> llamada','factor',1,'p_factor','Parser.py',654),
  ('factor -> cte','factor',1,'p_factor','Parser.py',655),
  ('factor -> PLUS cte','factor',2,'p_factor','Parser.py',656),
  ('factor -> MINUS cte','factor',2,'p_factor','Parser.py',657),
  ('cte -> CTE_INT','cte',1,'p_cte','Parser.py',665),
  ('cte -> CTE_FLOAT','cte',1,'p_cte','Parser.py',666),
  ('epsilon -> <empty>','epsilon',0,'p_epsilon','Parser.py',677),
]
