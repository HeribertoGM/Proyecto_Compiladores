Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CTE_CHAR

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAM ID SEMICOLON declaracion_global funcion main bloque
Rule 2     main -> MAIN O_PARENTHESIS C_PARENTHESIS
Rule 3     bloque -> O_CBRACKET bloque_prime C_CBRACKET
Rule 4     bloque_prime -> estatuto bloque_prime
Rule 5     bloque_prime -> epsilon
Rule 6     declaracion_funcion -> declaracion
Rule 7     declaracion_global -> declaracion
Rule 8     declaracion -> declaracion_base
Rule 9     declaracion -> declaracion_base declaracion
Rule 10    declaracion_base -> LET declaracion_prime COLON declaracion_tipo SEMICOLON
Rule 11    declaracion_prime -> declaracion_variable
Rule 12    declaracion_prime -> declaracion_variable COMMA declaracion_prime
Rule 13    declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
Rule 14    declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
Rule 15    declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET
Rule 16    declaracion_variable -> ID
Rule 17    declaracion_tipo -> INT
Rule 18    declaracion_tipo -> FLOAT
Rule 19    declaracion_tipo -> CHAR
Rule 20    declaracion_tipo -> STRING
Rule 21    tipo -> INT
Rule 22    tipo -> FLOAT
Rule 23    tipo -> CHAR
Rule 24    tipo -> STRING
Rule 25    funcion -> funcion_base funcion
Rule 26    funcion -> epsilon
Rule 27    funcion_base -> FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque
Rule 28    funcion_prime -> tipo ID
Rule 29    funcion_prime -> tipo ID COMMA funcion_prime
Rule 30    funcion_ident -> VOID ID
Rule 31    funcion_ident -> INT ID
Rule 32    funcion_ident -> FLOAT ID
Rule 33    funcion_ident -> CHAR ID
Rule 34    funcion_ident -> STRING ID
Rule 35    variable -> var_array
Rule 36    variable -> ID
Rule 37    var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
Rule 38    var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
Rule 39    var_array -> arr_id O_ABRACKET exp arr_close_bracket
Rule 40    arr_id -> ID
Rule 41    arr_close_bracket -> C_ABRACKET
Rule 42    arr_open_bracket -> O_ABRACKET
Rule 43    estatuto -> asignacion SEMICOLON
Rule 44    estatuto -> llamada SEMICOLON
Rule 45    estatuto -> retorno SEMICOLON
Rule 46    estatuto -> lectura SEMICOLON
Rule 47    estatuto -> escritura SEMICOLON
Rule 48    estatuto -> decision
Rule 49    estatuto -> while
Rule 50    estatuto -> for
Rule 51    asignacion -> variable ASSIGN asignacion_expr
Rule 52    asignacion_expr -> expr
Rule 53    llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS
Rule 54    llamada_prime -> exp
Rule 55    llamada_prime -> exp COMMA llamada_prime
Rule 56    retorno -> RETURN O_PARENTHESIS expr C_PARENTHESIS
Rule 57    lectura -> READ O_PARENTHESIS lectura_prime C_PARENTHESIS
Rule 58    lectura_prime -> variable
Rule 59    lectura_prime -> variable COMMA lectura_prime
Rule 60    escritura -> WRITE O_PARENTHESIS escritura_prime C_PARENTHESIS
Rule 61    escritura_prime -> expr
Rule 62    escritura_prime -> escritura_string
Rule 63    escritura_prime -> expr COMMA escritura_prime
Rule 64    escritura_prime -> escritura_string COMMA escritura_prime
Rule 65    escritura_string -> CTE_STRING
Rule 66    decision -> IF O_PARENTHESIS decision_expr C_PARENTHESIS bloque else
Rule 67    decision_expr -> expr
Rule 68    else -> else_prime bloque
Rule 69    else -> epsilon
Rule 70    else_prime -> ELSE
Rule 71    while -> while_prime while_expr bloque
Rule 72    while_prime -> WHILE
Rule 73    while_expr -> O_PARENTHESIS expr C_PARENTHESIS
Rule 74    for -> FOR for_asignacion for_to for_exp bloque
Rule 75    for_asignacion -> variable ASSIGN for_asignacion_expr
Rule 76    for_asignacion_expr -> expr
Rule 77    for_to -> TO
Rule 78    for_exp -> exp
Rule 79    expr -> or
Rule 80    or -> and
Rule 81    or -> and or_operador or
Rule 82    or_operador -> OR
Rule 83    and -> equal
Rule 84    and -> equal and_operador and
Rule 85    and_operador -> AND
Rule 86    equal -> compare
Rule 87    equal -> compare equal_operador compare
Rule 88    equal_operador -> EQUAL
Rule 89    equal_operador -> NOT_EQUAL
Rule 90    compare -> exp
Rule 91    compare -> exp compare_operador exp
Rule 92    compare_operador -> GREATER
Rule 93    compare_operador -> LESSER
Rule 94    compare_operador -> GREATER_EQUAL
Rule 95    compare_operador -> LESSER_EQUAL
Rule 96    exp -> termino
Rule 97    exp -> termino exp_operador exp
Rule 98    exp_operador -> PLUS
Rule 99    exp_operador -> MINUS
Rule 100   termino -> factor
Rule 101   termino -> factor termino_operador termino
Rule 102   termino_operador -> TIMES
Rule 103   termino_operador -> DIVIDE
Rule 104   termino_operador -> MODULE
Rule 105   factor -> variable
Rule 106   factor -> O_PARENTHESIS expr C_PARENTHESIS
Rule 107   factor -> llamada
Rule 108   factor -> cte
Rule 109   factor -> PLUS cte
Rule 110   factor -> MINUS cte
Rule 111   cte -> CTE_INT
Rule 112   cte -> CTE_FLOAT
Rule 113   epsilon -> <empty>

Terminals, with rules where they appear

AND                  : 85
ASSIGN               : 51 75
CHAR                 : 19 23 33
COLON                : 10
COMMA                : 12 29 55 59 63 64
CTE_CHAR             : 
CTE_FLOAT            : 112
CTE_INT              : 13 13 13 14 14 15 111
CTE_STRING           : 65
C_ABRACKET           : 13 13 13 14 14 15 41
C_CBRACKET           : 3
C_PARENTHESIS        : 2 27 53 56 57 60 66 73 106
DIVIDE               : 103
ELSE                 : 70
EQUAL                : 88
FLOAT                : 18 22 32
FOR                  : 74
FUNCTION             : 27
GREATER              : 92
GREATER_EQUAL        : 94
ID                   : 1 13 14 15 16 28 29 30 31 32 33 34 36 40 53
IF                   : 66
INT                  : 17 21 31
LESSER               : 93
LESSER_EQUAL         : 95
LET                  : 10
MAIN                 : 2
MINUS                : 99 110
MODULE               : 104
NOT_EQUAL            : 89
OR                   : 82
O_ABRACKET           : 13 13 13 14 14 15 37 38 39 42
O_CBRACKET           : 3
O_PARENTHESIS        : 2 27 53 56 57 60 66 73 106
PLUS                 : 98 109
PROGRAM              : 1
READ                 : 57
RETURN               : 56
SEMICOLON            : 1 10 43 44 45 46 47
STRING               : 20 24 34
TIMES                : 102
TO                   : 77
VOID                 : 30
WHILE                : 72
WRITE                : 60
error                : 

Nonterminals, with rules where they appear

and                  : 80 81 84
and_operador         : 84
arr_close_bracket    : 37 37 37 38 38 39
arr_id               : 37 38 39
arr_open_bracket     : 37 37 38
asignacion           : 43
asignacion_expr      : 51
bloque               : 1 27 66 68 71 74
bloque_prime         : 3 4
compare              : 86 87 87
compare_operador     : 91
cte                  : 108 109 110
decision             : 48
decision_expr        : 66
declaracion          : 6 7 9
declaracion_base     : 8 9
declaracion_funcion  : 27
declaracion_global   : 1
declaracion_prime    : 10 12
declaracion_tipo     : 10
declaracion_variable : 11 12
else                 : 66
else_prime           : 68
epsilon              : 5 26 69
equal                : 83 84
equal_operador       : 87
escritura            : 47
escritura_prime      : 60 63 64
escritura_string     : 62 64
estatuto             : 4
exp                  : 37 37 37 38 38 39 54 55 78 90 91 91 97
exp_operador         : 97
expr                 : 52 56 61 63 67 73 76 106
factor               : 100 101
for                  : 50
for_asignacion       : 74
for_asignacion_expr  : 75
for_exp              : 74
for_to               : 74
funcion              : 1 25
funcion_base         : 25
funcion_ident        : 27
funcion_prime        : 27 29
lectura              : 46
lectura_prime        : 57 59
llamada              : 44 107
llamada_prime        : 53 55
main                 : 1
or                   : 79 81
or_operador          : 81
programa             : 0
retorno              : 45
termino              : 96 97 101
termino_operador     : 101
tipo                 : 28 29
var_array            : 35
variable             : 51 58 59 75 105
while                : 49
while_expr           : 71
while_prime          : 71

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAM ID SEMICOLON declaracion_global funcion main bloque

    PROGRAM         shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> PROGRAM . ID SEMICOLON declaracion_global funcion main bloque

    ID              shift and go to state 3


state 3

    (1) programa -> PROGRAM ID . SEMICOLON declaracion_global funcion main bloque

    SEMICOLON       shift and go to state 4


state 4

    (1) programa -> PROGRAM ID SEMICOLON . declaracion_global funcion main bloque
    (7) declaracion_global -> . declaracion
    (8) declaracion -> . declaracion_base
    (9) declaracion -> . declaracion_base declaracion
    (10) declaracion_base -> . LET declaracion_prime COLON declaracion_tipo SEMICOLON

    LET             shift and go to state 8

    declaracion_global             shift and go to state 5
    declaracion                    shift and go to state 6
    declaracion_base               shift and go to state 7

state 5

    (1) programa -> PROGRAM ID SEMICOLON declaracion_global . funcion main bloque
    (25) funcion -> . funcion_base funcion
    (26) funcion -> . epsilon
    (27) funcion_base -> . FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque
    (113) epsilon -> .

    FUNCTION        shift and go to state 12
    MAIN            reduce using rule 113 (epsilon -> .)

    funcion                        shift and go to state 9
    funcion_base                   shift and go to state 10
    epsilon                        shift and go to state 11

state 6

    (7) declaracion_global -> declaracion .

    FUNCTION        reduce using rule 7 (declaracion_global -> declaracion .)
    MAIN            reduce using rule 7 (declaracion_global -> declaracion .)


state 7

    (8) declaracion -> declaracion_base .
    (9) declaracion -> declaracion_base . declaracion
    (8) declaracion -> . declaracion_base
    (9) declaracion -> . declaracion_base declaracion
    (10) declaracion_base -> . LET declaracion_prime COLON declaracion_tipo SEMICOLON

    FUNCTION        reduce using rule 8 (declaracion -> declaracion_base .)
    MAIN            reduce using rule 8 (declaracion -> declaracion_base .)
    O_CBRACKET      reduce using rule 8 (declaracion -> declaracion_base .)
    LET             shift and go to state 8

    declaracion_base               shift and go to state 7
    declaracion                    shift and go to state 13

state 8

    (10) declaracion_base -> LET . declaracion_prime COLON declaracion_tipo SEMICOLON
    (11) declaracion_prime -> . declaracion_variable
    (12) declaracion_prime -> . declaracion_variable COMMA declaracion_prime
    (13) declaracion_variable -> . ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (14) declaracion_variable -> . ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (15) declaracion_variable -> . ID O_ABRACKET CTE_INT C_ABRACKET
    (16) declaracion_variable -> . ID

    ID              shift and go to state 16

    declaracion_prime              shift and go to state 14
    declaracion_variable           shift and go to state 15

state 9

    (1) programa -> PROGRAM ID SEMICOLON declaracion_global funcion . main bloque
    (2) main -> . MAIN O_PARENTHESIS C_PARENTHESIS

    MAIN            shift and go to state 18

    main                           shift and go to state 17

state 10

    (25) funcion -> funcion_base . funcion
    (25) funcion -> . funcion_base funcion
    (26) funcion -> . epsilon
    (27) funcion_base -> . FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque
    (113) epsilon -> .

    FUNCTION        shift and go to state 12
    MAIN            reduce using rule 113 (epsilon -> .)

    funcion_base                   shift and go to state 10
    funcion                        shift and go to state 19
    epsilon                        shift and go to state 11

state 11

    (26) funcion -> epsilon .

    MAIN            reduce using rule 26 (funcion -> epsilon .)


state 12

    (27) funcion_base -> FUNCTION . funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque
    (30) funcion_ident -> . VOID ID
    (31) funcion_ident -> . INT ID
    (32) funcion_ident -> . FLOAT ID
    (33) funcion_ident -> . CHAR ID
    (34) funcion_ident -> . STRING ID

    VOID            shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    STRING          shift and go to state 25

    funcion_ident                  shift and go to state 20

state 13

    (9) declaracion -> declaracion_base declaracion .

    FUNCTION        reduce using rule 9 (declaracion -> declaracion_base declaracion .)
    MAIN            reduce using rule 9 (declaracion -> declaracion_base declaracion .)
    O_CBRACKET      reduce using rule 9 (declaracion -> declaracion_base declaracion .)


state 14

    (10) declaracion_base -> LET declaracion_prime . COLON declaracion_tipo SEMICOLON

    COLON           shift and go to state 26


state 15

    (11) declaracion_prime -> declaracion_variable .
    (12) declaracion_prime -> declaracion_variable . COMMA declaracion_prime

    COLON           reduce using rule 11 (declaracion_prime -> declaracion_variable .)
    COMMA           shift and go to state 27


state 16

    (13) declaracion_variable -> ID . O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (14) declaracion_variable -> ID . O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (15) declaracion_variable -> ID . O_ABRACKET CTE_INT C_ABRACKET
    (16) declaracion_variable -> ID .

    O_ABRACKET      shift and go to state 28
    COMMA           reduce using rule 16 (declaracion_variable -> ID .)
    COLON           reduce using rule 16 (declaracion_variable -> ID .)


state 17

    (1) programa -> PROGRAM ID SEMICOLON declaracion_global funcion main . bloque
    (3) bloque -> . O_CBRACKET bloque_prime C_CBRACKET

    O_CBRACKET      shift and go to state 30

    bloque                         shift and go to state 29

state 18

    (2) main -> MAIN . O_PARENTHESIS C_PARENTHESIS

    O_PARENTHESIS   shift and go to state 31


state 19

    (25) funcion -> funcion_base funcion .

    MAIN            reduce using rule 25 (funcion -> funcion_base funcion .)


state 20

    (27) funcion_base -> FUNCTION funcion_ident . O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque

    O_PARENTHESIS   shift and go to state 32


state 21

    (30) funcion_ident -> VOID . ID

    ID              shift and go to state 33


state 22

    (31) funcion_ident -> INT . ID

    ID              shift and go to state 34


state 23

    (32) funcion_ident -> FLOAT . ID

    ID              shift and go to state 35


state 24

    (33) funcion_ident -> CHAR . ID

    ID              shift and go to state 36


state 25

    (34) funcion_ident -> STRING . ID

    ID              shift and go to state 37


state 26

    (10) declaracion_base -> LET declaracion_prime COLON . declaracion_tipo SEMICOLON
    (17) declaracion_tipo -> . INT
    (18) declaracion_tipo -> . FLOAT
    (19) declaracion_tipo -> . CHAR
    (20) declaracion_tipo -> . STRING

    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    CHAR            shift and go to state 41
    STRING          shift and go to state 42

    declaracion_tipo               shift and go to state 38

state 27

    (12) declaracion_prime -> declaracion_variable COMMA . declaracion_prime
    (11) declaracion_prime -> . declaracion_variable
    (12) declaracion_prime -> . declaracion_variable COMMA declaracion_prime
    (13) declaracion_variable -> . ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (14) declaracion_variable -> . ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (15) declaracion_variable -> . ID O_ABRACKET CTE_INT C_ABRACKET
    (16) declaracion_variable -> . ID

    ID              shift and go to state 16

    declaracion_variable           shift and go to state 15
    declaracion_prime              shift and go to state 43

state 28

    (13) declaracion_variable -> ID O_ABRACKET . CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (14) declaracion_variable -> ID O_ABRACKET . CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (15) declaracion_variable -> ID O_ABRACKET . CTE_INT C_ABRACKET

    CTE_INT         shift and go to state 44


state 29

    (1) programa -> PROGRAM ID SEMICOLON declaracion_global funcion main bloque .

    $end            reduce using rule 1 (programa -> PROGRAM ID SEMICOLON declaracion_global funcion main bloque .)


state 30

    (3) bloque -> O_CBRACKET . bloque_prime C_CBRACKET
    (4) bloque_prime -> . estatuto bloque_prime
    (5) bloque_prime -> . epsilon
    (43) estatuto -> . asignacion SEMICOLON
    (44) estatuto -> . llamada SEMICOLON
    (45) estatuto -> . retorno SEMICOLON
    (46) estatuto -> . lectura SEMICOLON
    (47) estatuto -> . escritura SEMICOLON
    (48) estatuto -> . decision
    (49) estatuto -> . while
    (50) estatuto -> . for
    (113) epsilon -> .
    (51) asignacion -> . variable ASSIGN asignacion_expr
    (53) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (56) retorno -> . RETURN O_PARENTHESIS expr C_PARENTHESIS
    (57) lectura -> . READ O_PARENTHESIS lectura_prime C_PARENTHESIS
    (60) escritura -> . WRITE O_PARENTHESIS escritura_prime C_PARENTHESIS
    (66) decision -> . IF O_PARENTHESIS decision_expr C_PARENTHESIS bloque else
    (71) while -> . while_prime while_expr bloque
    (74) for -> . FOR for_asignacion for_to for_exp bloque
    (35) variable -> . var_array
    (36) variable -> . ID
    (72) while_prime -> . WHILE
    (37) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (40) arr_id -> . ID

    C_CBRACKET      reduce using rule 113 (epsilon -> .)
    ID              shift and go to state 57
    RETURN          shift and go to state 58
    READ            shift and go to state 59
    WRITE           shift and go to state 60
    IF              shift and go to state 61
    FOR             shift and go to state 63
    WHILE           shift and go to state 65

    bloque_prime                   shift and go to state 45
    estatuto                       shift and go to state 46
    epsilon                        shift and go to state 47
    asignacion                     shift and go to state 48
    llamada                        shift and go to state 49
    retorno                        shift and go to state 50
    lectura                        shift and go to state 51
    escritura                      shift and go to state 52
    decision                       shift and go to state 53
    while                          shift and go to state 54
    for                            shift and go to state 55
    variable                       shift and go to state 56
    while_prime                    shift and go to state 62
    var_array                      shift and go to state 64
    arr_id                         shift and go to state 66

state 31

    (2) main -> MAIN O_PARENTHESIS . C_PARENTHESIS

    C_PARENTHESIS   shift and go to state 67


state 32

    (27) funcion_base -> FUNCTION funcion_ident O_PARENTHESIS . funcion_prime C_PARENTHESIS declaracion_funcion bloque
    (28) funcion_prime -> . tipo ID
    (29) funcion_prime -> . tipo ID COMMA funcion_prime
    (21) tipo -> . INT
    (22) tipo -> . FLOAT
    (23) tipo -> . CHAR
    (24) tipo -> . STRING

    INT             shift and go to state 70
    FLOAT           shift and go to state 71
    CHAR            shift and go to state 72
    STRING          shift and go to state 73

    funcion_prime                  shift and go to state 68
    tipo                           shift and go to state 69

state 33

    (30) funcion_ident -> VOID ID .

    O_PARENTHESIS   reduce using rule 30 (funcion_ident -> VOID ID .)


state 34

    (31) funcion_ident -> INT ID .

    O_PARENTHESIS   reduce using rule 31 (funcion_ident -> INT ID .)


state 35

    (32) funcion_ident -> FLOAT ID .

    O_PARENTHESIS   reduce using rule 32 (funcion_ident -> FLOAT ID .)


state 36

    (33) funcion_ident -> CHAR ID .

    O_PARENTHESIS   reduce using rule 33 (funcion_ident -> CHAR ID .)


state 37

    (34) funcion_ident -> STRING ID .

    O_PARENTHESIS   reduce using rule 34 (funcion_ident -> STRING ID .)


state 38

    (10) declaracion_base -> LET declaracion_prime COLON declaracion_tipo . SEMICOLON

    SEMICOLON       shift and go to state 74


state 39

    (17) declaracion_tipo -> INT .

    SEMICOLON       reduce using rule 17 (declaracion_tipo -> INT .)


state 40

    (18) declaracion_tipo -> FLOAT .

    SEMICOLON       reduce using rule 18 (declaracion_tipo -> FLOAT .)


state 41

    (19) declaracion_tipo -> CHAR .

    SEMICOLON       reduce using rule 19 (declaracion_tipo -> CHAR .)


state 42

    (20) declaracion_tipo -> STRING .

    SEMICOLON       reduce using rule 20 (declaracion_tipo -> STRING .)


state 43

    (12) declaracion_prime -> declaracion_variable COMMA declaracion_prime .

    COLON           reduce using rule 12 (declaracion_prime -> declaracion_variable COMMA declaracion_prime .)


state 44

    (13) declaracion_variable -> ID O_ABRACKET CTE_INT . C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (14) declaracion_variable -> ID O_ABRACKET CTE_INT . C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (15) declaracion_variable -> ID O_ABRACKET CTE_INT . C_ABRACKET

    C_ABRACKET      shift and go to state 75


state 45

    (3) bloque -> O_CBRACKET bloque_prime . C_CBRACKET

    C_CBRACKET      shift and go to state 76


state 46

    (4) bloque_prime -> estatuto . bloque_prime
    (4) bloque_prime -> . estatuto bloque_prime
    (5) bloque_prime -> . epsilon
    (43) estatuto -> . asignacion SEMICOLON
    (44) estatuto -> . llamada SEMICOLON
    (45) estatuto -> . retorno SEMICOLON
    (46) estatuto -> . lectura SEMICOLON
    (47) estatuto -> . escritura SEMICOLON
    (48) estatuto -> . decision
    (49) estatuto -> . while
    (50) estatuto -> . for
    (113) epsilon -> .
    (51) asignacion -> . variable ASSIGN asignacion_expr
    (53) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (56) retorno -> . RETURN O_PARENTHESIS expr C_PARENTHESIS
    (57) lectura -> . READ O_PARENTHESIS lectura_prime C_PARENTHESIS
    (60) escritura -> . WRITE O_PARENTHESIS escritura_prime C_PARENTHESIS
    (66) decision -> . IF O_PARENTHESIS decision_expr C_PARENTHESIS bloque else
    (71) while -> . while_prime while_expr bloque
    (74) for -> . FOR for_asignacion for_to for_exp bloque
    (35) variable -> . var_array
    (36) variable -> . ID
    (72) while_prime -> . WHILE
    (37) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (40) arr_id -> . ID

    C_CBRACKET      reduce using rule 113 (epsilon -> .)
    ID              shift and go to state 57
    RETURN          shift and go to state 58
    READ            shift and go to state 59
    WRITE           shift and go to state 60
    IF              shift and go to state 61
    FOR             shift and go to state 63
    WHILE           shift and go to state 65

    estatuto                       shift and go to state 46
    bloque_prime                   shift and go to state 77
    epsilon                        shift and go to state 47
    asignacion                     shift and go to state 48
    llamada                        shift and go to state 49
    retorno                        shift and go to state 50
    lectura                        shift and go to state 51
    escritura                      shift and go to state 52
    decision                       shift and go to state 53
    while                          shift and go to state 54
    for                            shift and go to state 55
    variable                       shift and go to state 56
    while_prime                    shift and go to state 62
    var_array                      shift and go to state 64
    arr_id                         shift and go to state 66

state 47

    (5) bloque_prime -> epsilon .

    C_CBRACKET      reduce using rule 5 (bloque_prime -> epsilon .)


state 48

    (43) estatuto -> asignacion . SEMICOLON

    SEMICOLON       shift and go to state 78


state 49

    (44) estatuto -> llamada . SEMICOLON

    SEMICOLON       shift and go to state 79


state 50

    (45) estatuto -> retorno . SEMICOLON

    SEMICOLON       shift and go to state 80


state 51

    (46) estatuto -> lectura . SEMICOLON

    SEMICOLON       shift and go to state 81


state 52

    (47) estatuto -> escritura . SEMICOLON

    SEMICOLON       shift and go to state 82


state 53

    (48) estatuto -> decision .

    ID              reduce using rule 48 (estatuto -> decision .)
    RETURN          reduce using rule 48 (estatuto -> decision .)
    READ            reduce using rule 48 (estatuto -> decision .)
    WRITE           reduce using rule 48 (estatuto -> decision .)
    IF              reduce using rule 48 (estatuto -> decision .)
    FOR             reduce using rule 48 (estatuto -> decision .)
    WHILE           reduce using rule 48 (estatuto -> decision .)
    C_CBRACKET      reduce using rule 48 (estatuto -> decision .)


state 54

    (49) estatuto -> while .

    ID              reduce using rule 49 (estatuto -> while .)
    RETURN          reduce using rule 49 (estatuto -> while .)
    READ            reduce using rule 49 (estatuto -> while .)
    WRITE           reduce using rule 49 (estatuto -> while .)
    IF              reduce using rule 49 (estatuto -> while .)
    FOR             reduce using rule 49 (estatuto -> while .)
    WHILE           reduce using rule 49 (estatuto -> while .)
    C_CBRACKET      reduce using rule 49 (estatuto -> while .)


state 55

    (50) estatuto -> for .

    ID              reduce using rule 50 (estatuto -> for .)
    RETURN          reduce using rule 50 (estatuto -> for .)
    READ            reduce using rule 50 (estatuto -> for .)
    WRITE           reduce using rule 50 (estatuto -> for .)
    IF              reduce using rule 50 (estatuto -> for .)
    FOR             reduce using rule 50 (estatuto -> for .)
    WHILE           reduce using rule 50 (estatuto -> for .)
    C_CBRACKET      reduce using rule 50 (estatuto -> for .)


state 56

    (51) asignacion -> variable . ASSIGN asignacion_expr

    ASSIGN          shift and go to state 83


state 57

    (53) llamada -> ID . O_PARENTHESIS llamada_prime C_PARENTHESIS
    (36) variable -> ID .
    (40) arr_id -> ID .

    O_PARENTHESIS   shift and go to state 84
    ASSIGN          reduce using rule 36 (variable -> ID .)
    O_ABRACKET      reduce using rule 40 (arr_id -> ID .)


state 58

    (56) retorno -> RETURN . O_PARENTHESIS expr C_PARENTHESIS

    O_PARENTHESIS   shift and go to state 85


state 59

    (57) lectura -> READ . O_PARENTHESIS lectura_prime C_PARENTHESIS

    O_PARENTHESIS   shift and go to state 86


state 60

    (60) escritura -> WRITE . O_PARENTHESIS escritura_prime C_PARENTHESIS

    O_PARENTHESIS   shift and go to state 87


state 61

    (66) decision -> IF . O_PARENTHESIS decision_expr C_PARENTHESIS bloque else

    O_PARENTHESIS   shift and go to state 88


state 62

    (71) while -> while_prime . while_expr bloque
    (73) while_expr -> . O_PARENTHESIS expr C_PARENTHESIS

    O_PARENTHESIS   shift and go to state 90

    while_expr                     shift and go to state 89

state 63

    (74) for -> FOR . for_asignacion for_to for_exp bloque
    (75) for_asignacion -> . variable ASSIGN for_asignacion_expr
    (35) variable -> . var_array
    (36) variable -> . ID
    (37) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (40) arr_id -> . ID

    ID              shift and go to state 93

    for_asignacion                 shift and go to state 91
    variable                       shift and go to state 92
    var_array                      shift and go to state 64
    arr_id                         shift and go to state 66

state 64

    (35) variable -> var_array .

    ASSIGN          reduce using rule 35 (variable -> var_array .)
    TIMES           reduce using rule 35 (variable -> var_array .)
    DIVIDE          reduce using rule 35 (variable -> var_array .)
    MODULE          reduce using rule 35 (variable -> var_array .)
    PLUS            reduce using rule 35 (variable -> var_array .)
    MINUS           reduce using rule 35 (variable -> var_array .)
    GREATER         reduce using rule 35 (variable -> var_array .)
    LESSER          reduce using rule 35 (variable -> var_array .)
    GREATER_EQUAL   reduce using rule 35 (variable -> var_array .)
    LESSER_EQUAL    reduce using rule 35 (variable -> var_array .)
    EQUAL           reduce using rule 35 (variable -> var_array .)
    NOT_EQUAL       reduce using rule 35 (variable -> var_array .)
    AND             reduce using rule 35 (variable -> var_array .)
    OR              reduce using rule 35 (variable -> var_array .)
    SEMICOLON       reduce using rule 35 (variable -> var_array .)
    COMMA           reduce using rule 35 (variable -> var_array .)
    C_PARENTHESIS   reduce using rule 35 (variable -> var_array .)
    C_ABRACKET      reduce using rule 35 (variable -> var_array .)
    O_CBRACKET      reduce using rule 35 (variable -> var_array .)
    TO              reduce using rule 35 (variable -> var_array .)


state 65

    (72) while_prime -> WHILE .

    O_PARENTHESIS   reduce using rule 72 (while_prime -> WHILE .)


state 66

    (37) var_array -> arr_id . O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> arr_id . O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> arr_id . O_ABRACKET exp arr_close_bracket

    O_ABRACKET      shift and go to state 94


state 67

    (2) main -> MAIN O_PARENTHESIS C_PARENTHESIS .

    O_CBRACKET      reduce using rule 2 (main -> MAIN O_PARENTHESIS C_PARENTHESIS .)


state 68

    (27) funcion_base -> FUNCTION funcion_ident O_PARENTHESIS funcion_prime . C_PARENTHESIS declaracion_funcion bloque

    C_PARENTHESIS   shift and go to state 95


state 69

    (28) funcion_prime -> tipo . ID
    (29) funcion_prime -> tipo . ID COMMA funcion_prime

    ID              shift and go to state 96


state 70

    (21) tipo -> INT .

    ID              reduce using rule 21 (tipo -> INT .)


state 71

    (22) tipo -> FLOAT .

    ID              reduce using rule 22 (tipo -> FLOAT .)


state 72

    (23) tipo -> CHAR .

    ID              reduce using rule 23 (tipo -> CHAR .)


state 73

    (24) tipo -> STRING .

    ID              reduce using rule 24 (tipo -> STRING .)


state 74

    (10) declaracion_base -> LET declaracion_prime COLON declaracion_tipo SEMICOLON .

    LET             reduce using rule 10 (declaracion_base -> LET declaracion_prime COLON declaracion_tipo SEMICOLON .)
    FUNCTION        reduce using rule 10 (declaracion_base -> LET declaracion_prime COLON declaracion_tipo SEMICOLON .)
    MAIN            reduce using rule 10 (declaracion_base -> LET declaracion_prime COLON declaracion_tipo SEMICOLON .)
    O_CBRACKET      reduce using rule 10 (declaracion_base -> LET declaracion_prime COLON declaracion_tipo SEMICOLON .)


state 75

    (13) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET . O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (14) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET . O_ABRACKET CTE_INT C_ABRACKET
    (15) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET .

    O_ABRACKET      shift and go to state 97
    COMMA           reduce using rule 15 (declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET .)
    COLON           reduce using rule 15 (declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET .)


state 76

    (3) bloque -> O_CBRACKET bloque_prime C_CBRACKET .

    $end            reduce using rule 3 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    ID              reduce using rule 3 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    RETURN          reduce using rule 3 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    READ            reduce using rule 3 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    WRITE           reduce using rule 3 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    IF              reduce using rule 3 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    FOR             reduce using rule 3 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    WHILE           reduce using rule 3 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    C_CBRACKET      reduce using rule 3 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    FUNCTION        reduce using rule 3 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    MAIN            reduce using rule 3 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    ELSE            reduce using rule 3 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)


state 77

    (4) bloque_prime -> estatuto bloque_prime .

    C_CBRACKET      reduce using rule 4 (bloque_prime -> estatuto bloque_prime .)


state 78

    (43) estatuto -> asignacion SEMICOLON .

    ID              reduce using rule 43 (estatuto -> asignacion SEMICOLON .)
    RETURN          reduce using rule 43 (estatuto -> asignacion SEMICOLON .)
    READ            reduce using rule 43 (estatuto -> asignacion SEMICOLON .)
    WRITE           reduce using rule 43 (estatuto -> asignacion SEMICOLON .)
    IF              reduce using rule 43 (estatuto -> asignacion SEMICOLON .)
    FOR             reduce using rule 43 (estatuto -> asignacion SEMICOLON .)
    WHILE           reduce using rule 43 (estatuto -> asignacion SEMICOLON .)
    C_CBRACKET      reduce using rule 43 (estatuto -> asignacion SEMICOLON .)


state 79

    (44) estatuto -> llamada SEMICOLON .

    ID              reduce using rule 44 (estatuto -> llamada SEMICOLON .)
    RETURN          reduce using rule 44 (estatuto -> llamada SEMICOLON .)
    READ            reduce using rule 44 (estatuto -> llamada SEMICOLON .)
    WRITE           reduce using rule 44 (estatuto -> llamada SEMICOLON .)
    IF              reduce using rule 44 (estatuto -> llamada SEMICOLON .)
    FOR             reduce using rule 44 (estatuto -> llamada SEMICOLON .)
    WHILE           reduce using rule 44 (estatuto -> llamada SEMICOLON .)
    C_CBRACKET      reduce using rule 44 (estatuto -> llamada SEMICOLON .)


state 80

    (45) estatuto -> retorno SEMICOLON .

    ID              reduce using rule 45 (estatuto -> retorno SEMICOLON .)
    RETURN          reduce using rule 45 (estatuto -> retorno SEMICOLON .)
    READ            reduce using rule 45 (estatuto -> retorno SEMICOLON .)
    WRITE           reduce using rule 45 (estatuto -> retorno SEMICOLON .)
    IF              reduce using rule 45 (estatuto -> retorno SEMICOLON .)
    FOR             reduce using rule 45 (estatuto -> retorno SEMICOLON .)
    WHILE           reduce using rule 45 (estatuto -> retorno SEMICOLON .)
    C_CBRACKET      reduce using rule 45 (estatuto -> retorno SEMICOLON .)


state 81

    (46) estatuto -> lectura SEMICOLON .

    ID              reduce using rule 46 (estatuto -> lectura SEMICOLON .)
    RETURN          reduce using rule 46 (estatuto -> lectura SEMICOLON .)
    READ            reduce using rule 46 (estatuto -> lectura SEMICOLON .)
    WRITE           reduce using rule 46 (estatuto -> lectura SEMICOLON .)
    IF              reduce using rule 46 (estatuto -> lectura SEMICOLON .)
    FOR             reduce using rule 46 (estatuto -> lectura SEMICOLON .)
    WHILE           reduce using rule 46 (estatuto -> lectura SEMICOLON .)
    C_CBRACKET      reduce using rule 46 (estatuto -> lectura SEMICOLON .)


state 82

    (47) estatuto -> escritura SEMICOLON .

    ID              reduce using rule 47 (estatuto -> escritura SEMICOLON .)
    RETURN          reduce using rule 47 (estatuto -> escritura SEMICOLON .)
    READ            reduce using rule 47 (estatuto -> escritura SEMICOLON .)
    WRITE           reduce using rule 47 (estatuto -> escritura SEMICOLON .)
    IF              reduce using rule 47 (estatuto -> escritura SEMICOLON .)
    FOR             reduce using rule 47 (estatuto -> escritura SEMICOLON .)
    WHILE           reduce using rule 47 (estatuto -> escritura SEMICOLON .)
    C_CBRACKET      reduce using rule 47 (estatuto -> escritura SEMICOLON .)


state 83

    (51) asignacion -> variable ASSIGN . asignacion_expr
    (52) asignacion_expr -> . expr
    (79) expr -> . or
    (80) or -> . and
    (81) or -> . and or_operador or
    (83) and -> . equal
    (84) and -> . equal and_operador and
    (86) equal -> . compare
    (87) equal -> . compare equal_operador compare
    (90) compare -> . exp
    (91) compare -> . exp compare_operador exp
    (96) exp -> . termino
    (97) exp -> . termino exp_operador exp
    (100) termino -> . factor
    (101) termino -> . factor termino_operador termino
    (105) factor -> . variable
    (106) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (107) factor -> . llamada
    (108) factor -> . cte
    (109) factor -> . PLUS cte
    (110) factor -> . MINUS cte
    (35) variable -> . var_array
    (36) variable -> . ID
    (53) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (111) cte -> . CTE_INT
    (112) cte -> . CTE_FLOAT
    (37) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (40) arr_id -> . ID

    O_PARENTHESIS   shift and go to state 108
    PLUS            shift and go to state 111
    MINUS           shift and go to state 112
    ID              shift and go to state 113
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 115

    variable                       shift and go to state 98
    asignacion_expr                shift and go to state 99
    expr                           shift and go to state 100
    or                             shift and go to state 101
    and                            shift and go to state 102
    equal                          shift and go to state 103
    compare                        shift and go to state 104
    exp                            shift and go to state 105
    termino                        shift and go to state 106
    factor                         shift and go to state 107
    llamada                        shift and go to state 109
    cte                            shift and go to state 110
    var_array                      shift and go to state 64
    arr_id                         shift and go to state 66

state 84

    (53) llamada -> ID O_PARENTHESIS . llamada_prime C_PARENTHESIS
    (54) llamada_prime -> . exp
    (55) llamada_prime -> . exp COMMA llamada_prime
    (96) exp -> . termino
    (97) exp -> . termino exp_operador exp
    (100) termino -> . factor
    (101) termino -> . factor termino_operador termino
    (105) factor -> . variable
    (106) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (107) factor -> . llamada
    (108) factor -> . cte
    (109) factor -> . PLUS cte
    (110) factor -> . MINUS cte
    (35) variable -> . var_array
    (36) variable -> . ID
    (53) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (111) cte -> . CTE_INT
    (112) cte -> . CTE_FLOAT
    (37) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (40) arr_id -> . ID

    O_PARENTHESIS   shift and go to state 108
    PLUS            shift and go to state 111
    MINUS           shift and go to state 112
    ID              shift and go to state 113
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 115

    llamada_prime                  shift and go to state 116
    exp                            shift and go to state 117
    termino                        shift and go to state 106
    factor                         shift and go to state 107
    variable                       shift and go to state 98
    llamada                        shift and go to state 109
    cte                            shift and go to state 110
    var_array                      shift and go to state 64
    arr_id                         shift and go to state 66

state 85

    (56) retorno -> RETURN O_PARENTHESIS . expr C_PARENTHESIS
    (79) expr -> . or
    (80) or -> . and
    (81) or -> . and or_operador or
    (83) and -> . equal
    (84) and -> . equal and_operador and
    (86) equal -> . compare
    (87) equal -> . compare equal_operador compare
    (90) compare -> . exp
    (91) compare -> . exp compare_operador exp
    (96) exp -> . termino
    (97) exp -> . termino exp_operador exp
    (100) termino -> . factor
    (101) termino -> . factor termino_operador termino
    (105) factor -> . variable
    (106) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (107) factor -> . llamada
    (108) factor -> . cte
    (109) factor -> . PLUS cte
    (110) factor -> . MINUS cte
    (35) variable -> . var_array
    (36) variable -> . ID
    (53) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (111) cte -> . CTE_INT
    (112) cte -> . CTE_FLOAT
    (37) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (40) arr_id -> . ID

    O_PARENTHESIS   shift and go to state 108
    PLUS            shift and go to state 111
    MINUS           shift and go to state 112
    ID              shift and go to state 113
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 115

    expr                           shift and go to state 118
    or                             shift and go to state 101
    and                            shift and go to state 102
    equal                          shift and go to state 103
    compare                        shift and go to state 104
    exp                            shift and go to state 105
    termino                        shift and go to state 106
    factor                         shift and go to state 107
    variable                       shift and go to state 98
    llamada                        shift and go to state 109
    cte                            shift and go to state 110
    var_array                      shift and go to state 64
    arr_id                         shift and go to state 66

state 86

    (57) lectura -> READ O_PARENTHESIS . lectura_prime C_PARENTHESIS
    (58) lectura_prime -> . variable
    (59) lectura_prime -> . variable COMMA lectura_prime
    (35) variable -> . var_array
    (36) variable -> . ID
    (37) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (40) arr_id -> . ID

    ID              shift and go to state 93

    lectura_prime                  shift and go to state 119
    variable                       shift and go to state 120
    var_array                      shift and go to state 64
    arr_id                         shift and go to state 66

state 87

    (60) escritura -> WRITE O_PARENTHESIS . escritura_prime C_PARENTHESIS
    (61) escritura_prime -> . expr
    (62) escritura_prime -> . escritura_string
    (63) escritura_prime -> . expr COMMA escritura_prime
    (64) escritura_prime -> . escritura_string COMMA escritura_prime
    (79) expr -> . or
    (65) escritura_string -> . CTE_STRING
    (80) or -> . and
    (81) or -> . and or_operador or
    (83) and -> . equal
    (84) and -> . equal and_operador and
    (86) equal -> . compare
    (87) equal -> . compare equal_operador compare
    (90) compare -> . exp
    (91) compare -> . exp compare_operador exp
    (96) exp -> . termino
    (97) exp -> . termino exp_operador exp
    (100) termino -> . factor
    (101) termino -> . factor termino_operador termino
    (105) factor -> . variable
    (106) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (107) factor -> . llamada
    (108) factor -> . cte
    (109) factor -> . PLUS cte
    (110) factor -> . MINUS cte
    (35) variable -> . var_array
    (36) variable -> . ID
    (53) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (111) cte -> . CTE_INT
    (112) cte -> . CTE_FLOAT
    (37) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (40) arr_id -> . ID

    CTE_STRING      shift and go to state 124
    O_PARENTHESIS   shift and go to state 108
    PLUS            shift and go to state 111
    MINUS           shift and go to state 112
    ID              shift and go to state 113
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 115

    escritura_prime                shift and go to state 121
    expr                           shift and go to state 122
    escritura_string               shift and go to state 123
    or                             shift and go to state 101
    and                            shift and go to state 102
    equal                          shift and go to state 103
    compare                        shift and go to state 104
    exp                            shift and go to state 105
    termino                        shift and go to state 106
    factor                         shift and go to state 107
    variable                       shift and go to state 98
    llamada                        shift and go to state 109
    cte                            shift and go to state 110
    var_array                      shift and go to state 64
    arr_id                         shift and go to state 66

state 88

    (66) decision -> IF O_PARENTHESIS . decision_expr C_PARENTHESIS bloque else
    (67) decision_expr -> . expr
    (79) expr -> . or
    (80) or -> . and
    (81) or -> . and or_operador or
    (83) and -> . equal
    (84) and -> . equal and_operador and
    (86) equal -> . compare
    (87) equal -> . compare equal_operador compare
    (90) compare -> . exp
    (91) compare -> . exp compare_operador exp
    (96) exp -> . termino
    (97) exp -> . termino exp_operador exp
    (100) termino -> . factor
    (101) termino -> . factor termino_operador termino
    (105) factor -> . variable
    (106) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (107) factor -> . llamada
    (108) factor -> . cte
    (109) factor -> . PLUS cte
    (110) factor -> . MINUS cte
    (35) variable -> . var_array
    (36) variable -> . ID
    (53) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (111) cte -> . CTE_INT
    (112) cte -> . CTE_FLOAT
    (37) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (40) arr_id -> . ID

    O_PARENTHESIS   shift and go to state 108
    PLUS            shift and go to state 111
    MINUS           shift and go to state 112
    ID              shift and go to state 113
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 115

    decision_expr                  shift and go to state 125
    expr                           shift and go to state 126
    or                             shift and go to state 101
    and                            shift and go to state 102
    equal                          shift and go to state 103
    compare                        shift and go to state 104
    exp                            shift and go to state 105
    termino                        shift and go to state 106
    factor                         shift and go to state 107
    variable                       shift and go to state 98
    llamada                        shift and go to state 109
    cte                            shift and go to state 110
    var_array                      shift and go to state 64
    arr_id                         shift and go to state 66

state 89

    (71) while -> while_prime while_expr . bloque
    (3) bloque -> . O_CBRACKET bloque_prime C_CBRACKET

    O_CBRACKET      shift and go to state 30

    bloque                         shift and go to state 127

state 90

    (73) while_expr -> O_PARENTHESIS . expr C_PARENTHESIS
    (79) expr -> . or
    (80) or -> . and
    (81) or -> . and or_operador or
    (83) and -> . equal
    (84) and -> . equal and_operador and
    (86) equal -> . compare
    (87) equal -> . compare equal_operador compare
    (90) compare -> . exp
    (91) compare -> . exp compare_operador exp
    (96) exp -> . termino
    (97) exp -> . termino exp_operador exp
    (100) termino -> . factor
    (101) termino -> . factor termino_operador termino
    (105) factor -> . variable
    (106) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (107) factor -> . llamada
    (108) factor -> . cte
    (109) factor -> . PLUS cte
    (110) factor -> . MINUS cte
    (35) variable -> . var_array
    (36) variable -> . ID
    (53) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (111) cte -> . CTE_INT
    (112) cte -> . CTE_FLOAT
    (37) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (40) arr_id -> . ID

    O_PARENTHESIS   shift and go to state 108
    PLUS            shift and go to state 111
    MINUS           shift and go to state 112
    ID              shift and go to state 113
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 115

    expr                           shift and go to state 128
    or                             shift and go to state 101
    and                            shift and go to state 102
    equal                          shift and go to state 103
    compare                        shift and go to state 104
    exp                            shift and go to state 105
    termino                        shift and go to state 106
    factor                         shift and go to state 107
    variable                       shift and go to state 98
    llamada                        shift and go to state 109
    cte                            shift and go to state 110
    var_array                      shift and go to state 64
    arr_id                         shift and go to state 66

state 91

    (74) for -> FOR for_asignacion . for_to for_exp bloque
    (77) for_to -> . TO

    TO              shift and go to state 130

    for_to                         shift and go to state 129

state 92

    (75) for_asignacion -> variable . ASSIGN for_asignacion_expr

    ASSIGN          shift and go to state 131


state 93

    (36) variable -> ID .
    (40) arr_id -> ID .

    ASSIGN          reduce using rule 36 (variable -> ID .)
    COMMA           reduce using rule 36 (variable -> ID .)
    C_PARENTHESIS   reduce using rule 36 (variable -> ID .)
    O_ABRACKET      reduce using rule 40 (arr_id -> ID .)


state 94

    (37) var_array -> arr_id O_ABRACKET . exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> arr_id O_ABRACKET . exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> arr_id O_ABRACKET . exp arr_close_bracket
    (96) exp -> . termino
    (97) exp -> . termino exp_operador exp
    (100) termino -> . factor
    (101) termino -> . factor termino_operador termino
    (105) factor -> . variable
    (106) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (107) factor -> . llamada
    (108) factor -> . cte
    (109) factor -> . PLUS cte
    (110) factor -> . MINUS cte
    (35) variable -> . var_array
    (36) variable -> . ID
    (53) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (111) cte -> . CTE_INT
    (112) cte -> . CTE_FLOAT
    (37) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (40) arr_id -> . ID

    O_PARENTHESIS   shift and go to state 108
    PLUS            shift and go to state 111
    MINUS           shift and go to state 112
    ID              shift and go to state 113
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 115

    arr_id                         shift and go to state 66
    exp                            shift and go to state 132
    termino                        shift and go to state 106
    factor                         shift and go to state 107
    variable                       shift and go to state 98
    llamada                        shift and go to state 109
    cte                            shift and go to state 110
    var_array                      shift and go to state 64

state 95

    (27) funcion_base -> FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS . declaracion_funcion bloque
    (6) declaracion_funcion -> . declaracion
    (8) declaracion -> . declaracion_base
    (9) declaracion -> . declaracion_base declaracion
    (10) declaracion_base -> . LET declaracion_prime COLON declaracion_tipo SEMICOLON

    LET             shift and go to state 8

    declaracion_funcion            shift and go to state 133
    declaracion                    shift and go to state 134
    declaracion_base               shift and go to state 7

state 96

    (28) funcion_prime -> tipo ID .
    (29) funcion_prime -> tipo ID . COMMA funcion_prime

    C_PARENTHESIS   reduce using rule 28 (funcion_prime -> tipo ID .)
    COMMA           shift and go to state 135


state 97

    (13) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET . CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (14) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET . CTE_INT C_ABRACKET

    CTE_INT         shift and go to state 136


state 98

    (105) factor -> variable .

    TIMES           reduce using rule 105 (factor -> variable .)
    DIVIDE          reduce using rule 105 (factor -> variable .)
    MODULE          reduce using rule 105 (factor -> variable .)
    PLUS            reduce using rule 105 (factor -> variable .)
    MINUS           reduce using rule 105 (factor -> variable .)
    GREATER         reduce using rule 105 (factor -> variable .)
    LESSER          reduce using rule 105 (factor -> variable .)
    GREATER_EQUAL   reduce using rule 105 (factor -> variable .)
    LESSER_EQUAL    reduce using rule 105 (factor -> variable .)
    EQUAL           reduce using rule 105 (factor -> variable .)
    NOT_EQUAL       reduce using rule 105 (factor -> variable .)
    AND             reduce using rule 105 (factor -> variable .)
    OR              reduce using rule 105 (factor -> variable .)
    SEMICOLON       reduce using rule 105 (factor -> variable .)
    COMMA           reduce using rule 105 (factor -> variable .)
    C_PARENTHESIS   reduce using rule 105 (factor -> variable .)
    C_ABRACKET      reduce using rule 105 (factor -> variable .)
    O_CBRACKET      reduce using rule 105 (factor -> variable .)
    TO              reduce using rule 105 (factor -> variable .)


state 99

    (51) asignacion -> variable ASSIGN asignacion_expr .

    SEMICOLON       reduce using rule 51 (asignacion -> variable ASSIGN asignacion_expr .)


state 100

    (52) asignacion_expr -> expr .

    SEMICOLON       reduce using rule 52 (asignacion_expr -> expr .)


state 101

    (79) expr -> or .

    SEMICOLON       reduce using rule 79 (expr -> or .)
    C_PARENTHESIS   reduce using rule 79 (expr -> or .)
    COMMA           reduce using rule 79 (expr -> or .)
    TO              reduce using rule 79 (expr -> or .)


state 102

    (80) or -> and .
    (81) or -> and . or_operador or
    (82) or_operador -> . OR

    SEMICOLON       reduce using rule 80 (or -> and .)
    C_PARENTHESIS   reduce using rule 80 (or -> and .)
    COMMA           reduce using rule 80 (or -> and .)
    TO              reduce using rule 80 (or -> and .)
    OR              shift and go to state 138

    or_operador                    shift and go to state 137

state 103

    (83) and -> equal .
    (84) and -> equal . and_operador and
    (85) and_operador -> . AND

    OR              reduce using rule 83 (and -> equal .)
    SEMICOLON       reduce using rule 83 (and -> equal .)
    C_PARENTHESIS   reduce using rule 83 (and -> equal .)
    COMMA           reduce using rule 83 (and -> equal .)
    TO              reduce using rule 83 (and -> equal .)
    AND             shift and go to state 140

    and_operador                   shift and go to state 139

state 104

    (86) equal -> compare .
    (87) equal -> compare . equal_operador compare
    (88) equal_operador -> . EQUAL
    (89) equal_operador -> . NOT_EQUAL

    AND             reduce using rule 86 (equal -> compare .)
    OR              reduce using rule 86 (equal -> compare .)
    SEMICOLON       reduce using rule 86 (equal -> compare .)
    C_PARENTHESIS   reduce using rule 86 (equal -> compare .)
    COMMA           reduce using rule 86 (equal -> compare .)
    TO              reduce using rule 86 (equal -> compare .)
    EQUAL           shift and go to state 142
    NOT_EQUAL       shift and go to state 143

    equal_operador                 shift and go to state 141

state 105

    (90) compare -> exp .
    (91) compare -> exp . compare_operador exp
    (92) compare_operador -> . GREATER
    (93) compare_operador -> . LESSER
    (94) compare_operador -> . GREATER_EQUAL
    (95) compare_operador -> . LESSER_EQUAL

    EQUAL           reduce using rule 90 (compare -> exp .)
    NOT_EQUAL       reduce using rule 90 (compare -> exp .)
    AND             reduce using rule 90 (compare -> exp .)
    OR              reduce using rule 90 (compare -> exp .)
    SEMICOLON       reduce using rule 90 (compare -> exp .)
    C_PARENTHESIS   reduce using rule 90 (compare -> exp .)
    COMMA           reduce using rule 90 (compare -> exp .)
    TO              reduce using rule 90 (compare -> exp .)
    GREATER         shift and go to state 145
    LESSER          shift and go to state 146
    GREATER_EQUAL   shift and go to state 147
    LESSER_EQUAL    shift and go to state 148

    compare_operador               shift and go to state 144

state 106

    (96) exp -> termino .
    (97) exp -> termino . exp_operador exp
    (98) exp_operador -> . PLUS
    (99) exp_operador -> . MINUS

    GREATER         reduce using rule 96 (exp -> termino .)
    LESSER          reduce using rule 96 (exp -> termino .)
    GREATER_EQUAL   reduce using rule 96 (exp -> termino .)
    LESSER_EQUAL    reduce using rule 96 (exp -> termino .)
    EQUAL           reduce using rule 96 (exp -> termino .)
    NOT_EQUAL       reduce using rule 96 (exp -> termino .)
    AND             reduce using rule 96 (exp -> termino .)
    OR              reduce using rule 96 (exp -> termino .)
    SEMICOLON       reduce using rule 96 (exp -> termino .)
    COMMA           reduce using rule 96 (exp -> termino .)
    C_PARENTHESIS   reduce using rule 96 (exp -> termino .)
    C_ABRACKET      reduce using rule 96 (exp -> termino .)
    O_CBRACKET      reduce using rule 96 (exp -> termino .)
    TO              reduce using rule 96 (exp -> termino .)
    PLUS            shift and go to state 150
    MINUS           shift and go to state 151

    exp_operador                   shift and go to state 149

state 107

    (100) termino -> factor .
    (101) termino -> factor . termino_operador termino
    (102) termino_operador -> . TIMES
    (103) termino_operador -> . DIVIDE
    (104) termino_operador -> . MODULE

    PLUS            reduce using rule 100 (termino -> factor .)
    MINUS           reduce using rule 100 (termino -> factor .)
    GREATER         reduce using rule 100 (termino -> factor .)
    LESSER          reduce using rule 100 (termino -> factor .)
    GREATER_EQUAL   reduce using rule 100 (termino -> factor .)
    LESSER_EQUAL    reduce using rule 100 (termino -> factor .)
    EQUAL           reduce using rule 100 (termino -> factor .)
    NOT_EQUAL       reduce using rule 100 (termino -> factor .)
    AND             reduce using rule 100 (termino -> factor .)
    OR              reduce using rule 100 (termino -> factor .)
    SEMICOLON       reduce using rule 100 (termino -> factor .)
    COMMA           reduce using rule 100 (termino -> factor .)
    C_PARENTHESIS   reduce using rule 100 (termino -> factor .)
    C_ABRACKET      reduce using rule 100 (termino -> factor .)
    O_CBRACKET      reduce using rule 100 (termino -> factor .)
    TO              reduce using rule 100 (termino -> factor .)
    TIMES           shift and go to state 153
    DIVIDE          shift and go to state 154
    MODULE          shift and go to state 155

    termino_operador               shift and go to state 152

state 108

    (106) factor -> O_PARENTHESIS . expr C_PARENTHESIS
    (79) expr -> . or
    (80) or -> . and
    (81) or -> . and or_operador or
    (83) and -> . equal
    (84) and -> . equal and_operador and
    (86) equal -> . compare
    (87) equal -> . compare equal_operador compare
    (90) compare -> . exp
    (91) compare -> . exp compare_operador exp
    (96) exp -> . termino
    (97) exp -> . termino exp_operador exp
    (100) termino -> . factor
    (101) termino -> . factor termino_operador termino
    (105) factor -> . variable
    (106) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (107) factor -> . llamada
    (108) factor -> . cte
    (109) factor -> . PLUS cte
    (110) factor -> . MINUS cte
    (35) variable -> . var_array
    (36) variable -> . ID
    (53) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (111) cte -> . CTE_INT
    (112) cte -> . CTE_FLOAT
    (37) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (40) arr_id -> . ID

    O_PARENTHESIS   shift and go to state 108
    PLUS            shift and go to state 111
    MINUS           shift and go to state 112
    ID              shift and go to state 113
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 115

    expr                           shift and go to state 156
    or                             shift and go to state 101
    and                            shift and go to state 102
    equal                          shift and go to state 103
    compare                        shift and go to state 104
    exp                            shift and go to state 105
    termino                        shift and go to state 106
    factor                         shift and go to state 107
    variable                       shift and go to state 98
    llamada                        shift and go to state 109
    cte                            shift and go to state 110
    var_array                      shift and go to state 64
    arr_id                         shift and go to state 66

state 109

    (107) factor -> llamada .

    TIMES           reduce using rule 107 (factor -> llamada .)
    DIVIDE          reduce using rule 107 (factor -> llamada .)
    MODULE          reduce using rule 107 (factor -> llamada .)
    PLUS            reduce using rule 107 (factor -> llamada .)
    MINUS           reduce using rule 107 (factor -> llamada .)
    GREATER         reduce using rule 107 (factor -> llamada .)
    LESSER          reduce using rule 107 (factor -> llamada .)
    GREATER_EQUAL   reduce using rule 107 (factor -> llamada .)
    LESSER_EQUAL    reduce using rule 107 (factor -> llamada .)
    EQUAL           reduce using rule 107 (factor -> llamada .)
    NOT_EQUAL       reduce using rule 107 (factor -> llamada .)
    AND             reduce using rule 107 (factor -> llamada .)
    OR              reduce using rule 107 (factor -> llamada .)
    SEMICOLON       reduce using rule 107 (factor -> llamada .)
    COMMA           reduce using rule 107 (factor -> llamada .)
    C_PARENTHESIS   reduce using rule 107 (factor -> llamada .)
    C_ABRACKET      reduce using rule 107 (factor -> llamada .)
    O_CBRACKET      reduce using rule 107 (factor -> llamada .)
    TO              reduce using rule 107 (factor -> llamada .)


state 110

    (108) factor -> cte .

    TIMES           reduce using rule 108 (factor -> cte .)
    DIVIDE          reduce using rule 108 (factor -> cte .)
    MODULE          reduce using rule 108 (factor -> cte .)
    PLUS            reduce using rule 108 (factor -> cte .)
    MINUS           reduce using rule 108 (factor -> cte .)
    GREATER         reduce using rule 108 (factor -> cte .)
    LESSER          reduce using rule 108 (factor -> cte .)
    GREATER_EQUAL   reduce using rule 108 (factor -> cte .)
    LESSER_EQUAL    reduce using rule 108 (factor -> cte .)
    EQUAL           reduce using rule 108 (factor -> cte .)
    NOT_EQUAL       reduce using rule 108 (factor -> cte .)
    AND             reduce using rule 108 (factor -> cte .)
    OR              reduce using rule 108 (factor -> cte .)
    SEMICOLON       reduce using rule 108 (factor -> cte .)
    COMMA           reduce using rule 108 (factor -> cte .)
    C_PARENTHESIS   reduce using rule 108 (factor -> cte .)
    C_ABRACKET      reduce using rule 108 (factor -> cte .)
    O_CBRACKET      reduce using rule 108 (factor -> cte .)
    TO              reduce using rule 108 (factor -> cte .)


state 111

    (109) factor -> PLUS . cte
    (111) cte -> . CTE_INT
    (112) cte -> . CTE_FLOAT

    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 115

    cte                            shift and go to state 157

state 112

    (110) factor -> MINUS . cte
    (111) cte -> . CTE_INT
    (112) cte -> . CTE_FLOAT

    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 115

    cte                            shift and go to state 158

state 113

    (36) variable -> ID .
    (53) llamada -> ID . O_PARENTHESIS llamada_prime C_PARENTHESIS
    (40) arr_id -> ID .

    TIMES           reduce using rule 36 (variable -> ID .)
    DIVIDE          reduce using rule 36 (variable -> ID .)
    MODULE          reduce using rule 36 (variable -> ID .)
    PLUS            reduce using rule 36 (variable -> ID .)
    MINUS           reduce using rule 36 (variable -> ID .)
    GREATER         reduce using rule 36 (variable -> ID .)
    LESSER          reduce using rule 36 (variable -> ID .)
    GREATER_EQUAL   reduce using rule 36 (variable -> ID .)
    LESSER_EQUAL    reduce using rule 36 (variable -> ID .)
    EQUAL           reduce using rule 36 (variable -> ID .)
    NOT_EQUAL       reduce using rule 36 (variable -> ID .)
    AND             reduce using rule 36 (variable -> ID .)
    OR              reduce using rule 36 (variable -> ID .)
    SEMICOLON       reduce using rule 36 (variable -> ID .)
    COMMA           reduce using rule 36 (variable -> ID .)
    C_PARENTHESIS   reduce using rule 36 (variable -> ID .)
    C_ABRACKET      reduce using rule 36 (variable -> ID .)
    O_CBRACKET      reduce using rule 36 (variable -> ID .)
    TO              reduce using rule 36 (variable -> ID .)
    O_PARENTHESIS   shift and go to state 84
    O_ABRACKET      reduce using rule 40 (arr_id -> ID .)


state 114

    (111) cte -> CTE_INT .

    TIMES           reduce using rule 111 (cte -> CTE_INT .)
    DIVIDE          reduce using rule 111 (cte -> CTE_INT .)
    MODULE          reduce using rule 111 (cte -> CTE_INT .)
    PLUS            reduce using rule 111 (cte -> CTE_INT .)
    MINUS           reduce using rule 111 (cte -> CTE_INT .)
    GREATER         reduce using rule 111 (cte -> CTE_INT .)
    LESSER          reduce using rule 111 (cte -> CTE_INT .)
    GREATER_EQUAL   reduce using rule 111 (cte -> CTE_INT .)
    LESSER_EQUAL    reduce using rule 111 (cte -> CTE_INT .)
    EQUAL           reduce using rule 111 (cte -> CTE_INT .)
    NOT_EQUAL       reduce using rule 111 (cte -> CTE_INT .)
    AND             reduce using rule 111 (cte -> CTE_INT .)
    OR              reduce using rule 111 (cte -> CTE_INT .)
    SEMICOLON       reduce using rule 111 (cte -> CTE_INT .)
    COMMA           reduce using rule 111 (cte -> CTE_INT .)
    C_PARENTHESIS   reduce using rule 111 (cte -> CTE_INT .)
    C_ABRACKET      reduce using rule 111 (cte -> CTE_INT .)
    O_CBRACKET      reduce using rule 111 (cte -> CTE_INT .)
    TO              reduce using rule 111 (cte -> CTE_INT .)


state 115

    (112) cte -> CTE_FLOAT .

    TIMES           reduce using rule 112 (cte -> CTE_FLOAT .)
    DIVIDE          reduce using rule 112 (cte -> CTE_FLOAT .)
    MODULE          reduce using rule 112 (cte -> CTE_FLOAT .)
    PLUS            reduce using rule 112 (cte -> CTE_FLOAT .)
    MINUS           reduce using rule 112 (cte -> CTE_FLOAT .)
    GREATER         reduce using rule 112 (cte -> CTE_FLOAT .)
    LESSER          reduce using rule 112 (cte -> CTE_FLOAT .)
    GREATER_EQUAL   reduce using rule 112 (cte -> CTE_FLOAT .)
    LESSER_EQUAL    reduce using rule 112 (cte -> CTE_FLOAT .)
    EQUAL           reduce using rule 112 (cte -> CTE_FLOAT .)
    NOT_EQUAL       reduce using rule 112 (cte -> CTE_FLOAT .)
    AND             reduce using rule 112 (cte -> CTE_FLOAT .)
    OR              reduce using rule 112 (cte -> CTE_FLOAT .)
    SEMICOLON       reduce using rule 112 (cte -> CTE_FLOAT .)
    COMMA           reduce using rule 112 (cte -> CTE_FLOAT .)
    C_PARENTHESIS   reduce using rule 112 (cte -> CTE_FLOAT .)
    C_ABRACKET      reduce using rule 112 (cte -> CTE_FLOAT .)
    O_CBRACKET      reduce using rule 112 (cte -> CTE_FLOAT .)
    TO              reduce using rule 112 (cte -> CTE_FLOAT .)


state 116

    (53) llamada -> ID O_PARENTHESIS llamada_prime . C_PARENTHESIS

    C_PARENTHESIS   shift and go to state 159


state 117

    (54) llamada_prime -> exp .
    (55) llamada_prime -> exp . COMMA llamada_prime

    C_PARENTHESIS   reduce using rule 54 (llamada_prime -> exp .)
    COMMA           shift and go to state 160


state 118

    (56) retorno -> RETURN O_PARENTHESIS expr . C_PARENTHESIS

    C_PARENTHESIS   shift and go to state 161


state 119

    (57) lectura -> READ O_PARENTHESIS lectura_prime . C_PARENTHESIS

    C_PARENTHESIS   shift and go to state 162


state 120

    (58) lectura_prime -> variable .
    (59) lectura_prime -> variable . COMMA lectura_prime

    C_PARENTHESIS   reduce using rule 58 (lectura_prime -> variable .)
    COMMA           shift and go to state 163


state 121

    (60) escritura -> WRITE O_PARENTHESIS escritura_prime . C_PARENTHESIS

    C_PARENTHESIS   shift and go to state 164


state 122

    (61) escritura_prime -> expr .
    (63) escritura_prime -> expr . COMMA escritura_prime

    C_PARENTHESIS   reduce using rule 61 (escritura_prime -> expr .)
    COMMA           shift and go to state 165


state 123

    (62) escritura_prime -> escritura_string .
    (64) escritura_prime -> escritura_string . COMMA escritura_prime

    C_PARENTHESIS   reduce using rule 62 (escritura_prime -> escritura_string .)
    COMMA           shift and go to state 166


state 124

    (65) escritura_string -> CTE_STRING .

    COMMA           reduce using rule 65 (escritura_string -> CTE_STRING .)
    C_PARENTHESIS   reduce using rule 65 (escritura_string -> CTE_STRING .)


state 125

    (66) decision -> IF O_PARENTHESIS decision_expr . C_PARENTHESIS bloque else

    C_PARENTHESIS   shift and go to state 167


state 126

    (67) decision_expr -> expr .

    C_PARENTHESIS   reduce using rule 67 (decision_expr -> expr .)


state 127

    (71) while -> while_prime while_expr bloque .

    ID              reduce using rule 71 (while -> while_prime while_expr bloque .)
    RETURN          reduce using rule 71 (while -> while_prime while_expr bloque .)
    READ            reduce using rule 71 (while -> while_prime while_expr bloque .)
    WRITE           reduce using rule 71 (while -> while_prime while_expr bloque .)
    IF              reduce using rule 71 (while -> while_prime while_expr bloque .)
    FOR             reduce using rule 71 (while -> while_prime while_expr bloque .)
    WHILE           reduce using rule 71 (while -> while_prime while_expr bloque .)
    C_CBRACKET      reduce using rule 71 (while -> while_prime while_expr bloque .)


state 128

    (73) while_expr -> O_PARENTHESIS expr . C_PARENTHESIS

    C_PARENTHESIS   shift and go to state 168


state 129

    (74) for -> FOR for_asignacion for_to . for_exp bloque
    (78) for_exp -> . exp
    (96) exp -> . termino
    (97) exp -> . termino exp_operador exp
    (100) termino -> . factor
    (101) termino -> . factor termino_operador termino
    (105) factor -> . variable
    (106) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (107) factor -> . llamada
    (108) factor -> . cte
    (109) factor -> . PLUS cte
    (110) factor -> . MINUS cte
    (35) variable -> . var_array
    (36) variable -> . ID
    (53) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (111) cte -> . CTE_INT
    (112) cte -> . CTE_FLOAT
    (37) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (40) arr_id -> . ID

    O_PARENTHESIS   shift and go to state 108
    PLUS            shift and go to state 111
    MINUS           shift and go to state 112
    ID              shift and go to state 113
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 115

    for_exp                        shift and go to state 169
    exp                            shift and go to state 170
    termino                        shift and go to state 106
    factor                         shift and go to state 107
    variable                       shift and go to state 98
    llamada                        shift and go to state 109
    cte                            shift and go to state 110
    var_array                      shift and go to state 64
    arr_id                         shift and go to state 66

state 130

    (77) for_to -> TO .

    O_PARENTHESIS   reduce using rule 77 (for_to -> TO .)
    PLUS            reduce using rule 77 (for_to -> TO .)
    MINUS           reduce using rule 77 (for_to -> TO .)
    ID              reduce using rule 77 (for_to -> TO .)
    CTE_INT         reduce using rule 77 (for_to -> TO .)
    CTE_FLOAT       reduce using rule 77 (for_to -> TO .)


state 131

    (75) for_asignacion -> variable ASSIGN . for_asignacion_expr
    (76) for_asignacion_expr -> . expr
    (79) expr -> . or
    (80) or -> . and
    (81) or -> . and or_operador or
    (83) and -> . equal
    (84) and -> . equal and_operador and
    (86) equal -> . compare
    (87) equal -> . compare equal_operador compare
    (90) compare -> . exp
    (91) compare -> . exp compare_operador exp
    (96) exp -> . termino
    (97) exp -> . termino exp_operador exp
    (100) termino -> . factor
    (101) termino -> . factor termino_operador termino
    (105) factor -> . variable
    (106) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (107) factor -> . llamada
    (108) factor -> . cte
    (109) factor -> . PLUS cte
    (110) factor -> . MINUS cte
    (35) variable -> . var_array
    (36) variable -> . ID
    (53) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (111) cte -> . CTE_INT
    (112) cte -> . CTE_FLOAT
    (37) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (40) arr_id -> . ID

    O_PARENTHESIS   shift and go to state 108
    PLUS            shift and go to state 111
    MINUS           shift and go to state 112
    ID              shift and go to state 113
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 115

    variable                       shift and go to state 98
    for_asignacion_expr            shift and go to state 171
    expr                           shift and go to state 172
    or                             shift and go to state 101
    and                            shift and go to state 102
    equal                          shift and go to state 103
    compare                        shift and go to state 104
    exp                            shift and go to state 105
    termino                        shift and go to state 106
    factor                         shift and go to state 107
    llamada                        shift and go to state 109
    cte                            shift and go to state 110
    var_array                      shift and go to state 64
    arr_id                         shift and go to state 66

state 132

    (37) var_array -> arr_id O_ABRACKET exp . arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> arr_id O_ABRACKET exp . arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> arr_id O_ABRACKET exp . arr_close_bracket
    (41) arr_close_bracket -> . C_ABRACKET

    C_ABRACKET      shift and go to state 174

    arr_close_bracket              shift and go to state 173

state 133

    (27) funcion_base -> FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion . bloque
    (3) bloque -> . O_CBRACKET bloque_prime C_CBRACKET

    O_CBRACKET      shift and go to state 30

    bloque                         shift and go to state 175

state 134

    (6) declaracion_funcion -> declaracion .

    O_CBRACKET      reduce using rule 6 (declaracion_funcion -> declaracion .)


state 135

    (29) funcion_prime -> tipo ID COMMA . funcion_prime
    (28) funcion_prime -> . tipo ID
    (29) funcion_prime -> . tipo ID COMMA funcion_prime
    (21) tipo -> . INT
    (22) tipo -> . FLOAT
    (23) tipo -> . CHAR
    (24) tipo -> . STRING

    INT             shift and go to state 70
    FLOAT           shift and go to state 71
    CHAR            shift and go to state 72
    STRING          shift and go to state 73

    tipo                           shift and go to state 69
    funcion_prime                  shift and go to state 176

state 136

    (13) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT . C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (14) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT . C_ABRACKET

    C_ABRACKET      shift and go to state 177


state 137

    (81) or -> and or_operador . or
    (80) or -> . and
    (81) or -> . and or_operador or
    (83) and -> . equal
    (84) and -> . equal and_operador and
    (86) equal -> . compare
    (87) equal -> . compare equal_operador compare
    (90) compare -> . exp
    (91) compare -> . exp compare_operador exp
    (96) exp -> . termino
    (97) exp -> . termino exp_operador exp
    (100) termino -> . factor
    (101) termino -> . factor termino_operador termino
    (105) factor -> . variable
    (106) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (107) factor -> . llamada
    (108) factor -> . cte
    (109) factor -> . PLUS cte
    (110) factor -> . MINUS cte
    (35) variable -> . var_array
    (36) variable -> . ID
    (53) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (111) cte -> . CTE_INT
    (112) cte -> . CTE_FLOAT
    (37) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (40) arr_id -> . ID

    O_PARENTHESIS   shift and go to state 108
    PLUS            shift and go to state 111
    MINUS           shift and go to state 112
    ID              shift and go to state 113
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 115

    and                            shift and go to state 102
    or                             shift and go to state 178
    equal                          shift and go to state 103
    compare                        shift and go to state 104
    exp                            shift and go to state 105
    termino                        shift and go to state 106
    factor                         shift and go to state 107
    variable                       shift and go to state 98
    llamada                        shift and go to state 109
    cte                            shift and go to state 110
    var_array                      shift and go to state 64
    arr_id                         shift and go to state 66

state 138

    (82) or_operador -> OR .

    O_PARENTHESIS   reduce using rule 82 (or_operador -> OR .)
    PLUS            reduce using rule 82 (or_operador -> OR .)
    MINUS           reduce using rule 82 (or_operador -> OR .)
    ID              reduce using rule 82 (or_operador -> OR .)
    CTE_INT         reduce using rule 82 (or_operador -> OR .)
    CTE_FLOAT       reduce using rule 82 (or_operador -> OR .)


state 139

    (84) and -> equal and_operador . and
    (83) and -> . equal
    (84) and -> . equal and_operador and
    (86) equal -> . compare
    (87) equal -> . compare equal_operador compare
    (90) compare -> . exp
    (91) compare -> . exp compare_operador exp
    (96) exp -> . termino
    (97) exp -> . termino exp_operador exp
    (100) termino -> . factor
    (101) termino -> . factor termino_operador termino
    (105) factor -> . variable
    (106) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (107) factor -> . llamada
    (108) factor -> . cte
    (109) factor -> . PLUS cte
    (110) factor -> . MINUS cte
    (35) variable -> . var_array
    (36) variable -> . ID
    (53) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (111) cte -> . CTE_INT
    (112) cte -> . CTE_FLOAT
    (37) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (40) arr_id -> . ID

    O_PARENTHESIS   shift and go to state 108
    PLUS            shift and go to state 111
    MINUS           shift and go to state 112
    ID              shift and go to state 113
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 115

    equal                          shift and go to state 103
    and                            shift and go to state 179
    compare                        shift and go to state 104
    exp                            shift and go to state 105
    termino                        shift and go to state 106
    factor                         shift and go to state 107
    variable                       shift and go to state 98
    llamada                        shift and go to state 109
    cte                            shift and go to state 110
    var_array                      shift and go to state 64
    arr_id                         shift and go to state 66

state 140

    (85) and_operador -> AND .

    O_PARENTHESIS   reduce using rule 85 (and_operador -> AND .)
    PLUS            reduce using rule 85 (and_operador -> AND .)
    MINUS           reduce using rule 85 (and_operador -> AND .)
    ID              reduce using rule 85 (and_operador -> AND .)
    CTE_INT         reduce using rule 85 (and_operador -> AND .)
    CTE_FLOAT       reduce using rule 85 (and_operador -> AND .)


state 141

    (87) equal -> compare equal_operador . compare
    (90) compare -> . exp
    (91) compare -> . exp compare_operador exp
    (96) exp -> . termino
    (97) exp -> . termino exp_operador exp
    (100) termino -> . factor
    (101) termino -> . factor termino_operador termino
    (105) factor -> . variable
    (106) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (107) factor -> . llamada
    (108) factor -> . cte
    (109) factor -> . PLUS cte
    (110) factor -> . MINUS cte
    (35) variable -> . var_array
    (36) variable -> . ID
    (53) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (111) cte -> . CTE_INT
    (112) cte -> . CTE_FLOAT
    (37) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (40) arr_id -> . ID

    O_PARENTHESIS   shift and go to state 108
    PLUS            shift and go to state 111
    MINUS           shift and go to state 112
    ID              shift and go to state 113
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 115

    compare                        shift and go to state 180
    exp                            shift and go to state 105
    termino                        shift and go to state 106
    factor                         shift and go to state 107
    variable                       shift and go to state 98
    llamada                        shift and go to state 109
    cte                            shift and go to state 110
    var_array                      shift and go to state 64
    arr_id                         shift and go to state 66

state 142

    (88) equal_operador -> EQUAL .

    O_PARENTHESIS   reduce using rule 88 (equal_operador -> EQUAL .)
    PLUS            reduce using rule 88 (equal_operador -> EQUAL .)
    MINUS           reduce using rule 88 (equal_operador -> EQUAL .)
    ID              reduce using rule 88 (equal_operador -> EQUAL .)
    CTE_INT         reduce using rule 88 (equal_operador -> EQUAL .)
    CTE_FLOAT       reduce using rule 88 (equal_operador -> EQUAL .)


state 143

    (89) equal_operador -> NOT_EQUAL .

    O_PARENTHESIS   reduce using rule 89 (equal_operador -> NOT_EQUAL .)
    PLUS            reduce using rule 89 (equal_operador -> NOT_EQUAL .)
    MINUS           reduce using rule 89 (equal_operador -> NOT_EQUAL .)
    ID              reduce using rule 89 (equal_operador -> NOT_EQUAL .)
    CTE_INT         reduce using rule 89 (equal_operador -> NOT_EQUAL .)
    CTE_FLOAT       reduce using rule 89 (equal_operador -> NOT_EQUAL .)


state 144

    (91) compare -> exp compare_operador . exp
    (96) exp -> . termino
    (97) exp -> . termino exp_operador exp
    (100) termino -> . factor
    (101) termino -> . factor termino_operador termino
    (105) factor -> . variable
    (106) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (107) factor -> . llamada
    (108) factor -> . cte
    (109) factor -> . PLUS cte
    (110) factor -> . MINUS cte
    (35) variable -> . var_array
    (36) variable -> . ID
    (53) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (111) cte -> . CTE_INT
    (112) cte -> . CTE_FLOAT
    (37) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (40) arr_id -> . ID

    O_PARENTHESIS   shift and go to state 108
    PLUS            shift and go to state 111
    MINUS           shift and go to state 112
    ID              shift and go to state 113
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 115

    exp                            shift and go to state 181
    termino                        shift and go to state 106
    factor                         shift and go to state 107
    variable                       shift and go to state 98
    llamada                        shift and go to state 109
    cte                            shift and go to state 110
    var_array                      shift and go to state 64
    arr_id                         shift and go to state 66

state 145

    (92) compare_operador -> GREATER .

    O_PARENTHESIS   reduce using rule 92 (compare_operador -> GREATER .)
    PLUS            reduce using rule 92 (compare_operador -> GREATER .)
    MINUS           reduce using rule 92 (compare_operador -> GREATER .)
    ID              reduce using rule 92 (compare_operador -> GREATER .)
    CTE_INT         reduce using rule 92 (compare_operador -> GREATER .)
    CTE_FLOAT       reduce using rule 92 (compare_operador -> GREATER .)


state 146

    (93) compare_operador -> LESSER .

    O_PARENTHESIS   reduce using rule 93 (compare_operador -> LESSER .)
    PLUS            reduce using rule 93 (compare_operador -> LESSER .)
    MINUS           reduce using rule 93 (compare_operador -> LESSER .)
    ID              reduce using rule 93 (compare_operador -> LESSER .)
    CTE_INT         reduce using rule 93 (compare_operador -> LESSER .)
    CTE_FLOAT       reduce using rule 93 (compare_operador -> LESSER .)


state 147

    (94) compare_operador -> GREATER_EQUAL .

    O_PARENTHESIS   reduce using rule 94 (compare_operador -> GREATER_EQUAL .)
    PLUS            reduce using rule 94 (compare_operador -> GREATER_EQUAL .)
    MINUS           reduce using rule 94 (compare_operador -> GREATER_EQUAL .)
    ID              reduce using rule 94 (compare_operador -> GREATER_EQUAL .)
    CTE_INT         reduce using rule 94 (compare_operador -> GREATER_EQUAL .)
    CTE_FLOAT       reduce using rule 94 (compare_operador -> GREATER_EQUAL .)


state 148

    (95) compare_operador -> LESSER_EQUAL .

    O_PARENTHESIS   reduce using rule 95 (compare_operador -> LESSER_EQUAL .)
    PLUS            reduce using rule 95 (compare_operador -> LESSER_EQUAL .)
    MINUS           reduce using rule 95 (compare_operador -> LESSER_EQUAL .)
    ID              reduce using rule 95 (compare_operador -> LESSER_EQUAL .)
    CTE_INT         reduce using rule 95 (compare_operador -> LESSER_EQUAL .)
    CTE_FLOAT       reduce using rule 95 (compare_operador -> LESSER_EQUAL .)


state 149

    (97) exp -> termino exp_operador . exp
    (96) exp -> . termino
    (97) exp -> . termino exp_operador exp
    (100) termino -> . factor
    (101) termino -> . factor termino_operador termino
    (105) factor -> . variable
    (106) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (107) factor -> . llamada
    (108) factor -> . cte
    (109) factor -> . PLUS cte
    (110) factor -> . MINUS cte
    (35) variable -> . var_array
    (36) variable -> . ID
    (53) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (111) cte -> . CTE_INT
    (112) cte -> . CTE_FLOAT
    (37) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (40) arr_id -> . ID

    O_PARENTHESIS   shift and go to state 108
    PLUS            shift and go to state 111
    MINUS           shift and go to state 112
    ID              shift and go to state 113
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 115

    termino                        shift and go to state 106
    exp                            shift and go to state 182
    factor                         shift and go to state 107
    variable                       shift and go to state 98
    llamada                        shift and go to state 109
    cte                            shift and go to state 110
    var_array                      shift and go to state 64
    arr_id                         shift and go to state 66

state 150

    (98) exp_operador -> PLUS .

    O_PARENTHESIS   reduce using rule 98 (exp_operador -> PLUS .)
    PLUS            reduce using rule 98 (exp_operador -> PLUS .)
    MINUS           reduce using rule 98 (exp_operador -> PLUS .)
    ID              reduce using rule 98 (exp_operador -> PLUS .)
    CTE_INT         reduce using rule 98 (exp_operador -> PLUS .)
    CTE_FLOAT       reduce using rule 98 (exp_operador -> PLUS .)


state 151

    (99) exp_operador -> MINUS .

    O_PARENTHESIS   reduce using rule 99 (exp_operador -> MINUS .)
    PLUS            reduce using rule 99 (exp_operador -> MINUS .)
    MINUS           reduce using rule 99 (exp_operador -> MINUS .)
    ID              reduce using rule 99 (exp_operador -> MINUS .)
    CTE_INT         reduce using rule 99 (exp_operador -> MINUS .)
    CTE_FLOAT       reduce using rule 99 (exp_operador -> MINUS .)


state 152

    (101) termino -> factor termino_operador . termino
    (100) termino -> . factor
    (101) termino -> . factor termino_operador termino
    (105) factor -> . variable
    (106) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (107) factor -> . llamada
    (108) factor -> . cte
    (109) factor -> . PLUS cte
    (110) factor -> . MINUS cte
    (35) variable -> . var_array
    (36) variable -> . ID
    (53) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (111) cte -> . CTE_INT
    (112) cte -> . CTE_FLOAT
    (37) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (40) arr_id -> . ID

    O_PARENTHESIS   shift and go to state 108
    PLUS            shift and go to state 111
    MINUS           shift and go to state 112
    ID              shift and go to state 113
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 115

    factor                         shift and go to state 107
    termino                        shift and go to state 183
    variable                       shift and go to state 98
    llamada                        shift and go to state 109
    cte                            shift and go to state 110
    var_array                      shift and go to state 64
    arr_id                         shift and go to state 66

state 153

    (102) termino_operador -> TIMES .

    O_PARENTHESIS   reduce using rule 102 (termino_operador -> TIMES .)
    PLUS            reduce using rule 102 (termino_operador -> TIMES .)
    MINUS           reduce using rule 102 (termino_operador -> TIMES .)
    ID              reduce using rule 102 (termino_operador -> TIMES .)
    CTE_INT         reduce using rule 102 (termino_operador -> TIMES .)
    CTE_FLOAT       reduce using rule 102 (termino_operador -> TIMES .)


state 154

    (103) termino_operador -> DIVIDE .

    O_PARENTHESIS   reduce using rule 103 (termino_operador -> DIVIDE .)
    PLUS            reduce using rule 103 (termino_operador -> DIVIDE .)
    MINUS           reduce using rule 103 (termino_operador -> DIVIDE .)
    ID              reduce using rule 103 (termino_operador -> DIVIDE .)
    CTE_INT         reduce using rule 103 (termino_operador -> DIVIDE .)
    CTE_FLOAT       reduce using rule 103 (termino_operador -> DIVIDE .)


state 155

    (104) termino_operador -> MODULE .

    O_PARENTHESIS   reduce using rule 104 (termino_operador -> MODULE .)
    PLUS            reduce using rule 104 (termino_operador -> MODULE .)
    MINUS           reduce using rule 104 (termino_operador -> MODULE .)
    ID              reduce using rule 104 (termino_operador -> MODULE .)
    CTE_INT         reduce using rule 104 (termino_operador -> MODULE .)
    CTE_FLOAT       reduce using rule 104 (termino_operador -> MODULE .)


state 156

    (106) factor -> O_PARENTHESIS expr . C_PARENTHESIS

    C_PARENTHESIS   shift and go to state 184


state 157

    (109) factor -> PLUS cte .

    TIMES           reduce using rule 109 (factor -> PLUS cte .)
    DIVIDE          reduce using rule 109 (factor -> PLUS cte .)
    MODULE          reduce using rule 109 (factor -> PLUS cte .)
    PLUS            reduce using rule 109 (factor -> PLUS cte .)
    MINUS           reduce using rule 109 (factor -> PLUS cte .)
    GREATER         reduce using rule 109 (factor -> PLUS cte .)
    LESSER          reduce using rule 109 (factor -> PLUS cte .)
    GREATER_EQUAL   reduce using rule 109 (factor -> PLUS cte .)
    LESSER_EQUAL    reduce using rule 109 (factor -> PLUS cte .)
    EQUAL           reduce using rule 109 (factor -> PLUS cte .)
    NOT_EQUAL       reduce using rule 109 (factor -> PLUS cte .)
    AND             reduce using rule 109 (factor -> PLUS cte .)
    OR              reduce using rule 109 (factor -> PLUS cte .)
    SEMICOLON       reduce using rule 109 (factor -> PLUS cte .)
    COMMA           reduce using rule 109 (factor -> PLUS cte .)
    C_PARENTHESIS   reduce using rule 109 (factor -> PLUS cte .)
    C_ABRACKET      reduce using rule 109 (factor -> PLUS cte .)
    O_CBRACKET      reduce using rule 109 (factor -> PLUS cte .)
    TO              reduce using rule 109 (factor -> PLUS cte .)


state 158

    (110) factor -> MINUS cte .

    TIMES           reduce using rule 110 (factor -> MINUS cte .)
    DIVIDE          reduce using rule 110 (factor -> MINUS cte .)
    MODULE          reduce using rule 110 (factor -> MINUS cte .)
    PLUS            reduce using rule 110 (factor -> MINUS cte .)
    MINUS           reduce using rule 110 (factor -> MINUS cte .)
    GREATER         reduce using rule 110 (factor -> MINUS cte .)
    LESSER          reduce using rule 110 (factor -> MINUS cte .)
    GREATER_EQUAL   reduce using rule 110 (factor -> MINUS cte .)
    LESSER_EQUAL    reduce using rule 110 (factor -> MINUS cte .)
    EQUAL           reduce using rule 110 (factor -> MINUS cte .)
    NOT_EQUAL       reduce using rule 110 (factor -> MINUS cte .)
    AND             reduce using rule 110 (factor -> MINUS cte .)
    OR              reduce using rule 110 (factor -> MINUS cte .)
    SEMICOLON       reduce using rule 110 (factor -> MINUS cte .)
    COMMA           reduce using rule 110 (factor -> MINUS cte .)
    C_PARENTHESIS   reduce using rule 110 (factor -> MINUS cte .)
    C_ABRACKET      reduce using rule 110 (factor -> MINUS cte .)
    O_CBRACKET      reduce using rule 110 (factor -> MINUS cte .)
    TO              reduce using rule 110 (factor -> MINUS cte .)


state 159

    (53) llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .

    SEMICOLON       reduce using rule 53 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    TIMES           reduce using rule 53 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    DIVIDE          reduce using rule 53 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    MODULE          reduce using rule 53 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    PLUS            reduce using rule 53 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    MINUS           reduce using rule 53 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    GREATER         reduce using rule 53 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    LESSER          reduce using rule 53 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    GREATER_EQUAL   reduce using rule 53 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    LESSER_EQUAL    reduce using rule 53 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    EQUAL           reduce using rule 53 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    NOT_EQUAL       reduce using rule 53 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    AND             reduce using rule 53 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    OR              reduce using rule 53 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    COMMA           reduce using rule 53 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    C_PARENTHESIS   reduce using rule 53 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    C_ABRACKET      reduce using rule 53 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    O_CBRACKET      reduce using rule 53 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    TO              reduce using rule 53 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)


state 160

    (55) llamada_prime -> exp COMMA . llamada_prime
    (54) llamada_prime -> . exp
    (55) llamada_prime -> . exp COMMA llamada_prime
    (96) exp -> . termino
    (97) exp -> . termino exp_operador exp
    (100) termino -> . factor
    (101) termino -> . factor termino_operador termino
    (105) factor -> . variable
    (106) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (107) factor -> . llamada
    (108) factor -> . cte
    (109) factor -> . PLUS cte
    (110) factor -> . MINUS cte
    (35) variable -> . var_array
    (36) variable -> . ID
    (53) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (111) cte -> . CTE_INT
    (112) cte -> . CTE_FLOAT
    (37) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (40) arr_id -> . ID

    O_PARENTHESIS   shift and go to state 108
    PLUS            shift and go to state 111
    MINUS           shift and go to state 112
    ID              shift and go to state 113
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 115

    exp                            shift and go to state 117
    llamada_prime                  shift and go to state 185
    termino                        shift and go to state 106
    factor                         shift and go to state 107
    variable                       shift and go to state 98
    llamada                        shift and go to state 109
    cte                            shift and go to state 110
    var_array                      shift and go to state 64
    arr_id                         shift and go to state 66

state 161

    (56) retorno -> RETURN O_PARENTHESIS expr C_PARENTHESIS .

    SEMICOLON       reduce using rule 56 (retorno -> RETURN O_PARENTHESIS expr C_PARENTHESIS .)


state 162

    (57) lectura -> READ O_PARENTHESIS lectura_prime C_PARENTHESIS .

    SEMICOLON       reduce using rule 57 (lectura -> READ O_PARENTHESIS lectura_prime C_PARENTHESIS .)


state 163

    (59) lectura_prime -> variable COMMA . lectura_prime
    (58) lectura_prime -> . variable
    (59) lectura_prime -> . variable COMMA lectura_prime
    (35) variable -> . var_array
    (36) variable -> . ID
    (37) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (40) arr_id -> . ID

    ID              shift and go to state 93

    variable                       shift and go to state 120
    lectura_prime                  shift and go to state 186
    var_array                      shift and go to state 64
    arr_id                         shift and go to state 66

state 164

    (60) escritura -> WRITE O_PARENTHESIS escritura_prime C_PARENTHESIS .

    SEMICOLON       reduce using rule 60 (escritura -> WRITE O_PARENTHESIS escritura_prime C_PARENTHESIS .)


state 165

    (63) escritura_prime -> expr COMMA . escritura_prime
    (61) escritura_prime -> . expr
    (62) escritura_prime -> . escritura_string
    (63) escritura_prime -> . expr COMMA escritura_prime
    (64) escritura_prime -> . escritura_string COMMA escritura_prime
    (79) expr -> . or
    (65) escritura_string -> . CTE_STRING
    (80) or -> . and
    (81) or -> . and or_operador or
    (83) and -> . equal
    (84) and -> . equal and_operador and
    (86) equal -> . compare
    (87) equal -> . compare equal_operador compare
    (90) compare -> . exp
    (91) compare -> . exp compare_operador exp
    (96) exp -> . termino
    (97) exp -> . termino exp_operador exp
    (100) termino -> . factor
    (101) termino -> . factor termino_operador termino
    (105) factor -> . variable
    (106) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (107) factor -> . llamada
    (108) factor -> . cte
    (109) factor -> . PLUS cte
    (110) factor -> . MINUS cte
    (35) variable -> . var_array
    (36) variable -> . ID
    (53) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (111) cte -> . CTE_INT
    (112) cte -> . CTE_FLOAT
    (37) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (40) arr_id -> . ID

    CTE_STRING      shift and go to state 124
    O_PARENTHESIS   shift and go to state 108
    PLUS            shift and go to state 111
    MINUS           shift and go to state 112
    ID              shift and go to state 113
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 115

    expr                           shift and go to state 122
    escritura_prime                shift and go to state 187
    escritura_string               shift and go to state 123
    or                             shift and go to state 101
    and                            shift and go to state 102
    equal                          shift and go to state 103
    compare                        shift and go to state 104
    exp                            shift and go to state 105
    termino                        shift and go to state 106
    factor                         shift and go to state 107
    variable                       shift and go to state 98
    llamada                        shift and go to state 109
    cte                            shift and go to state 110
    var_array                      shift and go to state 64
    arr_id                         shift and go to state 66

state 166

    (64) escritura_prime -> escritura_string COMMA . escritura_prime
    (61) escritura_prime -> . expr
    (62) escritura_prime -> . escritura_string
    (63) escritura_prime -> . expr COMMA escritura_prime
    (64) escritura_prime -> . escritura_string COMMA escritura_prime
    (79) expr -> . or
    (65) escritura_string -> . CTE_STRING
    (80) or -> . and
    (81) or -> . and or_operador or
    (83) and -> . equal
    (84) and -> . equal and_operador and
    (86) equal -> . compare
    (87) equal -> . compare equal_operador compare
    (90) compare -> . exp
    (91) compare -> . exp compare_operador exp
    (96) exp -> . termino
    (97) exp -> . termino exp_operador exp
    (100) termino -> . factor
    (101) termino -> . factor termino_operador termino
    (105) factor -> . variable
    (106) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (107) factor -> . llamada
    (108) factor -> . cte
    (109) factor -> . PLUS cte
    (110) factor -> . MINUS cte
    (35) variable -> . var_array
    (36) variable -> . ID
    (53) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (111) cte -> . CTE_INT
    (112) cte -> . CTE_FLOAT
    (37) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (40) arr_id -> . ID

    CTE_STRING      shift and go to state 124
    O_PARENTHESIS   shift and go to state 108
    PLUS            shift and go to state 111
    MINUS           shift and go to state 112
    ID              shift and go to state 113
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 115

    escritura_string               shift and go to state 123
    escritura_prime                shift and go to state 188
    expr                           shift and go to state 122
    or                             shift and go to state 101
    and                            shift and go to state 102
    equal                          shift and go to state 103
    compare                        shift and go to state 104
    exp                            shift and go to state 105
    termino                        shift and go to state 106
    factor                         shift and go to state 107
    variable                       shift and go to state 98
    llamada                        shift and go to state 109
    cte                            shift and go to state 110
    var_array                      shift and go to state 64
    arr_id                         shift and go to state 66

state 167

    (66) decision -> IF O_PARENTHESIS decision_expr C_PARENTHESIS . bloque else
    (3) bloque -> . O_CBRACKET bloque_prime C_CBRACKET

    O_CBRACKET      shift and go to state 30

    bloque                         shift and go to state 189

state 168

    (73) while_expr -> O_PARENTHESIS expr C_PARENTHESIS .

    O_CBRACKET      reduce using rule 73 (while_expr -> O_PARENTHESIS expr C_PARENTHESIS .)


state 169

    (74) for -> FOR for_asignacion for_to for_exp . bloque
    (3) bloque -> . O_CBRACKET bloque_prime C_CBRACKET

    O_CBRACKET      shift and go to state 30

    bloque                         shift and go to state 190

state 170

    (78) for_exp -> exp .

    O_CBRACKET      reduce using rule 78 (for_exp -> exp .)


state 171

    (75) for_asignacion -> variable ASSIGN for_asignacion_expr .

    TO              reduce using rule 75 (for_asignacion -> variable ASSIGN for_asignacion_expr .)


state 172

    (76) for_asignacion_expr -> expr .

    TO              reduce using rule 76 (for_asignacion_expr -> expr .)


state 173

    (37) var_array -> arr_id O_ABRACKET exp arr_close_bracket . arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> arr_id O_ABRACKET exp arr_close_bracket . arr_open_bracket exp arr_close_bracket
    (39) var_array -> arr_id O_ABRACKET exp arr_close_bracket .
    (42) arr_open_bracket -> . O_ABRACKET

    ASSIGN          reduce using rule 39 (var_array -> arr_id O_ABRACKET exp arr_close_bracket .)
    TIMES           reduce using rule 39 (var_array -> arr_id O_ABRACKET exp arr_close_bracket .)
    DIVIDE          reduce using rule 39 (var_array -> arr_id O_ABRACKET exp arr_close_bracket .)
    MODULE          reduce using rule 39 (var_array -> arr_id O_ABRACKET exp arr_close_bracket .)
    PLUS            reduce using rule 39 (var_array -> arr_id O_ABRACKET exp arr_close_bracket .)
    MINUS           reduce using rule 39 (var_array -> arr_id O_ABRACKET exp arr_close_bracket .)
    GREATER         reduce using rule 39 (var_array -> arr_id O_ABRACKET exp arr_close_bracket .)
    LESSER          reduce using rule 39 (var_array -> arr_id O_ABRACKET exp arr_close_bracket .)
    GREATER_EQUAL   reduce using rule 39 (var_array -> arr_id O_ABRACKET exp arr_close_bracket .)
    LESSER_EQUAL    reduce using rule 39 (var_array -> arr_id O_ABRACKET exp arr_close_bracket .)
    EQUAL           reduce using rule 39 (var_array -> arr_id O_ABRACKET exp arr_close_bracket .)
    NOT_EQUAL       reduce using rule 39 (var_array -> arr_id O_ABRACKET exp arr_close_bracket .)
    AND             reduce using rule 39 (var_array -> arr_id O_ABRACKET exp arr_close_bracket .)
    OR              reduce using rule 39 (var_array -> arr_id O_ABRACKET exp arr_close_bracket .)
    SEMICOLON       reduce using rule 39 (var_array -> arr_id O_ABRACKET exp arr_close_bracket .)
    COMMA           reduce using rule 39 (var_array -> arr_id O_ABRACKET exp arr_close_bracket .)
    C_PARENTHESIS   reduce using rule 39 (var_array -> arr_id O_ABRACKET exp arr_close_bracket .)
    C_ABRACKET      reduce using rule 39 (var_array -> arr_id O_ABRACKET exp arr_close_bracket .)
    O_CBRACKET      reduce using rule 39 (var_array -> arr_id O_ABRACKET exp arr_close_bracket .)
    TO              reduce using rule 39 (var_array -> arr_id O_ABRACKET exp arr_close_bracket .)
    O_ABRACKET      shift and go to state 191

    arr_open_bracket               shift and go to state 192

state 174

    (41) arr_close_bracket -> C_ABRACKET .

    O_ABRACKET      reduce using rule 41 (arr_close_bracket -> C_ABRACKET .)
    ASSIGN          reduce using rule 41 (arr_close_bracket -> C_ABRACKET .)
    TIMES           reduce using rule 41 (arr_close_bracket -> C_ABRACKET .)
    DIVIDE          reduce using rule 41 (arr_close_bracket -> C_ABRACKET .)
    MODULE          reduce using rule 41 (arr_close_bracket -> C_ABRACKET .)
    PLUS            reduce using rule 41 (arr_close_bracket -> C_ABRACKET .)
    MINUS           reduce using rule 41 (arr_close_bracket -> C_ABRACKET .)
    GREATER         reduce using rule 41 (arr_close_bracket -> C_ABRACKET .)
    LESSER          reduce using rule 41 (arr_close_bracket -> C_ABRACKET .)
    GREATER_EQUAL   reduce using rule 41 (arr_close_bracket -> C_ABRACKET .)
    LESSER_EQUAL    reduce using rule 41 (arr_close_bracket -> C_ABRACKET .)
    EQUAL           reduce using rule 41 (arr_close_bracket -> C_ABRACKET .)
    NOT_EQUAL       reduce using rule 41 (arr_close_bracket -> C_ABRACKET .)
    AND             reduce using rule 41 (arr_close_bracket -> C_ABRACKET .)
    OR              reduce using rule 41 (arr_close_bracket -> C_ABRACKET .)
    SEMICOLON       reduce using rule 41 (arr_close_bracket -> C_ABRACKET .)
    COMMA           reduce using rule 41 (arr_close_bracket -> C_ABRACKET .)
    C_PARENTHESIS   reduce using rule 41 (arr_close_bracket -> C_ABRACKET .)
    C_ABRACKET      reduce using rule 41 (arr_close_bracket -> C_ABRACKET .)
    O_CBRACKET      reduce using rule 41 (arr_close_bracket -> C_ABRACKET .)
    TO              reduce using rule 41 (arr_close_bracket -> C_ABRACKET .)


state 175

    (27) funcion_base -> FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque .

    FUNCTION        reduce using rule 27 (funcion_base -> FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque .)
    MAIN            reduce using rule 27 (funcion_base -> FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque .)


state 176

    (29) funcion_prime -> tipo ID COMMA funcion_prime .

    C_PARENTHESIS   reduce using rule 29 (funcion_prime -> tipo ID COMMA funcion_prime .)


state 177

    (13) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET . O_ABRACKET CTE_INT C_ABRACKET
    (14) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET .

    O_ABRACKET      shift and go to state 193
    COMMA           reduce using rule 14 (declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET .)
    COLON           reduce using rule 14 (declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET .)


state 178

    (81) or -> and or_operador or .

    SEMICOLON       reduce using rule 81 (or -> and or_operador or .)
    C_PARENTHESIS   reduce using rule 81 (or -> and or_operador or .)
    COMMA           reduce using rule 81 (or -> and or_operador or .)
    TO              reduce using rule 81 (or -> and or_operador or .)


state 179

    (84) and -> equal and_operador and .

    OR              reduce using rule 84 (and -> equal and_operador and .)
    SEMICOLON       reduce using rule 84 (and -> equal and_operador and .)
    C_PARENTHESIS   reduce using rule 84 (and -> equal and_operador and .)
    COMMA           reduce using rule 84 (and -> equal and_operador and .)
    TO              reduce using rule 84 (and -> equal and_operador and .)


state 180

    (87) equal -> compare equal_operador compare .

    AND             reduce using rule 87 (equal -> compare equal_operador compare .)
    OR              reduce using rule 87 (equal -> compare equal_operador compare .)
    SEMICOLON       reduce using rule 87 (equal -> compare equal_operador compare .)
    C_PARENTHESIS   reduce using rule 87 (equal -> compare equal_operador compare .)
    COMMA           reduce using rule 87 (equal -> compare equal_operador compare .)
    TO              reduce using rule 87 (equal -> compare equal_operador compare .)


state 181

    (91) compare -> exp compare_operador exp .

    EQUAL           reduce using rule 91 (compare -> exp compare_operador exp .)
    NOT_EQUAL       reduce using rule 91 (compare -> exp compare_operador exp .)
    AND             reduce using rule 91 (compare -> exp compare_operador exp .)
    OR              reduce using rule 91 (compare -> exp compare_operador exp .)
    SEMICOLON       reduce using rule 91 (compare -> exp compare_operador exp .)
    C_PARENTHESIS   reduce using rule 91 (compare -> exp compare_operador exp .)
    COMMA           reduce using rule 91 (compare -> exp compare_operador exp .)
    TO              reduce using rule 91 (compare -> exp compare_operador exp .)


state 182

    (97) exp -> termino exp_operador exp .

    GREATER         reduce using rule 97 (exp -> termino exp_operador exp .)
    LESSER          reduce using rule 97 (exp -> termino exp_operador exp .)
    GREATER_EQUAL   reduce using rule 97 (exp -> termino exp_operador exp .)
    LESSER_EQUAL    reduce using rule 97 (exp -> termino exp_operador exp .)
    EQUAL           reduce using rule 97 (exp -> termino exp_operador exp .)
    NOT_EQUAL       reduce using rule 97 (exp -> termino exp_operador exp .)
    AND             reduce using rule 97 (exp -> termino exp_operador exp .)
    OR              reduce using rule 97 (exp -> termino exp_operador exp .)
    SEMICOLON       reduce using rule 97 (exp -> termino exp_operador exp .)
    COMMA           reduce using rule 97 (exp -> termino exp_operador exp .)
    C_PARENTHESIS   reduce using rule 97 (exp -> termino exp_operador exp .)
    C_ABRACKET      reduce using rule 97 (exp -> termino exp_operador exp .)
    O_CBRACKET      reduce using rule 97 (exp -> termino exp_operador exp .)
    TO              reduce using rule 97 (exp -> termino exp_operador exp .)


state 183

    (101) termino -> factor termino_operador termino .

    PLUS            reduce using rule 101 (termino -> factor termino_operador termino .)
    MINUS           reduce using rule 101 (termino -> factor termino_operador termino .)
    GREATER         reduce using rule 101 (termino -> factor termino_operador termino .)
    LESSER          reduce using rule 101 (termino -> factor termino_operador termino .)
    GREATER_EQUAL   reduce using rule 101 (termino -> factor termino_operador termino .)
    LESSER_EQUAL    reduce using rule 101 (termino -> factor termino_operador termino .)
    EQUAL           reduce using rule 101 (termino -> factor termino_operador termino .)
    NOT_EQUAL       reduce using rule 101 (termino -> factor termino_operador termino .)
    AND             reduce using rule 101 (termino -> factor termino_operador termino .)
    OR              reduce using rule 101 (termino -> factor termino_operador termino .)
    SEMICOLON       reduce using rule 101 (termino -> factor termino_operador termino .)
    COMMA           reduce using rule 101 (termino -> factor termino_operador termino .)
    C_PARENTHESIS   reduce using rule 101 (termino -> factor termino_operador termino .)
    C_ABRACKET      reduce using rule 101 (termino -> factor termino_operador termino .)
    O_CBRACKET      reduce using rule 101 (termino -> factor termino_operador termino .)
    TO              reduce using rule 101 (termino -> factor termino_operador termino .)


state 184

    (106) factor -> O_PARENTHESIS expr C_PARENTHESIS .

    TIMES           reduce using rule 106 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    DIVIDE          reduce using rule 106 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    MODULE          reduce using rule 106 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    PLUS            reduce using rule 106 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    MINUS           reduce using rule 106 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    GREATER         reduce using rule 106 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    LESSER          reduce using rule 106 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    GREATER_EQUAL   reduce using rule 106 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    LESSER_EQUAL    reduce using rule 106 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    EQUAL           reduce using rule 106 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    NOT_EQUAL       reduce using rule 106 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    AND             reduce using rule 106 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    OR              reduce using rule 106 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    SEMICOLON       reduce using rule 106 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    COMMA           reduce using rule 106 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    C_PARENTHESIS   reduce using rule 106 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    C_ABRACKET      reduce using rule 106 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    O_CBRACKET      reduce using rule 106 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    TO              reduce using rule 106 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)


state 185

    (55) llamada_prime -> exp COMMA llamada_prime .

    C_PARENTHESIS   reduce using rule 55 (llamada_prime -> exp COMMA llamada_prime .)


state 186

    (59) lectura_prime -> variable COMMA lectura_prime .

    C_PARENTHESIS   reduce using rule 59 (lectura_prime -> variable COMMA lectura_prime .)


state 187

    (63) escritura_prime -> expr COMMA escritura_prime .

    C_PARENTHESIS   reduce using rule 63 (escritura_prime -> expr COMMA escritura_prime .)


state 188

    (64) escritura_prime -> escritura_string COMMA escritura_prime .

    C_PARENTHESIS   reduce using rule 64 (escritura_prime -> escritura_string COMMA escritura_prime .)


state 189

    (66) decision -> IF O_PARENTHESIS decision_expr C_PARENTHESIS bloque . else
    (68) else -> . else_prime bloque
    (69) else -> . epsilon
    (70) else_prime -> . ELSE
    (113) epsilon -> .

    ELSE            shift and go to state 197
    ID              reduce using rule 113 (epsilon -> .)
    RETURN          reduce using rule 113 (epsilon -> .)
    READ            reduce using rule 113 (epsilon -> .)
    WRITE           reduce using rule 113 (epsilon -> .)
    IF              reduce using rule 113 (epsilon -> .)
    FOR             reduce using rule 113 (epsilon -> .)
    WHILE           reduce using rule 113 (epsilon -> .)
    C_CBRACKET      reduce using rule 113 (epsilon -> .)

    else                           shift and go to state 194
    else_prime                     shift and go to state 195
    epsilon                        shift and go to state 196

state 190

    (74) for -> FOR for_asignacion for_to for_exp bloque .

    ID              reduce using rule 74 (for -> FOR for_asignacion for_to for_exp bloque .)
    RETURN          reduce using rule 74 (for -> FOR for_asignacion for_to for_exp bloque .)
    READ            reduce using rule 74 (for -> FOR for_asignacion for_to for_exp bloque .)
    WRITE           reduce using rule 74 (for -> FOR for_asignacion for_to for_exp bloque .)
    IF              reduce using rule 74 (for -> FOR for_asignacion for_to for_exp bloque .)
    FOR             reduce using rule 74 (for -> FOR for_asignacion for_to for_exp bloque .)
    WHILE           reduce using rule 74 (for -> FOR for_asignacion for_to for_exp bloque .)
    C_CBRACKET      reduce using rule 74 (for -> FOR for_asignacion for_to for_exp bloque .)


state 191

    (42) arr_open_bracket -> O_ABRACKET .

    O_PARENTHESIS   reduce using rule 42 (arr_open_bracket -> O_ABRACKET .)
    PLUS            reduce using rule 42 (arr_open_bracket -> O_ABRACKET .)
    MINUS           reduce using rule 42 (arr_open_bracket -> O_ABRACKET .)
    ID              reduce using rule 42 (arr_open_bracket -> O_ABRACKET .)
    CTE_INT         reduce using rule 42 (arr_open_bracket -> O_ABRACKET .)
    CTE_FLOAT       reduce using rule 42 (arr_open_bracket -> O_ABRACKET .)


state 192

    (37) var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket . exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket . exp arr_close_bracket
    (96) exp -> . termino
    (97) exp -> . termino exp_operador exp
    (100) termino -> . factor
    (101) termino -> . factor termino_operador termino
    (105) factor -> . variable
    (106) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (107) factor -> . llamada
    (108) factor -> . cte
    (109) factor -> . PLUS cte
    (110) factor -> . MINUS cte
    (35) variable -> . var_array
    (36) variable -> . ID
    (53) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (111) cte -> . CTE_INT
    (112) cte -> . CTE_FLOAT
    (37) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (40) arr_id -> . ID

    O_PARENTHESIS   shift and go to state 108
    PLUS            shift and go to state 111
    MINUS           shift and go to state 112
    ID              shift and go to state 113
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 115

    arr_id                         shift and go to state 66
    exp                            shift and go to state 198
    termino                        shift and go to state 106
    factor                         shift and go to state 107
    variable                       shift and go to state 98
    llamada                        shift and go to state 109
    cte                            shift and go to state 110
    var_array                      shift and go to state 64

state 193

    (13) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET . CTE_INT C_ABRACKET

    CTE_INT         shift and go to state 199


state 194

    (66) decision -> IF O_PARENTHESIS decision_expr C_PARENTHESIS bloque else .

    ID              reduce using rule 66 (decision -> IF O_PARENTHESIS decision_expr C_PARENTHESIS bloque else .)
    RETURN          reduce using rule 66 (decision -> IF O_PARENTHESIS decision_expr C_PARENTHESIS bloque else .)
    READ            reduce using rule 66 (decision -> IF O_PARENTHESIS decision_expr C_PARENTHESIS bloque else .)
    WRITE           reduce using rule 66 (decision -> IF O_PARENTHESIS decision_expr C_PARENTHESIS bloque else .)
    IF              reduce using rule 66 (decision -> IF O_PARENTHESIS decision_expr C_PARENTHESIS bloque else .)
    FOR             reduce using rule 66 (decision -> IF O_PARENTHESIS decision_expr C_PARENTHESIS bloque else .)
    WHILE           reduce using rule 66 (decision -> IF O_PARENTHESIS decision_expr C_PARENTHESIS bloque else .)
    C_CBRACKET      reduce using rule 66 (decision -> IF O_PARENTHESIS decision_expr C_PARENTHESIS bloque else .)


state 195

    (68) else -> else_prime . bloque
    (3) bloque -> . O_CBRACKET bloque_prime C_CBRACKET

    O_CBRACKET      shift and go to state 30

    bloque                         shift and go to state 200

state 196

    (69) else -> epsilon .

    ID              reduce using rule 69 (else -> epsilon .)
    RETURN          reduce using rule 69 (else -> epsilon .)
    READ            reduce using rule 69 (else -> epsilon .)
    WRITE           reduce using rule 69 (else -> epsilon .)
    IF              reduce using rule 69 (else -> epsilon .)
    FOR             reduce using rule 69 (else -> epsilon .)
    WHILE           reduce using rule 69 (else -> epsilon .)
    C_CBRACKET      reduce using rule 69 (else -> epsilon .)


state 197

    (70) else_prime -> ELSE .

    O_CBRACKET      reduce using rule 70 (else_prime -> ELSE .)


state 198

    (37) var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp . arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp . arr_close_bracket
    (41) arr_close_bracket -> . C_ABRACKET

    C_ABRACKET      shift and go to state 174

    arr_close_bracket              shift and go to state 201

state 199

    (13) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT . C_ABRACKET

    C_ABRACKET      shift and go to state 202


state 200

    (68) else -> else_prime bloque .

    ID              reduce using rule 68 (else -> else_prime bloque .)
    RETURN          reduce using rule 68 (else -> else_prime bloque .)
    READ            reduce using rule 68 (else -> else_prime bloque .)
    WRITE           reduce using rule 68 (else -> else_prime bloque .)
    IF              reduce using rule 68 (else -> else_prime bloque .)
    FOR             reduce using rule 68 (else -> else_prime bloque .)
    WHILE           reduce using rule 68 (else -> else_prime bloque .)
    C_CBRACKET      reduce using rule 68 (else -> else_prime bloque .)


state 201

    (37) var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket . arr_open_bracket exp arr_close_bracket
    (38) var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .
    (42) arr_open_bracket -> . O_ABRACKET

    ASSIGN          reduce using rule 38 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    TIMES           reduce using rule 38 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    DIVIDE          reduce using rule 38 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    MODULE          reduce using rule 38 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    PLUS            reduce using rule 38 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    MINUS           reduce using rule 38 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    GREATER         reduce using rule 38 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    LESSER          reduce using rule 38 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    GREATER_EQUAL   reduce using rule 38 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    LESSER_EQUAL    reduce using rule 38 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    EQUAL           reduce using rule 38 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    NOT_EQUAL       reduce using rule 38 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    AND             reduce using rule 38 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    OR              reduce using rule 38 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    SEMICOLON       reduce using rule 38 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    COMMA           reduce using rule 38 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    C_PARENTHESIS   reduce using rule 38 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    C_ABRACKET      reduce using rule 38 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    O_CBRACKET      reduce using rule 38 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    TO              reduce using rule 38 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    O_ABRACKET      shift and go to state 191

    arr_open_bracket               shift and go to state 203

state 202

    (13) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET .

    COMMA           reduce using rule 13 (declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET .)
    COLON           reduce using rule 13 (declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET .)


state 203

    (37) var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket . exp arr_close_bracket
    (96) exp -> . termino
    (97) exp -> . termino exp_operador exp
    (100) termino -> . factor
    (101) termino -> . factor termino_operador termino
    (105) factor -> . variable
    (106) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (107) factor -> . llamada
    (108) factor -> . cte
    (109) factor -> . PLUS cte
    (110) factor -> . MINUS cte
    (35) variable -> . var_array
    (36) variable -> . ID
    (53) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (111) cte -> . CTE_INT
    (112) cte -> . CTE_FLOAT
    (37) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (40) arr_id -> . ID

    O_PARENTHESIS   shift and go to state 108
    PLUS            shift and go to state 111
    MINUS           shift and go to state 112
    ID              shift and go to state 113
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 115

    arr_id                         shift and go to state 66
    exp                            shift and go to state 204
    termino                        shift and go to state 106
    factor                         shift and go to state 107
    variable                       shift and go to state 98
    llamada                        shift and go to state 109
    cte                            shift and go to state 110
    var_array                      shift and go to state 64

state 204

    (37) var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp . arr_close_bracket
    (41) arr_close_bracket -> . C_ABRACKET

    C_ABRACKET      shift and go to state 174

    arr_close_bracket              shift and go to state 205

state 205

    (37) var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .

    ASSIGN          reduce using rule 37 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    TIMES           reduce using rule 37 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    DIVIDE          reduce using rule 37 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    MODULE          reduce using rule 37 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    PLUS            reduce using rule 37 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    MINUS           reduce using rule 37 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    GREATER         reduce using rule 37 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    LESSER          reduce using rule 37 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    GREATER_EQUAL   reduce using rule 37 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    LESSER_EQUAL    reduce using rule 37 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    EQUAL           reduce using rule 37 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    NOT_EQUAL       reduce using rule 37 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    AND             reduce using rule 37 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    OR              reduce using rule 37 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    SEMICOLON       reduce using rule 37 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    COMMA           reduce using rule 37 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    C_PARENTHESIS   reduce using rule 37 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    C_ABRACKET      reduce using rule 37 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    O_CBRACKET      reduce using rule 37 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    TO              reduce using rule 37 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)

