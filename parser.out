Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CTE_CHAR

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAM ID SEMICOLON declaracion_global funcion main bloque
Rule 2     main -> MAIN O_PARENTHESIS C_PARENTHESIS
Rule 3     bloque -> O_CBRACKET bloque_prime C_CBRACKET
Rule 4     bloque_prime -> estatuto bloque_prime
Rule 5     bloque_prime -> epsilon
Rule 6     declaracion_funcion -> declaracion
Rule 7     declaracion_global -> declaracion
Rule 8     declaracion -> declaracion_base
Rule 9     declaracion -> declaracion_base declaracion
Rule 10    declaracion_base -> LET declaracion_prime COLON declaracion_tipo SEMICOLON
Rule 11    declaracion_prime -> declaracion_variable
Rule 12    declaracion_prime -> declaracion_variable COMMA declaracion_prime
Rule 13    declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
Rule 14    declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
Rule 15    declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET
Rule 16    declaracion_variable -> ID
Rule 17    declaracion_tipo -> INT
Rule 18    declaracion_tipo -> FLOAT
Rule 19    declaracion_tipo -> CHAR
Rule 20    declaracion_tipo -> STRING
Rule 21    tipo -> INT
Rule 22    tipo -> FLOAT
Rule 23    tipo -> CHAR
Rule 24    tipo -> STRING
Rule 25    funcion -> funcion_base funcion
Rule 26    funcion -> epsilon
Rule 27    funcion_base -> FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque
Rule 28    funcion_prime -> tipo ID
Rule 29    funcion_prime -> tipo ID COMMA funcion_prime
Rule 30    funcion_ident -> VOID ID
Rule 31    funcion_ident -> INT ID
Rule 32    funcion_ident -> FLOAT ID
Rule 33    funcion_ident -> CHAR ID
Rule 34    funcion_ident -> STRING ID
Rule 35    variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
Rule 36    variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
Rule 37    variable -> ID O_ABRACKET exp C_ABRACKET
Rule 38    variable -> ID
Rule 39    estatuto -> asignacion SEMICOLON
Rule 40    estatuto -> llamada SEMICOLON
Rule 41    estatuto -> retorno SEMICOLON
Rule 42    estatuto -> lectura SEMICOLON
Rule 43    estatuto -> escritura SEMICOLON
Rule 44    estatuto -> decision
Rule 45    estatuto -> while
Rule 46    estatuto -> for
Rule 47    asignacion -> variable ASSIGN asignacion_expr
Rule 48    asignacion_expr -> expr
Rule 49    llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS
Rule 50    llamada_prime -> exp
Rule 51    llamada_prime -> exp COMMA llamada_prime
Rule 52    retorno -> RETURN O_PARENTHESIS expr C_PARENTHESIS
Rule 53    lectura -> READ O_PARENTHESIS lectura_prime C_PARENTHESIS
Rule 54    lectura_prime -> variable
Rule 55    lectura_prime -> variable COMMA lectura_prime
Rule 56    escritura -> WRITE O_PARENTHESIS escritura_prime C_PARENTHESIS
Rule 57    escritura_prime -> expr
Rule 58    escritura_prime -> escritura_string
Rule 59    escritura_prime -> expr COMMA escritura_prime
Rule 60    escritura_prime -> escritura_string COMMA escritura_prime
Rule 61    escritura_string -> CTE_STRING
Rule 62    decision -> IF O_PARENTHESIS expr C_PARENTHESIS bloque else
Rule 63    else -> ELSE bloque
Rule 64    else -> epsilon
Rule 65    while -> WHILE O_PARENTHESIS expr C_PARENTHESIS bloque
Rule 66    for -> FOR variable ASSIGN exp TO exp bloque
Rule 67    expr -> or
Rule 68    or -> and
Rule 69    or -> and OR or
Rule 70    and -> equal
Rule 71    and -> equal AND and
Rule 72    equal -> compare
Rule 73    equal -> compare EQUAL compare
Rule 74    equal -> compare NOT_EQUAL compare
Rule 75    compare -> exp
Rule 76    compare -> exp GREATER exp
Rule 77    compare -> exp LESSER exp
Rule 78    compare -> exp GREATER_EQUAL exp
Rule 79    compare -> exp LESSER_EQUAL exp
Rule 80    exp -> termino
Rule 81    exp -> termino exp_operador exp
Rule 82    exp_operador -> PLUS
Rule 83    exp_operador -> MINUS
Rule 84    termino -> factor
Rule 85    termino -> factor termino_operador termino
Rule 86    termino_operador -> TIMES
Rule 87    termino_operador -> DIVIDE
Rule 88    termino_operador -> MODULE
Rule 89    factor -> variable
Rule 90    factor -> O_PARENTHESIS expr C_PARENTHESIS
Rule 91    factor -> llamada
Rule 92    factor -> cte
Rule 93    factor -> PLUS cte
Rule 94    factor -> MINUS cte
Rule 95    cte -> CTE_INT
Rule 96    cte -> CTE_FLOAT
Rule 97    epsilon -> <empty>

Terminals, with rules where they appear

AND                  : 71
ASSIGN               : 47 66
CHAR                 : 19 23 33
COLON                : 10
COMMA                : 12 29 51 55 59 60
CTE_CHAR             : 
CTE_FLOAT            : 96
CTE_INT              : 13 13 13 14 14 15 95
CTE_STRING           : 61
C_ABRACKET           : 13 13 13 14 14 15 35 35 35 36 36 37
C_CBRACKET           : 3
C_PARENTHESIS        : 2 27 49 52 53 56 62 65 90
DIVIDE               : 87
ELSE                 : 63
EQUAL                : 73
FLOAT                : 18 22 32
FOR                  : 66
FUNCTION             : 27
GREATER              : 76
GREATER_EQUAL        : 78
ID                   : 1 13 14 15 16 28 29 30 31 32 33 34 35 36 37 38 49
IF                   : 62
INT                  : 17 21 31
LESSER               : 77
LESSER_EQUAL         : 79
LET                  : 10
MAIN                 : 2
MINUS                : 83 94
MODULE               : 88
NOT_EQUAL            : 74
OR                   : 69
O_ABRACKET           : 13 13 13 14 14 15 35 35 35 36 36 37
O_CBRACKET           : 3
O_PARENTHESIS        : 2 27 49 52 53 56 62 65 90
PLUS                 : 82 93
PROGRAM              : 1
READ                 : 53
RETURN               : 52
SEMICOLON            : 1 10 39 40 41 42 43
STRING               : 20 24 34
TIMES                : 86
TO                   : 66
VOID                 : 30
WHILE                : 65
WRITE                : 56
error                : 

Nonterminals, with rules where they appear

and                  : 68 69 71
asignacion           : 39
asignacion_expr      : 47
bloque               : 1 27 62 63 65 66
bloque_prime         : 3 4
compare              : 72 73 73 74 74
cte                  : 92 93 94
decision             : 44
declaracion          : 6 7 9
declaracion_base     : 8 9
declaracion_funcion  : 27
declaracion_global   : 1
declaracion_prime    : 10 12
declaracion_tipo     : 10
declaracion_variable : 11 12
else                 : 62
epsilon              : 5 26 64
equal                : 70 71
escritura            : 43
escritura_prime      : 56 59 60
escritura_string     : 58 60
estatuto             : 4
exp                  : 35 35 35 36 36 37 50 51 66 66 75 76 76 77 77 78 78 79 79 81
exp_operador         : 81
expr                 : 48 52 57 59 62 65 90
factor               : 84 85
for                  : 46
funcion              : 1 25
funcion_base         : 25
funcion_ident        : 27
funcion_prime        : 27 29
lectura              : 42
lectura_prime        : 53 55
llamada              : 40 91
llamada_prime        : 49 51
main                 : 1
or                   : 67 69
programa             : 0
retorno              : 41
termino              : 80 81 85
termino_operador     : 85
tipo                 : 28 29
variable             : 47 54 55 66 89
while                : 45

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAM ID SEMICOLON declaracion_global funcion main bloque

    PROGRAM         shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> PROGRAM . ID SEMICOLON declaracion_global funcion main bloque

    ID              shift and go to state 3


state 3

    (1) programa -> PROGRAM ID . SEMICOLON declaracion_global funcion main bloque

    SEMICOLON       shift and go to state 4


state 4

    (1) programa -> PROGRAM ID SEMICOLON . declaracion_global funcion main bloque
    (7) declaracion_global -> . declaracion
    (8) declaracion -> . declaracion_base
    (9) declaracion -> . declaracion_base declaracion
    (10) declaracion_base -> . LET declaracion_prime COLON declaracion_tipo SEMICOLON

    LET             shift and go to state 8

    declaracion_global             shift and go to state 5
    declaracion                    shift and go to state 6
    declaracion_base               shift and go to state 7

state 5

    (1) programa -> PROGRAM ID SEMICOLON declaracion_global . funcion main bloque
    (25) funcion -> . funcion_base funcion
    (26) funcion -> . epsilon
    (27) funcion_base -> . FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque
    (97) epsilon -> .

    FUNCTION        shift and go to state 12
    MAIN            reduce using rule 97 (epsilon -> .)

    funcion                        shift and go to state 9
    funcion_base                   shift and go to state 10
    epsilon                        shift and go to state 11

state 6

    (7) declaracion_global -> declaracion .

    FUNCTION        reduce using rule 7 (declaracion_global -> declaracion .)
    MAIN            reduce using rule 7 (declaracion_global -> declaracion .)


state 7

    (8) declaracion -> declaracion_base .
    (9) declaracion -> declaracion_base . declaracion
    (8) declaracion -> . declaracion_base
    (9) declaracion -> . declaracion_base declaracion
    (10) declaracion_base -> . LET declaracion_prime COLON declaracion_tipo SEMICOLON

    FUNCTION        reduce using rule 8 (declaracion -> declaracion_base .)
    MAIN            reduce using rule 8 (declaracion -> declaracion_base .)
    O_CBRACKET      reduce using rule 8 (declaracion -> declaracion_base .)
    LET             shift and go to state 8

    declaracion_base               shift and go to state 7
    declaracion                    shift and go to state 13

state 8

    (10) declaracion_base -> LET . declaracion_prime COLON declaracion_tipo SEMICOLON
    (11) declaracion_prime -> . declaracion_variable
    (12) declaracion_prime -> . declaracion_variable COMMA declaracion_prime
    (13) declaracion_variable -> . ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (14) declaracion_variable -> . ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (15) declaracion_variable -> . ID O_ABRACKET CTE_INT C_ABRACKET
    (16) declaracion_variable -> . ID

    ID              shift and go to state 16

    declaracion_prime              shift and go to state 14
    declaracion_variable           shift and go to state 15

state 9

    (1) programa -> PROGRAM ID SEMICOLON declaracion_global funcion . main bloque
    (2) main -> . MAIN O_PARENTHESIS C_PARENTHESIS

    MAIN            shift and go to state 18

    main                           shift and go to state 17

state 10

    (25) funcion -> funcion_base . funcion
    (25) funcion -> . funcion_base funcion
    (26) funcion -> . epsilon
    (27) funcion_base -> . FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque
    (97) epsilon -> .

    FUNCTION        shift and go to state 12
    MAIN            reduce using rule 97 (epsilon -> .)

    funcion_base                   shift and go to state 10
    funcion                        shift and go to state 19
    epsilon                        shift and go to state 11

state 11

    (26) funcion -> epsilon .

    MAIN            reduce using rule 26 (funcion -> epsilon .)


state 12

    (27) funcion_base -> FUNCTION . funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque
    (30) funcion_ident -> . VOID ID
    (31) funcion_ident -> . INT ID
    (32) funcion_ident -> . FLOAT ID
    (33) funcion_ident -> . CHAR ID
    (34) funcion_ident -> . STRING ID

    VOID            shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    STRING          shift and go to state 25

    funcion_ident                  shift and go to state 20

state 13

    (9) declaracion -> declaracion_base declaracion .

    FUNCTION        reduce using rule 9 (declaracion -> declaracion_base declaracion .)
    MAIN            reduce using rule 9 (declaracion -> declaracion_base declaracion .)
    O_CBRACKET      reduce using rule 9 (declaracion -> declaracion_base declaracion .)


state 14

    (10) declaracion_base -> LET declaracion_prime . COLON declaracion_tipo SEMICOLON

    COLON           shift and go to state 26


state 15

    (11) declaracion_prime -> declaracion_variable .
    (12) declaracion_prime -> declaracion_variable . COMMA declaracion_prime

    COLON           reduce using rule 11 (declaracion_prime -> declaracion_variable .)
    COMMA           shift and go to state 27


state 16

    (13) declaracion_variable -> ID . O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (14) declaracion_variable -> ID . O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (15) declaracion_variable -> ID . O_ABRACKET CTE_INT C_ABRACKET
    (16) declaracion_variable -> ID .

    O_ABRACKET      shift and go to state 28
    COMMA           reduce using rule 16 (declaracion_variable -> ID .)
    COLON           reduce using rule 16 (declaracion_variable -> ID .)


state 17

    (1) programa -> PROGRAM ID SEMICOLON declaracion_global funcion main . bloque
    (3) bloque -> . O_CBRACKET bloque_prime C_CBRACKET

    O_CBRACKET      shift and go to state 30

    bloque                         shift and go to state 29

state 18

    (2) main -> MAIN . O_PARENTHESIS C_PARENTHESIS

    O_PARENTHESIS   shift and go to state 31


state 19

    (25) funcion -> funcion_base funcion .

    MAIN            reduce using rule 25 (funcion -> funcion_base funcion .)


state 20

    (27) funcion_base -> FUNCTION funcion_ident . O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque

    O_PARENTHESIS   shift and go to state 32


state 21

    (30) funcion_ident -> VOID . ID

    ID              shift and go to state 33


state 22

    (31) funcion_ident -> INT . ID

    ID              shift and go to state 34


state 23

    (32) funcion_ident -> FLOAT . ID

    ID              shift and go to state 35


state 24

    (33) funcion_ident -> CHAR . ID

    ID              shift and go to state 36


state 25

    (34) funcion_ident -> STRING . ID

    ID              shift and go to state 37


state 26

    (10) declaracion_base -> LET declaracion_prime COLON . declaracion_tipo SEMICOLON
    (17) declaracion_tipo -> . INT
    (18) declaracion_tipo -> . FLOAT
    (19) declaracion_tipo -> . CHAR
    (20) declaracion_tipo -> . STRING

    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    CHAR            shift and go to state 41
    STRING          shift and go to state 42

    declaracion_tipo               shift and go to state 38

state 27

    (12) declaracion_prime -> declaracion_variable COMMA . declaracion_prime
    (11) declaracion_prime -> . declaracion_variable
    (12) declaracion_prime -> . declaracion_variable COMMA declaracion_prime
    (13) declaracion_variable -> . ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (14) declaracion_variable -> . ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (15) declaracion_variable -> . ID O_ABRACKET CTE_INT C_ABRACKET
    (16) declaracion_variable -> . ID

    ID              shift and go to state 16

    declaracion_variable           shift and go to state 15
    declaracion_prime              shift and go to state 43

state 28

    (13) declaracion_variable -> ID O_ABRACKET . CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (14) declaracion_variable -> ID O_ABRACKET . CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (15) declaracion_variable -> ID O_ABRACKET . CTE_INT C_ABRACKET

    CTE_INT         shift and go to state 44


state 29

    (1) programa -> PROGRAM ID SEMICOLON declaracion_global funcion main bloque .

    $end            reduce using rule 1 (programa -> PROGRAM ID SEMICOLON declaracion_global funcion main bloque .)


state 30

    (3) bloque -> O_CBRACKET . bloque_prime C_CBRACKET
    (4) bloque_prime -> . estatuto bloque_prime
    (5) bloque_prime -> . epsilon
    (39) estatuto -> . asignacion SEMICOLON
    (40) estatuto -> . llamada SEMICOLON
    (41) estatuto -> . retorno SEMICOLON
    (42) estatuto -> . lectura SEMICOLON
    (43) estatuto -> . escritura SEMICOLON
    (44) estatuto -> . decision
    (45) estatuto -> . while
    (46) estatuto -> . for
    (97) epsilon -> .
    (47) asignacion -> . variable ASSIGN asignacion_expr
    (49) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (52) retorno -> . RETURN O_PARENTHESIS expr C_PARENTHESIS
    (53) lectura -> . READ O_PARENTHESIS lectura_prime C_PARENTHESIS
    (56) escritura -> . WRITE O_PARENTHESIS escritura_prime C_PARENTHESIS
    (62) decision -> . IF O_PARENTHESIS expr C_PARENTHESIS bloque else
    (65) while -> . WHILE O_PARENTHESIS expr C_PARENTHESIS bloque
    (66) for -> . FOR variable ASSIGN exp TO exp bloque
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID O_ABRACKET exp C_ABRACKET
    (38) variable -> . ID

    C_CBRACKET      reduce using rule 97 (epsilon -> .)
    ID              shift and go to state 57
    RETURN          shift and go to state 58
    READ            shift and go to state 59
    WRITE           shift and go to state 60
    IF              shift and go to state 61
    WHILE           shift and go to state 62
    FOR             shift and go to state 63

    bloque_prime                   shift and go to state 45
    estatuto                       shift and go to state 46
    epsilon                        shift and go to state 47
    asignacion                     shift and go to state 48
    llamada                        shift and go to state 49
    retorno                        shift and go to state 50
    lectura                        shift and go to state 51
    escritura                      shift and go to state 52
    decision                       shift and go to state 53
    while                          shift and go to state 54
    for                            shift and go to state 55
    variable                       shift and go to state 56

state 31

    (2) main -> MAIN O_PARENTHESIS . C_PARENTHESIS

    C_PARENTHESIS   shift and go to state 64


state 32

    (27) funcion_base -> FUNCTION funcion_ident O_PARENTHESIS . funcion_prime C_PARENTHESIS declaracion_funcion bloque
    (28) funcion_prime -> . tipo ID
    (29) funcion_prime -> . tipo ID COMMA funcion_prime
    (21) tipo -> . INT
    (22) tipo -> . FLOAT
    (23) tipo -> . CHAR
    (24) tipo -> . STRING

    INT             shift and go to state 67
    FLOAT           shift and go to state 68
    CHAR            shift and go to state 69
    STRING          shift and go to state 70

    funcion_prime                  shift and go to state 65
    tipo                           shift and go to state 66

state 33

    (30) funcion_ident -> VOID ID .

    O_PARENTHESIS   reduce using rule 30 (funcion_ident -> VOID ID .)


state 34

    (31) funcion_ident -> INT ID .

    O_PARENTHESIS   reduce using rule 31 (funcion_ident -> INT ID .)


state 35

    (32) funcion_ident -> FLOAT ID .

    O_PARENTHESIS   reduce using rule 32 (funcion_ident -> FLOAT ID .)


state 36

    (33) funcion_ident -> CHAR ID .

    O_PARENTHESIS   reduce using rule 33 (funcion_ident -> CHAR ID .)


state 37

    (34) funcion_ident -> STRING ID .

    O_PARENTHESIS   reduce using rule 34 (funcion_ident -> STRING ID .)


state 38

    (10) declaracion_base -> LET declaracion_prime COLON declaracion_tipo . SEMICOLON

    SEMICOLON       shift and go to state 71


state 39

    (17) declaracion_tipo -> INT .

    SEMICOLON       reduce using rule 17 (declaracion_tipo -> INT .)


state 40

    (18) declaracion_tipo -> FLOAT .

    SEMICOLON       reduce using rule 18 (declaracion_tipo -> FLOAT .)


state 41

    (19) declaracion_tipo -> CHAR .

    SEMICOLON       reduce using rule 19 (declaracion_tipo -> CHAR .)


state 42

    (20) declaracion_tipo -> STRING .

    SEMICOLON       reduce using rule 20 (declaracion_tipo -> STRING .)


state 43

    (12) declaracion_prime -> declaracion_variable COMMA declaracion_prime .

    COLON           reduce using rule 12 (declaracion_prime -> declaracion_variable COMMA declaracion_prime .)


state 44

    (13) declaracion_variable -> ID O_ABRACKET CTE_INT . C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (14) declaracion_variable -> ID O_ABRACKET CTE_INT . C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (15) declaracion_variable -> ID O_ABRACKET CTE_INT . C_ABRACKET

    C_ABRACKET      shift and go to state 72


state 45

    (3) bloque -> O_CBRACKET bloque_prime . C_CBRACKET

    C_CBRACKET      shift and go to state 73


state 46

    (4) bloque_prime -> estatuto . bloque_prime
    (4) bloque_prime -> . estatuto bloque_prime
    (5) bloque_prime -> . epsilon
    (39) estatuto -> . asignacion SEMICOLON
    (40) estatuto -> . llamada SEMICOLON
    (41) estatuto -> . retorno SEMICOLON
    (42) estatuto -> . lectura SEMICOLON
    (43) estatuto -> . escritura SEMICOLON
    (44) estatuto -> . decision
    (45) estatuto -> . while
    (46) estatuto -> . for
    (97) epsilon -> .
    (47) asignacion -> . variable ASSIGN asignacion_expr
    (49) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (52) retorno -> . RETURN O_PARENTHESIS expr C_PARENTHESIS
    (53) lectura -> . READ O_PARENTHESIS lectura_prime C_PARENTHESIS
    (56) escritura -> . WRITE O_PARENTHESIS escritura_prime C_PARENTHESIS
    (62) decision -> . IF O_PARENTHESIS expr C_PARENTHESIS bloque else
    (65) while -> . WHILE O_PARENTHESIS expr C_PARENTHESIS bloque
    (66) for -> . FOR variable ASSIGN exp TO exp bloque
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID O_ABRACKET exp C_ABRACKET
    (38) variable -> . ID

    C_CBRACKET      reduce using rule 97 (epsilon -> .)
    ID              shift and go to state 57
    RETURN          shift and go to state 58
    READ            shift and go to state 59
    WRITE           shift and go to state 60
    IF              shift and go to state 61
    WHILE           shift and go to state 62
    FOR             shift and go to state 63

    estatuto                       shift and go to state 46
    bloque_prime                   shift and go to state 74
    epsilon                        shift and go to state 47
    asignacion                     shift and go to state 48
    llamada                        shift and go to state 49
    retorno                        shift and go to state 50
    lectura                        shift and go to state 51
    escritura                      shift and go to state 52
    decision                       shift and go to state 53
    while                          shift and go to state 54
    for                            shift and go to state 55
    variable                       shift and go to state 56

state 47

    (5) bloque_prime -> epsilon .

    C_CBRACKET      reduce using rule 5 (bloque_prime -> epsilon .)


state 48

    (39) estatuto -> asignacion . SEMICOLON

    SEMICOLON       shift and go to state 75


state 49

    (40) estatuto -> llamada . SEMICOLON

    SEMICOLON       shift and go to state 76


state 50

    (41) estatuto -> retorno . SEMICOLON

    SEMICOLON       shift and go to state 77


state 51

    (42) estatuto -> lectura . SEMICOLON

    SEMICOLON       shift and go to state 78


state 52

    (43) estatuto -> escritura . SEMICOLON

    SEMICOLON       shift and go to state 79


state 53

    (44) estatuto -> decision .

    ID              reduce using rule 44 (estatuto -> decision .)
    RETURN          reduce using rule 44 (estatuto -> decision .)
    READ            reduce using rule 44 (estatuto -> decision .)
    WRITE           reduce using rule 44 (estatuto -> decision .)
    IF              reduce using rule 44 (estatuto -> decision .)
    WHILE           reduce using rule 44 (estatuto -> decision .)
    FOR             reduce using rule 44 (estatuto -> decision .)
    C_CBRACKET      reduce using rule 44 (estatuto -> decision .)


state 54

    (45) estatuto -> while .

    ID              reduce using rule 45 (estatuto -> while .)
    RETURN          reduce using rule 45 (estatuto -> while .)
    READ            reduce using rule 45 (estatuto -> while .)
    WRITE           reduce using rule 45 (estatuto -> while .)
    IF              reduce using rule 45 (estatuto -> while .)
    WHILE           reduce using rule 45 (estatuto -> while .)
    FOR             reduce using rule 45 (estatuto -> while .)
    C_CBRACKET      reduce using rule 45 (estatuto -> while .)


state 55

    (46) estatuto -> for .

    ID              reduce using rule 46 (estatuto -> for .)
    RETURN          reduce using rule 46 (estatuto -> for .)
    READ            reduce using rule 46 (estatuto -> for .)
    WRITE           reduce using rule 46 (estatuto -> for .)
    IF              reduce using rule 46 (estatuto -> for .)
    WHILE           reduce using rule 46 (estatuto -> for .)
    FOR             reduce using rule 46 (estatuto -> for .)
    C_CBRACKET      reduce using rule 46 (estatuto -> for .)


state 56

    (47) asignacion -> variable . ASSIGN asignacion_expr

    ASSIGN          shift and go to state 80


state 57

    (49) llamada -> ID . O_PARENTHESIS llamada_prime C_PARENTHESIS
    (35) variable -> ID . O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> ID . O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> ID . O_ABRACKET exp C_ABRACKET
    (38) variable -> ID .

    O_PARENTHESIS   shift and go to state 81
    O_ABRACKET      shift and go to state 82
    ASSIGN          reduce using rule 38 (variable -> ID .)


state 58

    (52) retorno -> RETURN . O_PARENTHESIS expr C_PARENTHESIS

    O_PARENTHESIS   shift and go to state 83


state 59

    (53) lectura -> READ . O_PARENTHESIS lectura_prime C_PARENTHESIS

    O_PARENTHESIS   shift and go to state 84


state 60

    (56) escritura -> WRITE . O_PARENTHESIS escritura_prime C_PARENTHESIS

    O_PARENTHESIS   shift and go to state 85


state 61

    (62) decision -> IF . O_PARENTHESIS expr C_PARENTHESIS bloque else

    O_PARENTHESIS   shift and go to state 86


state 62

    (65) while -> WHILE . O_PARENTHESIS expr C_PARENTHESIS bloque

    O_PARENTHESIS   shift and go to state 87


state 63

    (66) for -> FOR . variable ASSIGN exp TO exp bloque
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID O_ABRACKET exp C_ABRACKET
    (38) variable -> . ID

    ID              shift and go to state 89

    variable                       shift and go to state 88

state 64

    (2) main -> MAIN O_PARENTHESIS C_PARENTHESIS .

    O_CBRACKET      reduce using rule 2 (main -> MAIN O_PARENTHESIS C_PARENTHESIS .)


state 65

    (27) funcion_base -> FUNCTION funcion_ident O_PARENTHESIS funcion_prime . C_PARENTHESIS declaracion_funcion bloque

    C_PARENTHESIS   shift and go to state 90


state 66

    (28) funcion_prime -> tipo . ID
    (29) funcion_prime -> tipo . ID COMMA funcion_prime

    ID              shift and go to state 91


state 67

    (21) tipo -> INT .

    ID              reduce using rule 21 (tipo -> INT .)


state 68

    (22) tipo -> FLOAT .

    ID              reduce using rule 22 (tipo -> FLOAT .)


state 69

    (23) tipo -> CHAR .

    ID              reduce using rule 23 (tipo -> CHAR .)


state 70

    (24) tipo -> STRING .

    ID              reduce using rule 24 (tipo -> STRING .)


state 71

    (10) declaracion_base -> LET declaracion_prime COLON declaracion_tipo SEMICOLON .

    LET             reduce using rule 10 (declaracion_base -> LET declaracion_prime COLON declaracion_tipo SEMICOLON .)
    FUNCTION        reduce using rule 10 (declaracion_base -> LET declaracion_prime COLON declaracion_tipo SEMICOLON .)
    MAIN            reduce using rule 10 (declaracion_base -> LET declaracion_prime COLON declaracion_tipo SEMICOLON .)
    O_CBRACKET      reduce using rule 10 (declaracion_base -> LET declaracion_prime COLON declaracion_tipo SEMICOLON .)


state 72

    (13) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET . O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (14) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET . O_ABRACKET CTE_INT C_ABRACKET
    (15) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET .

    O_ABRACKET      shift and go to state 92
    COMMA           reduce using rule 15 (declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET .)
    COLON           reduce using rule 15 (declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET .)


state 73

    (3) bloque -> O_CBRACKET bloque_prime C_CBRACKET .

    $end            reduce using rule 3 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    FUNCTION        reduce using rule 3 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    MAIN            reduce using rule 3 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    ELSE            reduce using rule 3 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    ID              reduce using rule 3 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    RETURN          reduce using rule 3 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    READ            reduce using rule 3 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    WRITE           reduce using rule 3 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    IF              reduce using rule 3 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    WHILE           reduce using rule 3 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    FOR             reduce using rule 3 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    C_CBRACKET      reduce using rule 3 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)


state 74

    (4) bloque_prime -> estatuto bloque_prime .

    C_CBRACKET      reduce using rule 4 (bloque_prime -> estatuto bloque_prime .)


state 75

    (39) estatuto -> asignacion SEMICOLON .

    ID              reduce using rule 39 (estatuto -> asignacion SEMICOLON .)
    RETURN          reduce using rule 39 (estatuto -> asignacion SEMICOLON .)
    READ            reduce using rule 39 (estatuto -> asignacion SEMICOLON .)
    WRITE           reduce using rule 39 (estatuto -> asignacion SEMICOLON .)
    IF              reduce using rule 39 (estatuto -> asignacion SEMICOLON .)
    WHILE           reduce using rule 39 (estatuto -> asignacion SEMICOLON .)
    FOR             reduce using rule 39 (estatuto -> asignacion SEMICOLON .)
    C_CBRACKET      reduce using rule 39 (estatuto -> asignacion SEMICOLON .)


state 76

    (40) estatuto -> llamada SEMICOLON .

    ID              reduce using rule 40 (estatuto -> llamada SEMICOLON .)
    RETURN          reduce using rule 40 (estatuto -> llamada SEMICOLON .)
    READ            reduce using rule 40 (estatuto -> llamada SEMICOLON .)
    WRITE           reduce using rule 40 (estatuto -> llamada SEMICOLON .)
    IF              reduce using rule 40 (estatuto -> llamada SEMICOLON .)
    WHILE           reduce using rule 40 (estatuto -> llamada SEMICOLON .)
    FOR             reduce using rule 40 (estatuto -> llamada SEMICOLON .)
    C_CBRACKET      reduce using rule 40 (estatuto -> llamada SEMICOLON .)


state 77

    (41) estatuto -> retorno SEMICOLON .

    ID              reduce using rule 41 (estatuto -> retorno SEMICOLON .)
    RETURN          reduce using rule 41 (estatuto -> retorno SEMICOLON .)
    READ            reduce using rule 41 (estatuto -> retorno SEMICOLON .)
    WRITE           reduce using rule 41 (estatuto -> retorno SEMICOLON .)
    IF              reduce using rule 41 (estatuto -> retorno SEMICOLON .)
    WHILE           reduce using rule 41 (estatuto -> retorno SEMICOLON .)
    FOR             reduce using rule 41 (estatuto -> retorno SEMICOLON .)
    C_CBRACKET      reduce using rule 41 (estatuto -> retorno SEMICOLON .)


state 78

    (42) estatuto -> lectura SEMICOLON .

    ID              reduce using rule 42 (estatuto -> lectura SEMICOLON .)
    RETURN          reduce using rule 42 (estatuto -> lectura SEMICOLON .)
    READ            reduce using rule 42 (estatuto -> lectura SEMICOLON .)
    WRITE           reduce using rule 42 (estatuto -> lectura SEMICOLON .)
    IF              reduce using rule 42 (estatuto -> lectura SEMICOLON .)
    WHILE           reduce using rule 42 (estatuto -> lectura SEMICOLON .)
    FOR             reduce using rule 42 (estatuto -> lectura SEMICOLON .)
    C_CBRACKET      reduce using rule 42 (estatuto -> lectura SEMICOLON .)


state 79

    (43) estatuto -> escritura SEMICOLON .

    ID              reduce using rule 43 (estatuto -> escritura SEMICOLON .)
    RETURN          reduce using rule 43 (estatuto -> escritura SEMICOLON .)
    READ            reduce using rule 43 (estatuto -> escritura SEMICOLON .)
    WRITE           reduce using rule 43 (estatuto -> escritura SEMICOLON .)
    IF              reduce using rule 43 (estatuto -> escritura SEMICOLON .)
    WHILE           reduce using rule 43 (estatuto -> escritura SEMICOLON .)
    FOR             reduce using rule 43 (estatuto -> escritura SEMICOLON .)
    C_CBRACKET      reduce using rule 43 (estatuto -> escritura SEMICOLON .)


state 80

    (47) asignacion -> variable ASSIGN . asignacion_expr
    (48) asignacion_expr -> . expr
    (67) expr -> . or
    (68) or -> . and
    (69) or -> . and OR or
    (70) and -> . equal
    (71) and -> . equal AND and
    (72) equal -> . compare
    (73) equal -> . compare EQUAL compare
    (74) equal -> . compare NOT_EQUAL compare
    (75) compare -> . exp
    (76) compare -> . exp GREATER exp
    (77) compare -> . exp LESSER exp
    (78) compare -> . exp GREATER_EQUAL exp
    (79) compare -> . exp LESSER_EQUAL exp
    (80) exp -> . termino
    (81) exp -> . termino exp_operador exp
    (84) termino -> . factor
    (85) termino -> . factor termino_operador termino
    (89) factor -> . variable
    (90) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (91) factor -> . llamada
    (92) factor -> . cte
    (93) factor -> . PLUS cte
    (94) factor -> . MINUS cte
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID O_ABRACKET exp C_ABRACKET
    (38) variable -> . ID
    (49) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (95) cte -> . CTE_INT
    (96) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 103
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    ID              shift and go to state 108
    CTE_INT         shift and go to state 109
    CTE_FLOAT       shift and go to state 110

    variable                       shift and go to state 93
    asignacion_expr                shift and go to state 94
    expr                           shift and go to state 95
    or                             shift and go to state 96
    and                            shift and go to state 97
    equal                          shift and go to state 98
    compare                        shift and go to state 99
    exp                            shift and go to state 100
    termino                        shift and go to state 101
    factor                         shift and go to state 102
    llamada                        shift and go to state 104
    cte                            shift and go to state 105

state 81

    (49) llamada -> ID O_PARENTHESIS . llamada_prime C_PARENTHESIS
    (50) llamada_prime -> . exp
    (51) llamada_prime -> . exp COMMA llamada_prime
    (80) exp -> . termino
    (81) exp -> . termino exp_operador exp
    (84) termino -> . factor
    (85) termino -> . factor termino_operador termino
    (89) factor -> . variable
    (90) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (91) factor -> . llamada
    (92) factor -> . cte
    (93) factor -> . PLUS cte
    (94) factor -> . MINUS cte
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID O_ABRACKET exp C_ABRACKET
    (38) variable -> . ID
    (49) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (95) cte -> . CTE_INT
    (96) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 103
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    ID              shift and go to state 108
    CTE_INT         shift and go to state 109
    CTE_FLOAT       shift and go to state 110

    llamada_prime                  shift and go to state 111
    exp                            shift and go to state 112
    termino                        shift and go to state 101
    factor                         shift and go to state 102
    variable                       shift and go to state 93
    llamada                        shift and go to state 104
    cte                            shift and go to state 105

state 82

    (35) variable -> ID O_ABRACKET . exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> ID O_ABRACKET . exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> ID O_ABRACKET . exp C_ABRACKET
    (80) exp -> . termino
    (81) exp -> . termino exp_operador exp
    (84) termino -> . factor
    (85) termino -> . factor termino_operador termino
    (89) factor -> . variable
    (90) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (91) factor -> . llamada
    (92) factor -> . cte
    (93) factor -> . PLUS cte
    (94) factor -> . MINUS cte
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID O_ABRACKET exp C_ABRACKET
    (38) variable -> . ID
    (49) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (95) cte -> . CTE_INT
    (96) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 103
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    ID              shift and go to state 108
    CTE_INT         shift and go to state 109
    CTE_FLOAT       shift and go to state 110

    exp                            shift and go to state 113
    termino                        shift and go to state 101
    factor                         shift and go to state 102
    variable                       shift and go to state 93
    llamada                        shift and go to state 104
    cte                            shift and go to state 105

state 83

    (52) retorno -> RETURN O_PARENTHESIS . expr C_PARENTHESIS
    (67) expr -> . or
    (68) or -> . and
    (69) or -> . and OR or
    (70) and -> . equal
    (71) and -> . equal AND and
    (72) equal -> . compare
    (73) equal -> . compare EQUAL compare
    (74) equal -> . compare NOT_EQUAL compare
    (75) compare -> . exp
    (76) compare -> . exp GREATER exp
    (77) compare -> . exp LESSER exp
    (78) compare -> . exp GREATER_EQUAL exp
    (79) compare -> . exp LESSER_EQUAL exp
    (80) exp -> . termino
    (81) exp -> . termino exp_operador exp
    (84) termino -> . factor
    (85) termino -> . factor termino_operador termino
    (89) factor -> . variable
    (90) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (91) factor -> . llamada
    (92) factor -> . cte
    (93) factor -> . PLUS cte
    (94) factor -> . MINUS cte
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID O_ABRACKET exp C_ABRACKET
    (38) variable -> . ID
    (49) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (95) cte -> . CTE_INT
    (96) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 103
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    ID              shift and go to state 108
    CTE_INT         shift and go to state 109
    CTE_FLOAT       shift and go to state 110

    expr                           shift and go to state 114
    or                             shift and go to state 96
    and                            shift and go to state 97
    equal                          shift and go to state 98
    compare                        shift and go to state 99
    exp                            shift and go to state 100
    termino                        shift and go to state 101
    factor                         shift and go to state 102
    variable                       shift and go to state 93
    llamada                        shift and go to state 104
    cte                            shift and go to state 105

state 84

    (53) lectura -> READ O_PARENTHESIS . lectura_prime C_PARENTHESIS
    (54) lectura_prime -> . variable
    (55) lectura_prime -> . variable COMMA lectura_prime
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID O_ABRACKET exp C_ABRACKET
    (38) variable -> . ID

    ID              shift and go to state 89

    lectura_prime                  shift and go to state 115
    variable                       shift and go to state 116

state 85

    (56) escritura -> WRITE O_PARENTHESIS . escritura_prime C_PARENTHESIS
    (57) escritura_prime -> . expr
    (58) escritura_prime -> . escritura_string
    (59) escritura_prime -> . expr COMMA escritura_prime
    (60) escritura_prime -> . escritura_string COMMA escritura_prime
    (67) expr -> . or
    (61) escritura_string -> . CTE_STRING
    (68) or -> . and
    (69) or -> . and OR or
    (70) and -> . equal
    (71) and -> . equal AND and
    (72) equal -> . compare
    (73) equal -> . compare EQUAL compare
    (74) equal -> . compare NOT_EQUAL compare
    (75) compare -> . exp
    (76) compare -> . exp GREATER exp
    (77) compare -> . exp LESSER exp
    (78) compare -> . exp GREATER_EQUAL exp
    (79) compare -> . exp LESSER_EQUAL exp
    (80) exp -> . termino
    (81) exp -> . termino exp_operador exp
    (84) termino -> . factor
    (85) termino -> . factor termino_operador termino
    (89) factor -> . variable
    (90) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (91) factor -> . llamada
    (92) factor -> . cte
    (93) factor -> . PLUS cte
    (94) factor -> . MINUS cte
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID O_ABRACKET exp C_ABRACKET
    (38) variable -> . ID
    (49) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (95) cte -> . CTE_INT
    (96) cte -> . CTE_FLOAT

    CTE_STRING      shift and go to state 120
    O_PARENTHESIS   shift and go to state 103
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    ID              shift and go to state 108
    CTE_INT         shift and go to state 109
    CTE_FLOAT       shift and go to state 110

    escritura_prime                shift and go to state 117
    expr                           shift and go to state 118
    escritura_string               shift and go to state 119
    or                             shift and go to state 96
    and                            shift and go to state 97
    equal                          shift and go to state 98
    compare                        shift and go to state 99
    exp                            shift and go to state 100
    termino                        shift and go to state 101
    factor                         shift and go to state 102
    variable                       shift and go to state 93
    llamada                        shift and go to state 104
    cte                            shift and go to state 105

state 86

    (62) decision -> IF O_PARENTHESIS . expr C_PARENTHESIS bloque else
    (67) expr -> . or
    (68) or -> . and
    (69) or -> . and OR or
    (70) and -> . equal
    (71) and -> . equal AND and
    (72) equal -> . compare
    (73) equal -> . compare EQUAL compare
    (74) equal -> . compare NOT_EQUAL compare
    (75) compare -> . exp
    (76) compare -> . exp GREATER exp
    (77) compare -> . exp LESSER exp
    (78) compare -> . exp GREATER_EQUAL exp
    (79) compare -> . exp LESSER_EQUAL exp
    (80) exp -> . termino
    (81) exp -> . termino exp_operador exp
    (84) termino -> . factor
    (85) termino -> . factor termino_operador termino
    (89) factor -> . variable
    (90) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (91) factor -> . llamada
    (92) factor -> . cte
    (93) factor -> . PLUS cte
    (94) factor -> . MINUS cte
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID O_ABRACKET exp C_ABRACKET
    (38) variable -> . ID
    (49) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (95) cte -> . CTE_INT
    (96) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 103
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    ID              shift and go to state 108
    CTE_INT         shift and go to state 109
    CTE_FLOAT       shift and go to state 110

    expr                           shift and go to state 121
    or                             shift and go to state 96
    and                            shift and go to state 97
    equal                          shift and go to state 98
    compare                        shift and go to state 99
    exp                            shift and go to state 100
    termino                        shift and go to state 101
    factor                         shift and go to state 102
    variable                       shift and go to state 93
    llamada                        shift and go to state 104
    cte                            shift and go to state 105

state 87

    (65) while -> WHILE O_PARENTHESIS . expr C_PARENTHESIS bloque
    (67) expr -> . or
    (68) or -> . and
    (69) or -> . and OR or
    (70) and -> . equal
    (71) and -> . equal AND and
    (72) equal -> . compare
    (73) equal -> . compare EQUAL compare
    (74) equal -> . compare NOT_EQUAL compare
    (75) compare -> . exp
    (76) compare -> . exp GREATER exp
    (77) compare -> . exp LESSER exp
    (78) compare -> . exp GREATER_EQUAL exp
    (79) compare -> . exp LESSER_EQUAL exp
    (80) exp -> . termino
    (81) exp -> . termino exp_operador exp
    (84) termino -> . factor
    (85) termino -> . factor termino_operador termino
    (89) factor -> . variable
    (90) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (91) factor -> . llamada
    (92) factor -> . cte
    (93) factor -> . PLUS cte
    (94) factor -> . MINUS cte
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID O_ABRACKET exp C_ABRACKET
    (38) variable -> . ID
    (49) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (95) cte -> . CTE_INT
    (96) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 103
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    ID              shift and go to state 108
    CTE_INT         shift and go to state 109
    CTE_FLOAT       shift and go to state 110

    expr                           shift and go to state 122
    or                             shift and go to state 96
    and                            shift and go to state 97
    equal                          shift and go to state 98
    compare                        shift and go to state 99
    exp                            shift and go to state 100
    termino                        shift and go to state 101
    factor                         shift and go to state 102
    variable                       shift and go to state 93
    llamada                        shift and go to state 104
    cte                            shift and go to state 105

state 88

    (66) for -> FOR variable . ASSIGN exp TO exp bloque

    ASSIGN          shift and go to state 123


state 89

    (35) variable -> ID . O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> ID . O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> ID . O_ABRACKET exp C_ABRACKET
    (38) variable -> ID .

    O_ABRACKET      shift and go to state 82
    ASSIGN          reduce using rule 38 (variable -> ID .)
    COMMA           reduce using rule 38 (variable -> ID .)
    C_PARENTHESIS   reduce using rule 38 (variable -> ID .)


state 90

    (27) funcion_base -> FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS . declaracion_funcion bloque
    (6) declaracion_funcion -> . declaracion
    (8) declaracion -> . declaracion_base
    (9) declaracion -> . declaracion_base declaracion
    (10) declaracion_base -> . LET declaracion_prime COLON declaracion_tipo SEMICOLON

    LET             shift and go to state 8

    declaracion_funcion            shift and go to state 124
    declaracion                    shift and go to state 125
    declaracion_base               shift and go to state 7

state 91

    (28) funcion_prime -> tipo ID .
    (29) funcion_prime -> tipo ID . COMMA funcion_prime

    C_PARENTHESIS   reduce using rule 28 (funcion_prime -> tipo ID .)
    COMMA           shift and go to state 126


state 92

    (13) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET . CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (14) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET . CTE_INT C_ABRACKET

    CTE_INT         shift and go to state 127


state 93

    (89) factor -> variable .

    TIMES           reduce using rule 89 (factor -> variable .)
    DIVIDE          reduce using rule 89 (factor -> variable .)
    MODULE          reduce using rule 89 (factor -> variable .)
    PLUS            reduce using rule 89 (factor -> variable .)
    MINUS           reduce using rule 89 (factor -> variable .)
    GREATER         reduce using rule 89 (factor -> variable .)
    LESSER          reduce using rule 89 (factor -> variable .)
    GREATER_EQUAL   reduce using rule 89 (factor -> variable .)
    LESSER_EQUAL    reduce using rule 89 (factor -> variable .)
    EQUAL           reduce using rule 89 (factor -> variable .)
    NOT_EQUAL       reduce using rule 89 (factor -> variable .)
    AND             reduce using rule 89 (factor -> variable .)
    OR              reduce using rule 89 (factor -> variable .)
    SEMICOLON       reduce using rule 89 (factor -> variable .)
    COMMA           reduce using rule 89 (factor -> variable .)
    C_PARENTHESIS   reduce using rule 89 (factor -> variable .)
    C_ABRACKET      reduce using rule 89 (factor -> variable .)
    TO              reduce using rule 89 (factor -> variable .)
    O_CBRACKET      reduce using rule 89 (factor -> variable .)


state 94

    (47) asignacion -> variable ASSIGN asignacion_expr .

    SEMICOLON       reduce using rule 47 (asignacion -> variable ASSIGN asignacion_expr .)


state 95

    (48) asignacion_expr -> expr .

    SEMICOLON       reduce using rule 48 (asignacion_expr -> expr .)


state 96

    (67) expr -> or .

    SEMICOLON       reduce using rule 67 (expr -> or .)
    C_PARENTHESIS   reduce using rule 67 (expr -> or .)
    COMMA           reduce using rule 67 (expr -> or .)


state 97

    (68) or -> and .
    (69) or -> and . OR or

    SEMICOLON       reduce using rule 68 (or -> and .)
    C_PARENTHESIS   reduce using rule 68 (or -> and .)
    COMMA           reduce using rule 68 (or -> and .)
    OR              shift and go to state 128


state 98

    (70) and -> equal .
    (71) and -> equal . AND and

    OR              reduce using rule 70 (and -> equal .)
    SEMICOLON       reduce using rule 70 (and -> equal .)
    C_PARENTHESIS   reduce using rule 70 (and -> equal .)
    COMMA           reduce using rule 70 (and -> equal .)
    AND             shift and go to state 129


state 99

    (72) equal -> compare .
    (73) equal -> compare . EQUAL compare
    (74) equal -> compare . NOT_EQUAL compare

    AND             reduce using rule 72 (equal -> compare .)
    OR              reduce using rule 72 (equal -> compare .)
    SEMICOLON       reduce using rule 72 (equal -> compare .)
    C_PARENTHESIS   reduce using rule 72 (equal -> compare .)
    COMMA           reduce using rule 72 (equal -> compare .)
    EQUAL           shift and go to state 130
    NOT_EQUAL       shift and go to state 131


state 100

    (75) compare -> exp .
    (76) compare -> exp . GREATER exp
    (77) compare -> exp . LESSER exp
    (78) compare -> exp . GREATER_EQUAL exp
    (79) compare -> exp . LESSER_EQUAL exp

    EQUAL           reduce using rule 75 (compare -> exp .)
    NOT_EQUAL       reduce using rule 75 (compare -> exp .)
    AND             reduce using rule 75 (compare -> exp .)
    OR              reduce using rule 75 (compare -> exp .)
    SEMICOLON       reduce using rule 75 (compare -> exp .)
    C_PARENTHESIS   reduce using rule 75 (compare -> exp .)
    COMMA           reduce using rule 75 (compare -> exp .)
    GREATER         shift and go to state 132
    LESSER          shift and go to state 133
    GREATER_EQUAL   shift and go to state 134
    LESSER_EQUAL    shift and go to state 135


state 101

    (80) exp -> termino .
    (81) exp -> termino . exp_operador exp
    (82) exp_operador -> . PLUS
    (83) exp_operador -> . MINUS

    GREATER         reduce using rule 80 (exp -> termino .)
    LESSER          reduce using rule 80 (exp -> termino .)
    GREATER_EQUAL   reduce using rule 80 (exp -> termino .)
    LESSER_EQUAL    reduce using rule 80 (exp -> termino .)
    EQUAL           reduce using rule 80 (exp -> termino .)
    NOT_EQUAL       reduce using rule 80 (exp -> termino .)
    AND             reduce using rule 80 (exp -> termino .)
    OR              reduce using rule 80 (exp -> termino .)
    SEMICOLON       reduce using rule 80 (exp -> termino .)
    COMMA           reduce using rule 80 (exp -> termino .)
    C_PARENTHESIS   reduce using rule 80 (exp -> termino .)
    C_ABRACKET      reduce using rule 80 (exp -> termino .)
    TO              reduce using rule 80 (exp -> termino .)
    O_CBRACKET      reduce using rule 80 (exp -> termino .)
    PLUS            shift and go to state 137
    MINUS           shift and go to state 138

    exp_operador                   shift and go to state 136

state 102

    (84) termino -> factor .
    (85) termino -> factor . termino_operador termino
    (86) termino_operador -> . TIMES
    (87) termino_operador -> . DIVIDE
    (88) termino_operador -> . MODULE

    PLUS            reduce using rule 84 (termino -> factor .)
    MINUS           reduce using rule 84 (termino -> factor .)
    GREATER         reduce using rule 84 (termino -> factor .)
    LESSER          reduce using rule 84 (termino -> factor .)
    GREATER_EQUAL   reduce using rule 84 (termino -> factor .)
    LESSER_EQUAL    reduce using rule 84 (termino -> factor .)
    EQUAL           reduce using rule 84 (termino -> factor .)
    NOT_EQUAL       reduce using rule 84 (termino -> factor .)
    AND             reduce using rule 84 (termino -> factor .)
    OR              reduce using rule 84 (termino -> factor .)
    SEMICOLON       reduce using rule 84 (termino -> factor .)
    COMMA           reduce using rule 84 (termino -> factor .)
    C_PARENTHESIS   reduce using rule 84 (termino -> factor .)
    C_ABRACKET      reduce using rule 84 (termino -> factor .)
    TO              reduce using rule 84 (termino -> factor .)
    O_CBRACKET      reduce using rule 84 (termino -> factor .)
    TIMES           shift and go to state 140
    DIVIDE          shift and go to state 141
    MODULE          shift and go to state 142

    termino_operador               shift and go to state 139

state 103

    (90) factor -> O_PARENTHESIS . expr C_PARENTHESIS
    (67) expr -> . or
    (68) or -> . and
    (69) or -> . and OR or
    (70) and -> . equal
    (71) and -> . equal AND and
    (72) equal -> . compare
    (73) equal -> . compare EQUAL compare
    (74) equal -> . compare NOT_EQUAL compare
    (75) compare -> . exp
    (76) compare -> . exp GREATER exp
    (77) compare -> . exp LESSER exp
    (78) compare -> . exp GREATER_EQUAL exp
    (79) compare -> . exp LESSER_EQUAL exp
    (80) exp -> . termino
    (81) exp -> . termino exp_operador exp
    (84) termino -> . factor
    (85) termino -> . factor termino_operador termino
    (89) factor -> . variable
    (90) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (91) factor -> . llamada
    (92) factor -> . cte
    (93) factor -> . PLUS cte
    (94) factor -> . MINUS cte
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID O_ABRACKET exp C_ABRACKET
    (38) variable -> . ID
    (49) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (95) cte -> . CTE_INT
    (96) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 103
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    ID              shift and go to state 108
    CTE_INT         shift and go to state 109
    CTE_FLOAT       shift and go to state 110

    expr                           shift and go to state 143
    or                             shift and go to state 96
    and                            shift and go to state 97
    equal                          shift and go to state 98
    compare                        shift and go to state 99
    exp                            shift and go to state 100
    termino                        shift and go to state 101
    factor                         shift and go to state 102
    variable                       shift and go to state 93
    llamada                        shift and go to state 104
    cte                            shift and go to state 105

state 104

    (91) factor -> llamada .

    TIMES           reduce using rule 91 (factor -> llamada .)
    DIVIDE          reduce using rule 91 (factor -> llamada .)
    MODULE          reduce using rule 91 (factor -> llamada .)
    PLUS            reduce using rule 91 (factor -> llamada .)
    MINUS           reduce using rule 91 (factor -> llamada .)
    GREATER         reduce using rule 91 (factor -> llamada .)
    LESSER          reduce using rule 91 (factor -> llamada .)
    GREATER_EQUAL   reduce using rule 91 (factor -> llamada .)
    LESSER_EQUAL    reduce using rule 91 (factor -> llamada .)
    EQUAL           reduce using rule 91 (factor -> llamada .)
    NOT_EQUAL       reduce using rule 91 (factor -> llamada .)
    AND             reduce using rule 91 (factor -> llamada .)
    OR              reduce using rule 91 (factor -> llamada .)
    SEMICOLON       reduce using rule 91 (factor -> llamada .)
    COMMA           reduce using rule 91 (factor -> llamada .)
    C_PARENTHESIS   reduce using rule 91 (factor -> llamada .)
    C_ABRACKET      reduce using rule 91 (factor -> llamada .)
    TO              reduce using rule 91 (factor -> llamada .)
    O_CBRACKET      reduce using rule 91 (factor -> llamada .)


state 105

    (92) factor -> cte .

    TIMES           reduce using rule 92 (factor -> cte .)
    DIVIDE          reduce using rule 92 (factor -> cte .)
    MODULE          reduce using rule 92 (factor -> cte .)
    PLUS            reduce using rule 92 (factor -> cte .)
    MINUS           reduce using rule 92 (factor -> cte .)
    GREATER         reduce using rule 92 (factor -> cte .)
    LESSER          reduce using rule 92 (factor -> cte .)
    GREATER_EQUAL   reduce using rule 92 (factor -> cte .)
    LESSER_EQUAL    reduce using rule 92 (factor -> cte .)
    EQUAL           reduce using rule 92 (factor -> cte .)
    NOT_EQUAL       reduce using rule 92 (factor -> cte .)
    AND             reduce using rule 92 (factor -> cte .)
    OR              reduce using rule 92 (factor -> cte .)
    SEMICOLON       reduce using rule 92 (factor -> cte .)
    COMMA           reduce using rule 92 (factor -> cte .)
    C_PARENTHESIS   reduce using rule 92 (factor -> cte .)
    C_ABRACKET      reduce using rule 92 (factor -> cte .)
    TO              reduce using rule 92 (factor -> cte .)
    O_CBRACKET      reduce using rule 92 (factor -> cte .)


state 106

    (93) factor -> PLUS . cte
    (95) cte -> . CTE_INT
    (96) cte -> . CTE_FLOAT

    CTE_INT         shift and go to state 109
    CTE_FLOAT       shift and go to state 110

    cte                            shift and go to state 144

state 107

    (94) factor -> MINUS . cte
    (95) cte -> . CTE_INT
    (96) cte -> . CTE_FLOAT

    CTE_INT         shift and go to state 109
    CTE_FLOAT       shift and go to state 110

    cte                            shift and go to state 145

state 108

    (35) variable -> ID . O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> ID . O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> ID . O_ABRACKET exp C_ABRACKET
    (38) variable -> ID .
    (49) llamada -> ID . O_PARENTHESIS llamada_prime C_PARENTHESIS

    O_ABRACKET      shift and go to state 82
    TIMES           reduce using rule 38 (variable -> ID .)
    DIVIDE          reduce using rule 38 (variable -> ID .)
    MODULE          reduce using rule 38 (variable -> ID .)
    PLUS            reduce using rule 38 (variable -> ID .)
    MINUS           reduce using rule 38 (variable -> ID .)
    GREATER         reduce using rule 38 (variable -> ID .)
    LESSER          reduce using rule 38 (variable -> ID .)
    GREATER_EQUAL   reduce using rule 38 (variable -> ID .)
    LESSER_EQUAL    reduce using rule 38 (variable -> ID .)
    EQUAL           reduce using rule 38 (variable -> ID .)
    NOT_EQUAL       reduce using rule 38 (variable -> ID .)
    AND             reduce using rule 38 (variable -> ID .)
    OR              reduce using rule 38 (variable -> ID .)
    SEMICOLON       reduce using rule 38 (variable -> ID .)
    COMMA           reduce using rule 38 (variable -> ID .)
    C_PARENTHESIS   reduce using rule 38 (variable -> ID .)
    C_ABRACKET      reduce using rule 38 (variable -> ID .)
    TO              reduce using rule 38 (variable -> ID .)
    O_CBRACKET      reduce using rule 38 (variable -> ID .)
    O_PARENTHESIS   shift and go to state 81


state 109

    (95) cte -> CTE_INT .

    TIMES           reduce using rule 95 (cte -> CTE_INT .)
    DIVIDE          reduce using rule 95 (cte -> CTE_INT .)
    MODULE          reduce using rule 95 (cte -> CTE_INT .)
    PLUS            reduce using rule 95 (cte -> CTE_INT .)
    MINUS           reduce using rule 95 (cte -> CTE_INT .)
    GREATER         reduce using rule 95 (cte -> CTE_INT .)
    LESSER          reduce using rule 95 (cte -> CTE_INT .)
    GREATER_EQUAL   reduce using rule 95 (cte -> CTE_INT .)
    LESSER_EQUAL    reduce using rule 95 (cte -> CTE_INT .)
    EQUAL           reduce using rule 95 (cte -> CTE_INT .)
    NOT_EQUAL       reduce using rule 95 (cte -> CTE_INT .)
    AND             reduce using rule 95 (cte -> CTE_INT .)
    OR              reduce using rule 95 (cte -> CTE_INT .)
    SEMICOLON       reduce using rule 95 (cte -> CTE_INT .)
    COMMA           reduce using rule 95 (cte -> CTE_INT .)
    C_PARENTHESIS   reduce using rule 95 (cte -> CTE_INT .)
    C_ABRACKET      reduce using rule 95 (cte -> CTE_INT .)
    TO              reduce using rule 95 (cte -> CTE_INT .)
    O_CBRACKET      reduce using rule 95 (cte -> CTE_INT .)


state 110

    (96) cte -> CTE_FLOAT .

    TIMES           reduce using rule 96 (cte -> CTE_FLOAT .)
    DIVIDE          reduce using rule 96 (cte -> CTE_FLOAT .)
    MODULE          reduce using rule 96 (cte -> CTE_FLOAT .)
    PLUS            reduce using rule 96 (cte -> CTE_FLOAT .)
    MINUS           reduce using rule 96 (cte -> CTE_FLOAT .)
    GREATER         reduce using rule 96 (cte -> CTE_FLOAT .)
    LESSER          reduce using rule 96 (cte -> CTE_FLOAT .)
    GREATER_EQUAL   reduce using rule 96 (cte -> CTE_FLOAT .)
    LESSER_EQUAL    reduce using rule 96 (cte -> CTE_FLOAT .)
    EQUAL           reduce using rule 96 (cte -> CTE_FLOAT .)
    NOT_EQUAL       reduce using rule 96 (cte -> CTE_FLOAT .)
    AND             reduce using rule 96 (cte -> CTE_FLOAT .)
    OR              reduce using rule 96 (cte -> CTE_FLOAT .)
    SEMICOLON       reduce using rule 96 (cte -> CTE_FLOAT .)
    COMMA           reduce using rule 96 (cte -> CTE_FLOAT .)
    C_PARENTHESIS   reduce using rule 96 (cte -> CTE_FLOAT .)
    C_ABRACKET      reduce using rule 96 (cte -> CTE_FLOAT .)
    TO              reduce using rule 96 (cte -> CTE_FLOAT .)
    O_CBRACKET      reduce using rule 96 (cte -> CTE_FLOAT .)


state 111

    (49) llamada -> ID O_PARENTHESIS llamada_prime . C_PARENTHESIS

    C_PARENTHESIS   shift and go to state 146


state 112

    (50) llamada_prime -> exp .
    (51) llamada_prime -> exp . COMMA llamada_prime

    C_PARENTHESIS   reduce using rule 50 (llamada_prime -> exp .)
    COMMA           shift and go to state 147


state 113

    (35) variable -> ID O_ABRACKET exp . C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> ID O_ABRACKET exp . C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> ID O_ABRACKET exp . C_ABRACKET

    C_ABRACKET      shift and go to state 148


state 114

    (52) retorno -> RETURN O_PARENTHESIS expr . C_PARENTHESIS

    C_PARENTHESIS   shift and go to state 149


state 115

    (53) lectura -> READ O_PARENTHESIS lectura_prime . C_PARENTHESIS

    C_PARENTHESIS   shift and go to state 150


state 116

    (54) lectura_prime -> variable .
    (55) lectura_prime -> variable . COMMA lectura_prime

    C_PARENTHESIS   reduce using rule 54 (lectura_prime -> variable .)
    COMMA           shift and go to state 151


state 117

    (56) escritura -> WRITE O_PARENTHESIS escritura_prime . C_PARENTHESIS

    C_PARENTHESIS   shift and go to state 152


state 118

    (57) escritura_prime -> expr .
    (59) escritura_prime -> expr . COMMA escritura_prime

    C_PARENTHESIS   reduce using rule 57 (escritura_prime -> expr .)
    COMMA           shift and go to state 153


state 119

    (58) escritura_prime -> escritura_string .
    (60) escritura_prime -> escritura_string . COMMA escritura_prime

    C_PARENTHESIS   reduce using rule 58 (escritura_prime -> escritura_string .)
    COMMA           shift and go to state 154


state 120

    (61) escritura_string -> CTE_STRING .

    COMMA           reduce using rule 61 (escritura_string -> CTE_STRING .)
    C_PARENTHESIS   reduce using rule 61 (escritura_string -> CTE_STRING .)


state 121

    (62) decision -> IF O_PARENTHESIS expr . C_PARENTHESIS bloque else

    C_PARENTHESIS   shift and go to state 155


state 122

    (65) while -> WHILE O_PARENTHESIS expr . C_PARENTHESIS bloque

    C_PARENTHESIS   shift and go to state 156


state 123

    (66) for -> FOR variable ASSIGN . exp TO exp bloque
    (80) exp -> . termino
    (81) exp -> . termino exp_operador exp
    (84) termino -> . factor
    (85) termino -> . factor termino_operador termino
    (89) factor -> . variable
    (90) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (91) factor -> . llamada
    (92) factor -> . cte
    (93) factor -> . PLUS cte
    (94) factor -> . MINUS cte
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID O_ABRACKET exp C_ABRACKET
    (38) variable -> . ID
    (49) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (95) cte -> . CTE_INT
    (96) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 103
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    ID              shift and go to state 108
    CTE_INT         shift and go to state 109
    CTE_FLOAT       shift and go to state 110

    variable                       shift and go to state 93
    exp                            shift and go to state 157
    termino                        shift and go to state 101
    factor                         shift and go to state 102
    llamada                        shift and go to state 104
    cte                            shift and go to state 105

state 124

    (27) funcion_base -> FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion . bloque
    (3) bloque -> . O_CBRACKET bloque_prime C_CBRACKET

    O_CBRACKET      shift and go to state 30

    bloque                         shift and go to state 158

state 125

    (6) declaracion_funcion -> declaracion .

    O_CBRACKET      reduce using rule 6 (declaracion_funcion -> declaracion .)


state 126

    (29) funcion_prime -> tipo ID COMMA . funcion_prime
    (28) funcion_prime -> . tipo ID
    (29) funcion_prime -> . tipo ID COMMA funcion_prime
    (21) tipo -> . INT
    (22) tipo -> . FLOAT
    (23) tipo -> . CHAR
    (24) tipo -> . STRING

    INT             shift and go to state 67
    FLOAT           shift and go to state 68
    CHAR            shift and go to state 69
    STRING          shift and go to state 70

    tipo                           shift and go to state 66
    funcion_prime                  shift and go to state 159

state 127

    (13) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT . C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (14) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT . C_ABRACKET

    C_ABRACKET      shift and go to state 160


state 128

    (69) or -> and OR . or
    (68) or -> . and
    (69) or -> . and OR or
    (70) and -> . equal
    (71) and -> . equal AND and
    (72) equal -> . compare
    (73) equal -> . compare EQUAL compare
    (74) equal -> . compare NOT_EQUAL compare
    (75) compare -> . exp
    (76) compare -> . exp GREATER exp
    (77) compare -> . exp LESSER exp
    (78) compare -> . exp GREATER_EQUAL exp
    (79) compare -> . exp LESSER_EQUAL exp
    (80) exp -> . termino
    (81) exp -> . termino exp_operador exp
    (84) termino -> . factor
    (85) termino -> . factor termino_operador termino
    (89) factor -> . variable
    (90) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (91) factor -> . llamada
    (92) factor -> . cte
    (93) factor -> . PLUS cte
    (94) factor -> . MINUS cte
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID O_ABRACKET exp C_ABRACKET
    (38) variable -> . ID
    (49) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (95) cte -> . CTE_INT
    (96) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 103
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    ID              shift and go to state 108
    CTE_INT         shift and go to state 109
    CTE_FLOAT       shift and go to state 110

    and                            shift and go to state 97
    or                             shift and go to state 161
    equal                          shift and go to state 98
    compare                        shift and go to state 99
    exp                            shift and go to state 100
    termino                        shift and go to state 101
    factor                         shift and go to state 102
    variable                       shift and go to state 93
    llamada                        shift and go to state 104
    cte                            shift and go to state 105

state 129

    (71) and -> equal AND . and
    (70) and -> . equal
    (71) and -> . equal AND and
    (72) equal -> . compare
    (73) equal -> . compare EQUAL compare
    (74) equal -> . compare NOT_EQUAL compare
    (75) compare -> . exp
    (76) compare -> . exp GREATER exp
    (77) compare -> . exp LESSER exp
    (78) compare -> . exp GREATER_EQUAL exp
    (79) compare -> . exp LESSER_EQUAL exp
    (80) exp -> . termino
    (81) exp -> . termino exp_operador exp
    (84) termino -> . factor
    (85) termino -> . factor termino_operador termino
    (89) factor -> . variable
    (90) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (91) factor -> . llamada
    (92) factor -> . cte
    (93) factor -> . PLUS cte
    (94) factor -> . MINUS cte
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID O_ABRACKET exp C_ABRACKET
    (38) variable -> . ID
    (49) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (95) cte -> . CTE_INT
    (96) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 103
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    ID              shift and go to state 108
    CTE_INT         shift and go to state 109
    CTE_FLOAT       shift and go to state 110

    equal                          shift and go to state 98
    and                            shift and go to state 162
    compare                        shift and go to state 99
    exp                            shift and go to state 100
    termino                        shift and go to state 101
    factor                         shift and go to state 102
    variable                       shift and go to state 93
    llamada                        shift and go to state 104
    cte                            shift and go to state 105

state 130

    (73) equal -> compare EQUAL . compare
    (75) compare -> . exp
    (76) compare -> . exp GREATER exp
    (77) compare -> . exp LESSER exp
    (78) compare -> . exp GREATER_EQUAL exp
    (79) compare -> . exp LESSER_EQUAL exp
    (80) exp -> . termino
    (81) exp -> . termino exp_operador exp
    (84) termino -> . factor
    (85) termino -> . factor termino_operador termino
    (89) factor -> . variable
    (90) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (91) factor -> . llamada
    (92) factor -> . cte
    (93) factor -> . PLUS cte
    (94) factor -> . MINUS cte
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID O_ABRACKET exp C_ABRACKET
    (38) variable -> . ID
    (49) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (95) cte -> . CTE_INT
    (96) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 103
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    ID              shift and go to state 108
    CTE_INT         shift and go to state 109
    CTE_FLOAT       shift and go to state 110

    compare                        shift and go to state 163
    exp                            shift and go to state 100
    termino                        shift and go to state 101
    factor                         shift and go to state 102
    variable                       shift and go to state 93
    llamada                        shift and go to state 104
    cte                            shift and go to state 105

state 131

    (74) equal -> compare NOT_EQUAL . compare
    (75) compare -> . exp
    (76) compare -> . exp GREATER exp
    (77) compare -> . exp LESSER exp
    (78) compare -> . exp GREATER_EQUAL exp
    (79) compare -> . exp LESSER_EQUAL exp
    (80) exp -> . termino
    (81) exp -> . termino exp_operador exp
    (84) termino -> . factor
    (85) termino -> . factor termino_operador termino
    (89) factor -> . variable
    (90) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (91) factor -> . llamada
    (92) factor -> . cte
    (93) factor -> . PLUS cte
    (94) factor -> . MINUS cte
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID O_ABRACKET exp C_ABRACKET
    (38) variable -> . ID
    (49) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (95) cte -> . CTE_INT
    (96) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 103
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    ID              shift and go to state 108
    CTE_INT         shift and go to state 109
    CTE_FLOAT       shift and go to state 110

    compare                        shift and go to state 164
    exp                            shift and go to state 100
    termino                        shift and go to state 101
    factor                         shift and go to state 102
    variable                       shift and go to state 93
    llamada                        shift and go to state 104
    cte                            shift and go to state 105

state 132

    (76) compare -> exp GREATER . exp
    (80) exp -> . termino
    (81) exp -> . termino exp_operador exp
    (84) termino -> . factor
    (85) termino -> . factor termino_operador termino
    (89) factor -> . variable
    (90) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (91) factor -> . llamada
    (92) factor -> . cte
    (93) factor -> . PLUS cte
    (94) factor -> . MINUS cte
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID O_ABRACKET exp C_ABRACKET
    (38) variable -> . ID
    (49) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (95) cte -> . CTE_INT
    (96) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 103
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    ID              shift and go to state 108
    CTE_INT         shift and go to state 109
    CTE_FLOAT       shift and go to state 110

    exp                            shift and go to state 165
    termino                        shift and go to state 101
    factor                         shift and go to state 102
    variable                       shift and go to state 93
    llamada                        shift and go to state 104
    cte                            shift and go to state 105

state 133

    (77) compare -> exp LESSER . exp
    (80) exp -> . termino
    (81) exp -> . termino exp_operador exp
    (84) termino -> . factor
    (85) termino -> . factor termino_operador termino
    (89) factor -> . variable
    (90) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (91) factor -> . llamada
    (92) factor -> . cte
    (93) factor -> . PLUS cte
    (94) factor -> . MINUS cte
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID O_ABRACKET exp C_ABRACKET
    (38) variable -> . ID
    (49) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (95) cte -> . CTE_INT
    (96) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 103
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    ID              shift and go to state 108
    CTE_INT         shift and go to state 109
    CTE_FLOAT       shift and go to state 110

    exp                            shift and go to state 166
    termino                        shift and go to state 101
    factor                         shift and go to state 102
    variable                       shift and go to state 93
    llamada                        shift and go to state 104
    cte                            shift and go to state 105

state 134

    (78) compare -> exp GREATER_EQUAL . exp
    (80) exp -> . termino
    (81) exp -> . termino exp_operador exp
    (84) termino -> . factor
    (85) termino -> . factor termino_operador termino
    (89) factor -> . variable
    (90) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (91) factor -> . llamada
    (92) factor -> . cte
    (93) factor -> . PLUS cte
    (94) factor -> . MINUS cte
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID O_ABRACKET exp C_ABRACKET
    (38) variable -> . ID
    (49) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (95) cte -> . CTE_INT
    (96) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 103
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    ID              shift and go to state 108
    CTE_INT         shift and go to state 109
    CTE_FLOAT       shift and go to state 110

    exp                            shift and go to state 167
    termino                        shift and go to state 101
    factor                         shift and go to state 102
    variable                       shift and go to state 93
    llamada                        shift and go to state 104
    cte                            shift and go to state 105

state 135

    (79) compare -> exp LESSER_EQUAL . exp
    (80) exp -> . termino
    (81) exp -> . termino exp_operador exp
    (84) termino -> . factor
    (85) termino -> . factor termino_operador termino
    (89) factor -> . variable
    (90) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (91) factor -> . llamada
    (92) factor -> . cte
    (93) factor -> . PLUS cte
    (94) factor -> . MINUS cte
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID O_ABRACKET exp C_ABRACKET
    (38) variable -> . ID
    (49) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (95) cte -> . CTE_INT
    (96) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 103
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    ID              shift and go to state 108
    CTE_INT         shift and go to state 109
    CTE_FLOAT       shift and go to state 110

    exp                            shift and go to state 168
    termino                        shift and go to state 101
    factor                         shift and go to state 102
    variable                       shift and go to state 93
    llamada                        shift and go to state 104
    cte                            shift and go to state 105

state 136

    (81) exp -> termino exp_operador . exp
    (80) exp -> . termino
    (81) exp -> . termino exp_operador exp
    (84) termino -> . factor
    (85) termino -> . factor termino_operador termino
    (89) factor -> . variable
    (90) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (91) factor -> . llamada
    (92) factor -> . cte
    (93) factor -> . PLUS cte
    (94) factor -> . MINUS cte
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID O_ABRACKET exp C_ABRACKET
    (38) variable -> . ID
    (49) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (95) cte -> . CTE_INT
    (96) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 103
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    ID              shift and go to state 108
    CTE_INT         shift and go to state 109
    CTE_FLOAT       shift and go to state 110

    termino                        shift and go to state 101
    exp                            shift and go to state 169
    factor                         shift and go to state 102
    variable                       shift and go to state 93
    llamada                        shift and go to state 104
    cte                            shift and go to state 105

state 137

    (82) exp_operador -> PLUS .

    O_PARENTHESIS   reduce using rule 82 (exp_operador -> PLUS .)
    PLUS            reduce using rule 82 (exp_operador -> PLUS .)
    MINUS           reduce using rule 82 (exp_operador -> PLUS .)
    ID              reduce using rule 82 (exp_operador -> PLUS .)
    CTE_INT         reduce using rule 82 (exp_operador -> PLUS .)
    CTE_FLOAT       reduce using rule 82 (exp_operador -> PLUS .)


state 138

    (83) exp_operador -> MINUS .

    O_PARENTHESIS   reduce using rule 83 (exp_operador -> MINUS .)
    PLUS            reduce using rule 83 (exp_operador -> MINUS .)
    MINUS           reduce using rule 83 (exp_operador -> MINUS .)
    ID              reduce using rule 83 (exp_operador -> MINUS .)
    CTE_INT         reduce using rule 83 (exp_operador -> MINUS .)
    CTE_FLOAT       reduce using rule 83 (exp_operador -> MINUS .)


state 139

    (85) termino -> factor termino_operador . termino
    (84) termino -> . factor
    (85) termino -> . factor termino_operador termino
    (89) factor -> . variable
    (90) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (91) factor -> . llamada
    (92) factor -> . cte
    (93) factor -> . PLUS cte
    (94) factor -> . MINUS cte
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID O_ABRACKET exp C_ABRACKET
    (38) variable -> . ID
    (49) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (95) cte -> . CTE_INT
    (96) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 103
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    ID              shift and go to state 108
    CTE_INT         shift and go to state 109
    CTE_FLOAT       shift and go to state 110

    factor                         shift and go to state 102
    termino                        shift and go to state 170
    variable                       shift and go to state 93
    llamada                        shift and go to state 104
    cte                            shift and go to state 105

state 140

    (86) termino_operador -> TIMES .

    O_PARENTHESIS   reduce using rule 86 (termino_operador -> TIMES .)
    PLUS            reduce using rule 86 (termino_operador -> TIMES .)
    MINUS           reduce using rule 86 (termino_operador -> TIMES .)
    ID              reduce using rule 86 (termino_operador -> TIMES .)
    CTE_INT         reduce using rule 86 (termino_operador -> TIMES .)
    CTE_FLOAT       reduce using rule 86 (termino_operador -> TIMES .)


state 141

    (87) termino_operador -> DIVIDE .

    O_PARENTHESIS   reduce using rule 87 (termino_operador -> DIVIDE .)
    PLUS            reduce using rule 87 (termino_operador -> DIVIDE .)
    MINUS           reduce using rule 87 (termino_operador -> DIVIDE .)
    ID              reduce using rule 87 (termino_operador -> DIVIDE .)
    CTE_INT         reduce using rule 87 (termino_operador -> DIVIDE .)
    CTE_FLOAT       reduce using rule 87 (termino_operador -> DIVIDE .)


state 142

    (88) termino_operador -> MODULE .

    O_PARENTHESIS   reduce using rule 88 (termino_operador -> MODULE .)
    PLUS            reduce using rule 88 (termino_operador -> MODULE .)
    MINUS           reduce using rule 88 (termino_operador -> MODULE .)
    ID              reduce using rule 88 (termino_operador -> MODULE .)
    CTE_INT         reduce using rule 88 (termino_operador -> MODULE .)
    CTE_FLOAT       reduce using rule 88 (termino_operador -> MODULE .)


state 143

    (90) factor -> O_PARENTHESIS expr . C_PARENTHESIS

    C_PARENTHESIS   shift and go to state 171


state 144

    (93) factor -> PLUS cte .

    TIMES           reduce using rule 93 (factor -> PLUS cte .)
    DIVIDE          reduce using rule 93 (factor -> PLUS cte .)
    MODULE          reduce using rule 93 (factor -> PLUS cte .)
    PLUS            reduce using rule 93 (factor -> PLUS cte .)
    MINUS           reduce using rule 93 (factor -> PLUS cte .)
    GREATER         reduce using rule 93 (factor -> PLUS cte .)
    LESSER          reduce using rule 93 (factor -> PLUS cte .)
    GREATER_EQUAL   reduce using rule 93 (factor -> PLUS cte .)
    LESSER_EQUAL    reduce using rule 93 (factor -> PLUS cte .)
    EQUAL           reduce using rule 93 (factor -> PLUS cte .)
    NOT_EQUAL       reduce using rule 93 (factor -> PLUS cte .)
    AND             reduce using rule 93 (factor -> PLUS cte .)
    OR              reduce using rule 93 (factor -> PLUS cte .)
    SEMICOLON       reduce using rule 93 (factor -> PLUS cte .)
    COMMA           reduce using rule 93 (factor -> PLUS cte .)
    C_PARENTHESIS   reduce using rule 93 (factor -> PLUS cte .)
    C_ABRACKET      reduce using rule 93 (factor -> PLUS cte .)
    TO              reduce using rule 93 (factor -> PLUS cte .)
    O_CBRACKET      reduce using rule 93 (factor -> PLUS cte .)


state 145

    (94) factor -> MINUS cte .

    TIMES           reduce using rule 94 (factor -> MINUS cte .)
    DIVIDE          reduce using rule 94 (factor -> MINUS cte .)
    MODULE          reduce using rule 94 (factor -> MINUS cte .)
    PLUS            reduce using rule 94 (factor -> MINUS cte .)
    MINUS           reduce using rule 94 (factor -> MINUS cte .)
    GREATER         reduce using rule 94 (factor -> MINUS cte .)
    LESSER          reduce using rule 94 (factor -> MINUS cte .)
    GREATER_EQUAL   reduce using rule 94 (factor -> MINUS cte .)
    LESSER_EQUAL    reduce using rule 94 (factor -> MINUS cte .)
    EQUAL           reduce using rule 94 (factor -> MINUS cte .)
    NOT_EQUAL       reduce using rule 94 (factor -> MINUS cte .)
    AND             reduce using rule 94 (factor -> MINUS cte .)
    OR              reduce using rule 94 (factor -> MINUS cte .)
    SEMICOLON       reduce using rule 94 (factor -> MINUS cte .)
    COMMA           reduce using rule 94 (factor -> MINUS cte .)
    C_PARENTHESIS   reduce using rule 94 (factor -> MINUS cte .)
    C_ABRACKET      reduce using rule 94 (factor -> MINUS cte .)
    TO              reduce using rule 94 (factor -> MINUS cte .)
    O_CBRACKET      reduce using rule 94 (factor -> MINUS cte .)


state 146

    (49) llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .

    SEMICOLON       reduce using rule 49 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    TIMES           reduce using rule 49 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    DIVIDE          reduce using rule 49 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    MODULE          reduce using rule 49 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    PLUS            reduce using rule 49 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    MINUS           reduce using rule 49 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    GREATER         reduce using rule 49 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    LESSER          reduce using rule 49 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    GREATER_EQUAL   reduce using rule 49 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    LESSER_EQUAL    reduce using rule 49 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    EQUAL           reduce using rule 49 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    NOT_EQUAL       reduce using rule 49 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    AND             reduce using rule 49 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    OR              reduce using rule 49 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    COMMA           reduce using rule 49 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    C_PARENTHESIS   reduce using rule 49 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    C_ABRACKET      reduce using rule 49 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    TO              reduce using rule 49 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    O_CBRACKET      reduce using rule 49 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)


state 147

    (51) llamada_prime -> exp COMMA . llamada_prime
    (50) llamada_prime -> . exp
    (51) llamada_prime -> . exp COMMA llamada_prime
    (80) exp -> . termino
    (81) exp -> . termino exp_operador exp
    (84) termino -> . factor
    (85) termino -> . factor termino_operador termino
    (89) factor -> . variable
    (90) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (91) factor -> . llamada
    (92) factor -> . cte
    (93) factor -> . PLUS cte
    (94) factor -> . MINUS cte
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID O_ABRACKET exp C_ABRACKET
    (38) variable -> . ID
    (49) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (95) cte -> . CTE_INT
    (96) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 103
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    ID              shift and go to state 108
    CTE_INT         shift and go to state 109
    CTE_FLOAT       shift and go to state 110

    exp                            shift and go to state 112
    llamada_prime                  shift and go to state 172
    termino                        shift and go to state 101
    factor                         shift and go to state 102
    variable                       shift and go to state 93
    llamada                        shift and go to state 104
    cte                            shift and go to state 105

state 148

    (35) variable -> ID O_ABRACKET exp C_ABRACKET . O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> ID O_ABRACKET exp C_ABRACKET . O_ABRACKET exp C_ABRACKET
    (37) variable -> ID O_ABRACKET exp C_ABRACKET .

    O_ABRACKET      shift and go to state 173
    ASSIGN          reduce using rule 37 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    TIMES           reduce using rule 37 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    DIVIDE          reduce using rule 37 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    MODULE          reduce using rule 37 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    PLUS            reduce using rule 37 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    MINUS           reduce using rule 37 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    GREATER         reduce using rule 37 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    LESSER          reduce using rule 37 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    GREATER_EQUAL   reduce using rule 37 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    LESSER_EQUAL    reduce using rule 37 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    EQUAL           reduce using rule 37 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    NOT_EQUAL       reduce using rule 37 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    AND             reduce using rule 37 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    OR              reduce using rule 37 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    SEMICOLON       reduce using rule 37 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    COMMA           reduce using rule 37 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    C_PARENTHESIS   reduce using rule 37 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    C_ABRACKET      reduce using rule 37 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    TO              reduce using rule 37 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    O_CBRACKET      reduce using rule 37 (variable -> ID O_ABRACKET exp C_ABRACKET .)


state 149

    (52) retorno -> RETURN O_PARENTHESIS expr C_PARENTHESIS .

    SEMICOLON       reduce using rule 52 (retorno -> RETURN O_PARENTHESIS expr C_PARENTHESIS .)


state 150

    (53) lectura -> READ O_PARENTHESIS lectura_prime C_PARENTHESIS .

    SEMICOLON       reduce using rule 53 (lectura -> READ O_PARENTHESIS lectura_prime C_PARENTHESIS .)


state 151

    (55) lectura_prime -> variable COMMA . lectura_prime
    (54) lectura_prime -> . variable
    (55) lectura_prime -> . variable COMMA lectura_prime
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID O_ABRACKET exp C_ABRACKET
    (38) variable -> . ID

    ID              shift and go to state 89

    variable                       shift and go to state 116
    lectura_prime                  shift and go to state 174

state 152

    (56) escritura -> WRITE O_PARENTHESIS escritura_prime C_PARENTHESIS .

    SEMICOLON       reduce using rule 56 (escritura -> WRITE O_PARENTHESIS escritura_prime C_PARENTHESIS .)


state 153

    (59) escritura_prime -> expr COMMA . escritura_prime
    (57) escritura_prime -> . expr
    (58) escritura_prime -> . escritura_string
    (59) escritura_prime -> . expr COMMA escritura_prime
    (60) escritura_prime -> . escritura_string COMMA escritura_prime
    (67) expr -> . or
    (61) escritura_string -> . CTE_STRING
    (68) or -> . and
    (69) or -> . and OR or
    (70) and -> . equal
    (71) and -> . equal AND and
    (72) equal -> . compare
    (73) equal -> . compare EQUAL compare
    (74) equal -> . compare NOT_EQUAL compare
    (75) compare -> . exp
    (76) compare -> . exp GREATER exp
    (77) compare -> . exp LESSER exp
    (78) compare -> . exp GREATER_EQUAL exp
    (79) compare -> . exp LESSER_EQUAL exp
    (80) exp -> . termino
    (81) exp -> . termino exp_operador exp
    (84) termino -> . factor
    (85) termino -> . factor termino_operador termino
    (89) factor -> . variable
    (90) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (91) factor -> . llamada
    (92) factor -> . cte
    (93) factor -> . PLUS cte
    (94) factor -> . MINUS cte
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID O_ABRACKET exp C_ABRACKET
    (38) variable -> . ID
    (49) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (95) cte -> . CTE_INT
    (96) cte -> . CTE_FLOAT

    CTE_STRING      shift and go to state 120
    O_PARENTHESIS   shift and go to state 103
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    ID              shift and go to state 108
    CTE_INT         shift and go to state 109
    CTE_FLOAT       shift and go to state 110

    expr                           shift and go to state 118
    escritura_prime                shift and go to state 175
    escritura_string               shift and go to state 119
    or                             shift and go to state 96
    and                            shift and go to state 97
    equal                          shift and go to state 98
    compare                        shift and go to state 99
    exp                            shift and go to state 100
    termino                        shift and go to state 101
    factor                         shift and go to state 102
    variable                       shift and go to state 93
    llamada                        shift and go to state 104
    cte                            shift and go to state 105

state 154

    (60) escritura_prime -> escritura_string COMMA . escritura_prime
    (57) escritura_prime -> . expr
    (58) escritura_prime -> . escritura_string
    (59) escritura_prime -> . expr COMMA escritura_prime
    (60) escritura_prime -> . escritura_string COMMA escritura_prime
    (67) expr -> . or
    (61) escritura_string -> . CTE_STRING
    (68) or -> . and
    (69) or -> . and OR or
    (70) and -> . equal
    (71) and -> . equal AND and
    (72) equal -> . compare
    (73) equal -> . compare EQUAL compare
    (74) equal -> . compare NOT_EQUAL compare
    (75) compare -> . exp
    (76) compare -> . exp GREATER exp
    (77) compare -> . exp LESSER exp
    (78) compare -> . exp GREATER_EQUAL exp
    (79) compare -> . exp LESSER_EQUAL exp
    (80) exp -> . termino
    (81) exp -> . termino exp_operador exp
    (84) termino -> . factor
    (85) termino -> . factor termino_operador termino
    (89) factor -> . variable
    (90) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (91) factor -> . llamada
    (92) factor -> . cte
    (93) factor -> . PLUS cte
    (94) factor -> . MINUS cte
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID O_ABRACKET exp C_ABRACKET
    (38) variable -> . ID
    (49) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (95) cte -> . CTE_INT
    (96) cte -> . CTE_FLOAT

    CTE_STRING      shift and go to state 120
    O_PARENTHESIS   shift and go to state 103
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    ID              shift and go to state 108
    CTE_INT         shift and go to state 109
    CTE_FLOAT       shift and go to state 110

    escritura_string               shift and go to state 119
    escritura_prime                shift and go to state 176
    expr                           shift and go to state 118
    or                             shift and go to state 96
    and                            shift and go to state 97
    equal                          shift and go to state 98
    compare                        shift and go to state 99
    exp                            shift and go to state 100
    termino                        shift and go to state 101
    factor                         shift and go to state 102
    variable                       shift and go to state 93
    llamada                        shift and go to state 104
    cte                            shift and go to state 105

state 155

    (62) decision -> IF O_PARENTHESIS expr C_PARENTHESIS . bloque else
    (3) bloque -> . O_CBRACKET bloque_prime C_CBRACKET

    O_CBRACKET      shift and go to state 30

    bloque                         shift and go to state 177

state 156

    (65) while -> WHILE O_PARENTHESIS expr C_PARENTHESIS . bloque
    (3) bloque -> . O_CBRACKET bloque_prime C_CBRACKET

    O_CBRACKET      shift and go to state 30

    bloque                         shift and go to state 178

state 157

    (66) for -> FOR variable ASSIGN exp . TO exp bloque

    TO              shift and go to state 179


state 158

    (27) funcion_base -> FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque .

    FUNCTION        reduce using rule 27 (funcion_base -> FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque .)
    MAIN            reduce using rule 27 (funcion_base -> FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque .)


state 159

    (29) funcion_prime -> tipo ID COMMA funcion_prime .

    C_PARENTHESIS   reduce using rule 29 (funcion_prime -> tipo ID COMMA funcion_prime .)


state 160

    (13) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET . O_ABRACKET CTE_INT C_ABRACKET
    (14) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET .

    O_ABRACKET      shift and go to state 180
    COMMA           reduce using rule 14 (declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET .)
    COLON           reduce using rule 14 (declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET .)


state 161

    (69) or -> and OR or .

    SEMICOLON       reduce using rule 69 (or -> and OR or .)
    C_PARENTHESIS   reduce using rule 69 (or -> and OR or .)
    COMMA           reduce using rule 69 (or -> and OR or .)


state 162

    (71) and -> equal AND and .

    OR              reduce using rule 71 (and -> equal AND and .)
    SEMICOLON       reduce using rule 71 (and -> equal AND and .)
    C_PARENTHESIS   reduce using rule 71 (and -> equal AND and .)
    COMMA           reduce using rule 71 (and -> equal AND and .)


state 163

    (73) equal -> compare EQUAL compare .

    AND             reduce using rule 73 (equal -> compare EQUAL compare .)
    OR              reduce using rule 73 (equal -> compare EQUAL compare .)
    SEMICOLON       reduce using rule 73 (equal -> compare EQUAL compare .)
    C_PARENTHESIS   reduce using rule 73 (equal -> compare EQUAL compare .)
    COMMA           reduce using rule 73 (equal -> compare EQUAL compare .)


state 164

    (74) equal -> compare NOT_EQUAL compare .

    AND             reduce using rule 74 (equal -> compare NOT_EQUAL compare .)
    OR              reduce using rule 74 (equal -> compare NOT_EQUAL compare .)
    SEMICOLON       reduce using rule 74 (equal -> compare NOT_EQUAL compare .)
    C_PARENTHESIS   reduce using rule 74 (equal -> compare NOT_EQUAL compare .)
    COMMA           reduce using rule 74 (equal -> compare NOT_EQUAL compare .)


state 165

    (76) compare -> exp GREATER exp .

    EQUAL           reduce using rule 76 (compare -> exp GREATER exp .)
    NOT_EQUAL       reduce using rule 76 (compare -> exp GREATER exp .)
    AND             reduce using rule 76 (compare -> exp GREATER exp .)
    OR              reduce using rule 76 (compare -> exp GREATER exp .)
    SEMICOLON       reduce using rule 76 (compare -> exp GREATER exp .)
    C_PARENTHESIS   reduce using rule 76 (compare -> exp GREATER exp .)
    COMMA           reduce using rule 76 (compare -> exp GREATER exp .)


state 166

    (77) compare -> exp LESSER exp .

    EQUAL           reduce using rule 77 (compare -> exp LESSER exp .)
    NOT_EQUAL       reduce using rule 77 (compare -> exp LESSER exp .)
    AND             reduce using rule 77 (compare -> exp LESSER exp .)
    OR              reduce using rule 77 (compare -> exp LESSER exp .)
    SEMICOLON       reduce using rule 77 (compare -> exp LESSER exp .)
    C_PARENTHESIS   reduce using rule 77 (compare -> exp LESSER exp .)
    COMMA           reduce using rule 77 (compare -> exp LESSER exp .)


state 167

    (78) compare -> exp GREATER_EQUAL exp .

    EQUAL           reduce using rule 78 (compare -> exp GREATER_EQUAL exp .)
    NOT_EQUAL       reduce using rule 78 (compare -> exp GREATER_EQUAL exp .)
    AND             reduce using rule 78 (compare -> exp GREATER_EQUAL exp .)
    OR              reduce using rule 78 (compare -> exp GREATER_EQUAL exp .)
    SEMICOLON       reduce using rule 78 (compare -> exp GREATER_EQUAL exp .)
    C_PARENTHESIS   reduce using rule 78 (compare -> exp GREATER_EQUAL exp .)
    COMMA           reduce using rule 78 (compare -> exp GREATER_EQUAL exp .)


state 168

    (79) compare -> exp LESSER_EQUAL exp .

    EQUAL           reduce using rule 79 (compare -> exp LESSER_EQUAL exp .)
    NOT_EQUAL       reduce using rule 79 (compare -> exp LESSER_EQUAL exp .)
    AND             reduce using rule 79 (compare -> exp LESSER_EQUAL exp .)
    OR              reduce using rule 79 (compare -> exp LESSER_EQUAL exp .)
    SEMICOLON       reduce using rule 79 (compare -> exp LESSER_EQUAL exp .)
    C_PARENTHESIS   reduce using rule 79 (compare -> exp LESSER_EQUAL exp .)
    COMMA           reduce using rule 79 (compare -> exp LESSER_EQUAL exp .)


state 169

    (81) exp -> termino exp_operador exp .

    GREATER         reduce using rule 81 (exp -> termino exp_operador exp .)
    LESSER          reduce using rule 81 (exp -> termino exp_operador exp .)
    GREATER_EQUAL   reduce using rule 81 (exp -> termino exp_operador exp .)
    LESSER_EQUAL    reduce using rule 81 (exp -> termino exp_operador exp .)
    EQUAL           reduce using rule 81 (exp -> termino exp_operador exp .)
    NOT_EQUAL       reduce using rule 81 (exp -> termino exp_operador exp .)
    AND             reduce using rule 81 (exp -> termino exp_operador exp .)
    OR              reduce using rule 81 (exp -> termino exp_operador exp .)
    SEMICOLON       reduce using rule 81 (exp -> termino exp_operador exp .)
    COMMA           reduce using rule 81 (exp -> termino exp_operador exp .)
    C_PARENTHESIS   reduce using rule 81 (exp -> termino exp_operador exp .)
    C_ABRACKET      reduce using rule 81 (exp -> termino exp_operador exp .)
    TO              reduce using rule 81 (exp -> termino exp_operador exp .)
    O_CBRACKET      reduce using rule 81 (exp -> termino exp_operador exp .)


state 170

    (85) termino -> factor termino_operador termino .

    PLUS            reduce using rule 85 (termino -> factor termino_operador termino .)
    MINUS           reduce using rule 85 (termino -> factor termino_operador termino .)
    GREATER         reduce using rule 85 (termino -> factor termino_operador termino .)
    LESSER          reduce using rule 85 (termino -> factor termino_operador termino .)
    GREATER_EQUAL   reduce using rule 85 (termino -> factor termino_operador termino .)
    LESSER_EQUAL    reduce using rule 85 (termino -> factor termino_operador termino .)
    EQUAL           reduce using rule 85 (termino -> factor termino_operador termino .)
    NOT_EQUAL       reduce using rule 85 (termino -> factor termino_operador termino .)
    AND             reduce using rule 85 (termino -> factor termino_operador termino .)
    OR              reduce using rule 85 (termino -> factor termino_operador termino .)
    SEMICOLON       reduce using rule 85 (termino -> factor termino_operador termino .)
    COMMA           reduce using rule 85 (termino -> factor termino_operador termino .)
    C_PARENTHESIS   reduce using rule 85 (termino -> factor termino_operador termino .)
    C_ABRACKET      reduce using rule 85 (termino -> factor termino_operador termino .)
    TO              reduce using rule 85 (termino -> factor termino_operador termino .)
    O_CBRACKET      reduce using rule 85 (termino -> factor termino_operador termino .)


state 171

    (90) factor -> O_PARENTHESIS expr C_PARENTHESIS .

    TIMES           reduce using rule 90 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    DIVIDE          reduce using rule 90 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    MODULE          reduce using rule 90 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    PLUS            reduce using rule 90 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    MINUS           reduce using rule 90 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    GREATER         reduce using rule 90 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    LESSER          reduce using rule 90 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    GREATER_EQUAL   reduce using rule 90 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    LESSER_EQUAL    reduce using rule 90 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    EQUAL           reduce using rule 90 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    NOT_EQUAL       reduce using rule 90 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    AND             reduce using rule 90 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    OR              reduce using rule 90 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    SEMICOLON       reduce using rule 90 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    COMMA           reduce using rule 90 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    C_PARENTHESIS   reduce using rule 90 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    C_ABRACKET      reduce using rule 90 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    TO              reduce using rule 90 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    O_CBRACKET      reduce using rule 90 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)


state 172

    (51) llamada_prime -> exp COMMA llamada_prime .

    C_PARENTHESIS   reduce using rule 51 (llamada_prime -> exp COMMA llamada_prime .)


state 173

    (35) variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET . exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET . exp C_ABRACKET
    (80) exp -> . termino
    (81) exp -> . termino exp_operador exp
    (84) termino -> . factor
    (85) termino -> . factor termino_operador termino
    (89) factor -> . variable
    (90) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (91) factor -> . llamada
    (92) factor -> . cte
    (93) factor -> . PLUS cte
    (94) factor -> . MINUS cte
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID O_ABRACKET exp C_ABRACKET
    (38) variable -> . ID
    (49) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (95) cte -> . CTE_INT
    (96) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 103
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    ID              shift and go to state 108
    CTE_INT         shift and go to state 109
    CTE_FLOAT       shift and go to state 110

    exp                            shift and go to state 181
    termino                        shift and go to state 101
    factor                         shift and go to state 102
    variable                       shift and go to state 93
    llamada                        shift and go to state 104
    cte                            shift and go to state 105

state 174

    (55) lectura_prime -> variable COMMA lectura_prime .

    C_PARENTHESIS   reduce using rule 55 (lectura_prime -> variable COMMA lectura_prime .)


state 175

    (59) escritura_prime -> expr COMMA escritura_prime .

    C_PARENTHESIS   reduce using rule 59 (escritura_prime -> expr COMMA escritura_prime .)


state 176

    (60) escritura_prime -> escritura_string COMMA escritura_prime .

    C_PARENTHESIS   reduce using rule 60 (escritura_prime -> escritura_string COMMA escritura_prime .)


state 177

    (62) decision -> IF O_PARENTHESIS expr C_PARENTHESIS bloque . else
    (63) else -> . ELSE bloque
    (64) else -> . epsilon
    (97) epsilon -> .

    ELSE            shift and go to state 183
    ID              reduce using rule 97 (epsilon -> .)
    RETURN          reduce using rule 97 (epsilon -> .)
    READ            reduce using rule 97 (epsilon -> .)
    WRITE           reduce using rule 97 (epsilon -> .)
    IF              reduce using rule 97 (epsilon -> .)
    WHILE           reduce using rule 97 (epsilon -> .)
    FOR             reduce using rule 97 (epsilon -> .)
    C_CBRACKET      reduce using rule 97 (epsilon -> .)

    else                           shift and go to state 182
    epsilon                        shift and go to state 184

state 178

    (65) while -> WHILE O_PARENTHESIS expr C_PARENTHESIS bloque .

    ID              reduce using rule 65 (while -> WHILE O_PARENTHESIS expr C_PARENTHESIS bloque .)
    RETURN          reduce using rule 65 (while -> WHILE O_PARENTHESIS expr C_PARENTHESIS bloque .)
    READ            reduce using rule 65 (while -> WHILE O_PARENTHESIS expr C_PARENTHESIS bloque .)
    WRITE           reduce using rule 65 (while -> WHILE O_PARENTHESIS expr C_PARENTHESIS bloque .)
    IF              reduce using rule 65 (while -> WHILE O_PARENTHESIS expr C_PARENTHESIS bloque .)
    WHILE           reduce using rule 65 (while -> WHILE O_PARENTHESIS expr C_PARENTHESIS bloque .)
    FOR             reduce using rule 65 (while -> WHILE O_PARENTHESIS expr C_PARENTHESIS bloque .)
    C_CBRACKET      reduce using rule 65 (while -> WHILE O_PARENTHESIS expr C_PARENTHESIS bloque .)


state 179

    (66) for -> FOR variable ASSIGN exp TO . exp bloque
    (80) exp -> . termino
    (81) exp -> . termino exp_operador exp
    (84) termino -> . factor
    (85) termino -> . factor termino_operador termino
    (89) factor -> . variable
    (90) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (91) factor -> . llamada
    (92) factor -> . cte
    (93) factor -> . PLUS cte
    (94) factor -> . MINUS cte
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID O_ABRACKET exp C_ABRACKET
    (38) variable -> . ID
    (49) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (95) cte -> . CTE_INT
    (96) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 103
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    ID              shift and go to state 108
    CTE_INT         shift and go to state 109
    CTE_FLOAT       shift and go to state 110

    variable                       shift and go to state 93
    exp                            shift and go to state 185
    termino                        shift and go to state 101
    factor                         shift and go to state 102
    llamada                        shift and go to state 104
    cte                            shift and go to state 105

state 180

    (13) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET . CTE_INT C_ABRACKET

    CTE_INT         shift and go to state 186


state 181

    (35) variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp . C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp . C_ABRACKET

    C_ABRACKET      shift and go to state 187


state 182

    (62) decision -> IF O_PARENTHESIS expr C_PARENTHESIS bloque else .

    ID              reduce using rule 62 (decision -> IF O_PARENTHESIS expr C_PARENTHESIS bloque else .)
    RETURN          reduce using rule 62 (decision -> IF O_PARENTHESIS expr C_PARENTHESIS bloque else .)
    READ            reduce using rule 62 (decision -> IF O_PARENTHESIS expr C_PARENTHESIS bloque else .)
    WRITE           reduce using rule 62 (decision -> IF O_PARENTHESIS expr C_PARENTHESIS bloque else .)
    IF              reduce using rule 62 (decision -> IF O_PARENTHESIS expr C_PARENTHESIS bloque else .)
    WHILE           reduce using rule 62 (decision -> IF O_PARENTHESIS expr C_PARENTHESIS bloque else .)
    FOR             reduce using rule 62 (decision -> IF O_PARENTHESIS expr C_PARENTHESIS bloque else .)
    C_CBRACKET      reduce using rule 62 (decision -> IF O_PARENTHESIS expr C_PARENTHESIS bloque else .)


state 183

    (63) else -> ELSE . bloque
    (3) bloque -> . O_CBRACKET bloque_prime C_CBRACKET

    O_CBRACKET      shift and go to state 30

    bloque                         shift and go to state 188

state 184

    (64) else -> epsilon .

    ID              reduce using rule 64 (else -> epsilon .)
    RETURN          reduce using rule 64 (else -> epsilon .)
    READ            reduce using rule 64 (else -> epsilon .)
    WRITE           reduce using rule 64 (else -> epsilon .)
    IF              reduce using rule 64 (else -> epsilon .)
    WHILE           reduce using rule 64 (else -> epsilon .)
    FOR             reduce using rule 64 (else -> epsilon .)
    C_CBRACKET      reduce using rule 64 (else -> epsilon .)


state 185

    (66) for -> FOR variable ASSIGN exp TO exp . bloque
    (3) bloque -> . O_CBRACKET bloque_prime C_CBRACKET

    O_CBRACKET      shift and go to state 30

    bloque                         shift and go to state 189

state 186

    (13) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT . C_ABRACKET

    C_ABRACKET      shift and go to state 190


state 187

    (35) variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET . O_ABRACKET exp C_ABRACKET
    (36) variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .

    O_ABRACKET      shift and go to state 191
    ASSIGN          reduce using rule 36 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    TIMES           reduce using rule 36 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    DIVIDE          reduce using rule 36 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    MODULE          reduce using rule 36 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    PLUS            reduce using rule 36 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    MINUS           reduce using rule 36 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    GREATER         reduce using rule 36 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    LESSER          reduce using rule 36 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    GREATER_EQUAL   reduce using rule 36 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    LESSER_EQUAL    reduce using rule 36 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    EQUAL           reduce using rule 36 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    NOT_EQUAL       reduce using rule 36 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    AND             reduce using rule 36 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    OR              reduce using rule 36 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    SEMICOLON       reduce using rule 36 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    COMMA           reduce using rule 36 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    C_PARENTHESIS   reduce using rule 36 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    C_ABRACKET      reduce using rule 36 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    TO              reduce using rule 36 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    O_CBRACKET      reduce using rule 36 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)


state 188

    (63) else -> ELSE bloque .

    ID              reduce using rule 63 (else -> ELSE bloque .)
    RETURN          reduce using rule 63 (else -> ELSE bloque .)
    READ            reduce using rule 63 (else -> ELSE bloque .)
    WRITE           reduce using rule 63 (else -> ELSE bloque .)
    IF              reduce using rule 63 (else -> ELSE bloque .)
    WHILE           reduce using rule 63 (else -> ELSE bloque .)
    FOR             reduce using rule 63 (else -> ELSE bloque .)
    C_CBRACKET      reduce using rule 63 (else -> ELSE bloque .)


state 189

    (66) for -> FOR variable ASSIGN exp TO exp bloque .

    ID              reduce using rule 66 (for -> FOR variable ASSIGN exp TO exp bloque .)
    RETURN          reduce using rule 66 (for -> FOR variable ASSIGN exp TO exp bloque .)
    READ            reduce using rule 66 (for -> FOR variable ASSIGN exp TO exp bloque .)
    WRITE           reduce using rule 66 (for -> FOR variable ASSIGN exp TO exp bloque .)
    IF              reduce using rule 66 (for -> FOR variable ASSIGN exp TO exp bloque .)
    WHILE           reduce using rule 66 (for -> FOR variable ASSIGN exp TO exp bloque .)
    FOR             reduce using rule 66 (for -> FOR variable ASSIGN exp TO exp bloque .)
    C_CBRACKET      reduce using rule 66 (for -> FOR variable ASSIGN exp TO exp bloque .)


state 190

    (13) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET .

    COMMA           reduce using rule 13 (declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET .)
    COLON           reduce using rule 13 (declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET .)


state 191

    (35) variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET . exp C_ABRACKET
    (80) exp -> . termino
    (81) exp -> . termino exp_operador exp
    (84) termino -> . factor
    (85) termino -> . factor termino_operador termino
    (89) factor -> . variable
    (90) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (91) factor -> . llamada
    (92) factor -> . cte
    (93) factor -> . PLUS cte
    (94) factor -> . MINUS cte
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID O_ABRACKET exp C_ABRACKET
    (38) variable -> . ID
    (49) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (95) cte -> . CTE_INT
    (96) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 103
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    ID              shift and go to state 108
    CTE_INT         shift and go to state 109
    CTE_FLOAT       shift and go to state 110

    exp                            shift and go to state 192
    termino                        shift and go to state 101
    factor                         shift and go to state 102
    variable                       shift and go to state 93
    llamada                        shift and go to state 104
    cte                            shift and go to state 105

state 192

    (35) variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp . C_ABRACKET

    C_ABRACKET      shift and go to state 193


state 193

    (35) variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .

    ASSIGN          reduce using rule 35 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    TIMES           reduce using rule 35 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    DIVIDE          reduce using rule 35 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    MODULE          reduce using rule 35 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    PLUS            reduce using rule 35 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    MINUS           reduce using rule 35 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    GREATER         reduce using rule 35 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    LESSER          reduce using rule 35 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    GREATER_EQUAL   reduce using rule 35 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    LESSER_EQUAL    reduce using rule 35 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    EQUAL           reduce using rule 35 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    NOT_EQUAL       reduce using rule 35 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    AND             reduce using rule 35 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    OR              reduce using rule 35 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    SEMICOLON       reduce using rule 35 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    COMMA           reduce using rule 35 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    C_PARENTHESIS   reduce using rule 35 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    C_ABRACKET      reduce using rule 35 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    TO              reduce using rule 35 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    O_CBRACKET      reduce using rule 35 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)

