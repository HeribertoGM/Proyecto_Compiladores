Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CTE_CHAR

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAM ID SEMICOLON declaracion_global funcion main bloque
Rule 2     main -> MAIN O_PARENTHESIS C_PARENTHESIS
Rule 3     bloque -> O_CBRACKET bloque_prime C_CBRACKET
Rule 4     bloque_prime -> estatuto bloque_prime
Rule 5     bloque_prime -> epsilon
Rule 6     declaracion_funcion -> declaracion
Rule 7     declaracion_global -> declaracion
Rule 8     declaracion -> declaracion_base
Rule 9     declaracion -> declaracion_base declaracion
Rule 10    declaracion_base -> LET declaracion_prime COLON declaracion_tipo SEMICOLON
Rule 11    declaracion_prime -> declaracion_variable
Rule 12    declaracion_prime -> declaracion_variable COMMA declaracion_prime
Rule 13    declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
Rule 14    declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
Rule 15    declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET
Rule 16    declaracion_variable -> ID
Rule 17    declaracion_tipo -> INT
Rule 18    declaracion_tipo -> FLOAT
Rule 19    declaracion_tipo -> CHAR
Rule 20    declaracion_tipo -> STRING
Rule 21    param_tipo -> INT ID
Rule 22    param_tipo -> FLOAT ID
Rule 23    param_tipo -> CHAR ID
Rule 24    param_tipo -> STRING ID
Rule 25    funcion -> funcion_base funcion
Rule 26    funcion -> epsilon
Rule 27    funcion_base -> FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque
Rule 28    funcion_prime -> param_tipo
Rule 29    funcion_prime -> param_tipo COMMA funcion_prime
Rule 30    funcion_ident -> VOID ID
Rule 31    funcion_ident -> INT ID
Rule 32    funcion_ident -> FLOAT ID
Rule 33    funcion_ident -> CHAR ID
Rule 34    funcion_ident -> STRING ID
Rule 35    variable -> var_array
Rule 36    variable -> ID
Rule 37    var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
Rule 38    var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
Rule 39    var_array -> arr_id O_ABRACKET exp arr_close_bracket
Rule 40    arr_id -> ID
Rule 41    arr_close_bracket -> C_ABRACKET
Rule 42    arr_open_bracket -> O_ABRACKET
Rule 43    estatuto -> asignacion SEMICOLON
Rule 44    estatuto -> llamada SEMICOLON
Rule 45    estatuto -> retorno SEMICOLON
Rule 46    estatuto -> lectura SEMICOLON
Rule 47    estatuto -> escritura SEMICOLON
Rule 48    estatuto -> decision
Rule 49    estatuto -> while
Rule 50    estatuto -> for
Rule 51    asignacion -> variable ASSIGN asignacion_expr
Rule 52    asignacion_expr -> expr
Rule 53    llamada -> function_id O_PARENTHESIS llamada_prime C_PARENTHESIS
Rule 54    function_id -> ID
Rule 55    llamada_prime -> llamada_exp
Rule 56    llamada_prime -> llamada_exp llamada_comma llamada_prime
Rule 57    llamada_exp -> exp
Rule 58    llamada_comma -> COMMA
Rule 59    retorno -> RETURN O_PARENTHESIS expr C_PARENTHESIS
Rule 60    lectura -> READ O_PARENTHESIS lectura_prime C_PARENTHESIS
Rule 61    lectura_prime -> variable
Rule 62    lectura_prime -> variable COMMA lectura_prime
Rule 63    escritura -> WRITE O_PARENTHESIS escritura_prime C_PARENTHESIS
Rule 64    escritura_prime -> expr
Rule 65    escritura_prime -> escritura_string
Rule 66    escritura_prime -> expr COMMA escritura_prime
Rule 67    escritura_prime -> escritura_string COMMA escritura_prime
Rule 68    escritura_string -> CTE_STRING
Rule 69    decision -> IF O_PARENTHESIS decision_expr C_PARENTHESIS bloque else
Rule 70    decision_expr -> expr
Rule 71    else -> else_prime bloque
Rule 72    else -> epsilon
Rule 73    else_prime -> ELSE
Rule 74    while -> while_prime while_expr bloque
Rule 75    while_prime -> WHILE
Rule 76    while_expr -> O_PARENTHESIS expr C_PARENTHESIS
Rule 77    for -> FOR for_asignacion for_to for_exp bloque
Rule 78    for_asignacion -> variable ASSIGN for_asignacion_expr
Rule 79    for_asignacion_expr -> expr
Rule 80    for_to -> TO
Rule 81    for_exp -> exp
Rule 82    expr -> or
Rule 83    or -> and
Rule 84    or -> and or_operador or
Rule 85    or_operador -> OR
Rule 86    and -> equal
Rule 87    and -> equal and_operador and
Rule 88    and_operador -> AND
Rule 89    equal -> compare
Rule 90    equal -> compare equal_operador compare
Rule 91    equal_operador -> EQUAL
Rule 92    equal_operador -> NOT_EQUAL
Rule 93    compare -> exp
Rule 94    compare -> exp compare_operador exp
Rule 95    compare_operador -> GREATER
Rule 96    compare_operador -> LESSER
Rule 97    compare_operador -> GREATER_EQUAL
Rule 98    compare_operador -> LESSER_EQUAL
Rule 99    exp -> termino
Rule 100   exp -> termino exp_operador exp
Rule 101   exp_operador -> PLUS
Rule 102   exp_operador -> MINUS
Rule 103   termino -> factor
Rule 104   termino -> factor termino_operador termino
Rule 105   termino_operador -> TIMES
Rule 106   termino_operador -> DIVIDE
Rule 107   termino_operador -> MODULE
Rule 108   factor -> variable
Rule 109   factor -> O_PARENTHESIS expr C_PARENTHESIS
Rule 110   factor -> llamada
Rule 111   factor -> cte
Rule 112   factor -> PLUS cte
Rule 113   factor -> MINUS cte
Rule 114   cte -> CTE_INT
Rule 115   cte -> CTE_FLOAT
Rule 116   epsilon -> <empty>

Terminals, with rules where they appear

AND                  : 88
ASSIGN               : 51 78
CHAR                 : 19 23 33
COLON                : 10
COMMA                : 12 29 58 62 66 67
CTE_CHAR             : 
CTE_FLOAT            : 115
CTE_INT              : 13 13 13 14 14 15 114
CTE_STRING           : 68
C_ABRACKET           : 13 13 13 14 14 15 41
C_CBRACKET           : 3
C_PARENTHESIS        : 2 27 53 59 60 63 69 76 109
DIVIDE               : 106
ELSE                 : 73
EQUAL                : 91
FLOAT                : 18 22 32
FOR                  : 77
FUNCTION             : 27
GREATER              : 95
GREATER_EQUAL        : 97
ID                   : 1 13 14 15 16 21 22 23 24 30 31 32 33 34 36 40 54
IF                   : 69
INT                  : 17 21 31
LESSER               : 96
LESSER_EQUAL         : 98
LET                  : 10
MAIN                 : 2
MINUS                : 102 113
MODULE               : 107
NOT_EQUAL            : 92
OR                   : 85
O_ABRACKET           : 13 13 13 14 14 15 37 38 39 42
O_CBRACKET           : 3
O_PARENTHESIS        : 2 27 53 59 60 63 69 76 109
PLUS                 : 101 112
PROGRAM              : 1
READ                 : 60
RETURN               : 59
SEMICOLON            : 1 10 43 44 45 46 47
STRING               : 20 24 34
TIMES                : 105
TO                   : 80
VOID                 : 30
WHILE                : 75
WRITE                : 63
error                : 

Nonterminals, with rules where they appear

and                  : 83 84 87
and_operador         : 87
arr_close_bracket    : 37 37 37 38 38 39
arr_id               : 37 38 39
arr_open_bracket     : 37 37 38
asignacion           : 43
asignacion_expr      : 51
bloque               : 1 27 69 71 74 77
bloque_prime         : 3 4
compare              : 89 90 90
compare_operador     : 94
cte                  : 111 112 113
decision             : 48
decision_expr        : 69
declaracion          : 6 7 9
declaracion_base     : 8 9
declaracion_funcion  : 27
declaracion_global   : 1
declaracion_prime    : 10 12
declaracion_tipo     : 10
declaracion_variable : 11 12
else                 : 69
else_prime           : 71
epsilon              : 5 26 72
equal                : 86 87
equal_operador       : 90
escritura            : 47
escritura_prime      : 63 66 67
escritura_string     : 65 67
estatuto             : 4
exp                  : 37 37 37 38 38 39 57 81 93 94 94 100
exp_operador         : 100
expr                 : 52 59 64 66 70 76 79 109
factor               : 103 104
for                  : 50
for_asignacion       : 77
for_asignacion_expr  : 78
for_exp              : 77
for_to               : 77
funcion              : 1 25
funcion_base         : 25
funcion_ident        : 27
funcion_prime        : 27 29
function_id          : 53
lectura              : 46
lectura_prime        : 60 62
llamada              : 44 110
llamada_comma        : 56
llamada_exp          : 55 56
llamada_prime        : 53 56
main                 : 1
or                   : 82 84
or_operador          : 84
param_tipo           : 28 29
programa             : 0
retorno              : 45
termino              : 99 100 104
termino_operador     : 104
var_array            : 35
variable             : 51 61 62 78 108
while                : 49
while_expr           : 74
while_prime          : 74

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAM ID SEMICOLON declaracion_global funcion main bloque

    PROGRAM         shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> PROGRAM . ID SEMICOLON declaracion_global funcion main bloque

    ID              shift and go to state 3


state 3

    (1) programa -> PROGRAM ID . SEMICOLON declaracion_global funcion main bloque

    SEMICOLON       shift and go to state 4


state 4

    (1) programa -> PROGRAM ID SEMICOLON . declaracion_global funcion main bloque
    (7) declaracion_global -> . declaracion
    (8) declaracion -> . declaracion_base
    (9) declaracion -> . declaracion_base declaracion
    (10) declaracion_base -> . LET declaracion_prime COLON declaracion_tipo SEMICOLON

    LET             shift and go to state 8

    declaracion_global             shift and go to state 5
    declaracion                    shift and go to state 6
    declaracion_base               shift and go to state 7

state 5

    (1) programa -> PROGRAM ID SEMICOLON declaracion_global . funcion main bloque
    (25) funcion -> . funcion_base funcion
    (26) funcion -> . epsilon
    (27) funcion_base -> . FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque
    (116) epsilon -> .

    FUNCTION        shift and go to state 12
    MAIN            reduce using rule 116 (epsilon -> .)

    funcion                        shift and go to state 9
    funcion_base                   shift and go to state 10
    epsilon                        shift and go to state 11

state 6

    (7) declaracion_global -> declaracion .

    FUNCTION        reduce using rule 7 (declaracion_global -> declaracion .)
    MAIN            reduce using rule 7 (declaracion_global -> declaracion .)


state 7

    (8) declaracion -> declaracion_base .
    (9) declaracion -> declaracion_base . declaracion
    (8) declaracion -> . declaracion_base
    (9) declaracion -> . declaracion_base declaracion
    (10) declaracion_base -> . LET declaracion_prime COLON declaracion_tipo SEMICOLON

    FUNCTION        reduce using rule 8 (declaracion -> declaracion_base .)
    MAIN            reduce using rule 8 (declaracion -> declaracion_base .)
    O_CBRACKET      reduce using rule 8 (declaracion -> declaracion_base .)
    LET             shift and go to state 8

    declaracion_base               shift and go to state 7
    declaracion                    shift and go to state 13

state 8

    (10) declaracion_base -> LET . declaracion_prime COLON declaracion_tipo SEMICOLON
    (11) declaracion_prime -> . declaracion_variable
    (12) declaracion_prime -> . declaracion_variable COMMA declaracion_prime
    (13) declaracion_variable -> . ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (14) declaracion_variable -> . ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (15) declaracion_variable -> . ID O_ABRACKET CTE_INT C_ABRACKET
    (16) declaracion_variable -> . ID

    ID              shift and go to state 16

    declaracion_prime              shift and go to state 14
    declaracion_variable           shift and go to state 15

state 9

    (1) programa -> PROGRAM ID SEMICOLON declaracion_global funcion . main bloque
    (2) main -> . MAIN O_PARENTHESIS C_PARENTHESIS

    MAIN            shift and go to state 18

    main                           shift and go to state 17

state 10

    (25) funcion -> funcion_base . funcion
    (25) funcion -> . funcion_base funcion
    (26) funcion -> . epsilon
    (27) funcion_base -> . FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque
    (116) epsilon -> .

    FUNCTION        shift and go to state 12
    MAIN            reduce using rule 116 (epsilon -> .)

    funcion_base                   shift and go to state 10
    funcion                        shift and go to state 19
    epsilon                        shift and go to state 11

state 11

    (26) funcion -> epsilon .

    MAIN            reduce using rule 26 (funcion -> epsilon .)


state 12

    (27) funcion_base -> FUNCTION . funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque
    (30) funcion_ident -> . VOID ID
    (31) funcion_ident -> . INT ID
    (32) funcion_ident -> . FLOAT ID
    (33) funcion_ident -> . CHAR ID
    (34) funcion_ident -> . STRING ID

    VOID            shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    STRING          shift and go to state 25

    funcion_ident                  shift and go to state 20

state 13

    (9) declaracion -> declaracion_base declaracion .

    FUNCTION        reduce using rule 9 (declaracion -> declaracion_base declaracion .)
    MAIN            reduce using rule 9 (declaracion -> declaracion_base declaracion .)
    O_CBRACKET      reduce using rule 9 (declaracion -> declaracion_base declaracion .)


state 14

    (10) declaracion_base -> LET declaracion_prime . COLON declaracion_tipo SEMICOLON

    COLON           shift and go to state 26


state 15

    (11) declaracion_prime -> declaracion_variable .
    (12) declaracion_prime -> declaracion_variable . COMMA declaracion_prime

    COLON           reduce using rule 11 (declaracion_prime -> declaracion_variable .)
    COMMA           shift and go to state 27


state 16

    (13) declaracion_variable -> ID . O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (14) declaracion_variable -> ID . O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (15) declaracion_variable -> ID . O_ABRACKET CTE_INT C_ABRACKET
    (16) declaracion_variable -> ID .

    O_ABRACKET      shift and go to state 28
    COMMA           reduce using rule 16 (declaracion_variable -> ID .)
    COLON           reduce using rule 16 (declaracion_variable -> ID .)


state 17

    (1) programa -> PROGRAM ID SEMICOLON declaracion_global funcion main . bloque
    (3) bloque -> . O_CBRACKET bloque_prime C_CBRACKET

    O_CBRACKET      shift and go to state 30

    bloque                         shift and go to state 29

state 18

    (2) main -> MAIN . O_PARENTHESIS C_PARENTHESIS

    O_PARENTHESIS   shift and go to state 31


state 19

    (25) funcion -> funcion_base funcion .

    MAIN            reduce using rule 25 (funcion -> funcion_base funcion .)


state 20

    (27) funcion_base -> FUNCTION funcion_ident . O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque

    O_PARENTHESIS   shift and go to state 32


state 21

    (30) funcion_ident -> VOID . ID

    ID              shift and go to state 33


state 22

    (31) funcion_ident -> INT . ID

    ID              shift and go to state 34


state 23

    (32) funcion_ident -> FLOAT . ID

    ID              shift and go to state 35


state 24

    (33) funcion_ident -> CHAR . ID

    ID              shift and go to state 36


state 25

    (34) funcion_ident -> STRING . ID

    ID              shift and go to state 37


state 26

    (10) declaracion_base -> LET declaracion_prime COLON . declaracion_tipo SEMICOLON
    (17) declaracion_tipo -> . INT
    (18) declaracion_tipo -> . FLOAT
    (19) declaracion_tipo -> . CHAR
    (20) declaracion_tipo -> . STRING

    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    CHAR            shift and go to state 41
    STRING          shift and go to state 42

    declaracion_tipo               shift and go to state 38

state 27

    (12) declaracion_prime -> declaracion_variable COMMA . declaracion_prime
    (11) declaracion_prime -> . declaracion_variable
    (12) declaracion_prime -> . declaracion_variable COMMA declaracion_prime
    (13) declaracion_variable -> . ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (14) declaracion_variable -> . ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (15) declaracion_variable -> . ID O_ABRACKET CTE_INT C_ABRACKET
    (16) declaracion_variable -> . ID

    ID              shift and go to state 16

    declaracion_variable           shift and go to state 15
    declaracion_prime              shift and go to state 43

state 28

    (13) declaracion_variable -> ID O_ABRACKET . CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (14) declaracion_variable -> ID O_ABRACKET . CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (15) declaracion_variable -> ID O_ABRACKET . CTE_INT C_ABRACKET

    CTE_INT         shift and go to state 44


state 29

    (1) programa -> PROGRAM ID SEMICOLON declaracion_global funcion main bloque .

    $end            reduce using rule 1 (programa -> PROGRAM ID SEMICOLON declaracion_global funcion main bloque .)


state 30

    (3) bloque -> O_CBRACKET . bloque_prime C_CBRACKET
    (4) bloque_prime -> . estatuto bloque_prime
    (5) bloque_prime -> . epsilon
    (43) estatuto -> . asignacion SEMICOLON
    (44) estatuto -> . llamada SEMICOLON
    (45) estatuto -> . retorno SEMICOLON
    (46) estatuto -> . lectura SEMICOLON
    (47) estatuto -> . escritura SEMICOLON
    (48) estatuto -> . decision
    (49) estatuto -> . while
    (50) estatuto -> . for
    (116) epsilon -> .
    (51) asignacion -> . variable ASSIGN asignacion_expr
    (53) llamada -> . function_id O_PARENTHESIS llamada_prime C_PARENTHESIS
    (59) retorno -> . RETURN O_PARENTHESIS expr C_PARENTHESIS
    (60) lectura -> . READ O_PARENTHESIS lectura_prime C_PARENTHESIS
    (63) escritura -> . WRITE O_PARENTHESIS escritura_prime C_PARENTHESIS
    (69) decision -> . IF O_PARENTHESIS decision_expr C_PARENTHESIS bloque else
    (74) while -> . while_prime while_expr bloque
    (77) for -> . FOR for_asignacion for_to for_exp bloque
    (35) variable -> . var_array
    (36) variable -> . ID
    (54) function_id -> . ID
    (75) while_prime -> . WHILE
    (37) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (40) arr_id -> . ID

    C_CBRACKET      reduce using rule 116 (epsilon -> .)
    RETURN          shift and go to state 58
    READ            shift and go to state 59
    WRITE           shift and go to state 60
    IF              shift and go to state 61
    FOR             shift and go to state 63
    ID              shift and go to state 65
    WHILE           shift and go to state 66

    bloque_prime                   shift and go to state 45
    estatuto                       shift and go to state 46
    epsilon                        shift and go to state 47
    asignacion                     shift and go to state 48
    llamada                        shift and go to state 49
    retorno                        shift and go to state 50
    lectura                        shift and go to state 51
    escritura                      shift and go to state 52
    decision                       shift and go to state 53
    while                          shift and go to state 54
    for                            shift and go to state 55
    variable                       shift and go to state 56
    function_id                    shift and go to state 57
    while_prime                    shift and go to state 62
    var_array                      shift and go to state 64
    arr_id                         shift and go to state 67

state 31

    (2) main -> MAIN O_PARENTHESIS . C_PARENTHESIS

    C_PARENTHESIS   shift and go to state 68


state 32

    (27) funcion_base -> FUNCTION funcion_ident O_PARENTHESIS . funcion_prime C_PARENTHESIS declaracion_funcion bloque
    (28) funcion_prime -> . param_tipo
    (29) funcion_prime -> . param_tipo COMMA funcion_prime
    (21) param_tipo -> . INT ID
    (22) param_tipo -> . FLOAT ID
    (23) param_tipo -> . CHAR ID
    (24) param_tipo -> . STRING ID

    INT             shift and go to state 71
    FLOAT           shift and go to state 72
    CHAR            shift and go to state 73
    STRING          shift and go to state 74

    funcion_prime                  shift and go to state 69
    param_tipo                     shift and go to state 70

state 33

    (30) funcion_ident -> VOID ID .

    O_PARENTHESIS   reduce using rule 30 (funcion_ident -> VOID ID .)


state 34

    (31) funcion_ident -> INT ID .

    O_PARENTHESIS   reduce using rule 31 (funcion_ident -> INT ID .)


state 35

    (32) funcion_ident -> FLOAT ID .

    O_PARENTHESIS   reduce using rule 32 (funcion_ident -> FLOAT ID .)


state 36

    (33) funcion_ident -> CHAR ID .

    O_PARENTHESIS   reduce using rule 33 (funcion_ident -> CHAR ID .)


state 37

    (34) funcion_ident -> STRING ID .

    O_PARENTHESIS   reduce using rule 34 (funcion_ident -> STRING ID .)


state 38

    (10) declaracion_base -> LET declaracion_prime COLON declaracion_tipo . SEMICOLON

    SEMICOLON       shift and go to state 75


state 39

    (17) declaracion_tipo -> INT .

    SEMICOLON       reduce using rule 17 (declaracion_tipo -> INT .)


state 40

    (18) declaracion_tipo -> FLOAT .

    SEMICOLON       reduce using rule 18 (declaracion_tipo -> FLOAT .)


state 41

    (19) declaracion_tipo -> CHAR .

    SEMICOLON       reduce using rule 19 (declaracion_tipo -> CHAR .)


state 42

    (20) declaracion_tipo -> STRING .

    SEMICOLON       reduce using rule 20 (declaracion_tipo -> STRING .)


state 43

    (12) declaracion_prime -> declaracion_variable COMMA declaracion_prime .

    COLON           reduce using rule 12 (declaracion_prime -> declaracion_variable COMMA declaracion_prime .)


state 44

    (13) declaracion_variable -> ID O_ABRACKET CTE_INT . C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (14) declaracion_variable -> ID O_ABRACKET CTE_INT . C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (15) declaracion_variable -> ID O_ABRACKET CTE_INT . C_ABRACKET

    C_ABRACKET      shift and go to state 76


state 45

    (3) bloque -> O_CBRACKET bloque_prime . C_CBRACKET

    C_CBRACKET      shift and go to state 77


state 46

    (4) bloque_prime -> estatuto . bloque_prime
    (4) bloque_prime -> . estatuto bloque_prime
    (5) bloque_prime -> . epsilon
    (43) estatuto -> . asignacion SEMICOLON
    (44) estatuto -> . llamada SEMICOLON
    (45) estatuto -> . retorno SEMICOLON
    (46) estatuto -> . lectura SEMICOLON
    (47) estatuto -> . escritura SEMICOLON
    (48) estatuto -> . decision
    (49) estatuto -> . while
    (50) estatuto -> . for
    (116) epsilon -> .
    (51) asignacion -> . variable ASSIGN asignacion_expr
    (53) llamada -> . function_id O_PARENTHESIS llamada_prime C_PARENTHESIS
    (59) retorno -> . RETURN O_PARENTHESIS expr C_PARENTHESIS
    (60) lectura -> . READ O_PARENTHESIS lectura_prime C_PARENTHESIS
    (63) escritura -> . WRITE O_PARENTHESIS escritura_prime C_PARENTHESIS
    (69) decision -> . IF O_PARENTHESIS decision_expr C_PARENTHESIS bloque else
    (74) while -> . while_prime while_expr bloque
    (77) for -> . FOR for_asignacion for_to for_exp bloque
    (35) variable -> . var_array
    (36) variable -> . ID
    (54) function_id -> . ID
    (75) while_prime -> . WHILE
    (37) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (40) arr_id -> . ID

    C_CBRACKET      reduce using rule 116 (epsilon -> .)
    RETURN          shift and go to state 58
    READ            shift and go to state 59
    WRITE           shift and go to state 60
    IF              shift and go to state 61
    FOR             shift and go to state 63
    ID              shift and go to state 65
    WHILE           shift and go to state 66

    estatuto                       shift and go to state 46
    bloque_prime                   shift and go to state 78
    epsilon                        shift and go to state 47
    asignacion                     shift and go to state 48
    llamada                        shift and go to state 49
    retorno                        shift and go to state 50
    lectura                        shift and go to state 51
    escritura                      shift and go to state 52
    decision                       shift and go to state 53
    while                          shift and go to state 54
    for                            shift and go to state 55
    variable                       shift and go to state 56
    function_id                    shift and go to state 57
    while_prime                    shift and go to state 62
    var_array                      shift and go to state 64
    arr_id                         shift and go to state 67

state 47

    (5) bloque_prime -> epsilon .

    C_CBRACKET      reduce using rule 5 (bloque_prime -> epsilon .)


state 48

    (43) estatuto -> asignacion . SEMICOLON

    SEMICOLON       shift and go to state 79


state 49

    (44) estatuto -> llamada . SEMICOLON

    SEMICOLON       shift and go to state 80


state 50

    (45) estatuto -> retorno . SEMICOLON

    SEMICOLON       shift and go to state 81


state 51

    (46) estatuto -> lectura . SEMICOLON

    SEMICOLON       shift and go to state 82


state 52

    (47) estatuto -> escritura . SEMICOLON

    SEMICOLON       shift and go to state 83


state 53

    (48) estatuto -> decision .

    RETURN          reduce using rule 48 (estatuto -> decision .)
    READ            reduce using rule 48 (estatuto -> decision .)
    WRITE           reduce using rule 48 (estatuto -> decision .)
    IF              reduce using rule 48 (estatuto -> decision .)
    FOR             reduce using rule 48 (estatuto -> decision .)
    ID              reduce using rule 48 (estatuto -> decision .)
    WHILE           reduce using rule 48 (estatuto -> decision .)
    C_CBRACKET      reduce using rule 48 (estatuto -> decision .)


state 54

    (49) estatuto -> while .

    RETURN          reduce using rule 49 (estatuto -> while .)
    READ            reduce using rule 49 (estatuto -> while .)
    WRITE           reduce using rule 49 (estatuto -> while .)
    IF              reduce using rule 49 (estatuto -> while .)
    FOR             reduce using rule 49 (estatuto -> while .)
    ID              reduce using rule 49 (estatuto -> while .)
    WHILE           reduce using rule 49 (estatuto -> while .)
    C_CBRACKET      reduce using rule 49 (estatuto -> while .)


state 55

    (50) estatuto -> for .

    RETURN          reduce using rule 50 (estatuto -> for .)
    READ            reduce using rule 50 (estatuto -> for .)
    WRITE           reduce using rule 50 (estatuto -> for .)
    IF              reduce using rule 50 (estatuto -> for .)
    FOR             reduce using rule 50 (estatuto -> for .)
    ID              reduce using rule 50 (estatuto -> for .)
    WHILE           reduce using rule 50 (estatuto -> for .)
    C_CBRACKET      reduce using rule 50 (estatuto -> for .)


state 56

    (51) asignacion -> variable . ASSIGN asignacion_expr

    ASSIGN          shift and go to state 84


state 57

    (53) llamada -> function_id . O_PARENTHESIS llamada_prime C_PARENTHESIS

    O_PARENTHESIS   shift and go to state 85


state 58

    (59) retorno -> RETURN . O_PARENTHESIS expr C_PARENTHESIS

    O_PARENTHESIS   shift and go to state 86


state 59

    (60) lectura -> READ . O_PARENTHESIS lectura_prime C_PARENTHESIS

    O_PARENTHESIS   shift and go to state 87


state 60

    (63) escritura -> WRITE . O_PARENTHESIS escritura_prime C_PARENTHESIS

    O_PARENTHESIS   shift and go to state 88


state 61

    (69) decision -> IF . O_PARENTHESIS decision_expr C_PARENTHESIS bloque else

    O_PARENTHESIS   shift and go to state 89


state 62

    (74) while -> while_prime . while_expr bloque
    (76) while_expr -> . O_PARENTHESIS expr C_PARENTHESIS

    O_PARENTHESIS   shift and go to state 91

    while_expr                     shift and go to state 90

state 63

    (77) for -> FOR . for_asignacion for_to for_exp bloque
    (78) for_asignacion -> . variable ASSIGN for_asignacion_expr
    (35) variable -> . var_array
    (36) variable -> . ID
    (37) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (40) arr_id -> . ID

    ID              shift and go to state 94

    for_asignacion                 shift and go to state 92
    variable                       shift and go to state 93
    var_array                      shift and go to state 64
    arr_id                         shift and go to state 67

state 64

    (35) variable -> var_array .

    ASSIGN          reduce using rule 35 (variable -> var_array .)
    TIMES           reduce using rule 35 (variable -> var_array .)
    DIVIDE          reduce using rule 35 (variable -> var_array .)
    MODULE          reduce using rule 35 (variable -> var_array .)
    PLUS            reduce using rule 35 (variable -> var_array .)
    MINUS           reduce using rule 35 (variable -> var_array .)
    GREATER         reduce using rule 35 (variable -> var_array .)
    LESSER          reduce using rule 35 (variable -> var_array .)
    GREATER_EQUAL   reduce using rule 35 (variable -> var_array .)
    LESSER_EQUAL    reduce using rule 35 (variable -> var_array .)
    EQUAL           reduce using rule 35 (variable -> var_array .)
    NOT_EQUAL       reduce using rule 35 (variable -> var_array .)
    AND             reduce using rule 35 (variable -> var_array .)
    OR              reduce using rule 35 (variable -> var_array .)
    SEMICOLON       reduce using rule 35 (variable -> var_array .)
    COMMA           reduce using rule 35 (variable -> var_array .)
    C_PARENTHESIS   reduce using rule 35 (variable -> var_array .)
    C_ABRACKET      reduce using rule 35 (variable -> var_array .)
    O_CBRACKET      reduce using rule 35 (variable -> var_array .)
    TO              reduce using rule 35 (variable -> var_array .)


state 65

    (36) variable -> ID .
    (54) function_id -> ID .
    (40) arr_id -> ID .

    ASSIGN          reduce using rule 36 (variable -> ID .)
    TIMES           reduce using rule 36 (variable -> ID .)
    DIVIDE          reduce using rule 36 (variable -> ID .)
    MODULE          reduce using rule 36 (variable -> ID .)
    PLUS            reduce using rule 36 (variable -> ID .)
    MINUS           reduce using rule 36 (variable -> ID .)
    GREATER         reduce using rule 36 (variable -> ID .)
    LESSER          reduce using rule 36 (variable -> ID .)
    GREATER_EQUAL   reduce using rule 36 (variable -> ID .)
    LESSER_EQUAL    reduce using rule 36 (variable -> ID .)
    EQUAL           reduce using rule 36 (variable -> ID .)
    NOT_EQUAL       reduce using rule 36 (variable -> ID .)
    AND             reduce using rule 36 (variable -> ID .)
    OR              reduce using rule 36 (variable -> ID .)
    SEMICOLON       reduce using rule 36 (variable -> ID .)
    COMMA           reduce using rule 36 (variable -> ID .)
    C_PARENTHESIS   reduce using rule 36 (variable -> ID .)
    C_ABRACKET      reduce using rule 36 (variable -> ID .)
    O_CBRACKET      reduce using rule 36 (variable -> ID .)
    TO              reduce using rule 36 (variable -> ID .)
    O_PARENTHESIS   reduce using rule 54 (function_id -> ID .)
    O_ABRACKET      reduce using rule 40 (arr_id -> ID .)


state 66

    (75) while_prime -> WHILE .

    O_PARENTHESIS   reduce using rule 75 (while_prime -> WHILE .)


state 67

    (37) var_array -> arr_id . O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> arr_id . O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> arr_id . O_ABRACKET exp arr_close_bracket

    O_ABRACKET      shift and go to state 95


state 68

    (2) main -> MAIN O_PARENTHESIS C_PARENTHESIS .

    O_CBRACKET      reduce using rule 2 (main -> MAIN O_PARENTHESIS C_PARENTHESIS .)


state 69

    (27) funcion_base -> FUNCTION funcion_ident O_PARENTHESIS funcion_prime . C_PARENTHESIS declaracion_funcion bloque

    C_PARENTHESIS   shift and go to state 96


state 70

    (28) funcion_prime -> param_tipo .
    (29) funcion_prime -> param_tipo . COMMA funcion_prime

    C_PARENTHESIS   reduce using rule 28 (funcion_prime -> param_tipo .)
    COMMA           shift and go to state 97


state 71

    (21) param_tipo -> INT . ID

    ID              shift and go to state 98


state 72

    (22) param_tipo -> FLOAT . ID

    ID              shift and go to state 99


state 73

    (23) param_tipo -> CHAR . ID

    ID              shift and go to state 100


state 74

    (24) param_tipo -> STRING . ID

    ID              shift and go to state 101


state 75

    (10) declaracion_base -> LET declaracion_prime COLON declaracion_tipo SEMICOLON .

    LET             reduce using rule 10 (declaracion_base -> LET declaracion_prime COLON declaracion_tipo SEMICOLON .)
    FUNCTION        reduce using rule 10 (declaracion_base -> LET declaracion_prime COLON declaracion_tipo SEMICOLON .)
    MAIN            reduce using rule 10 (declaracion_base -> LET declaracion_prime COLON declaracion_tipo SEMICOLON .)
    O_CBRACKET      reduce using rule 10 (declaracion_base -> LET declaracion_prime COLON declaracion_tipo SEMICOLON .)


state 76

    (13) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET . O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (14) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET . O_ABRACKET CTE_INT C_ABRACKET
    (15) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET .

    O_ABRACKET      shift and go to state 102
    COMMA           reduce using rule 15 (declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET .)
    COLON           reduce using rule 15 (declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET .)


state 77

    (3) bloque -> O_CBRACKET bloque_prime C_CBRACKET .

    $end            reduce using rule 3 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    RETURN          reduce using rule 3 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    READ            reduce using rule 3 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    WRITE           reduce using rule 3 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    IF              reduce using rule 3 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    FOR             reduce using rule 3 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    ID              reduce using rule 3 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    WHILE           reduce using rule 3 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    C_CBRACKET      reduce using rule 3 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    FUNCTION        reduce using rule 3 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    MAIN            reduce using rule 3 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    ELSE            reduce using rule 3 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)


state 78

    (4) bloque_prime -> estatuto bloque_prime .

    C_CBRACKET      reduce using rule 4 (bloque_prime -> estatuto bloque_prime .)


state 79

    (43) estatuto -> asignacion SEMICOLON .

    RETURN          reduce using rule 43 (estatuto -> asignacion SEMICOLON .)
    READ            reduce using rule 43 (estatuto -> asignacion SEMICOLON .)
    WRITE           reduce using rule 43 (estatuto -> asignacion SEMICOLON .)
    IF              reduce using rule 43 (estatuto -> asignacion SEMICOLON .)
    FOR             reduce using rule 43 (estatuto -> asignacion SEMICOLON .)
    ID              reduce using rule 43 (estatuto -> asignacion SEMICOLON .)
    WHILE           reduce using rule 43 (estatuto -> asignacion SEMICOLON .)
    C_CBRACKET      reduce using rule 43 (estatuto -> asignacion SEMICOLON .)


state 80

    (44) estatuto -> llamada SEMICOLON .

    RETURN          reduce using rule 44 (estatuto -> llamada SEMICOLON .)
    READ            reduce using rule 44 (estatuto -> llamada SEMICOLON .)
    WRITE           reduce using rule 44 (estatuto -> llamada SEMICOLON .)
    IF              reduce using rule 44 (estatuto -> llamada SEMICOLON .)
    FOR             reduce using rule 44 (estatuto -> llamada SEMICOLON .)
    ID              reduce using rule 44 (estatuto -> llamada SEMICOLON .)
    WHILE           reduce using rule 44 (estatuto -> llamada SEMICOLON .)
    C_CBRACKET      reduce using rule 44 (estatuto -> llamada SEMICOLON .)


state 81

    (45) estatuto -> retorno SEMICOLON .

    RETURN          reduce using rule 45 (estatuto -> retorno SEMICOLON .)
    READ            reduce using rule 45 (estatuto -> retorno SEMICOLON .)
    WRITE           reduce using rule 45 (estatuto -> retorno SEMICOLON .)
    IF              reduce using rule 45 (estatuto -> retorno SEMICOLON .)
    FOR             reduce using rule 45 (estatuto -> retorno SEMICOLON .)
    ID              reduce using rule 45 (estatuto -> retorno SEMICOLON .)
    WHILE           reduce using rule 45 (estatuto -> retorno SEMICOLON .)
    C_CBRACKET      reduce using rule 45 (estatuto -> retorno SEMICOLON .)


state 82

    (46) estatuto -> lectura SEMICOLON .

    RETURN          reduce using rule 46 (estatuto -> lectura SEMICOLON .)
    READ            reduce using rule 46 (estatuto -> lectura SEMICOLON .)
    WRITE           reduce using rule 46 (estatuto -> lectura SEMICOLON .)
    IF              reduce using rule 46 (estatuto -> lectura SEMICOLON .)
    FOR             reduce using rule 46 (estatuto -> lectura SEMICOLON .)
    ID              reduce using rule 46 (estatuto -> lectura SEMICOLON .)
    WHILE           reduce using rule 46 (estatuto -> lectura SEMICOLON .)
    C_CBRACKET      reduce using rule 46 (estatuto -> lectura SEMICOLON .)


state 83

    (47) estatuto -> escritura SEMICOLON .

    RETURN          reduce using rule 47 (estatuto -> escritura SEMICOLON .)
    READ            reduce using rule 47 (estatuto -> escritura SEMICOLON .)
    WRITE           reduce using rule 47 (estatuto -> escritura SEMICOLON .)
    IF              reduce using rule 47 (estatuto -> escritura SEMICOLON .)
    FOR             reduce using rule 47 (estatuto -> escritura SEMICOLON .)
    ID              reduce using rule 47 (estatuto -> escritura SEMICOLON .)
    WHILE           reduce using rule 47 (estatuto -> escritura SEMICOLON .)
    C_CBRACKET      reduce using rule 47 (estatuto -> escritura SEMICOLON .)


state 84

    (51) asignacion -> variable ASSIGN . asignacion_expr
    (52) asignacion_expr -> . expr
    (82) expr -> . or
    (83) or -> . and
    (84) or -> . and or_operador or
    (86) and -> . equal
    (87) and -> . equal and_operador and
    (89) equal -> . compare
    (90) equal -> . compare equal_operador compare
    (93) compare -> . exp
    (94) compare -> . exp compare_operador exp
    (99) exp -> . termino
    (100) exp -> . termino exp_operador exp
    (103) termino -> . factor
    (104) termino -> . factor termino_operador termino
    (108) factor -> . variable
    (109) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (110) factor -> . llamada
    (111) factor -> . cte
    (112) factor -> . PLUS cte
    (113) factor -> . MINUS cte
    (35) variable -> . var_array
    (36) variable -> . ID
    (53) llamada -> . function_id O_PARENTHESIS llamada_prime C_PARENTHESIS
    (114) cte -> . CTE_INT
    (115) cte -> . CTE_FLOAT
    (37) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (54) function_id -> . ID
    (40) arr_id -> . ID

    O_PARENTHESIS   shift and go to state 113
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    ID              shift and go to state 65
    CTE_INT         shift and go to state 118
    CTE_FLOAT       shift and go to state 119

    variable                       shift and go to state 103
    asignacion_expr                shift and go to state 104
    expr                           shift and go to state 105
    or                             shift and go to state 106
    and                            shift and go to state 107
    equal                          shift and go to state 108
    compare                        shift and go to state 109
    exp                            shift and go to state 110
    termino                        shift and go to state 111
    factor                         shift and go to state 112
    llamada                        shift and go to state 114
    cte                            shift and go to state 115
    var_array                      shift and go to state 64
    function_id                    shift and go to state 57
    arr_id                         shift and go to state 67

state 85

    (53) llamada -> function_id O_PARENTHESIS . llamada_prime C_PARENTHESIS
    (55) llamada_prime -> . llamada_exp
    (56) llamada_prime -> . llamada_exp llamada_comma llamada_prime
    (57) llamada_exp -> . exp
    (99) exp -> . termino
    (100) exp -> . termino exp_operador exp
    (103) termino -> . factor
    (104) termino -> . factor termino_operador termino
    (108) factor -> . variable
    (109) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (110) factor -> . llamada
    (111) factor -> . cte
    (112) factor -> . PLUS cte
    (113) factor -> . MINUS cte
    (35) variable -> . var_array
    (36) variable -> . ID
    (53) llamada -> . function_id O_PARENTHESIS llamada_prime C_PARENTHESIS
    (114) cte -> . CTE_INT
    (115) cte -> . CTE_FLOAT
    (37) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (54) function_id -> . ID
    (40) arr_id -> . ID

    O_PARENTHESIS   shift and go to state 113
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    ID              shift and go to state 65
    CTE_INT         shift and go to state 118
    CTE_FLOAT       shift and go to state 119

    function_id                    shift and go to state 57
    llamada_prime                  shift and go to state 120
    llamada_exp                    shift and go to state 121
    exp                            shift and go to state 122
    termino                        shift and go to state 111
    factor                         shift and go to state 112
    variable                       shift and go to state 103
    llamada                        shift and go to state 114
    cte                            shift and go to state 115
    var_array                      shift and go to state 64
    arr_id                         shift and go to state 67

state 86

    (59) retorno -> RETURN O_PARENTHESIS . expr C_PARENTHESIS
    (82) expr -> . or
    (83) or -> . and
    (84) or -> . and or_operador or
    (86) and -> . equal
    (87) and -> . equal and_operador and
    (89) equal -> . compare
    (90) equal -> . compare equal_operador compare
    (93) compare -> . exp
    (94) compare -> . exp compare_operador exp
    (99) exp -> . termino
    (100) exp -> . termino exp_operador exp
    (103) termino -> . factor
    (104) termino -> . factor termino_operador termino
    (108) factor -> . variable
    (109) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (110) factor -> . llamada
    (111) factor -> . cte
    (112) factor -> . PLUS cte
    (113) factor -> . MINUS cte
    (35) variable -> . var_array
    (36) variable -> . ID
    (53) llamada -> . function_id O_PARENTHESIS llamada_prime C_PARENTHESIS
    (114) cte -> . CTE_INT
    (115) cte -> . CTE_FLOAT
    (37) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (54) function_id -> . ID
    (40) arr_id -> . ID

    O_PARENTHESIS   shift and go to state 113
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    ID              shift and go to state 65
    CTE_INT         shift and go to state 118
    CTE_FLOAT       shift and go to state 119

    expr                           shift and go to state 123
    or                             shift and go to state 106
    and                            shift and go to state 107
    equal                          shift and go to state 108
    compare                        shift and go to state 109
    exp                            shift and go to state 110
    termino                        shift and go to state 111
    factor                         shift and go to state 112
    variable                       shift and go to state 103
    llamada                        shift and go to state 114
    cte                            shift and go to state 115
    var_array                      shift and go to state 64
    function_id                    shift and go to state 57
    arr_id                         shift and go to state 67

state 87

    (60) lectura -> READ O_PARENTHESIS . lectura_prime C_PARENTHESIS
    (61) lectura_prime -> . variable
    (62) lectura_prime -> . variable COMMA lectura_prime
    (35) variable -> . var_array
    (36) variable -> . ID
    (37) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (40) arr_id -> . ID

    ID              shift and go to state 94

    lectura_prime                  shift and go to state 124
    variable                       shift and go to state 125
    var_array                      shift and go to state 64
    arr_id                         shift and go to state 67

state 88

    (63) escritura -> WRITE O_PARENTHESIS . escritura_prime C_PARENTHESIS
    (64) escritura_prime -> . expr
    (65) escritura_prime -> . escritura_string
    (66) escritura_prime -> . expr COMMA escritura_prime
    (67) escritura_prime -> . escritura_string COMMA escritura_prime
    (82) expr -> . or
    (68) escritura_string -> . CTE_STRING
    (83) or -> . and
    (84) or -> . and or_operador or
    (86) and -> . equal
    (87) and -> . equal and_operador and
    (89) equal -> . compare
    (90) equal -> . compare equal_operador compare
    (93) compare -> . exp
    (94) compare -> . exp compare_operador exp
    (99) exp -> . termino
    (100) exp -> . termino exp_operador exp
    (103) termino -> . factor
    (104) termino -> . factor termino_operador termino
    (108) factor -> . variable
    (109) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (110) factor -> . llamada
    (111) factor -> . cte
    (112) factor -> . PLUS cte
    (113) factor -> . MINUS cte
    (35) variable -> . var_array
    (36) variable -> . ID
    (53) llamada -> . function_id O_PARENTHESIS llamada_prime C_PARENTHESIS
    (114) cte -> . CTE_INT
    (115) cte -> . CTE_FLOAT
    (37) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (54) function_id -> . ID
    (40) arr_id -> . ID

    CTE_STRING      shift and go to state 129
    O_PARENTHESIS   shift and go to state 113
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    ID              shift and go to state 65
    CTE_INT         shift and go to state 118
    CTE_FLOAT       shift and go to state 119

    escritura_prime                shift and go to state 126
    expr                           shift and go to state 127
    escritura_string               shift and go to state 128
    or                             shift and go to state 106
    and                            shift and go to state 107
    equal                          shift and go to state 108
    compare                        shift and go to state 109
    exp                            shift and go to state 110
    termino                        shift and go to state 111
    factor                         shift and go to state 112
    variable                       shift and go to state 103
    llamada                        shift and go to state 114
    cte                            shift and go to state 115
    var_array                      shift and go to state 64
    function_id                    shift and go to state 57
    arr_id                         shift and go to state 67

state 89

    (69) decision -> IF O_PARENTHESIS . decision_expr C_PARENTHESIS bloque else
    (70) decision_expr -> . expr
    (82) expr -> . or
    (83) or -> . and
    (84) or -> . and or_operador or
    (86) and -> . equal
    (87) and -> . equal and_operador and
    (89) equal -> . compare
    (90) equal -> . compare equal_operador compare
    (93) compare -> . exp
    (94) compare -> . exp compare_operador exp
    (99) exp -> . termino
    (100) exp -> . termino exp_operador exp
    (103) termino -> . factor
    (104) termino -> . factor termino_operador termino
    (108) factor -> . variable
    (109) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (110) factor -> . llamada
    (111) factor -> . cte
    (112) factor -> . PLUS cte
    (113) factor -> . MINUS cte
    (35) variable -> . var_array
    (36) variable -> . ID
    (53) llamada -> . function_id O_PARENTHESIS llamada_prime C_PARENTHESIS
    (114) cte -> . CTE_INT
    (115) cte -> . CTE_FLOAT
    (37) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (54) function_id -> . ID
    (40) arr_id -> . ID

    O_PARENTHESIS   shift and go to state 113
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    ID              shift and go to state 65
    CTE_INT         shift and go to state 118
    CTE_FLOAT       shift and go to state 119

    decision_expr                  shift and go to state 130
    expr                           shift and go to state 131
    or                             shift and go to state 106
    and                            shift and go to state 107
    equal                          shift and go to state 108
    compare                        shift and go to state 109
    exp                            shift and go to state 110
    termino                        shift and go to state 111
    factor                         shift and go to state 112
    variable                       shift and go to state 103
    llamada                        shift and go to state 114
    cte                            shift and go to state 115
    var_array                      shift and go to state 64
    function_id                    shift and go to state 57
    arr_id                         shift and go to state 67

state 90

    (74) while -> while_prime while_expr . bloque
    (3) bloque -> . O_CBRACKET bloque_prime C_CBRACKET

    O_CBRACKET      shift and go to state 30

    bloque                         shift and go to state 132

state 91

    (76) while_expr -> O_PARENTHESIS . expr C_PARENTHESIS
    (82) expr -> . or
    (83) or -> . and
    (84) or -> . and or_operador or
    (86) and -> . equal
    (87) and -> . equal and_operador and
    (89) equal -> . compare
    (90) equal -> . compare equal_operador compare
    (93) compare -> . exp
    (94) compare -> . exp compare_operador exp
    (99) exp -> . termino
    (100) exp -> . termino exp_operador exp
    (103) termino -> . factor
    (104) termino -> . factor termino_operador termino
    (108) factor -> . variable
    (109) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (110) factor -> . llamada
    (111) factor -> . cte
    (112) factor -> . PLUS cte
    (113) factor -> . MINUS cte
    (35) variable -> . var_array
    (36) variable -> . ID
    (53) llamada -> . function_id O_PARENTHESIS llamada_prime C_PARENTHESIS
    (114) cte -> . CTE_INT
    (115) cte -> . CTE_FLOAT
    (37) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (54) function_id -> . ID
    (40) arr_id -> . ID

    O_PARENTHESIS   shift and go to state 113
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    ID              shift and go to state 65
    CTE_INT         shift and go to state 118
    CTE_FLOAT       shift and go to state 119

    expr                           shift and go to state 133
    or                             shift and go to state 106
    and                            shift and go to state 107
    equal                          shift and go to state 108
    compare                        shift and go to state 109
    exp                            shift and go to state 110
    termino                        shift and go to state 111
    factor                         shift and go to state 112
    variable                       shift and go to state 103
    llamada                        shift and go to state 114
    cte                            shift and go to state 115
    var_array                      shift and go to state 64
    function_id                    shift and go to state 57
    arr_id                         shift and go to state 67

state 92

    (77) for -> FOR for_asignacion . for_to for_exp bloque
    (80) for_to -> . TO

    TO              shift and go to state 135

    for_to                         shift and go to state 134

state 93

    (78) for_asignacion -> variable . ASSIGN for_asignacion_expr

    ASSIGN          shift and go to state 136


state 94

    (36) variable -> ID .
    (40) arr_id -> ID .

    ASSIGN          reduce using rule 36 (variable -> ID .)
    COMMA           reduce using rule 36 (variable -> ID .)
    C_PARENTHESIS   reduce using rule 36 (variable -> ID .)
    O_ABRACKET      reduce using rule 40 (arr_id -> ID .)


state 95

    (37) var_array -> arr_id O_ABRACKET . exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> arr_id O_ABRACKET . exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> arr_id O_ABRACKET . exp arr_close_bracket
    (99) exp -> . termino
    (100) exp -> . termino exp_operador exp
    (103) termino -> . factor
    (104) termino -> . factor termino_operador termino
    (108) factor -> . variable
    (109) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (110) factor -> . llamada
    (111) factor -> . cte
    (112) factor -> . PLUS cte
    (113) factor -> . MINUS cte
    (35) variable -> . var_array
    (36) variable -> . ID
    (53) llamada -> . function_id O_PARENTHESIS llamada_prime C_PARENTHESIS
    (114) cte -> . CTE_INT
    (115) cte -> . CTE_FLOAT
    (37) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (54) function_id -> . ID
    (40) arr_id -> . ID

    O_PARENTHESIS   shift and go to state 113
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    ID              shift and go to state 65
    CTE_INT         shift and go to state 118
    CTE_FLOAT       shift and go to state 119

    arr_id                         shift and go to state 67
    exp                            shift and go to state 137
    termino                        shift and go to state 111
    factor                         shift and go to state 112
    variable                       shift and go to state 103
    llamada                        shift and go to state 114
    cte                            shift and go to state 115
    var_array                      shift and go to state 64
    function_id                    shift and go to state 57

state 96

    (27) funcion_base -> FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS . declaracion_funcion bloque
    (6) declaracion_funcion -> . declaracion
    (8) declaracion -> . declaracion_base
    (9) declaracion -> . declaracion_base declaracion
    (10) declaracion_base -> . LET declaracion_prime COLON declaracion_tipo SEMICOLON

    LET             shift and go to state 8

    declaracion_funcion            shift and go to state 138
    declaracion                    shift and go to state 139
    declaracion_base               shift and go to state 7

state 97

    (29) funcion_prime -> param_tipo COMMA . funcion_prime
    (28) funcion_prime -> . param_tipo
    (29) funcion_prime -> . param_tipo COMMA funcion_prime
    (21) param_tipo -> . INT ID
    (22) param_tipo -> . FLOAT ID
    (23) param_tipo -> . CHAR ID
    (24) param_tipo -> . STRING ID

    INT             shift and go to state 71
    FLOAT           shift and go to state 72
    CHAR            shift and go to state 73
    STRING          shift and go to state 74

    param_tipo                     shift and go to state 70
    funcion_prime                  shift and go to state 140

state 98

    (21) param_tipo -> INT ID .

    COMMA           reduce using rule 21 (param_tipo -> INT ID .)
    C_PARENTHESIS   reduce using rule 21 (param_tipo -> INT ID .)


state 99

    (22) param_tipo -> FLOAT ID .

    COMMA           reduce using rule 22 (param_tipo -> FLOAT ID .)
    C_PARENTHESIS   reduce using rule 22 (param_tipo -> FLOAT ID .)


state 100

    (23) param_tipo -> CHAR ID .

    COMMA           reduce using rule 23 (param_tipo -> CHAR ID .)
    C_PARENTHESIS   reduce using rule 23 (param_tipo -> CHAR ID .)


state 101

    (24) param_tipo -> STRING ID .

    COMMA           reduce using rule 24 (param_tipo -> STRING ID .)
    C_PARENTHESIS   reduce using rule 24 (param_tipo -> STRING ID .)


state 102

    (13) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET . CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (14) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET . CTE_INT C_ABRACKET

    CTE_INT         shift and go to state 141


state 103

    (108) factor -> variable .

    TIMES           reduce using rule 108 (factor -> variable .)
    DIVIDE          reduce using rule 108 (factor -> variable .)
    MODULE          reduce using rule 108 (factor -> variable .)
    PLUS            reduce using rule 108 (factor -> variable .)
    MINUS           reduce using rule 108 (factor -> variable .)
    GREATER         reduce using rule 108 (factor -> variable .)
    LESSER          reduce using rule 108 (factor -> variable .)
    GREATER_EQUAL   reduce using rule 108 (factor -> variable .)
    LESSER_EQUAL    reduce using rule 108 (factor -> variable .)
    EQUAL           reduce using rule 108 (factor -> variable .)
    NOT_EQUAL       reduce using rule 108 (factor -> variable .)
    AND             reduce using rule 108 (factor -> variable .)
    OR              reduce using rule 108 (factor -> variable .)
    SEMICOLON       reduce using rule 108 (factor -> variable .)
    COMMA           reduce using rule 108 (factor -> variable .)
    C_PARENTHESIS   reduce using rule 108 (factor -> variable .)
    C_ABRACKET      reduce using rule 108 (factor -> variable .)
    O_CBRACKET      reduce using rule 108 (factor -> variable .)
    TO              reduce using rule 108 (factor -> variable .)


state 104

    (51) asignacion -> variable ASSIGN asignacion_expr .

    SEMICOLON       reduce using rule 51 (asignacion -> variable ASSIGN asignacion_expr .)


state 105

    (52) asignacion_expr -> expr .

    SEMICOLON       reduce using rule 52 (asignacion_expr -> expr .)


state 106

    (82) expr -> or .

    SEMICOLON       reduce using rule 82 (expr -> or .)
    C_PARENTHESIS   reduce using rule 82 (expr -> or .)
    COMMA           reduce using rule 82 (expr -> or .)
    TO              reduce using rule 82 (expr -> or .)


state 107

    (83) or -> and .
    (84) or -> and . or_operador or
    (85) or_operador -> . OR

    SEMICOLON       reduce using rule 83 (or -> and .)
    C_PARENTHESIS   reduce using rule 83 (or -> and .)
    COMMA           reduce using rule 83 (or -> and .)
    TO              reduce using rule 83 (or -> and .)
    OR              shift and go to state 143

    or_operador                    shift and go to state 142

state 108

    (86) and -> equal .
    (87) and -> equal . and_operador and
    (88) and_operador -> . AND

    OR              reduce using rule 86 (and -> equal .)
    SEMICOLON       reduce using rule 86 (and -> equal .)
    C_PARENTHESIS   reduce using rule 86 (and -> equal .)
    COMMA           reduce using rule 86 (and -> equal .)
    TO              reduce using rule 86 (and -> equal .)
    AND             shift and go to state 145

    and_operador                   shift and go to state 144

state 109

    (89) equal -> compare .
    (90) equal -> compare . equal_operador compare
    (91) equal_operador -> . EQUAL
    (92) equal_operador -> . NOT_EQUAL

    AND             reduce using rule 89 (equal -> compare .)
    OR              reduce using rule 89 (equal -> compare .)
    SEMICOLON       reduce using rule 89 (equal -> compare .)
    C_PARENTHESIS   reduce using rule 89 (equal -> compare .)
    COMMA           reduce using rule 89 (equal -> compare .)
    TO              reduce using rule 89 (equal -> compare .)
    EQUAL           shift and go to state 147
    NOT_EQUAL       shift and go to state 148

    equal_operador                 shift and go to state 146

state 110

    (93) compare -> exp .
    (94) compare -> exp . compare_operador exp
    (95) compare_operador -> . GREATER
    (96) compare_operador -> . LESSER
    (97) compare_operador -> . GREATER_EQUAL
    (98) compare_operador -> . LESSER_EQUAL

    EQUAL           reduce using rule 93 (compare -> exp .)
    NOT_EQUAL       reduce using rule 93 (compare -> exp .)
    AND             reduce using rule 93 (compare -> exp .)
    OR              reduce using rule 93 (compare -> exp .)
    SEMICOLON       reduce using rule 93 (compare -> exp .)
    C_PARENTHESIS   reduce using rule 93 (compare -> exp .)
    COMMA           reduce using rule 93 (compare -> exp .)
    TO              reduce using rule 93 (compare -> exp .)
    GREATER         shift and go to state 150
    LESSER          shift and go to state 151
    GREATER_EQUAL   shift and go to state 152
    LESSER_EQUAL    shift and go to state 153

    compare_operador               shift and go to state 149

state 111

    (99) exp -> termino .
    (100) exp -> termino . exp_operador exp
    (101) exp_operador -> . PLUS
    (102) exp_operador -> . MINUS

    GREATER         reduce using rule 99 (exp -> termino .)
    LESSER          reduce using rule 99 (exp -> termino .)
    GREATER_EQUAL   reduce using rule 99 (exp -> termino .)
    LESSER_EQUAL    reduce using rule 99 (exp -> termino .)
    EQUAL           reduce using rule 99 (exp -> termino .)
    NOT_EQUAL       reduce using rule 99 (exp -> termino .)
    AND             reduce using rule 99 (exp -> termino .)
    OR              reduce using rule 99 (exp -> termino .)
    SEMICOLON       reduce using rule 99 (exp -> termino .)
    COMMA           reduce using rule 99 (exp -> termino .)
    C_PARENTHESIS   reduce using rule 99 (exp -> termino .)
    C_ABRACKET      reduce using rule 99 (exp -> termino .)
    O_CBRACKET      reduce using rule 99 (exp -> termino .)
    TO              reduce using rule 99 (exp -> termino .)
    PLUS            shift and go to state 155
    MINUS           shift and go to state 156

    exp_operador                   shift and go to state 154

state 112

    (103) termino -> factor .
    (104) termino -> factor . termino_operador termino
    (105) termino_operador -> . TIMES
    (106) termino_operador -> . DIVIDE
    (107) termino_operador -> . MODULE

    PLUS            reduce using rule 103 (termino -> factor .)
    MINUS           reduce using rule 103 (termino -> factor .)
    GREATER         reduce using rule 103 (termino -> factor .)
    LESSER          reduce using rule 103 (termino -> factor .)
    GREATER_EQUAL   reduce using rule 103 (termino -> factor .)
    LESSER_EQUAL    reduce using rule 103 (termino -> factor .)
    EQUAL           reduce using rule 103 (termino -> factor .)
    NOT_EQUAL       reduce using rule 103 (termino -> factor .)
    AND             reduce using rule 103 (termino -> factor .)
    OR              reduce using rule 103 (termino -> factor .)
    SEMICOLON       reduce using rule 103 (termino -> factor .)
    COMMA           reduce using rule 103 (termino -> factor .)
    C_PARENTHESIS   reduce using rule 103 (termino -> factor .)
    C_ABRACKET      reduce using rule 103 (termino -> factor .)
    O_CBRACKET      reduce using rule 103 (termino -> factor .)
    TO              reduce using rule 103 (termino -> factor .)
    TIMES           shift and go to state 158
    DIVIDE          shift and go to state 159
    MODULE          shift and go to state 160

    termino_operador               shift and go to state 157

state 113

    (109) factor -> O_PARENTHESIS . expr C_PARENTHESIS
    (82) expr -> . or
    (83) or -> . and
    (84) or -> . and or_operador or
    (86) and -> . equal
    (87) and -> . equal and_operador and
    (89) equal -> . compare
    (90) equal -> . compare equal_operador compare
    (93) compare -> . exp
    (94) compare -> . exp compare_operador exp
    (99) exp -> . termino
    (100) exp -> . termino exp_operador exp
    (103) termino -> . factor
    (104) termino -> . factor termino_operador termino
    (108) factor -> . variable
    (109) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (110) factor -> . llamada
    (111) factor -> . cte
    (112) factor -> . PLUS cte
    (113) factor -> . MINUS cte
    (35) variable -> . var_array
    (36) variable -> . ID
    (53) llamada -> . function_id O_PARENTHESIS llamada_prime C_PARENTHESIS
    (114) cte -> . CTE_INT
    (115) cte -> . CTE_FLOAT
    (37) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (54) function_id -> . ID
    (40) arr_id -> . ID

    O_PARENTHESIS   shift and go to state 113
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    ID              shift and go to state 65
    CTE_INT         shift and go to state 118
    CTE_FLOAT       shift and go to state 119

    expr                           shift and go to state 161
    or                             shift and go to state 106
    and                            shift and go to state 107
    equal                          shift and go to state 108
    compare                        shift and go to state 109
    exp                            shift and go to state 110
    termino                        shift and go to state 111
    factor                         shift and go to state 112
    variable                       shift and go to state 103
    llamada                        shift and go to state 114
    cte                            shift and go to state 115
    var_array                      shift and go to state 64
    function_id                    shift and go to state 57
    arr_id                         shift and go to state 67

state 114

    (110) factor -> llamada .

    TIMES           reduce using rule 110 (factor -> llamada .)
    DIVIDE          reduce using rule 110 (factor -> llamada .)
    MODULE          reduce using rule 110 (factor -> llamada .)
    PLUS            reduce using rule 110 (factor -> llamada .)
    MINUS           reduce using rule 110 (factor -> llamada .)
    GREATER         reduce using rule 110 (factor -> llamada .)
    LESSER          reduce using rule 110 (factor -> llamada .)
    GREATER_EQUAL   reduce using rule 110 (factor -> llamada .)
    LESSER_EQUAL    reduce using rule 110 (factor -> llamada .)
    EQUAL           reduce using rule 110 (factor -> llamada .)
    NOT_EQUAL       reduce using rule 110 (factor -> llamada .)
    AND             reduce using rule 110 (factor -> llamada .)
    OR              reduce using rule 110 (factor -> llamada .)
    SEMICOLON       reduce using rule 110 (factor -> llamada .)
    COMMA           reduce using rule 110 (factor -> llamada .)
    C_PARENTHESIS   reduce using rule 110 (factor -> llamada .)
    C_ABRACKET      reduce using rule 110 (factor -> llamada .)
    O_CBRACKET      reduce using rule 110 (factor -> llamada .)
    TO              reduce using rule 110 (factor -> llamada .)


state 115

    (111) factor -> cte .

    TIMES           reduce using rule 111 (factor -> cte .)
    DIVIDE          reduce using rule 111 (factor -> cte .)
    MODULE          reduce using rule 111 (factor -> cte .)
    PLUS            reduce using rule 111 (factor -> cte .)
    MINUS           reduce using rule 111 (factor -> cte .)
    GREATER         reduce using rule 111 (factor -> cte .)
    LESSER          reduce using rule 111 (factor -> cte .)
    GREATER_EQUAL   reduce using rule 111 (factor -> cte .)
    LESSER_EQUAL    reduce using rule 111 (factor -> cte .)
    EQUAL           reduce using rule 111 (factor -> cte .)
    NOT_EQUAL       reduce using rule 111 (factor -> cte .)
    AND             reduce using rule 111 (factor -> cte .)
    OR              reduce using rule 111 (factor -> cte .)
    SEMICOLON       reduce using rule 111 (factor -> cte .)
    COMMA           reduce using rule 111 (factor -> cte .)
    C_PARENTHESIS   reduce using rule 111 (factor -> cte .)
    C_ABRACKET      reduce using rule 111 (factor -> cte .)
    O_CBRACKET      reduce using rule 111 (factor -> cte .)
    TO              reduce using rule 111 (factor -> cte .)


state 116

    (112) factor -> PLUS . cte
    (114) cte -> . CTE_INT
    (115) cte -> . CTE_FLOAT

    CTE_INT         shift and go to state 118
    CTE_FLOAT       shift and go to state 119

    cte                            shift and go to state 162

state 117

    (113) factor -> MINUS . cte
    (114) cte -> . CTE_INT
    (115) cte -> . CTE_FLOAT

    CTE_INT         shift and go to state 118
    CTE_FLOAT       shift and go to state 119

    cte                            shift and go to state 163

state 118

    (114) cte -> CTE_INT .

    TIMES           reduce using rule 114 (cte -> CTE_INT .)
    DIVIDE          reduce using rule 114 (cte -> CTE_INT .)
    MODULE          reduce using rule 114 (cte -> CTE_INT .)
    PLUS            reduce using rule 114 (cte -> CTE_INT .)
    MINUS           reduce using rule 114 (cte -> CTE_INT .)
    GREATER         reduce using rule 114 (cte -> CTE_INT .)
    LESSER          reduce using rule 114 (cte -> CTE_INT .)
    GREATER_EQUAL   reduce using rule 114 (cte -> CTE_INT .)
    LESSER_EQUAL    reduce using rule 114 (cte -> CTE_INT .)
    EQUAL           reduce using rule 114 (cte -> CTE_INT .)
    NOT_EQUAL       reduce using rule 114 (cte -> CTE_INT .)
    AND             reduce using rule 114 (cte -> CTE_INT .)
    OR              reduce using rule 114 (cte -> CTE_INT .)
    SEMICOLON       reduce using rule 114 (cte -> CTE_INT .)
    COMMA           reduce using rule 114 (cte -> CTE_INT .)
    C_PARENTHESIS   reduce using rule 114 (cte -> CTE_INT .)
    C_ABRACKET      reduce using rule 114 (cte -> CTE_INT .)
    O_CBRACKET      reduce using rule 114 (cte -> CTE_INT .)
    TO              reduce using rule 114 (cte -> CTE_INT .)


state 119

    (115) cte -> CTE_FLOAT .

    TIMES           reduce using rule 115 (cte -> CTE_FLOAT .)
    DIVIDE          reduce using rule 115 (cte -> CTE_FLOAT .)
    MODULE          reduce using rule 115 (cte -> CTE_FLOAT .)
    PLUS            reduce using rule 115 (cte -> CTE_FLOAT .)
    MINUS           reduce using rule 115 (cte -> CTE_FLOAT .)
    GREATER         reduce using rule 115 (cte -> CTE_FLOAT .)
    LESSER          reduce using rule 115 (cte -> CTE_FLOAT .)
    GREATER_EQUAL   reduce using rule 115 (cte -> CTE_FLOAT .)
    LESSER_EQUAL    reduce using rule 115 (cte -> CTE_FLOAT .)
    EQUAL           reduce using rule 115 (cte -> CTE_FLOAT .)
    NOT_EQUAL       reduce using rule 115 (cte -> CTE_FLOAT .)
    AND             reduce using rule 115 (cte -> CTE_FLOAT .)
    OR              reduce using rule 115 (cte -> CTE_FLOAT .)
    SEMICOLON       reduce using rule 115 (cte -> CTE_FLOAT .)
    COMMA           reduce using rule 115 (cte -> CTE_FLOAT .)
    C_PARENTHESIS   reduce using rule 115 (cte -> CTE_FLOAT .)
    C_ABRACKET      reduce using rule 115 (cte -> CTE_FLOAT .)
    O_CBRACKET      reduce using rule 115 (cte -> CTE_FLOAT .)
    TO              reduce using rule 115 (cte -> CTE_FLOAT .)


state 120

    (53) llamada -> function_id O_PARENTHESIS llamada_prime . C_PARENTHESIS

    C_PARENTHESIS   shift and go to state 164


state 121

    (55) llamada_prime -> llamada_exp .
    (56) llamada_prime -> llamada_exp . llamada_comma llamada_prime
    (58) llamada_comma -> . COMMA

    C_PARENTHESIS   reduce using rule 55 (llamada_prime -> llamada_exp .)
    COMMA           shift and go to state 166

    llamada_comma                  shift and go to state 165

state 122

    (57) llamada_exp -> exp .

    COMMA           reduce using rule 57 (llamada_exp -> exp .)
    C_PARENTHESIS   reduce using rule 57 (llamada_exp -> exp .)


state 123

    (59) retorno -> RETURN O_PARENTHESIS expr . C_PARENTHESIS

    C_PARENTHESIS   shift and go to state 167


state 124

    (60) lectura -> READ O_PARENTHESIS lectura_prime . C_PARENTHESIS

    C_PARENTHESIS   shift and go to state 168


state 125

    (61) lectura_prime -> variable .
    (62) lectura_prime -> variable . COMMA lectura_prime

    C_PARENTHESIS   reduce using rule 61 (lectura_prime -> variable .)
    COMMA           shift and go to state 169


state 126

    (63) escritura -> WRITE O_PARENTHESIS escritura_prime . C_PARENTHESIS

    C_PARENTHESIS   shift and go to state 170


state 127

    (64) escritura_prime -> expr .
    (66) escritura_prime -> expr . COMMA escritura_prime

    C_PARENTHESIS   reduce using rule 64 (escritura_prime -> expr .)
    COMMA           shift and go to state 171


state 128

    (65) escritura_prime -> escritura_string .
    (67) escritura_prime -> escritura_string . COMMA escritura_prime

    C_PARENTHESIS   reduce using rule 65 (escritura_prime -> escritura_string .)
    COMMA           shift and go to state 172


state 129

    (68) escritura_string -> CTE_STRING .

    COMMA           reduce using rule 68 (escritura_string -> CTE_STRING .)
    C_PARENTHESIS   reduce using rule 68 (escritura_string -> CTE_STRING .)


state 130

    (69) decision -> IF O_PARENTHESIS decision_expr . C_PARENTHESIS bloque else

    C_PARENTHESIS   shift and go to state 173


state 131

    (70) decision_expr -> expr .

    C_PARENTHESIS   reduce using rule 70 (decision_expr -> expr .)


state 132

    (74) while -> while_prime while_expr bloque .

    RETURN          reduce using rule 74 (while -> while_prime while_expr bloque .)
    READ            reduce using rule 74 (while -> while_prime while_expr bloque .)
    WRITE           reduce using rule 74 (while -> while_prime while_expr bloque .)
    IF              reduce using rule 74 (while -> while_prime while_expr bloque .)
    FOR             reduce using rule 74 (while -> while_prime while_expr bloque .)
    ID              reduce using rule 74 (while -> while_prime while_expr bloque .)
    WHILE           reduce using rule 74 (while -> while_prime while_expr bloque .)
    C_CBRACKET      reduce using rule 74 (while -> while_prime while_expr bloque .)


state 133

    (76) while_expr -> O_PARENTHESIS expr . C_PARENTHESIS

    C_PARENTHESIS   shift and go to state 174


state 134

    (77) for -> FOR for_asignacion for_to . for_exp bloque
    (81) for_exp -> . exp
    (99) exp -> . termino
    (100) exp -> . termino exp_operador exp
    (103) termino -> . factor
    (104) termino -> . factor termino_operador termino
    (108) factor -> . variable
    (109) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (110) factor -> . llamada
    (111) factor -> . cte
    (112) factor -> . PLUS cte
    (113) factor -> . MINUS cte
    (35) variable -> . var_array
    (36) variable -> . ID
    (53) llamada -> . function_id O_PARENTHESIS llamada_prime C_PARENTHESIS
    (114) cte -> . CTE_INT
    (115) cte -> . CTE_FLOAT
    (37) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (54) function_id -> . ID
    (40) arr_id -> . ID

    O_PARENTHESIS   shift and go to state 113
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    ID              shift and go to state 65
    CTE_INT         shift and go to state 118
    CTE_FLOAT       shift and go to state 119

    for_exp                        shift and go to state 175
    exp                            shift and go to state 176
    termino                        shift and go to state 111
    factor                         shift and go to state 112
    variable                       shift and go to state 103
    llamada                        shift and go to state 114
    cte                            shift and go to state 115
    var_array                      shift and go to state 64
    function_id                    shift and go to state 57
    arr_id                         shift and go to state 67

state 135

    (80) for_to -> TO .

    O_PARENTHESIS   reduce using rule 80 (for_to -> TO .)
    PLUS            reduce using rule 80 (for_to -> TO .)
    MINUS           reduce using rule 80 (for_to -> TO .)
    ID              reduce using rule 80 (for_to -> TO .)
    CTE_INT         reduce using rule 80 (for_to -> TO .)
    CTE_FLOAT       reduce using rule 80 (for_to -> TO .)


state 136

    (78) for_asignacion -> variable ASSIGN . for_asignacion_expr
    (79) for_asignacion_expr -> . expr
    (82) expr -> . or
    (83) or -> . and
    (84) or -> . and or_operador or
    (86) and -> . equal
    (87) and -> . equal and_operador and
    (89) equal -> . compare
    (90) equal -> . compare equal_operador compare
    (93) compare -> . exp
    (94) compare -> . exp compare_operador exp
    (99) exp -> . termino
    (100) exp -> . termino exp_operador exp
    (103) termino -> . factor
    (104) termino -> . factor termino_operador termino
    (108) factor -> . variable
    (109) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (110) factor -> . llamada
    (111) factor -> . cte
    (112) factor -> . PLUS cte
    (113) factor -> . MINUS cte
    (35) variable -> . var_array
    (36) variable -> . ID
    (53) llamada -> . function_id O_PARENTHESIS llamada_prime C_PARENTHESIS
    (114) cte -> . CTE_INT
    (115) cte -> . CTE_FLOAT
    (37) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (54) function_id -> . ID
    (40) arr_id -> . ID

    O_PARENTHESIS   shift and go to state 113
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    ID              shift and go to state 65
    CTE_INT         shift and go to state 118
    CTE_FLOAT       shift and go to state 119

    variable                       shift and go to state 103
    for_asignacion_expr            shift and go to state 177
    expr                           shift and go to state 178
    or                             shift and go to state 106
    and                            shift and go to state 107
    equal                          shift and go to state 108
    compare                        shift and go to state 109
    exp                            shift and go to state 110
    termino                        shift and go to state 111
    factor                         shift and go to state 112
    llamada                        shift and go to state 114
    cte                            shift and go to state 115
    var_array                      shift and go to state 64
    function_id                    shift and go to state 57
    arr_id                         shift and go to state 67

state 137

    (37) var_array -> arr_id O_ABRACKET exp . arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> arr_id O_ABRACKET exp . arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> arr_id O_ABRACKET exp . arr_close_bracket
    (41) arr_close_bracket -> . C_ABRACKET

    C_ABRACKET      shift and go to state 180

    arr_close_bracket              shift and go to state 179

state 138

    (27) funcion_base -> FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion . bloque
    (3) bloque -> . O_CBRACKET bloque_prime C_CBRACKET

    O_CBRACKET      shift and go to state 30

    bloque                         shift and go to state 181

state 139

    (6) declaracion_funcion -> declaracion .

    O_CBRACKET      reduce using rule 6 (declaracion_funcion -> declaracion .)


state 140

    (29) funcion_prime -> param_tipo COMMA funcion_prime .

    C_PARENTHESIS   reduce using rule 29 (funcion_prime -> param_tipo COMMA funcion_prime .)


state 141

    (13) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT . C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (14) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT . C_ABRACKET

    C_ABRACKET      shift and go to state 182


state 142

    (84) or -> and or_operador . or
    (83) or -> . and
    (84) or -> . and or_operador or
    (86) and -> . equal
    (87) and -> . equal and_operador and
    (89) equal -> . compare
    (90) equal -> . compare equal_operador compare
    (93) compare -> . exp
    (94) compare -> . exp compare_operador exp
    (99) exp -> . termino
    (100) exp -> . termino exp_operador exp
    (103) termino -> . factor
    (104) termino -> . factor termino_operador termino
    (108) factor -> . variable
    (109) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (110) factor -> . llamada
    (111) factor -> . cte
    (112) factor -> . PLUS cte
    (113) factor -> . MINUS cte
    (35) variable -> . var_array
    (36) variable -> . ID
    (53) llamada -> . function_id O_PARENTHESIS llamada_prime C_PARENTHESIS
    (114) cte -> . CTE_INT
    (115) cte -> . CTE_FLOAT
    (37) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (54) function_id -> . ID
    (40) arr_id -> . ID

    O_PARENTHESIS   shift and go to state 113
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    ID              shift and go to state 65
    CTE_INT         shift and go to state 118
    CTE_FLOAT       shift and go to state 119

    and                            shift and go to state 107
    or                             shift and go to state 183
    equal                          shift and go to state 108
    compare                        shift and go to state 109
    exp                            shift and go to state 110
    termino                        shift and go to state 111
    factor                         shift and go to state 112
    variable                       shift and go to state 103
    llamada                        shift and go to state 114
    cte                            shift and go to state 115
    var_array                      shift and go to state 64
    function_id                    shift and go to state 57
    arr_id                         shift and go to state 67

state 143

    (85) or_operador -> OR .

    O_PARENTHESIS   reduce using rule 85 (or_operador -> OR .)
    PLUS            reduce using rule 85 (or_operador -> OR .)
    MINUS           reduce using rule 85 (or_operador -> OR .)
    ID              reduce using rule 85 (or_operador -> OR .)
    CTE_INT         reduce using rule 85 (or_operador -> OR .)
    CTE_FLOAT       reduce using rule 85 (or_operador -> OR .)


state 144

    (87) and -> equal and_operador . and
    (86) and -> . equal
    (87) and -> . equal and_operador and
    (89) equal -> . compare
    (90) equal -> . compare equal_operador compare
    (93) compare -> . exp
    (94) compare -> . exp compare_operador exp
    (99) exp -> . termino
    (100) exp -> . termino exp_operador exp
    (103) termino -> . factor
    (104) termino -> . factor termino_operador termino
    (108) factor -> . variable
    (109) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (110) factor -> . llamada
    (111) factor -> . cte
    (112) factor -> . PLUS cte
    (113) factor -> . MINUS cte
    (35) variable -> . var_array
    (36) variable -> . ID
    (53) llamada -> . function_id O_PARENTHESIS llamada_prime C_PARENTHESIS
    (114) cte -> . CTE_INT
    (115) cte -> . CTE_FLOAT
    (37) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (54) function_id -> . ID
    (40) arr_id -> . ID

    O_PARENTHESIS   shift and go to state 113
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    ID              shift and go to state 65
    CTE_INT         shift and go to state 118
    CTE_FLOAT       shift and go to state 119

    equal                          shift and go to state 108
    and                            shift and go to state 184
    compare                        shift and go to state 109
    exp                            shift and go to state 110
    termino                        shift and go to state 111
    factor                         shift and go to state 112
    variable                       shift and go to state 103
    llamada                        shift and go to state 114
    cte                            shift and go to state 115
    var_array                      shift and go to state 64
    function_id                    shift and go to state 57
    arr_id                         shift and go to state 67

state 145

    (88) and_operador -> AND .

    O_PARENTHESIS   reduce using rule 88 (and_operador -> AND .)
    PLUS            reduce using rule 88 (and_operador -> AND .)
    MINUS           reduce using rule 88 (and_operador -> AND .)
    ID              reduce using rule 88 (and_operador -> AND .)
    CTE_INT         reduce using rule 88 (and_operador -> AND .)
    CTE_FLOAT       reduce using rule 88 (and_operador -> AND .)


state 146

    (90) equal -> compare equal_operador . compare
    (93) compare -> . exp
    (94) compare -> . exp compare_operador exp
    (99) exp -> . termino
    (100) exp -> . termino exp_operador exp
    (103) termino -> . factor
    (104) termino -> . factor termino_operador termino
    (108) factor -> . variable
    (109) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (110) factor -> . llamada
    (111) factor -> . cte
    (112) factor -> . PLUS cte
    (113) factor -> . MINUS cte
    (35) variable -> . var_array
    (36) variable -> . ID
    (53) llamada -> . function_id O_PARENTHESIS llamada_prime C_PARENTHESIS
    (114) cte -> . CTE_INT
    (115) cte -> . CTE_FLOAT
    (37) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (54) function_id -> . ID
    (40) arr_id -> . ID

    O_PARENTHESIS   shift and go to state 113
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    ID              shift and go to state 65
    CTE_INT         shift and go to state 118
    CTE_FLOAT       shift and go to state 119

    compare                        shift and go to state 185
    exp                            shift and go to state 110
    termino                        shift and go to state 111
    factor                         shift and go to state 112
    variable                       shift and go to state 103
    llamada                        shift and go to state 114
    cte                            shift and go to state 115
    var_array                      shift and go to state 64
    function_id                    shift and go to state 57
    arr_id                         shift and go to state 67

state 147

    (91) equal_operador -> EQUAL .

    O_PARENTHESIS   reduce using rule 91 (equal_operador -> EQUAL .)
    PLUS            reduce using rule 91 (equal_operador -> EQUAL .)
    MINUS           reduce using rule 91 (equal_operador -> EQUAL .)
    ID              reduce using rule 91 (equal_operador -> EQUAL .)
    CTE_INT         reduce using rule 91 (equal_operador -> EQUAL .)
    CTE_FLOAT       reduce using rule 91 (equal_operador -> EQUAL .)


state 148

    (92) equal_operador -> NOT_EQUAL .

    O_PARENTHESIS   reduce using rule 92 (equal_operador -> NOT_EQUAL .)
    PLUS            reduce using rule 92 (equal_operador -> NOT_EQUAL .)
    MINUS           reduce using rule 92 (equal_operador -> NOT_EQUAL .)
    ID              reduce using rule 92 (equal_operador -> NOT_EQUAL .)
    CTE_INT         reduce using rule 92 (equal_operador -> NOT_EQUAL .)
    CTE_FLOAT       reduce using rule 92 (equal_operador -> NOT_EQUAL .)


state 149

    (94) compare -> exp compare_operador . exp
    (99) exp -> . termino
    (100) exp -> . termino exp_operador exp
    (103) termino -> . factor
    (104) termino -> . factor termino_operador termino
    (108) factor -> . variable
    (109) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (110) factor -> . llamada
    (111) factor -> . cte
    (112) factor -> . PLUS cte
    (113) factor -> . MINUS cte
    (35) variable -> . var_array
    (36) variable -> . ID
    (53) llamada -> . function_id O_PARENTHESIS llamada_prime C_PARENTHESIS
    (114) cte -> . CTE_INT
    (115) cte -> . CTE_FLOAT
    (37) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (54) function_id -> . ID
    (40) arr_id -> . ID

    O_PARENTHESIS   shift and go to state 113
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    ID              shift and go to state 65
    CTE_INT         shift and go to state 118
    CTE_FLOAT       shift and go to state 119

    exp                            shift and go to state 186
    termino                        shift and go to state 111
    factor                         shift and go to state 112
    variable                       shift and go to state 103
    llamada                        shift and go to state 114
    cte                            shift and go to state 115
    var_array                      shift and go to state 64
    function_id                    shift and go to state 57
    arr_id                         shift and go to state 67

state 150

    (95) compare_operador -> GREATER .

    O_PARENTHESIS   reduce using rule 95 (compare_operador -> GREATER .)
    PLUS            reduce using rule 95 (compare_operador -> GREATER .)
    MINUS           reduce using rule 95 (compare_operador -> GREATER .)
    ID              reduce using rule 95 (compare_operador -> GREATER .)
    CTE_INT         reduce using rule 95 (compare_operador -> GREATER .)
    CTE_FLOAT       reduce using rule 95 (compare_operador -> GREATER .)


state 151

    (96) compare_operador -> LESSER .

    O_PARENTHESIS   reduce using rule 96 (compare_operador -> LESSER .)
    PLUS            reduce using rule 96 (compare_operador -> LESSER .)
    MINUS           reduce using rule 96 (compare_operador -> LESSER .)
    ID              reduce using rule 96 (compare_operador -> LESSER .)
    CTE_INT         reduce using rule 96 (compare_operador -> LESSER .)
    CTE_FLOAT       reduce using rule 96 (compare_operador -> LESSER .)


state 152

    (97) compare_operador -> GREATER_EQUAL .

    O_PARENTHESIS   reduce using rule 97 (compare_operador -> GREATER_EQUAL .)
    PLUS            reduce using rule 97 (compare_operador -> GREATER_EQUAL .)
    MINUS           reduce using rule 97 (compare_operador -> GREATER_EQUAL .)
    ID              reduce using rule 97 (compare_operador -> GREATER_EQUAL .)
    CTE_INT         reduce using rule 97 (compare_operador -> GREATER_EQUAL .)
    CTE_FLOAT       reduce using rule 97 (compare_operador -> GREATER_EQUAL .)


state 153

    (98) compare_operador -> LESSER_EQUAL .

    O_PARENTHESIS   reduce using rule 98 (compare_operador -> LESSER_EQUAL .)
    PLUS            reduce using rule 98 (compare_operador -> LESSER_EQUAL .)
    MINUS           reduce using rule 98 (compare_operador -> LESSER_EQUAL .)
    ID              reduce using rule 98 (compare_operador -> LESSER_EQUAL .)
    CTE_INT         reduce using rule 98 (compare_operador -> LESSER_EQUAL .)
    CTE_FLOAT       reduce using rule 98 (compare_operador -> LESSER_EQUAL .)


state 154

    (100) exp -> termino exp_operador . exp
    (99) exp -> . termino
    (100) exp -> . termino exp_operador exp
    (103) termino -> . factor
    (104) termino -> . factor termino_operador termino
    (108) factor -> . variable
    (109) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (110) factor -> . llamada
    (111) factor -> . cte
    (112) factor -> . PLUS cte
    (113) factor -> . MINUS cte
    (35) variable -> . var_array
    (36) variable -> . ID
    (53) llamada -> . function_id O_PARENTHESIS llamada_prime C_PARENTHESIS
    (114) cte -> . CTE_INT
    (115) cte -> . CTE_FLOAT
    (37) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (54) function_id -> . ID
    (40) arr_id -> . ID

    O_PARENTHESIS   shift and go to state 113
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    ID              shift and go to state 65
    CTE_INT         shift and go to state 118
    CTE_FLOAT       shift and go to state 119

    termino                        shift and go to state 111
    exp                            shift and go to state 187
    factor                         shift and go to state 112
    variable                       shift and go to state 103
    llamada                        shift and go to state 114
    cte                            shift and go to state 115
    var_array                      shift and go to state 64
    function_id                    shift and go to state 57
    arr_id                         shift and go to state 67

state 155

    (101) exp_operador -> PLUS .

    O_PARENTHESIS   reduce using rule 101 (exp_operador -> PLUS .)
    PLUS            reduce using rule 101 (exp_operador -> PLUS .)
    MINUS           reduce using rule 101 (exp_operador -> PLUS .)
    ID              reduce using rule 101 (exp_operador -> PLUS .)
    CTE_INT         reduce using rule 101 (exp_operador -> PLUS .)
    CTE_FLOAT       reduce using rule 101 (exp_operador -> PLUS .)


state 156

    (102) exp_operador -> MINUS .

    O_PARENTHESIS   reduce using rule 102 (exp_operador -> MINUS .)
    PLUS            reduce using rule 102 (exp_operador -> MINUS .)
    MINUS           reduce using rule 102 (exp_operador -> MINUS .)
    ID              reduce using rule 102 (exp_operador -> MINUS .)
    CTE_INT         reduce using rule 102 (exp_operador -> MINUS .)
    CTE_FLOAT       reduce using rule 102 (exp_operador -> MINUS .)


state 157

    (104) termino -> factor termino_operador . termino
    (103) termino -> . factor
    (104) termino -> . factor termino_operador termino
    (108) factor -> . variable
    (109) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (110) factor -> . llamada
    (111) factor -> . cte
    (112) factor -> . PLUS cte
    (113) factor -> . MINUS cte
    (35) variable -> . var_array
    (36) variable -> . ID
    (53) llamada -> . function_id O_PARENTHESIS llamada_prime C_PARENTHESIS
    (114) cte -> . CTE_INT
    (115) cte -> . CTE_FLOAT
    (37) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (54) function_id -> . ID
    (40) arr_id -> . ID

    O_PARENTHESIS   shift and go to state 113
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    ID              shift and go to state 65
    CTE_INT         shift and go to state 118
    CTE_FLOAT       shift and go to state 119

    factor                         shift and go to state 112
    termino                        shift and go to state 188
    variable                       shift and go to state 103
    llamada                        shift and go to state 114
    cte                            shift and go to state 115
    var_array                      shift and go to state 64
    function_id                    shift and go to state 57
    arr_id                         shift and go to state 67

state 158

    (105) termino_operador -> TIMES .

    O_PARENTHESIS   reduce using rule 105 (termino_operador -> TIMES .)
    PLUS            reduce using rule 105 (termino_operador -> TIMES .)
    MINUS           reduce using rule 105 (termino_operador -> TIMES .)
    ID              reduce using rule 105 (termino_operador -> TIMES .)
    CTE_INT         reduce using rule 105 (termino_operador -> TIMES .)
    CTE_FLOAT       reduce using rule 105 (termino_operador -> TIMES .)


state 159

    (106) termino_operador -> DIVIDE .

    O_PARENTHESIS   reduce using rule 106 (termino_operador -> DIVIDE .)
    PLUS            reduce using rule 106 (termino_operador -> DIVIDE .)
    MINUS           reduce using rule 106 (termino_operador -> DIVIDE .)
    ID              reduce using rule 106 (termino_operador -> DIVIDE .)
    CTE_INT         reduce using rule 106 (termino_operador -> DIVIDE .)
    CTE_FLOAT       reduce using rule 106 (termino_operador -> DIVIDE .)


state 160

    (107) termino_operador -> MODULE .

    O_PARENTHESIS   reduce using rule 107 (termino_operador -> MODULE .)
    PLUS            reduce using rule 107 (termino_operador -> MODULE .)
    MINUS           reduce using rule 107 (termino_operador -> MODULE .)
    ID              reduce using rule 107 (termino_operador -> MODULE .)
    CTE_INT         reduce using rule 107 (termino_operador -> MODULE .)
    CTE_FLOAT       reduce using rule 107 (termino_operador -> MODULE .)


state 161

    (109) factor -> O_PARENTHESIS expr . C_PARENTHESIS

    C_PARENTHESIS   shift and go to state 189


state 162

    (112) factor -> PLUS cte .

    TIMES           reduce using rule 112 (factor -> PLUS cte .)
    DIVIDE          reduce using rule 112 (factor -> PLUS cte .)
    MODULE          reduce using rule 112 (factor -> PLUS cte .)
    PLUS            reduce using rule 112 (factor -> PLUS cte .)
    MINUS           reduce using rule 112 (factor -> PLUS cte .)
    GREATER         reduce using rule 112 (factor -> PLUS cte .)
    LESSER          reduce using rule 112 (factor -> PLUS cte .)
    GREATER_EQUAL   reduce using rule 112 (factor -> PLUS cte .)
    LESSER_EQUAL    reduce using rule 112 (factor -> PLUS cte .)
    EQUAL           reduce using rule 112 (factor -> PLUS cte .)
    NOT_EQUAL       reduce using rule 112 (factor -> PLUS cte .)
    AND             reduce using rule 112 (factor -> PLUS cte .)
    OR              reduce using rule 112 (factor -> PLUS cte .)
    SEMICOLON       reduce using rule 112 (factor -> PLUS cte .)
    COMMA           reduce using rule 112 (factor -> PLUS cte .)
    C_PARENTHESIS   reduce using rule 112 (factor -> PLUS cte .)
    C_ABRACKET      reduce using rule 112 (factor -> PLUS cte .)
    O_CBRACKET      reduce using rule 112 (factor -> PLUS cte .)
    TO              reduce using rule 112 (factor -> PLUS cte .)


state 163

    (113) factor -> MINUS cte .

    TIMES           reduce using rule 113 (factor -> MINUS cte .)
    DIVIDE          reduce using rule 113 (factor -> MINUS cte .)
    MODULE          reduce using rule 113 (factor -> MINUS cte .)
    PLUS            reduce using rule 113 (factor -> MINUS cte .)
    MINUS           reduce using rule 113 (factor -> MINUS cte .)
    GREATER         reduce using rule 113 (factor -> MINUS cte .)
    LESSER          reduce using rule 113 (factor -> MINUS cte .)
    GREATER_EQUAL   reduce using rule 113 (factor -> MINUS cte .)
    LESSER_EQUAL    reduce using rule 113 (factor -> MINUS cte .)
    EQUAL           reduce using rule 113 (factor -> MINUS cte .)
    NOT_EQUAL       reduce using rule 113 (factor -> MINUS cte .)
    AND             reduce using rule 113 (factor -> MINUS cte .)
    OR              reduce using rule 113 (factor -> MINUS cte .)
    SEMICOLON       reduce using rule 113 (factor -> MINUS cte .)
    COMMA           reduce using rule 113 (factor -> MINUS cte .)
    C_PARENTHESIS   reduce using rule 113 (factor -> MINUS cte .)
    C_ABRACKET      reduce using rule 113 (factor -> MINUS cte .)
    O_CBRACKET      reduce using rule 113 (factor -> MINUS cte .)
    TO              reduce using rule 113 (factor -> MINUS cte .)


state 164

    (53) llamada -> function_id O_PARENTHESIS llamada_prime C_PARENTHESIS .

    SEMICOLON       reduce using rule 53 (llamada -> function_id O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    TIMES           reduce using rule 53 (llamada -> function_id O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    DIVIDE          reduce using rule 53 (llamada -> function_id O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    MODULE          reduce using rule 53 (llamada -> function_id O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    PLUS            reduce using rule 53 (llamada -> function_id O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    MINUS           reduce using rule 53 (llamada -> function_id O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    GREATER         reduce using rule 53 (llamada -> function_id O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    LESSER          reduce using rule 53 (llamada -> function_id O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    GREATER_EQUAL   reduce using rule 53 (llamada -> function_id O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    LESSER_EQUAL    reduce using rule 53 (llamada -> function_id O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    EQUAL           reduce using rule 53 (llamada -> function_id O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    NOT_EQUAL       reduce using rule 53 (llamada -> function_id O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    AND             reduce using rule 53 (llamada -> function_id O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    OR              reduce using rule 53 (llamada -> function_id O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    COMMA           reduce using rule 53 (llamada -> function_id O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    C_PARENTHESIS   reduce using rule 53 (llamada -> function_id O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    C_ABRACKET      reduce using rule 53 (llamada -> function_id O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    O_CBRACKET      reduce using rule 53 (llamada -> function_id O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    TO              reduce using rule 53 (llamada -> function_id O_PARENTHESIS llamada_prime C_PARENTHESIS .)


state 165

    (56) llamada_prime -> llamada_exp llamada_comma . llamada_prime
    (55) llamada_prime -> . llamada_exp
    (56) llamada_prime -> . llamada_exp llamada_comma llamada_prime
    (57) llamada_exp -> . exp
    (99) exp -> . termino
    (100) exp -> . termino exp_operador exp
    (103) termino -> . factor
    (104) termino -> . factor termino_operador termino
    (108) factor -> . variable
    (109) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (110) factor -> . llamada
    (111) factor -> . cte
    (112) factor -> . PLUS cte
    (113) factor -> . MINUS cte
    (35) variable -> . var_array
    (36) variable -> . ID
    (53) llamada -> . function_id O_PARENTHESIS llamada_prime C_PARENTHESIS
    (114) cte -> . CTE_INT
    (115) cte -> . CTE_FLOAT
    (37) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (54) function_id -> . ID
    (40) arr_id -> . ID

    O_PARENTHESIS   shift and go to state 113
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    ID              shift and go to state 65
    CTE_INT         shift and go to state 118
    CTE_FLOAT       shift and go to state 119

    llamada_exp                    shift and go to state 121
    llamada_prime                  shift and go to state 190
    exp                            shift and go to state 122
    termino                        shift and go to state 111
    factor                         shift and go to state 112
    variable                       shift and go to state 103
    llamada                        shift and go to state 114
    cte                            shift and go to state 115
    var_array                      shift and go to state 64
    function_id                    shift and go to state 57
    arr_id                         shift and go to state 67

state 166

    (58) llamada_comma -> COMMA .

    O_PARENTHESIS   reduce using rule 58 (llamada_comma -> COMMA .)
    PLUS            reduce using rule 58 (llamada_comma -> COMMA .)
    MINUS           reduce using rule 58 (llamada_comma -> COMMA .)
    ID              reduce using rule 58 (llamada_comma -> COMMA .)
    CTE_INT         reduce using rule 58 (llamada_comma -> COMMA .)
    CTE_FLOAT       reduce using rule 58 (llamada_comma -> COMMA .)


state 167

    (59) retorno -> RETURN O_PARENTHESIS expr C_PARENTHESIS .

    SEMICOLON       reduce using rule 59 (retorno -> RETURN O_PARENTHESIS expr C_PARENTHESIS .)


state 168

    (60) lectura -> READ O_PARENTHESIS lectura_prime C_PARENTHESIS .

    SEMICOLON       reduce using rule 60 (lectura -> READ O_PARENTHESIS lectura_prime C_PARENTHESIS .)


state 169

    (62) lectura_prime -> variable COMMA . lectura_prime
    (61) lectura_prime -> . variable
    (62) lectura_prime -> . variable COMMA lectura_prime
    (35) variable -> . var_array
    (36) variable -> . ID
    (37) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (40) arr_id -> . ID

    ID              shift and go to state 94

    variable                       shift and go to state 125
    lectura_prime                  shift and go to state 191
    var_array                      shift and go to state 64
    arr_id                         shift and go to state 67

state 170

    (63) escritura -> WRITE O_PARENTHESIS escritura_prime C_PARENTHESIS .

    SEMICOLON       reduce using rule 63 (escritura -> WRITE O_PARENTHESIS escritura_prime C_PARENTHESIS .)


state 171

    (66) escritura_prime -> expr COMMA . escritura_prime
    (64) escritura_prime -> . expr
    (65) escritura_prime -> . escritura_string
    (66) escritura_prime -> . expr COMMA escritura_prime
    (67) escritura_prime -> . escritura_string COMMA escritura_prime
    (82) expr -> . or
    (68) escritura_string -> . CTE_STRING
    (83) or -> . and
    (84) or -> . and or_operador or
    (86) and -> . equal
    (87) and -> . equal and_operador and
    (89) equal -> . compare
    (90) equal -> . compare equal_operador compare
    (93) compare -> . exp
    (94) compare -> . exp compare_operador exp
    (99) exp -> . termino
    (100) exp -> . termino exp_operador exp
    (103) termino -> . factor
    (104) termino -> . factor termino_operador termino
    (108) factor -> . variable
    (109) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (110) factor -> . llamada
    (111) factor -> . cte
    (112) factor -> . PLUS cte
    (113) factor -> . MINUS cte
    (35) variable -> . var_array
    (36) variable -> . ID
    (53) llamada -> . function_id O_PARENTHESIS llamada_prime C_PARENTHESIS
    (114) cte -> . CTE_INT
    (115) cte -> . CTE_FLOAT
    (37) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (54) function_id -> . ID
    (40) arr_id -> . ID

    CTE_STRING      shift and go to state 129
    O_PARENTHESIS   shift and go to state 113
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    ID              shift and go to state 65
    CTE_INT         shift and go to state 118
    CTE_FLOAT       shift and go to state 119

    expr                           shift and go to state 127
    escritura_prime                shift and go to state 192
    escritura_string               shift and go to state 128
    or                             shift and go to state 106
    and                            shift and go to state 107
    equal                          shift and go to state 108
    compare                        shift and go to state 109
    exp                            shift and go to state 110
    termino                        shift and go to state 111
    factor                         shift and go to state 112
    variable                       shift and go to state 103
    llamada                        shift and go to state 114
    cte                            shift and go to state 115
    var_array                      shift and go to state 64
    function_id                    shift and go to state 57
    arr_id                         shift and go to state 67

state 172

    (67) escritura_prime -> escritura_string COMMA . escritura_prime
    (64) escritura_prime -> . expr
    (65) escritura_prime -> . escritura_string
    (66) escritura_prime -> . expr COMMA escritura_prime
    (67) escritura_prime -> . escritura_string COMMA escritura_prime
    (82) expr -> . or
    (68) escritura_string -> . CTE_STRING
    (83) or -> . and
    (84) or -> . and or_operador or
    (86) and -> . equal
    (87) and -> . equal and_operador and
    (89) equal -> . compare
    (90) equal -> . compare equal_operador compare
    (93) compare -> . exp
    (94) compare -> . exp compare_operador exp
    (99) exp -> . termino
    (100) exp -> . termino exp_operador exp
    (103) termino -> . factor
    (104) termino -> . factor termino_operador termino
    (108) factor -> . variable
    (109) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (110) factor -> . llamada
    (111) factor -> . cte
    (112) factor -> . PLUS cte
    (113) factor -> . MINUS cte
    (35) variable -> . var_array
    (36) variable -> . ID
    (53) llamada -> . function_id O_PARENTHESIS llamada_prime C_PARENTHESIS
    (114) cte -> . CTE_INT
    (115) cte -> . CTE_FLOAT
    (37) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (54) function_id -> . ID
    (40) arr_id -> . ID

    CTE_STRING      shift and go to state 129
    O_PARENTHESIS   shift and go to state 113
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    ID              shift and go to state 65
    CTE_INT         shift and go to state 118
    CTE_FLOAT       shift and go to state 119

    escritura_string               shift and go to state 128
    escritura_prime                shift and go to state 193
    expr                           shift and go to state 127
    or                             shift and go to state 106
    and                            shift and go to state 107
    equal                          shift and go to state 108
    compare                        shift and go to state 109
    exp                            shift and go to state 110
    termino                        shift and go to state 111
    factor                         shift and go to state 112
    variable                       shift and go to state 103
    llamada                        shift and go to state 114
    cte                            shift and go to state 115
    var_array                      shift and go to state 64
    function_id                    shift and go to state 57
    arr_id                         shift and go to state 67

state 173

    (69) decision -> IF O_PARENTHESIS decision_expr C_PARENTHESIS . bloque else
    (3) bloque -> . O_CBRACKET bloque_prime C_CBRACKET

    O_CBRACKET      shift and go to state 30

    bloque                         shift and go to state 194

state 174

    (76) while_expr -> O_PARENTHESIS expr C_PARENTHESIS .

    O_CBRACKET      reduce using rule 76 (while_expr -> O_PARENTHESIS expr C_PARENTHESIS .)


state 175

    (77) for -> FOR for_asignacion for_to for_exp . bloque
    (3) bloque -> . O_CBRACKET bloque_prime C_CBRACKET

    O_CBRACKET      shift and go to state 30

    bloque                         shift and go to state 195

state 176

    (81) for_exp -> exp .

    O_CBRACKET      reduce using rule 81 (for_exp -> exp .)


state 177

    (78) for_asignacion -> variable ASSIGN for_asignacion_expr .

    TO              reduce using rule 78 (for_asignacion -> variable ASSIGN for_asignacion_expr .)


state 178

    (79) for_asignacion_expr -> expr .

    TO              reduce using rule 79 (for_asignacion_expr -> expr .)


state 179

    (37) var_array -> arr_id O_ABRACKET exp arr_close_bracket . arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> arr_id O_ABRACKET exp arr_close_bracket . arr_open_bracket exp arr_close_bracket
    (39) var_array -> arr_id O_ABRACKET exp arr_close_bracket .
    (42) arr_open_bracket -> . O_ABRACKET

    ASSIGN          reduce using rule 39 (var_array -> arr_id O_ABRACKET exp arr_close_bracket .)
    TIMES           reduce using rule 39 (var_array -> arr_id O_ABRACKET exp arr_close_bracket .)
    DIVIDE          reduce using rule 39 (var_array -> arr_id O_ABRACKET exp arr_close_bracket .)
    MODULE          reduce using rule 39 (var_array -> arr_id O_ABRACKET exp arr_close_bracket .)
    PLUS            reduce using rule 39 (var_array -> arr_id O_ABRACKET exp arr_close_bracket .)
    MINUS           reduce using rule 39 (var_array -> arr_id O_ABRACKET exp arr_close_bracket .)
    GREATER         reduce using rule 39 (var_array -> arr_id O_ABRACKET exp arr_close_bracket .)
    LESSER          reduce using rule 39 (var_array -> arr_id O_ABRACKET exp arr_close_bracket .)
    GREATER_EQUAL   reduce using rule 39 (var_array -> arr_id O_ABRACKET exp arr_close_bracket .)
    LESSER_EQUAL    reduce using rule 39 (var_array -> arr_id O_ABRACKET exp arr_close_bracket .)
    EQUAL           reduce using rule 39 (var_array -> arr_id O_ABRACKET exp arr_close_bracket .)
    NOT_EQUAL       reduce using rule 39 (var_array -> arr_id O_ABRACKET exp arr_close_bracket .)
    AND             reduce using rule 39 (var_array -> arr_id O_ABRACKET exp arr_close_bracket .)
    OR              reduce using rule 39 (var_array -> arr_id O_ABRACKET exp arr_close_bracket .)
    SEMICOLON       reduce using rule 39 (var_array -> arr_id O_ABRACKET exp arr_close_bracket .)
    COMMA           reduce using rule 39 (var_array -> arr_id O_ABRACKET exp arr_close_bracket .)
    C_PARENTHESIS   reduce using rule 39 (var_array -> arr_id O_ABRACKET exp arr_close_bracket .)
    C_ABRACKET      reduce using rule 39 (var_array -> arr_id O_ABRACKET exp arr_close_bracket .)
    O_CBRACKET      reduce using rule 39 (var_array -> arr_id O_ABRACKET exp arr_close_bracket .)
    TO              reduce using rule 39 (var_array -> arr_id O_ABRACKET exp arr_close_bracket .)
    O_ABRACKET      shift and go to state 196

    arr_open_bracket               shift and go to state 197

state 180

    (41) arr_close_bracket -> C_ABRACKET .

    O_ABRACKET      reduce using rule 41 (arr_close_bracket -> C_ABRACKET .)
    ASSIGN          reduce using rule 41 (arr_close_bracket -> C_ABRACKET .)
    TIMES           reduce using rule 41 (arr_close_bracket -> C_ABRACKET .)
    DIVIDE          reduce using rule 41 (arr_close_bracket -> C_ABRACKET .)
    MODULE          reduce using rule 41 (arr_close_bracket -> C_ABRACKET .)
    PLUS            reduce using rule 41 (arr_close_bracket -> C_ABRACKET .)
    MINUS           reduce using rule 41 (arr_close_bracket -> C_ABRACKET .)
    GREATER         reduce using rule 41 (arr_close_bracket -> C_ABRACKET .)
    LESSER          reduce using rule 41 (arr_close_bracket -> C_ABRACKET .)
    GREATER_EQUAL   reduce using rule 41 (arr_close_bracket -> C_ABRACKET .)
    LESSER_EQUAL    reduce using rule 41 (arr_close_bracket -> C_ABRACKET .)
    EQUAL           reduce using rule 41 (arr_close_bracket -> C_ABRACKET .)
    NOT_EQUAL       reduce using rule 41 (arr_close_bracket -> C_ABRACKET .)
    AND             reduce using rule 41 (arr_close_bracket -> C_ABRACKET .)
    OR              reduce using rule 41 (arr_close_bracket -> C_ABRACKET .)
    SEMICOLON       reduce using rule 41 (arr_close_bracket -> C_ABRACKET .)
    COMMA           reduce using rule 41 (arr_close_bracket -> C_ABRACKET .)
    C_PARENTHESIS   reduce using rule 41 (arr_close_bracket -> C_ABRACKET .)
    C_ABRACKET      reduce using rule 41 (arr_close_bracket -> C_ABRACKET .)
    O_CBRACKET      reduce using rule 41 (arr_close_bracket -> C_ABRACKET .)
    TO              reduce using rule 41 (arr_close_bracket -> C_ABRACKET .)


state 181

    (27) funcion_base -> FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque .

    FUNCTION        reduce using rule 27 (funcion_base -> FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque .)
    MAIN            reduce using rule 27 (funcion_base -> FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque .)


state 182

    (13) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET . O_ABRACKET CTE_INT C_ABRACKET
    (14) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET .

    O_ABRACKET      shift and go to state 198
    COMMA           reduce using rule 14 (declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET .)
    COLON           reduce using rule 14 (declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET .)


state 183

    (84) or -> and or_operador or .

    SEMICOLON       reduce using rule 84 (or -> and or_operador or .)
    C_PARENTHESIS   reduce using rule 84 (or -> and or_operador or .)
    COMMA           reduce using rule 84 (or -> and or_operador or .)
    TO              reduce using rule 84 (or -> and or_operador or .)


state 184

    (87) and -> equal and_operador and .

    OR              reduce using rule 87 (and -> equal and_operador and .)
    SEMICOLON       reduce using rule 87 (and -> equal and_operador and .)
    C_PARENTHESIS   reduce using rule 87 (and -> equal and_operador and .)
    COMMA           reduce using rule 87 (and -> equal and_operador and .)
    TO              reduce using rule 87 (and -> equal and_operador and .)


state 185

    (90) equal -> compare equal_operador compare .

    AND             reduce using rule 90 (equal -> compare equal_operador compare .)
    OR              reduce using rule 90 (equal -> compare equal_operador compare .)
    SEMICOLON       reduce using rule 90 (equal -> compare equal_operador compare .)
    C_PARENTHESIS   reduce using rule 90 (equal -> compare equal_operador compare .)
    COMMA           reduce using rule 90 (equal -> compare equal_operador compare .)
    TO              reduce using rule 90 (equal -> compare equal_operador compare .)


state 186

    (94) compare -> exp compare_operador exp .

    EQUAL           reduce using rule 94 (compare -> exp compare_operador exp .)
    NOT_EQUAL       reduce using rule 94 (compare -> exp compare_operador exp .)
    AND             reduce using rule 94 (compare -> exp compare_operador exp .)
    OR              reduce using rule 94 (compare -> exp compare_operador exp .)
    SEMICOLON       reduce using rule 94 (compare -> exp compare_operador exp .)
    C_PARENTHESIS   reduce using rule 94 (compare -> exp compare_operador exp .)
    COMMA           reduce using rule 94 (compare -> exp compare_operador exp .)
    TO              reduce using rule 94 (compare -> exp compare_operador exp .)


state 187

    (100) exp -> termino exp_operador exp .

    GREATER         reduce using rule 100 (exp -> termino exp_operador exp .)
    LESSER          reduce using rule 100 (exp -> termino exp_operador exp .)
    GREATER_EQUAL   reduce using rule 100 (exp -> termino exp_operador exp .)
    LESSER_EQUAL    reduce using rule 100 (exp -> termino exp_operador exp .)
    EQUAL           reduce using rule 100 (exp -> termino exp_operador exp .)
    NOT_EQUAL       reduce using rule 100 (exp -> termino exp_operador exp .)
    AND             reduce using rule 100 (exp -> termino exp_operador exp .)
    OR              reduce using rule 100 (exp -> termino exp_operador exp .)
    SEMICOLON       reduce using rule 100 (exp -> termino exp_operador exp .)
    COMMA           reduce using rule 100 (exp -> termino exp_operador exp .)
    C_PARENTHESIS   reduce using rule 100 (exp -> termino exp_operador exp .)
    C_ABRACKET      reduce using rule 100 (exp -> termino exp_operador exp .)
    O_CBRACKET      reduce using rule 100 (exp -> termino exp_operador exp .)
    TO              reduce using rule 100 (exp -> termino exp_operador exp .)


state 188

    (104) termino -> factor termino_operador termino .

    PLUS            reduce using rule 104 (termino -> factor termino_operador termino .)
    MINUS           reduce using rule 104 (termino -> factor termino_operador termino .)
    GREATER         reduce using rule 104 (termino -> factor termino_operador termino .)
    LESSER          reduce using rule 104 (termino -> factor termino_operador termino .)
    GREATER_EQUAL   reduce using rule 104 (termino -> factor termino_operador termino .)
    LESSER_EQUAL    reduce using rule 104 (termino -> factor termino_operador termino .)
    EQUAL           reduce using rule 104 (termino -> factor termino_operador termino .)
    NOT_EQUAL       reduce using rule 104 (termino -> factor termino_operador termino .)
    AND             reduce using rule 104 (termino -> factor termino_operador termino .)
    OR              reduce using rule 104 (termino -> factor termino_operador termino .)
    SEMICOLON       reduce using rule 104 (termino -> factor termino_operador termino .)
    COMMA           reduce using rule 104 (termino -> factor termino_operador termino .)
    C_PARENTHESIS   reduce using rule 104 (termino -> factor termino_operador termino .)
    C_ABRACKET      reduce using rule 104 (termino -> factor termino_operador termino .)
    O_CBRACKET      reduce using rule 104 (termino -> factor termino_operador termino .)
    TO              reduce using rule 104 (termino -> factor termino_operador termino .)


state 189

    (109) factor -> O_PARENTHESIS expr C_PARENTHESIS .

    TIMES           reduce using rule 109 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    DIVIDE          reduce using rule 109 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    MODULE          reduce using rule 109 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    PLUS            reduce using rule 109 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    MINUS           reduce using rule 109 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    GREATER         reduce using rule 109 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    LESSER          reduce using rule 109 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    GREATER_EQUAL   reduce using rule 109 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    LESSER_EQUAL    reduce using rule 109 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    EQUAL           reduce using rule 109 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    NOT_EQUAL       reduce using rule 109 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    AND             reduce using rule 109 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    OR              reduce using rule 109 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    SEMICOLON       reduce using rule 109 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    COMMA           reduce using rule 109 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    C_PARENTHESIS   reduce using rule 109 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    C_ABRACKET      reduce using rule 109 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    O_CBRACKET      reduce using rule 109 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    TO              reduce using rule 109 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)


state 190

    (56) llamada_prime -> llamada_exp llamada_comma llamada_prime .

    C_PARENTHESIS   reduce using rule 56 (llamada_prime -> llamada_exp llamada_comma llamada_prime .)


state 191

    (62) lectura_prime -> variable COMMA lectura_prime .

    C_PARENTHESIS   reduce using rule 62 (lectura_prime -> variable COMMA lectura_prime .)


state 192

    (66) escritura_prime -> expr COMMA escritura_prime .

    C_PARENTHESIS   reduce using rule 66 (escritura_prime -> expr COMMA escritura_prime .)


state 193

    (67) escritura_prime -> escritura_string COMMA escritura_prime .

    C_PARENTHESIS   reduce using rule 67 (escritura_prime -> escritura_string COMMA escritura_prime .)


state 194

    (69) decision -> IF O_PARENTHESIS decision_expr C_PARENTHESIS bloque . else
    (71) else -> . else_prime bloque
    (72) else -> . epsilon
    (73) else_prime -> . ELSE
    (116) epsilon -> .

    ELSE            shift and go to state 202
    RETURN          reduce using rule 116 (epsilon -> .)
    READ            reduce using rule 116 (epsilon -> .)
    WRITE           reduce using rule 116 (epsilon -> .)
    IF              reduce using rule 116 (epsilon -> .)
    FOR             reduce using rule 116 (epsilon -> .)
    ID              reduce using rule 116 (epsilon -> .)
    WHILE           reduce using rule 116 (epsilon -> .)
    C_CBRACKET      reduce using rule 116 (epsilon -> .)

    else                           shift and go to state 199
    else_prime                     shift and go to state 200
    epsilon                        shift and go to state 201

state 195

    (77) for -> FOR for_asignacion for_to for_exp bloque .

    RETURN          reduce using rule 77 (for -> FOR for_asignacion for_to for_exp bloque .)
    READ            reduce using rule 77 (for -> FOR for_asignacion for_to for_exp bloque .)
    WRITE           reduce using rule 77 (for -> FOR for_asignacion for_to for_exp bloque .)
    IF              reduce using rule 77 (for -> FOR for_asignacion for_to for_exp bloque .)
    FOR             reduce using rule 77 (for -> FOR for_asignacion for_to for_exp bloque .)
    ID              reduce using rule 77 (for -> FOR for_asignacion for_to for_exp bloque .)
    WHILE           reduce using rule 77 (for -> FOR for_asignacion for_to for_exp bloque .)
    C_CBRACKET      reduce using rule 77 (for -> FOR for_asignacion for_to for_exp bloque .)


state 196

    (42) arr_open_bracket -> O_ABRACKET .

    O_PARENTHESIS   reduce using rule 42 (arr_open_bracket -> O_ABRACKET .)
    PLUS            reduce using rule 42 (arr_open_bracket -> O_ABRACKET .)
    MINUS           reduce using rule 42 (arr_open_bracket -> O_ABRACKET .)
    ID              reduce using rule 42 (arr_open_bracket -> O_ABRACKET .)
    CTE_INT         reduce using rule 42 (arr_open_bracket -> O_ABRACKET .)
    CTE_FLOAT       reduce using rule 42 (arr_open_bracket -> O_ABRACKET .)


state 197

    (37) var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket . exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket . exp arr_close_bracket
    (99) exp -> . termino
    (100) exp -> . termino exp_operador exp
    (103) termino -> . factor
    (104) termino -> . factor termino_operador termino
    (108) factor -> . variable
    (109) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (110) factor -> . llamada
    (111) factor -> . cte
    (112) factor -> . PLUS cte
    (113) factor -> . MINUS cte
    (35) variable -> . var_array
    (36) variable -> . ID
    (53) llamada -> . function_id O_PARENTHESIS llamada_prime C_PARENTHESIS
    (114) cte -> . CTE_INT
    (115) cte -> . CTE_FLOAT
    (37) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (54) function_id -> . ID
    (40) arr_id -> . ID

    O_PARENTHESIS   shift and go to state 113
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    ID              shift and go to state 65
    CTE_INT         shift and go to state 118
    CTE_FLOAT       shift and go to state 119

    arr_id                         shift and go to state 67
    exp                            shift and go to state 203
    termino                        shift and go to state 111
    factor                         shift and go to state 112
    variable                       shift and go to state 103
    llamada                        shift and go to state 114
    cte                            shift and go to state 115
    var_array                      shift and go to state 64
    function_id                    shift and go to state 57

state 198

    (13) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET . CTE_INT C_ABRACKET

    CTE_INT         shift and go to state 204


state 199

    (69) decision -> IF O_PARENTHESIS decision_expr C_PARENTHESIS bloque else .

    RETURN          reduce using rule 69 (decision -> IF O_PARENTHESIS decision_expr C_PARENTHESIS bloque else .)
    READ            reduce using rule 69 (decision -> IF O_PARENTHESIS decision_expr C_PARENTHESIS bloque else .)
    WRITE           reduce using rule 69 (decision -> IF O_PARENTHESIS decision_expr C_PARENTHESIS bloque else .)
    IF              reduce using rule 69 (decision -> IF O_PARENTHESIS decision_expr C_PARENTHESIS bloque else .)
    FOR             reduce using rule 69 (decision -> IF O_PARENTHESIS decision_expr C_PARENTHESIS bloque else .)
    ID              reduce using rule 69 (decision -> IF O_PARENTHESIS decision_expr C_PARENTHESIS bloque else .)
    WHILE           reduce using rule 69 (decision -> IF O_PARENTHESIS decision_expr C_PARENTHESIS bloque else .)
    C_CBRACKET      reduce using rule 69 (decision -> IF O_PARENTHESIS decision_expr C_PARENTHESIS bloque else .)


state 200

    (71) else -> else_prime . bloque
    (3) bloque -> . O_CBRACKET bloque_prime C_CBRACKET

    O_CBRACKET      shift and go to state 30

    bloque                         shift and go to state 205

state 201

    (72) else -> epsilon .

    RETURN          reduce using rule 72 (else -> epsilon .)
    READ            reduce using rule 72 (else -> epsilon .)
    WRITE           reduce using rule 72 (else -> epsilon .)
    IF              reduce using rule 72 (else -> epsilon .)
    FOR             reduce using rule 72 (else -> epsilon .)
    ID              reduce using rule 72 (else -> epsilon .)
    WHILE           reduce using rule 72 (else -> epsilon .)
    C_CBRACKET      reduce using rule 72 (else -> epsilon .)


state 202

    (73) else_prime -> ELSE .

    O_CBRACKET      reduce using rule 73 (else_prime -> ELSE .)


state 203

    (37) var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp . arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp . arr_close_bracket
    (41) arr_close_bracket -> . C_ABRACKET

    C_ABRACKET      shift and go to state 180

    arr_close_bracket              shift and go to state 206

state 204

    (13) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT . C_ABRACKET

    C_ABRACKET      shift and go to state 207


state 205

    (71) else -> else_prime bloque .

    RETURN          reduce using rule 71 (else -> else_prime bloque .)
    READ            reduce using rule 71 (else -> else_prime bloque .)
    WRITE           reduce using rule 71 (else -> else_prime bloque .)
    IF              reduce using rule 71 (else -> else_prime bloque .)
    FOR             reduce using rule 71 (else -> else_prime bloque .)
    ID              reduce using rule 71 (else -> else_prime bloque .)
    WHILE           reduce using rule 71 (else -> else_prime bloque .)
    C_CBRACKET      reduce using rule 71 (else -> else_prime bloque .)


state 206

    (37) var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket . arr_open_bracket exp arr_close_bracket
    (38) var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .
    (42) arr_open_bracket -> . O_ABRACKET

    ASSIGN          reduce using rule 38 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    TIMES           reduce using rule 38 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    DIVIDE          reduce using rule 38 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    MODULE          reduce using rule 38 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    PLUS            reduce using rule 38 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    MINUS           reduce using rule 38 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    GREATER         reduce using rule 38 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    LESSER          reduce using rule 38 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    GREATER_EQUAL   reduce using rule 38 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    LESSER_EQUAL    reduce using rule 38 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    EQUAL           reduce using rule 38 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    NOT_EQUAL       reduce using rule 38 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    AND             reduce using rule 38 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    OR              reduce using rule 38 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    SEMICOLON       reduce using rule 38 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    COMMA           reduce using rule 38 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    C_PARENTHESIS   reduce using rule 38 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    C_ABRACKET      reduce using rule 38 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    O_CBRACKET      reduce using rule 38 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    TO              reduce using rule 38 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    O_ABRACKET      shift and go to state 196

    arr_open_bracket               shift and go to state 208

state 207

    (13) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET .

    COMMA           reduce using rule 13 (declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET .)
    COLON           reduce using rule 13 (declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET .)


state 208

    (37) var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket . exp arr_close_bracket
    (99) exp -> . termino
    (100) exp -> . termino exp_operador exp
    (103) termino -> . factor
    (104) termino -> . factor termino_operador termino
    (108) factor -> . variable
    (109) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (110) factor -> . llamada
    (111) factor -> . cte
    (112) factor -> . PLUS cte
    (113) factor -> . MINUS cte
    (35) variable -> . var_array
    (36) variable -> . ID
    (53) llamada -> . function_id O_PARENTHESIS llamada_prime C_PARENTHESIS
    (114) cte -> . CTE_INT
    (115) cte -> . CTE_FLOAT
    (37) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (54) function_id -> . ID
    (40) arr_id -> . ID

    O_PARENTHESIS   shift and go to state 113
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    ID              shift and go to state 65
    CTE_INT         shift and go to state 118
    CTE_FLOAT       shift and go to state 119

    arr_id                         shift and go to state 67
    exp                            shift and go to state 209
    termino                        shift and go to state 111
    factor                         shift and go to state 112
    variable                       shift and go to state 103
    llamada                        shift and go to state 114
    cte                            shift and go to state 115
    var_array                      shift and go to state 64
    function_id                    shift and go to state 57

state 209

    (37) var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp . arr_close_bracket
    (41) arr_close_bracket -> . C_ABRACKET

    C_ABRACKET      shift and go to state 180

    arr_close_bracket              shift and go to state 210

state 210

    (37) var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .

    ASSIGN          reduce using rule 37 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    TIMES           reduce using rule 37 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    DIVIDE          reduce using rule 37 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    MODULE          reduce using rule 37 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    PLUS            reduce using rule 37 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    MINUS           reduce using rule 37 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    GREATER         reduce using rule 37 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    LESSER          reduce using rule 37 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    GREATER_EQUAL   reduce using rule 37 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    LESSER_EQUAL    reduce using rule 37 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    EQUAL           reduce using rule 37 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    NOT_EQUAL       reduce using rule 37 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    AND             reduce using rule 37 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    OR              reduce using rule 37 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    SEMICOLON       reduce using rule 37 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    COMMA           reduce using rule 37 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    C_PARENTHESIS   reduce using rule 37 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    C_ABRACKET      reduce using rule 37 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    O_CBRACKET      reduce using rule 37 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    TO              reduce using rule 37 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)

