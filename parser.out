Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CTE_CHAR

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAM ID SEMICOLON declaracion funcion MAIN O_PARENTHESIS C_PARENTHESIS bloque
Rule 2     bloque -> O_CBRACKET bloque_prime C_CBRACKET
Rule 3     bloque_prime -> estatuto bloque_prime
Rule 4     bloque_prime -> epsilon
Rule 5     declaracion -> declaracion_base
Rule 6     declaracion -> declaracion_base declaracion
Rule 7     declaracion_base -> LET declaracion_prime COLON tipo SEMICOLON
Rule 8     declaracion_prime -> variable
Rule 9     declaracion_prime -> variable COMMA declaracion_prime
Rule 10    tipo -> INT
Rule 11    tipo -> FLOAT
Rule 12    tipo -> CHAR
Rule 13    tipo -> STRING
Rule 14    funcion -> funcion_base
Rule 15    funcion -> funcion_base funcion
Rule 16    funcion_base -> FUNCTION funcion_tipo ID O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion bloque
Rule 17    funcion_prime -> tipo ID
Rule 18    funcion_prime -> tipo ID COMMA funcion_prime
Rule 19    funcion_tipo -> VOID
Rule 20    funcion_tipo -> tipo
Rule 21    variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
Rule 22    variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
Rule 23    variable -> ID O_ABRACKET exp C_ABRACKET
Rule 24    variable -> ID
Rule 25    estatuto -> asignacion SEMICOLON
Rule 26    estatuto -> llamada SEMICOLON
Rule 27    estatuto -> retorno SEMICOLON
Rule 28    estatuto -> lectura SEMICOLON
Rule 29    estatuto -> escritura SEMICOLON
Rule 30    estatuto -> decision
Rule 31    estatuto -> while
Rule 32    estatuto -> for
Rule 33    asignacion -> variable ASSIGN expr
Rule 34    llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS
Rule 35    llamada_prime -> exp
Rule 36    llamada_prime -> exp COMMA llamada_prime
Rule 37    retorno -> RETURN O_PARENTHESIS expr C_PARENTHESIS
Rule 38    lectura -> READ O_PARENTHESIS lectura_prime C_PARENTHESIS
Rule 39    lectura_prime -> variable
Rule 40    lectura_prime -> variable COMMA lectura_prime
Rule 41    escritura -> WRITE O_PARENTHESIS escritura_prime C_PARENTHESIS
Rule 42    escritura_prime -> expr
Rule 43    escritura_prime -> CTE_STRING
Rule 44    escritura_prime -> expr COMMA escritura_prime
Rule 45    escritura_prime -> CTE_STRING COMMA escritura_prime
Rule 46    decision -> IF O_PARENTHESIS expr C_PARENTHESIS bloque else
Rule 47    else -> ELSE bloque
Rule 48    else -> epsilon
Rule 49    while -> WHILE O_PARENTHESIS expr C_PARENTHESIS bloque
Rule 50    for -> FOR variable ASSIGN exp TO exp bloque
Rule 51    expr -> or
Rule 52    or -> and
Rule 53    or -> and OR or
Rule 54    and -> equal
Rule 55    and -> equal AND and
Rule 56    equal -> compare
Rule 57    equal -> compare EQUAL compare
Rule 58    equal -> compare NOT_EQUAL compare
Rule 59    compare -> exp
Rule 60    compare -> exp GREATER exp
Rule 61    compare -> exp LESSER exp
Rule 62    compare -> exp GREATER_EQUAL exp
Rule 63    compare -> exp LESSER_EQUAL exp
Rule 64    exp -> termino
Rule 65    exp -> termino PLUS exp
Rule 66    exp -> termino MINUS exp
Rule 67    termino -> factor
Rule 68    termino -> factor TIMES termino
Rule 69    termino -> factor DIVIDE termino
Rule 70    termino -> factor MODULE termino
Rule 71    factor -> variable
Rule 72    factor -> O_PARENTHESIS expr C_PARENTHESIS
Rule 73    factor -> llamada
Rule 74    factor -> cte
Rule 75    factor -> PLUS cte
Rule 76    factor -> MINUS cte
Rule 77    cte -> CTE_INT
Rule 78    cte -> CTE_FLOAT
Rule 79    epsilon -> <empty>

Terminals, with rules where they appear

AND                  : 55
ASSIGN               : 33 50
CHAR                 : 12
COLON                : 7
COMMA                : 9 18 36 40 44 45
CTE_CHAR             : 
CTE_FLOAT            : 78
CTE_INT              : 77
CTE_STRING           : 43 45
C_ABRACKET           : 21 21 21 22 22 23
C_CBRACKET           : 2
C_PARENTHESIS        : 1 16 34 37 38 41 46 49 72
DIVIDE               : 69
ELSE                 : 47
EQUAL                : 57
FLOAT                : 11
FOR                  : 50
FUNCTION             : 16
GREATER              : 60
GREATER_EQUAL        : 62
ID                   : 1 16 17 18 21 22 23 24 34
IF                   : 46
INT                  : 10
LESSER               : 61
LESSER_EQUAL         : 63
LET                  : 7
MAIN                 : 1
MINUS                : 66 76
MODULE               : 70
NOT_EQUAL            : 58
OR                   : 53
O_ABRACKET           : 21 21 21 22 22 23
O_CBRACKET           : 2
O_PARENTHESIS        : 1 16 34 37 38 41 46 49 72
PLUS                 : 65 75
PROGRAM              : 1
READ                 : 38
RETURN               : 37
SEMICOLON            : 1 7 25 26 27 28 29
STRING               : 13
TIMES                : 68
TO                   : 50
VOID                 : 19
WHILE                : 49
WRITE                : 41
error                : 

Nonterminals, with rules where they appear

and                  : 52 53 55
asignacion           : 25
bloque               : 1 16 46 47 49 50
bloque_prime         : 2 3
compare              : 56 57 57 58 58
cte                  : 74 75 76
decision             : 30
declaracion          : 1 6 16
declaracion_base     : 5 6
declaracion_prime    : 7 9
else                 : 46
epsilon              : 4 48
equal                : 54 55
escritura            : 29
escritura_prime      : 41 44 45
estatuto             : 3
exp                  : 21 21 21 22 22 23 35 36 50 50 59 60 60 61 61 62 62 63 63 65 66
expr                 : 33 37 42 44 46 49 72
factor               : 67 68 69 70
for                  : 32
funcion              : 1 15
funcion_base         : 14 15
funcion_prime        : 16 18
funcion_tipo         : 16
lectura              : 28
lectura_prime        : 38 40
llamada              : 26 73
llamada_prime        : 34 36
or                   : 51 53
programa             : 0
retorno              : 27
termino              : 64 65 66 68 69 70
tipo                 : 7 17 18 20
variable             : 8 9 33 39 40 50 71
while                : 31

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAM ID SEMICOLON declaracion funcion MAIN O_PARENTHESIS C_PARENTHESIS bloque

    PROGRAM         shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> PROGRAM . ID SEMICOLON declaracion funcion MAIN O_PARENTHESIS C_PARENTHESIS bloque

    ID              shift and go to state 3


state 3

    (1) programa -> PROGRAM ID . SEMICOLON declaracion funcion MAIN O_PARENTHESIS C_PARENTHESIS bloque

    SEMICOLON       shift and go to state 4


state 4

    (1) programa -> PROGRAM ID SEMICOLON . declaracion funcion MAIN O_PARENTHESIS C_PARENTHESIS bloque
    (5) declaracion -> . declaracion_base
    (6) declaracion -> . declaracion_base declaracion
    (7) declaracion_base -> . LET declaracion_prime COLON tipo SEMICOLON

    LET             shift and go to state 7

    declaracion                    shift and go to state 5
    declaracion_base               shift and go to state 6

state 5

    (1) programa -> PROGRAM ID SEMICOLON declaracion . funcion MAIN O_PARENTHESIS C_PARENTHESIS bloque
    (14) funcion -> . funcion_base
    (15) funcion -> . funcion_base funcion
    (16) funcion_base -> . FUNCTION funcion_tipo ID O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion bloque

    FUNCTION        shift and go to state 10

    funcion                        shift and go to state 8
    funcion_base                   shift and go to state 9

state 6

    (5) declaracion -> declaracion_base .
    (6) declaracion -> declaracion_base . declaracion
    (5) declaracion -> . declaracion_base
    (6) declaracion -> . declaracion_base declaracion
    (7) declaracion_base -> . LET declaracion_prime COLON tipo SEMICOLON

    FUNCTION        reduce using rule 5 (declaracion -> declaracion_base .)
    O_CBRACKET      reduce using rule 5 (declaracion -> declaracion_base .)
    LET             shift and go to state 7

    declaracion_base               shift and go to state 6
    declaracion                    shift and go to state 11

state 7

    (7) declaracion_base -> LET . declaracion_prime COLON tipo SEMICOLON
    (8) declaracion_prime -> . variable
    (9) declaracion_prime -> . variable COMMA declaracion_prime
    (21) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (22) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (23) variable -> . ID O_ABRACKET exp C_ABRACKET
    (24) variable -> . ID

    ID              shift and go to state 14

    declaracion_prime              shift and go to state 12
    variable                       shift and go to state 13

state 8

    (1) programa -> PROGRAM ID SEMICOLON declaracion funcion . MAIN O_PARENTHESIS C_PARENTHESIS bloque

    MAIN            shift and go to state 15


state 9

    (14) funcion -> funcion_base .
    (15) funcion -> funcion_base . funcion
    (14) funcion -> . funcion_base
    (15) funcion -> . funcion_base funcion
    (16) funcion_base -> . FUNCTION funcion_tipo ID O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion bloque

    MAIN            reduce using rule 14 (funcion -> funcion_base .)
    FUNCTION        shift and go to state 10

    funcion_base                   shift and go to state 9
    funcion                        shift and go to state 16

state 10

    (16) funcion_base -> FUNCTION . funcion_tipo ID O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion bloque
    (19) funcion_tipo -> . VOID
    (20) funcion_tipo -> . tipo
    (10) tipo -> . INT
    (11) tipo -> . FLOAT
    (12) tipo -> . CHAR
    (13) tipo -> . STRING

    VOID            shift and go to state 18
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    STRING          shift and go to state 23

    funcion_tipo                   shift and go to state 17
    tipo                           shift and go to state 19

state 11

    (6) declaracion -> declaracion_base declaracion .

    FUNCTION        reduce using rule 6 (declaracion -> declaracion_base declaracion .)
    O_CBRACKET      reduce using rule 6 (declaracion -> declaracion_base declaracion .)


state 12

    (7) declaracion_base -> LET declaracion_prime . COLON tipo SEMICOLON

    COLON           shift and go to state 24


state 13

    (8) declaracion_prime -> variable .
    (9) declaracion_prime -> variable . COMMA declaracion_prime

    COLON           reduce using rule 8 (declaracion_prime -> variable .)
    COMMA           shift and go to state 25


state 14

    (21) variable -> ID . O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (22) variable -> ID . O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (23) variable -> ID . O_ABRACKET exp C_ABRACKET
    (24) variable -> ID .

    O_ABRACKET      shift and go to state 26
    COMMA           reduce using rule 24 (variable -> ID .)
    COLON           reduce using rule 24 (variable -> ID .)
    ASSIGN          reduce using rule 24 (variable -> ID .)
    C_PARENTHESIS   reduce using rule 24 (variable -> ID .)


state 15

    (1) programa -> PROGRAM ID SEMICOLON declaracion funcion MAIN . O_PARENTHESIS C_PARENTHESIS bloque

    O_PARENTHESIS   shift and go to state 27


state 16

    (15) funcion -> funcion_base funcion .

    MAIN            reduce using rule 15 (funcion -> funcion_base funcion .)


state 17

    (16) funcion_base -> FUNCTION funcion_tipo . ID O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion bloque

    ID              shift and go to state 28


state 18

    (19) funcion_tipo -> VOID .

    ID              reduce using rule 19 (funcion_tipo -> VOID .)


state 19

    (20) funcion_tipo -> tipo .

    ID              reduce using rule 20 (funcion_tipo -> tipo .)


state 20

    (10) tipo -> INT .

    ID              reduce using rule 10 (tipo -> INT .)
    SEMICOLON       reduce using rule 10 (tipo -> INT .)


state 21

    (11) tipo -> FLOAT .

    ID              reduce using rule 11 (tipo -> FLOAT .)
    SEMICOLON       reduce using rule 11 (tipo -> FLOAT .)


state 22

    (12) tipo -> CHAR .

    ID              reduce using rule 12 (tipo -> CHAR .)
    SEMICOLON       reduce using rule 12 (tipo -> CHAR .)


state 23

    (13) tipo -> STRING .

    ID              reduce using rule 13 (tipo -> STRING .)
    SEMICOLON       reduce using rule 13 (tipo -> STRING .)


state 24

    (7) declaracion_base -> LET declaracion_prime COLON . tipo SEMICOLON
    (10) tipo -> . INT
    (11) tipo -> . FLOAT
    (12) tipo -> . CHAR
    (13) tipo -> . STRING

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    STRING          shift and go to state 23

    tipo                           shift and go to state 29

state 25

    (9) declaracion_prime -> variable COMMA . declaracion_prime
    (8) declaracion_prime -> . variable
    (9) declaracion_prime -> . variable COMMA declaracion_prime
    (21) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (22) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (23) variable -> . ID O_ABRACKET exp C_ABRACKET
    (24) variable -> . ID

    ID              shift and go to state 14

    variable                       shift and go to state 13
    declaracion_prime              shift and go to state 30

state 26

    (21) variable -> ID O_ABRACKET . exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (22) variable -> ID O_ABRACKET . exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (23) variable -> ID O_ABRACKET . exp C_ABRACKET
    (64) exp -> . termino
    (65) exp -> . termino PLUS exp
    (66) exp -> . termino MINUS exp
    (67) termino -> . factor
    (68) termino -> . factor TIMES termino
    (69) termino -> . factor DIVIDE termino
    (70) termino -> . factor MODULE termino
    (71) factor -> . variable
    (72) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (73) factor -> . llamada
    (74) factor -> . cte
    (75) factor -> . PLUS cte
    (76) factor -> . MINUS cte
    (21) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (22) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (23) variable -> . ID O_ABRACKET exp C_ABRACKET
    (24) variable -> . ID
    (34) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (77) cte -> . CTE_INT
    (78) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 38
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    ID              shift and go to state 31
    CTE_INT         shift and go to state 41
    CTE_FLOAT       shift and go to state 42

    exp                            shift and go to state 32
    termino                        shift and go to state 33
    factor                         shift and go to state 36
    variable                       shift and go to state 37
    llamada                        shift and go to state 39
    cte                            shift and go to state 40

state 27

    (1) programa -> PROGRAM ID SEMICOLON declaracion funcion MAIN O_PARENTHESIS . C_PARENTHESIS bloque

    C_PARENTHESIS   shift and go to state 43


state 28

    (16) funcion_base -> FUNCTION funcion_tipo ID . O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion bloque

    O_PARENTHESIS   shift and go to state 44


state 29

    (7) declaracion_base -> LET declaracion_prime COLON tipo . SEMICOLON

    SEMICOLON       shift and go to state 45


state 30

    (9) declaracion_prime -> variable COMMA declaracion_prime .

    COLON           reduce using rule 9 (declaracion_prime -> variable COMMA declaracion_prime .)


state 31

    (21) variable -> ID . O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (22) variable -> ID . O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (23) variable -> ID . O_ABRACKET exp C_ABRACKET
    (24) variable -> ID .
    (34) llamada -> ID . O_PARENTHESIS llamada_prime C_PARENTHESIS

    O_ABRACKET      shift and go to state 26
    TIMES           reduce using rule 24 (variable -> ID .)
    DIVIDE          reduce using rule 24 (variable -> ID .)
    MODULE          reduce using rule 24 (variable -> ID .)
    PLUS            reduce using rule 24 (variable -> ID .)
    MINUS           reduce using rule 24 (variable -> ID .)
    C_ABRACKET      reduce using rule 24 (variable -> ID .)
    GREATER         reduce using rule 24 (variable -> ID .)
    LESSER          reduce using rule 24 (variable -> ID .)
    GREATER_EQUAL   reduce using rule 24 (variable -> ID .)
    LESSER_EQUAL    reduce using rule 24 (variable -> ID .)
    EQUAL           reduce using rule 24 (variable -> ID .)
    NOT_EQUAL       reduce using rule 24 (variable -> ID .)
    AND             reduce using rule 24 (variable -> ID .)
    OR              reduce using rule 24 (variable -> ID .)
    C_PARENTHESIS   reduce using rule 24 (variable -> ID .)
    COMMA           reduce using rule 24 (variable -> ID .)
    SEMICOLON       reduce using rule 24 (variable -> ID .)
    TO              reduce using rule 24 (variable -> ID .)
    O_CBRACKET      reduce using rule 24 (variable -> ID .)
    O_PARENTHESIS   shift and go to state 46


state 32

    (21) variable -> ID O_ABRACKET exp . C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (22) variable -> ID O_ABRACKET exp . C_ABRACKET O_ABRACKET exp C_ABRACKET
    (23) variable -> ID O_ABRACKET exp . C_ABRACKET

    C_ABRACKET      shift and go to state 47


state 33

    (64) exp -> termino .
    (65) exp -> termino . PLUS exp
    (66) exp -> termino . MINUS exp

    C_ABRACKET      reduce using rule 64 (exp -> termino .)
    GREATER         reduce using rule 64 (exp -> termino .)
    LESSER          reduce using rule 64 (exp -> termino .)
    GREATER_EQUAL   reduce using rule 64 (exp -> termino .)
    LESSER_EQUAL    reduce using rule 64 (exp -> termino .)
    EQUAL           reduce using rule 64 (exp -> termino .)
    NOT_EQUAL       reduce using rule 64 (exp -> termino .)
    AND             reduce using rule 64 (exp -> termino .)
    OR              reduce using rule 64 (exp -> termino .)
    C_PARENTHESIS   reduce using rule 64 (exp -> termino .)
    COMMA           reduce using rule 64 (exp -> termino .)
    SEMICOLON       reduce using rule 64 (exp -> termino .)
    TO              reduce using rule 64 (exp -> termino .)
    O_CBRACKET      reduce using rule 64 (exp -> termino .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49


state 34

    (75) factor -> PLUS . cte
    (77) cte -> . CTE_INT
    (78) cte -> . CTE_FLOAT

    CTE_INT         shift and go to state 41
    CTE_FLOAT       shift and go to state 42

    cte                            shift and go to state 50

state 35

    (76) factor -> MINUS . cte
    (77) cte -> . CTE_INT
    (78) cte -> . CTE_FLOAT

    CTE_INT         shift and go to state 41
    CTE_FLOAT       shift and go to state 42

    cte                            shift and go to state 51

state 36

    (67) termino -> factor .
    (68) termino -> factor . TIMES termino
    (69) termino -> factor . DIVIDE termino
    (70) termino -> factor . MODULE termino

    PLUS            reduce using rule 67 (termino -> factor .)
    MINUS           reduce using rule 67 (termino -> factor .)
    C_ABRACKET      reduce using rule 67 (termino -> factor .)
    GREATER         reduce using rule 67 (termino -> factor .)
    LESSER          reduce using rule 67 (termino -> factor .)
    GREATER_EQUAL   reduce using rule 67 (termino -> factor .)
    LESSER_EQUAL    reduce using rule 67 (termino -> factor .)
    EQUAL           reduce using rule 67 (termino -> factor .)
    NOT_EQUAL       reduce using rule 67 (termino -> factor .)
    AND             reduce using rule 67 (termino -> factor .)
    OR              reduce using rule 67 (termino -> factor .)
    C_PARENTHESIS   reduce using rule 67 (termino -> factor .)
    COMMA           reduce using rule 67 (termino -> factor .)
    SEMICOLON       reduce using rule 67 (termino -> factor .)
    TO              reduce using rule 67 (termino -> factor .)
    O_CBRACKET      reduce using rule 67 (termino -> factor .)
    TIMES           shift and go to state 52
    DIVIDE          shift and go to state 53
    MODULE          shift and go to state 54


state 37

    (71) factor -> variable .

    TIMES           reduce using rule 71 (factor -> variable .)
    DIVIDE          reduce using rule 71 (factor -> variable .)
    MODULE          reduce using rule 71 (factor -> variable .)
    PLUS            reduce using rule 71 (factor -> variable .)
    MINUS           reduce using rule 71 (factor -> variable .)
    C_ABRACKET      reduce using rule 71 (factor -> variable .)
    GREATER         reduce using rule 71 (factor -> variable .)
    LESSER          reduce using rule 71 (factor -> variable .)
    GREATER_EQUAL   reduce using rule 71 (factor -> variable .)
    LESSER_EQUAL    reduce using rule 71 (factor -> variable .)
    EQUAL           reduce using rule 71 (factor -> variable .)
    NOT_EQUAL       reduce using rule 71 (factor -> variable .)
    AND             reduce using rule 71 (factor -> variable .)
    OR              reduce using rule 71 (factor -> variable .)
    C_PARENTHESIS   reduce using rule 71 (factor -> variable .)
    COMMA           reduce using rule 71 (factor -> variable .)
    SEMICOLON       reduce using rule 71 (factor -> variable .)
    TO              reduce using rule 71 (factor -> variable .)
    O_CBRACKET      reduce using rule 71 (factor -> variable .)


state 38

    (72) factor -> O_PARENTHESIS . expr C_PARENTHESIS
    (51) expr -> . or
    (52) or -> . and
    (53) or -> . and OR or
    (54) and -> . equal
    (55) and -> . equal AND and
    (56) equal -> . compare
    (57) equal -> . compare EQUAL compare
    (58) equal -> . compare NOT_EQUAL compare
    (59) compare -> . exp
    (60) compare -> . exp GREATER exp
    (61) compare -> . exp LESSER exp
    (62) compare -> . exp GREATER_EQUAL exp
    (63) compare -> . exp LESSER_EQUAL exp
    (64) exp -> . termino
    (65) exp -> . termino PLUS exp
    (66) exp -> . termino MINUS exp
    (67) termino -> . factor
    (68) termino -> . factor TIMES termino
    (69) termino -> . factor DIVIDE termino
    (70) termino -> . factor MODULE termino
    (71) factor -> . variable
    (72) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (73) factor -> . llamada
    (74) factor -> . cte
    (75) factor -> . PLUS cte
    (76) factor -> . MINUS cte
    (21) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (22) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (23) variable -> . ID O_ABRACKET exp C_ABRACKET
    (24) variable -> . ID
    (34) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (77) cte -> . CTE_INT
    (78) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 38
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    ID              shift and go to state 31
    CTE_INT         shift and go to state 41
    CTE_FLOAT       shift and go to state 42

    expr                           shift and go to state 55
    or                             shift and go to state 56
    and                            shift and go to state 57
    equal                          shift and go to state 58
    compare                        shift and go to state 59
    exp                            shift and go to state 60
    termino                        shift and go to state 33
    factor                         shift and go to state 36
    variable                       shift and go to state 37
    llamada                        shift and go to state 39
    cte                            shift and go to state 40

state 39

    (73) factor -> llamada .

    TIMES           reduce using rule 73 (factor -> llamada .)
    DIVIDE          reduce using rule 73 (factor -> llamada .)
    MODULE          reduce using rule 73 (factor -> llamada .)
    PLUS            reduce using rule 73 (factor -> llamada .)
    MINUS           reduce using rule 73 (factor -> llamada .)
    C_ABRACKET      reduce using rule 73 (factor -> llamada .)
    GREATER         reduce using rule 73 (factor -> llamada .)
    LESSER          reduce using rule 73 (factor -> llamada .)
    GREATER_EQUAL   reduce using rule 73 (factor -> llamada .)
    LESSER_EQUAL    reduce using rule 73 (factor -> llamada .)
    EQUAL           reduce using rule 73 (factor -> llamada .)
    NOT_EQUAL       reduce using rule 73 (factor -> llamada .)
    AND             reduce using rule 73 (factor -> llamada .)
    OR              reduce using rule 73 (factor -> llamada .)
    C_PARENTHESIS   reduce using rule 73 (factor -> llamada .)
    COMMA           reduce using rule 73 (factor -> llamada .)
    SEMICOLON       reduce using rule 73 (factor -> llamada .)
    TO              reduce using rule 73 (factor -> llamada .)
    O_CBRACKET      reduce using rule 73 (factor -> llamada .)


state 40

    (74) factor -> cte .

    TIMES           reduce using rule 74 (factor -> cte .)
    DIVIDE          reduce using rule 74 (factor -> cte .)
    MODULE          reduce using rule 74 (factor -> cte .)
    PLUS            reduce using rule 74 (factor -> cte .)
    MINUS           reduce using rule 74 (factor -> cte .)
    C_ABRACKET      reduce using rule 74 (factor -> cte .)
    GREATER         reduce using rule 74 (factor -> cte .)
    LESSER          reduce using rule 74 (factor -> cte .)
    GREATER_EQUAL   reduce using rule 74 (factor -> cte .)
    LESSER_EQUAL    reduce using rule 74 (factor -> cte .)
    EQUAL           reduce using rule 74 (factor -> cte .)
    NOT_EQUAL       reduce using rule 74 (factor -> cte .)
    AND             reduce using rule 74 (factor -> cte .)
    OR              reduce using rule 74 (factor -> cte .)
    C_PARENTHESIS   reduce using rule 74 (factor -> cte .)
    COMMA           reduce using rule 74 (factor -> cte .)
    SEMICOLON       reduce using rule 74 (factor -> cte .)
    TO              reduce using rule 74 (factor -> cte .)
    O_CBRACKET      reduce using rule 74 (factor -> cte .)


state 41

    (77) cte -> CTE_INT .

    TIMES           reduce using rule 77 (cte -> CTE_INT .)
    DIVIDE          reduce using rule 77 (cte -> CTE_INT .)
    MODULE          reduce using rule 77 (cte -> CTE_INT .)
    PLUS            reduce using rule 77 (cte -> CTE_INT .)
    MINUS           reduce using rule 77 (cte -> CTE_INT .)
    C_ABRACKET      reduce using rule 77 (cte -> CTE_INT .)
    GREATER         reduce using rule 77 (cte -> CTE_INT .)
    LESSER          reduce using rule 77 (cte -> CTE_INT .)
    GREATER_EQUAL   reduce using rule 77 (cte -> CTE_INT .)
    LESSER_EQUAL    reduce using rule 77 (cte -> CTE_INT .)
    EQUAL           reduce using rule 77 (cte -> CTE_INT .)
    NOT_EQUAL       reduce using rule 77 (cte -> CTE_INT .)
    AND             reduce using rule 77 (cte -> CTE_INT .)
    OR              reduce using rule 77 (cte -> CTE_INT .)
    C_PARENTHESIS   reduce using rule 77 (cte -> CTE_INT .)
    COMMA           reduce using rule 77 (cte -> CTE_INT .)
    SEMICOLON       reduce using rule 77 (cte -> CTE_INT .)
    TO              reduce using rule 77 (cte -> CTE_INT .)
    O_CBRACKET      reduce using rule 77 (cte -> CTE_INT .)


state 42

    (78) cte -> CTE_FLOAT .

    TIMES           reduce using rule 78 (cte -> CTE_FLOAT .)
    DIVIDE          reduce using rule 78 (cte -> CTE_FLOAT .)
    MODULE          reduce using rule 78 (cte -> CTE_FLOAT .)
    PLUS            reduce using rule 78 (cte -> CTE_FLOAT .)
    MINUS           reduce using rule 78 (cte -> CTE_FLOAT .)
    C_ABRACKET      reduce using rule 78 (cte -> CTE_FLOAT .)
    GREATER         reduce using rule 78 (cte -> CTE_FLOAT .)
    LESSER          reduce using rule 78 (cte -> CTE_FLOAT .)
    GREATER_EQUAL   reduce using rule 78 (cte -> CTE_FLOAT .)
    LESSER_EQUAL    reduce using rule 78 (cte -> CTE_FLOAT .)
    EQUAL           reduce using rule 78 (cte -> CTE_FLOAT .)
    NOT_EQUAL       reduce using rule 78 (cte -> CTE_FLOAT .)
    AND             reduce using rule 78 (cte -> CTE_FLOAT .)
    OR              reduce using rule 78 (cte -> CTE_FLOAT .)
    C_PARENTHESIS   reduce using rule 78 (cte -> CTE_FLOAT .)
    COMMA           reduce using rule 78 (cte -> CTE_FLOAT .)
    SEMICOLON       reduce using rule 78 (cte -> CTE_FLOAT .)
    TO              reduce using rule 78 (cte -> CTE_FLOAT .)
    O_CBRACKET      reduce using rule 78 (cte -> CTE_FLOAT .)


state 43

    (1) programa -> PROGRAM ID SEMICOLON declaracion funcion MAIN O_PARENTHESIS C_PARENTHESIS . bloque
    (2) bloque -> . O_CBRACKET bloque_prime C_CBRACKET

    O_CBRACKET      shift and go to state 62

    bloque                         shift and go to state 61

state 44

    (16) funcion_base -> FUNCTION funcion_tipo ID O_PARENTHESIS . funcion_prime C_PARENTHESIS declaracion bloque
    (17) funcion_prime -> . tipo ID
    (18) funcion_prime -> . tipo ID COMMA funcion_prime
    (10) tipo -> . INT
    (11) tipo -> . FLOAT
    (12) tipo -> . CHAR
    (13) tipo -> . STRING

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    STRING          shift and go to state 23

    funcion_prime                  shift and go to state 63
    tipo                           shift and go to state 64

state 45

    (7) declaracion_base -> LET declaracion_prime COLON tipo SEMICOLON .

    LET             reduce using rule 7 (declaracion_base -> LET declaracion_prime COLON tipo SEMICOLON .)
    FUNCTION        reduce using rule 7 (declaracion_base -> LET declaracion_prime COLON tipo SEMICOLON .)
    O_CBRACKET      reduce using rule 7 (declaracion_base -> LET declaracion_prime COLON tipo SEMICOLON .)


state 46

    (34) llamada -> ID O_PARENTHESIS . llamada_prime C_PARENTHESIS
    (35) llamada_prime -> . exp
    (36) llamada_prime -> . exp COMMA llamada_prime
    (64) exp -> . termino
    (65) exp -> . termino PLUS exp
    (66) exp -> . termino MINUS exp
    (67) termino -> . factor
    (68) termino -> . factor TIMES termino
    (69) termino -> . factor DIVIDE termino
    (70) termino -> . factor MODULE termino
    (71) factor -> . variable
    (72) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (73) factor -> . llamada
    (74) factor -> . cte
    (75) factor -> . PLUS cte
    (76) factor -> . MINUS cte
    (21) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (22) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (23) variable -> . ID O_ABRACKET exp C_ABRACKET
    (24) variable -> . ID
    (34) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (77) cte -> . CTE_INT
    (78) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 38
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    ID              shift and go to state 31
    CTE_INT         shift and go to state 41
    CTE_FLOAT       shift and go to state 42

    llamada_prime                  shift and go to state 65
    exp                            shift and go to state 66
    termino                        shift and go to state 33
    factor                         shift and go to state 36
    variable                       shift and go to state 37
    llamada                        shift and go to state 39
    cte                            shift and go to state 40

state 47

    (21) variable -> ID O_ABRACKET exp C_ABRACKET . O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (22) variable -> ID O_ABRACKET exp C_ABRACKET . O_ABRACKET exp C_ABRACKET
    (23) variable -> ID O_ABRACKET exp C_ABRACKET .

    O_ABRACKET      shift and go to state 67
    COMMA           reduce using rule 23 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    COLON           reduce using rule 23 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    TIMES           reduce using rule 23 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    DIVIDE          reduce using rule 23 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    MODULE          reduce using rule 23 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    PLUS            reduce using rule 23 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    MINUS           reduce using rule 23 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    C_ABRACKET      reduce using rule 23 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    GREATER         reduce using rule 23 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    LESSER          reduce using rule 23 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    GREATER_EQUAL   reduce using rule 23 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    LESSER_EQUAL    reduce using rule 23 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    EQUAL           reduce using rule 23 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    NOT_EQUAL       reduce using rule 23 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    AND             reduce using rule 23 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    OR              reduce using rule 23 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    C_PARENTHESIS   reduce using rule 23 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    SEMICOLON       reduce using rule 23 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    TO              reduce using rule 23 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    O_CBRACKET      reduce using rule 23 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    ASSIGN          reduce using rule 23 (variable -> ID O_ABRACKET exp C_ABRACKET .)


state 48

    (65) exp -> termino PLUS . exp
    (64) exp -> . termino
    (65) exp -> . termino PLUS exp
    (66) exp -> . termino MINUS exp
    (67) termino -> . factor
    (68) termino -> . factor TIMES termino
    (69) termino -> . factor DIVIDE termino
    (70) termino -> . factor MODULE termino
    (71) factor -> . variable
    (72) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (73) factor -> . llamada
    (74) factor -> . cte
    (75) factor -> . PLUS cte
    (76) factor -> . MINUS cte
    (21) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (22) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (23) variable -> . ID O_ABRACKET exp C_ABRACKET
    (24) variable -> . ID
    (34) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (77) cte -> . CTE_INT
    (78) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 38
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    ID              shift and go to state 31
    CTE_INT         shift and go to state 41
    CTE_FLOAT       shift and go to state 42

    termino                        shift and go to state 33
    exp                            shift and go to state 68
    factor                         shift and go to state 36
    variable                       shift and go to state 37
    llamada                        shift and go to state 39
    cte                            shift and go to state 40

state 49

    (66) exp -> termino MINUS . exp
    (64) exp -> . termino
    (65) exp -> . termino PLUS exp
    (66) exp -> . termino MINUS exp
    (67) termino -> . factor
    (68) termino -> . factor TIMES termino
    (69) termino -> . factor DIVIDE termino
    (70) termino -> . factor MODULE termino
    (71) factor -> . variable
    (72) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (73) factor -> . llamada
    (74) factor -> . cte
    (75) factor -> . PLUS cte
    (76) factor -> . MINUS cte
    (21) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (22) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (23) variable -> . ID O_ABRACKET exp C_ABRACKET
    (24) variable -> . ID
    (34) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (77) cte -> . CTE_INT
    (78) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 38
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    ID              shift and go to state 31
    CTE_INT         shift and go to state 41
    CTE_FLOAT       shift and go to state 42

    termino                        shift and go to state 33
    exp                            shift and go to state 69
    factor                         shift and go to state 36
    variable                       shift and go to state 37
    llamada                        shift and go to state 39
    cte                            shift and go to state 40

state 50

    (75) factor -> PLUS cte .

    TIMES           reduce using rule 75 (factor -> PLUS cte .)
    DIVIDE          reduce using rule 75 (factor -> PLUS cte .)
    MODULE          reduce using rule 75 (factor -> PLUS cte .)
    PLUS            reduce using rule 75 (factor -> PLUS cte .)
    MINUS           reduce using rule 75 (factor -> PLUS cte .)
    C_ABRACKET      reduce using rule 75 (factor -> PLUS cte .)
    GREATER         reduce using rule 75 (factor -> PLUS cte .)
    LESSER          reduce using rule 75 (factor -> PLUS cte .)
    GREATER_EQUAL   reduce using rule 75 (factor -> PLUS cte .)
    LESSER_EQUAL    reduce using rule 75 (factor -> PLUS cte .)
    EQUAL           reduce using rule 75 (factor -> PLUS cte .)
    NOT_EQUAL       reduce using rule 75 (factor -> PLUS cte .)
    AND             reduce using rule 75 (factor -> PLUS cte .)
    OR              reduce using rule 75 (factor -> PLUS cte .)
    C_PARENTHESIS   reduce using rule 75 (factor -> PLUS cte .)
    COMMA           reduce using rule 75 (factor -> PLUS cte .)
    SEMICOLON       reduce using rule 75 (factor -> PLUS cte .)
    TO              reduce using rule 75 (factor -> PLUS cte .)
    O_CBRACKET      reduce using rule 75 (factor -> PLUS cte .)


state 51

    (76) factor -> MINUS cte .

    TIMES           reduce using rule 76 (factor -> MINUS cte .)
    DIVIDE          reduce using rule 76 (factor -> MINUS cte .)
    MODULE          reduce using rule 76 (factor -> MINUS cte .)
    PLUS            reduce using rule 76 (factor -> MINUS cte .)
    MINUS           reduce using rule 76 (factor -> MINUS cte .)
    C_ABRACKET      reduce using rule 76 (factor -> MINUS cte .)
    GREATER         reduce using rule 76 (factor -> MINUS cte .)
    LESSER          reduce using rule 76 (factor -> MINUS cte .)
    GREATER_EQUAL   reduce using rule 76 (factor -> MINUS cte .)
    LESSER_EQUAL    reduce using rule 76 (factor -> MINUS cte .)
    EQUAL           reduce using rule 76 (factor -> MINUS cte .)
    NOT_EQUAL       reduce using rule 76 (factor -> MINUS cte .)
    AND             reduce using rule 76 (factor -> MINUS cte .)
    OR              reduce using rule 76 (factor -> MINUS cte .)
    C_PARENTHESIS   reduce using rule 76 (factor -> MINUS cte .)
    COMMA           reduce using rule 76 (factor -> MINUS cte .)
    SEMICOLON       reduce using rule 76 (factor -> MINUS cte .)
    TO              reduce using rule 76 (factor -> MINUS cte .)
    O_CBRACKET      reduce using rule 76 (factor -> MINUS cte .)


state 52

    (68) termino -> factor TIMES . termino
    (67) termino -> . factor
    (68) termino -> . factor TIMES termino
    (69) termino -> . factor DIVIDE termino
    (70) termino -> . factor MODULE termino
    (71) factor -> . variable
    (72) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (73) factor -> . llamada
    (74) factor -> . cte
    (75) factor -> . PLUS cte
    (76) factor -> . MINUS cte
    (21) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (22) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (23) variable -> . ID O_ABRACKET exp C_ABRACKET
    (24) variable -> . ID
    (34) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (77) cte -> . CTE_INT
    (78) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 38
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    ID              shift and go to state 31
    CTE_INT         shift and go to state 41
    CTE_FLOAT       shift and go to state 42

    factor                         shift and go to state 36
    termino                        shift and go to state 70
    variable                       shift and go to state 37
    llamada                        shift and go to state 39
    cte                            shift and go to state 40

state 53

    (69) termino -> factor DIVIDE . termino
    (67) termino -> . factor
    (68) termino -> . factor TIMES termino
    (69) termino -> . factor DIVIDE termino
    (70) termino -> . factor MODULE termino
    (71) factor -> . variable
    (72) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (73) factor -> . llamada
    (74) factor -> . cte
    (75) factor -> . PLUS cte
    (76) factor -> . MINUS cte
    (21) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (22) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (23) variable -> . ID O_ABRACKET exp C_ABRACKET
    (24) variable -> . ID
    (34) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (77) cte -> . CTE_INT
    (78) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 38
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    ID              shift and go to state 31
    CTE_INT         shift and go to state 41
    CTE_FLOAT       shift and go to state 42

    factor                         shift and go to state 36
    termino                        shift and go to state 71
    variable                       shift and go to state 37
    llamada                        shift and go to state 39
    cte                            shift and go to state 40

state 54

    (70) termino -> factor MODULE . termino
    (67) termino -> . factor
    (68) termino -> . factor TIMES termino
    (69) termino -> . factor DIVIDE termino
    (70) termino -> . factor MODULE termino
    (71) factor -> . variable
    (72) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (73) factor -> . llamada
    (74) factor -> . cte
    (75) factor -> . PLUS cte
    (76) factor -> . MINUS cte
    (21) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (22) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (23) variable -> . ID O_ABRACKET exp C_ABRACKET
    (24) variable -> . ID
    (34) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (77) cte -> . CTE_INT
    (78) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 38
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    ID              shift and go to state 31
    CTE_INT         shift and go to state 41
    CTE_FLOAT       shift and go to state 42

    factor                         shift and go to state 36
    termino                        shift and go to state 72
    variable                       shift and go to state 37
    llamada                        shift and go to state 39
    cte                            shift and go to state 40

state 55

    (72) factor -> O_PARENTHESIS expr . C_PARENTHESIS

    C_PARENTHESIS   shift and go to state 73


state 56

    (51) expr -> or .

    C_PARENTHESIS   reduce using rule 51 (expr -> or .)
    SEMICOLON       reduce using rule 51 (expr -> or .)
    COMMA           reduce using rule 51 (expr -> or .)


state 57

    (52) or -> and .
    (53) or -> and . OR or

    C_PARENTHESIS   reduce using rule 52 (or -> and .)
    SEMICOLON       reduce using rule 52 (or -> and .)
    COMMA           reduce using rule 52 (or -> and .)
    OR              shift and go to state 74


state 58

    (54) and -> equal .
    (55) and -> equal . AND and

    OR              reduce using rule 54 (and -> equal .)
    C_PARENTHESIS   reduce using rule 54 (and -> equal .)
    SEMICOLON       reduce using rule 54 (and -> equal .)
    COMMA           reduce using rule 54 (and -> equal .)
    AND             shift and go to state 75


state 59

    (56) equal -> compare .
    (57) equal -> compare . EQUAL compare
    (58) equal -> compare . NOT_EQUAL compare

    AND             reduce using rule 56 (equal -> compare .)
    OR              reduce using rule 56 (equal -> compare .)
    C_PARENTHESIS   reduce using rule 56 (equal -> compare .)
    SEMICOLON       reduce using rule 56 (equal -> compare .)
    COMMA           reduce using rule 56 (equal -> compare .)
    EQUAL           shift and go to state 76
    NOT_EQUAL       shift and go to state 77


state 60

    (59) compare -> exp .
    (60) compare -> exp . GREATER exp
    (61) compare -> exp . LESSER exp
    (62) compare -> exp . GREATER_EQUAL exp
    (63) compare -> exp . LESSER_EQUAL exp

    EQUAL           reduce using rule 59 (compare -> exp .)
    NOT_EQUAL       reduce using rule 59 (compare -> exp .)
    AND             reduce using rule 59 (compare -> exp .)
    OR              reduce using rule 59 (compare -> exp .)
    C_PARENTHESIS   reduce using rule 59 (compare -> exp .)
    SEMICOLON       reduce using rule 59 (compare -> exp .)
    COMMA           reduce using rule 59 (compare -> exp .)
    GREATER         shift and go to state 78
    LESSER          shift and go to state 79
    GREATER_EQUAL   shift and go to state 80
    LESSER_EQUAL    shift and go to state 81


state 61

    (1) programa -> PROGRAM ID SEMICOLON declaracion funcion MAIN O_PARENTHESIS C_PARENTHESIS bloque .

    $end            reduce using rule 1 (programa -> PROGRAM ID SEMICOLON declaracion funcion MAIN O_PARENTHESIS C_PARENTHESIS bloque .)


state 62

    (2) bloque -> O_CBRACKET . bloque_prime C_CBRACKET
    (3) bloque_prime -> . estatuto bloque_prime
    (4) bloque_prime -> . epsilon
    (25) estatuto -> . asignacion SEMICOLON
    (26) estatuto -> . llamada SEMICOLON
    (27) estatuto -> . retorno SEMICOLON
    (28) estatuto -> . lectura SEMICOLON
    (29) estatuto -> . escritura SEMICOLON
    (30) estatuto -> . decision
    (31) estatuto -> . while
    (32) estatuto -> . for
    (79) epsilon -> .
    (33) asignacion -> . variable ASSIGN expr
    (34) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (37) retorno -> . RETURN O_PARENTHESIS expr C_PARENTHESIS
    (38) lectura -> . READ O_PARENTHESIS lectura_prime C_PARENTHESIS
    (41) escritura -> . WRITE O_PARENTHESIS escritura_prime C_PARENTHESIS
    (46) decision -> . IF O_PARENTHESIS expr C_PARENTHESIS bloque else
    (49) while -> . WHILE O_PARENTHESIS expr C_PARENTHESIS bloque
    (50) for -> . FOR variable ASSIGN exp TO exp bloque
    (21) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (22) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (23) variable -> . ID O_ABRACKET exp C_ABRACKET
    (24) variable -> . ID

    C_CBRACKET      reduce using rule 79 (epsilon -> .)
    ID              shift and go to state 94
    RETURN          shift and go to state 95
    READ            shift and go to state 96
    WRITE           shift and go to state 97
    IF              shift and go to state 98
    WHILE           shift and go to state 99
    FOR             shift and go to state 100

    bloque_prime                   shift and go to state 82
    estatuto                       shift and go to state 83
    epsilon                        shift and go to state 84
    asignacion                     shift and go to state 85
    llamada                        shift and go to state 86
    retorno                        shift and go to state 87
    lectura                        shift and go to state 88
    escritura                      shift and go to state 89
    decision                       shift and go to state 90
    while                          shift and go to state 91
    for                            shift and go to state 92
    variable                       shift and go to state 93

state 63

    (16) funcion_base -> FUNCTION funcion_tipo ID O_PARENTHESIS funcion_prime . C_PARENTHESIS declaracion bloque

    C_PARENTHESIS   shift and go to state 101


state 64

    (17) funcion_prime -> tipo . ID
    (18) funcion_prime -> tipo . ID COMMA funcion_prime

    ID              shift and go to state 102


state 65

    (34) llamada -> ID O_PARENTHESIS llamada_prime . C_PARENTHESIS

    C_PARENTHESIS   shift and go to state 103


state 66

    (35) llamada_prime -> exp .
    (36) llamada_prime -> exp . COMMA llamada_prime

    C_PARENTHESIS   reduce using rule 35 (llamada_prime -> exp .)
    COMMA           shift and go to state 104


state 67

    (21) variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET . exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (22) variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET . exp C_ABRACKET
    (64) exp -> . termino
    (65) exp -> . termino PLUS exp
    (66) exp -> . termino MINUS exp
    (67) termino -> . factor
    (68) termino -> . factor TIMES termino
    (69) termino -> . factor DIVIDE termino
    (70) termino -> . factor MODULE termino
    (71) factor -> . variable
    (72) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (73) factor -> . llamada
    (74) factor -> . cte
    (75) factor -> . PLUS cte
    (76) factor -> . MINUS cte
    (21) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (22) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (23) variable -> . ID O_ABRACKET exp C_ABRACKET
    (24) variable -> . ID
    (34) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (77) cte -> . CTE_INT
    (78) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 38
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    ID              shift and go to state 31
    CTE_INT         shift and go to state 41
    CTE_FLOAT       shift and go to state 42

    exp                            shift and go to state 105
    termino                        shift and go to state 33
    factor                         shift and go to state 36
    variable                       shift and go to state 37
    llamada                        shift and go to state 39
    cte                            shift and go to state 40

state 68

    (65) exp -> termino PLUS exp .

    C_ABRACKET      reduce using rule 65 (exp -> termino PLUS exp .)
    GREATER         reduce using rule 65 (exp -> termino PLUS exp .)
    LESSER          reduce using rule 65 (exp -> termino PLUS exp .)
    GREATER_EQUAL   reduce using rule 65 (exp -> termino PLUS exp .)
    LESSER_EQUAL    reduce using rule 65 (exp -> termino PLUS exp .)
    EQUAL           reduce using rule 65 (exp -> termino PLUS exp .)
    NOT_EQUAL       reduce using rule 65 (exp -> termino PLUS exp .)
    AND             reduce using rule 65 (exp -> termino PLUS exp .)
    OR              reduce using rule 65 (exp -> termino PLUS exp .)
    C_PARENTHESIS   reduce using rule 65 (exp -> termino PLUS exp .)
    COMMA           reduce using rule 65 (exp -> termino PLUS exp .)
    SEMICOLON       reduce using rule 65 (exp -> termino PLUS exp .)
    TO              reduce using rule 65 (exp -> termino PLUS exp .)
    O_CBRACKET      reduce using rule 65 (exp -> termino PLUS exp .)


state 69

    (66) exp -> termino MINUS exp .

    C_ABRACKET      reduce using rule 66 (exp -> termino MINUS exp .)
    GREATER         reduce using rule 66 (exp -> termino MINUS exp .)
    LESSER          reduce using rule 66 (exp -> termino MINUS exp .)
    GREATER_EQUAL   reduce using rule 66 (exp -> termino MINUS exp .)
    LESSER_EQUAL    reduce using rule 66 (exp -> termino MINUS exp .)
    EQUAL           reduce using rule 66 (exp -> termino MINUS exp .)
    NOT_EQUAL       reduce using rule 66 (exp -> termino MINUS exp .)
    AND             reduce using rule 66 (exp -> termino MINUS exp .)
    OR              reduce using rule 66 (exp -> termino MINUS exp .)
    C_PARENTHESIS   reduce using rule 66 (exp -> termino MINUS exp .)
    COMMA           reduce using rule 66 (exp -> termino MINUS exp .)
    SEMICOLON       reduce using rule 66 (exp -> termino MINUS exp .)
    TO              reduce using rule 66 (exp -> termino MINUS exp .)
    O_CBRACKET      reduce using rule 66 (exp -> termino MINUS exp .)


state 70

    (68) termino -> factor TIMES termino .

    PLUS            reduce using rule 68 (termino -> factor TIMES termino .)
    MINUS           reduce using rule 68 (termino -> factor TIMES termino .)
    C_ABRACKET      reduce using rule 68 (termino -> factor TIMES termino .)
    GREATER         reduce using rule 68 (termino -> factor TIMES termino .)
    LESSER          reduce using rule 68 (termino -> factor TIMES termino .)
    GREATER_EQUAL   reduce using rule 68 (termino -> factor TIMES termino .)
    LESSER_EQUAL    reduce using rule 68 (termino -> factor TIMES termino .)
    EQUAL           reduce using rule 68 (termino -> factor TIMES termino .)
    NOT_EQUAL       reduce using rule 68 (termino -> factor TIMES termino .)
    AND             reduce using rule 68 (termino -> factor TIMES termino .)
    OR              reduce using rule 68 (termino -> factor TIMES termino .)
    C_PARENTHESIS   reduce using rule 68 (termino -> factor TIMES termino .)
    COMMA           reduce using rule 68 (termino -> factor TIMES termino .)
    SEMICOLON       reduce using rule 68 (termino -> factor TIMES termino .)
    TO              reduce using rule 68 (termino -> factor TIMES termino .)
    O_CBRACKET      reduce using rule 68 (termino -> factor TIMES termino .)


state 71

    (69) termino -> factor DIVIDE termino .

    PLUS            reduce using rule 69 (termino -> factor DIVIDE termino .)
    MINUS           reduce using rule 69 (termino -> factor DIVIDE termino .)
    C_ABRACKET      reduce using rule 69 (termino -> factor DIVIDE termino .)
    GREATER         reduce using rule 69 (termino -> factor DIVIDE termino .)
    LESSER          reduce using rule 69 (termino -> factor DIVIDE termino .)
    GREATER_EQUAL   reduce using rule 69 (termino -> factor DIVIDE termino .)
    LESSER_EQUAL    reduce using rule 69 (termino -> factor DIVIDE termino .)
    EQUAL           reduce using rule 69 (termino -> factor DIVIDE termino .)
    NOT_EQUAL       reduce using rule 69 (termino -> factor DIVIDE termino .)
    AND             reduce using rule 69 (termino -> factor DIVIDE termino .)
    OR              reduce using rule 69 (termino -> factor DIVIDE termino .)
    C_PARENTHESIS   reduce using rule 69 (termino -> factor DIVIDE termino .)
    COMMA           reduce using rule 69 (termino -> factor DIVIDE termino .)
    SEMICOLON       reduce using rule 69 (termino -> factor DIVIDE termino .)
    TO              reduce using rule 69 (termino -> factor DIVIDE termino .)
    O_CBRACKET      reduce using rule 69 (termino -> factor DIVIDE termino .)


state 72

    (70) termino -> factor MODULE termino .

    PLUS            reduce using rule 70 (termino -> factor MODULE termino .)
    MINUS           reduce using rule 70 (termino -> factor MODULE termino .)
    C_ABRACKET      reduce using rule 70 (termino -> factor MODULE termino .)
    GREATER         reduce using rule 70 (termino -> factor MODULE termino .)
    LESSER          reduce using rule 70 (termino -> factor MODULE termino .)
    GREATER_EQUAL   reduce using rule 70 (termino -> factor MODULE termino .)
    LESSER_EQUAL    reduce using rule 70 (termino -> factor MODULE termino .)
    EQUAL           reduce using rule 70 (termino -> factor MODULE termino .)
    NOT_EQUAL       reduce using rule 70 (termino -> factor MODULE termino .)
    AND             reduce using rule 70 (termino -> factor MODULE termino .)
    OR              reduce using rule 70 (termino -> factor MODULE termino .)
    C_PARENTHESIS   reduce using rule 70 (termino -> factor MODULE termino .)
    COMMA           reduce using rule 70 (termino -> factor MODULE termino .)
    SEMICOLON       reduce using rule 70 (termino -> factor MODULE termino .)
    TO              reduce using rule 70 (termino -> factor MODULE termino .)
    O_CBRACKET      reduce using rule 70 (termino -> factor MODULE termino .)


state 73

    (72) factor -> O_PARENTHESIS expr C_PARENTHESIS .

    TIMES           reduce using rule 72 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    DIVIDE          reduce using rule 72 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    MODULE          reduce using rule 72 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    PLUS            reduce using rule 72 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    MINUS           reduce using rule 72 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    C_ABRACKET      reduce using rule 72 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    GREATER         reduce using rule 72 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    LESSER          reduce using rule 72 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    GREATER_EQUAL   reduce using rule 72 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    LESSER_EQUAL    reduce using rule 72 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    EQUAL           reduce using rule 72 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    NOT_EQUAL       reduce using rule 72 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    AND             reduce using rule 72 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    OR              reduce using rule 72 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    C_PARENTHESIS   reduce using rule 72 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    COMMA           reduce using rule 72 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    SEMICOLON       reduce using rule 72 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    TO              reduce using rule 72 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    O_CBRACKET      reduce using rule 72 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)


state 74

    (53) or -> and OR . or
    (52) or -> . and
    (53) or -> . and OR or
    (54) and -> . equal
    (55) and -> . equal AND and
    (56) equal -> . compare
    (57) equal -> . compare EQUAL compare
    (58) equal -> . compare NOT_EQUAL compare
    (59) compare -> . exp
    (60) compare -> . exp GREATER exp
    (61) compare -> . exp LESSER exp
    (62) compare -> . exp GREATER_EQUAL exp
    (63) compare -> . exp LESSER_EQUAL exp
    (64) exp -> . termino
    (65) exp -> . termino PLUS exp
    (66) exp -> . termino MINUS exp
    (67) termino -> . factor
    (68) termino -> . factor TIMES termino
    (69) termino -> . factor DIVIDE termino
    (70) termino -> . factor MODULE termino
    (71) factor -> . variable
    (72) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (73) factor -> . llamada
    (74) factor -> . cte
    (75) factor -> . PLUS cte
    (76) factor -> . MINUS cte
    (21) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (22) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (23) variable -> . ID O_ABRACKET exp C_ABRACKET
    (24) variable -> . ID
    (34) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (77) cte -> . CTE_INT
    (78) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 38
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    ID              shift and go to state 31
    CTE_INT         shift and go to state 41
    CTE_FLOAT       shift and go to state 42

    and                            shift and go to state 57
    or                             shift and go to state 106
    equal                          shift and go to state 58
    compare                        shift and go to state 59
    exp                            shift and go to state 60
    termino                        shift and go to state 33
    factor                         shift and go to state 36
    variable                       shift and go to state 37
    llamada                        shift and go to state 39
    cte                            shift and go to state 40

state 75

    (55) and -> equal AND . and
    (54) and -> . equal
    (55) and -> . equal AND and
    (56) equal -> . compare
    (57) equal -> . compare EQUAL compare
    (58) equal -> . compare NOT_EQUAL compare
    (59) compare -> . exp
    (60) compare -> . exp GREATER exp
    (61) compare -> . exp LESSER exp
    (62) compare -> . exp GREATER_EQUAL exp
    (63) compare -> . exp LESSER_EQUAL exp
    (64) exp -> . termino
    (65) exp -> . termino PLUS exp
    (66) exp -> . termino MINUS exp
    (67) termino -> . factor
    (68) termino -> . factor TIMES termino
    (69) termino -> . factor DIVIDE termino
    (70) termino -> . factor MODULE termino
    (71) factor -> . variable
    (72) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (73) factor -> . llamada
    (74) factor -> . cte
    (75) factor -> . PLUS cte
    (76) factor -> . MINUS cte
    (21) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (22) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (23) variable -> . ID O_ABRACKET exp C_ABRACKET
    (24) variable -> . ID
    (34) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (77) cte -> . CTE_INT
    (78) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 38
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    ID              shift and go to state 31
    CTE_INT         shift and go to state 41
    CTE_FLOAT       shift and go to state 42

    equal                          shift and go to state 58
    and                            shift and go to state 107
    compare                        shift and go to state 59
    exp                            shift and go to state 60
    termino                        shift and go to state 33
    factor                         shift and go to state 36
    variable                       shift and go to state 37
    llamada                        shift and go to state 39
    cte                            shift and go to state 40

state 76

    (57) equal -> compare EQUAL . compare
    (59) compare -> . exp
    (60) compare -> . exp GREATER exp
    (61) compare -> . exp LESSER exp
    (62) compare -> . exp GREATER_EQUAL exp
    (63) compare -> . exp LESSER_EQUAL exp
    (64) exp -> . termino
    (65) exp -> . termino PLUS exp
    (66) exp -> . termino MINUS exp
    (67) termino -> . factor
    (68) termino -> . factor TIMES termino
    (69) termino -> . factor DIVIDE termino
    (70) termino -> . factor MODULE termino
    (71) factor -> . variable
    (72) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (73) factor -> . llamada
    (74) factor -> . cte
    (75) factor -> . PLUS cte
    (76) factor -> . MINUS cte
    (21) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (22) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (23) variable -> . ID O_ABRACKET exp C_ABRACKET
    (24) variable -> . ID
    (34) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (77) cte -> . CTE_INT
    (78) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 38
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    ID              shift and go to state 31
    CTE_INT         shift and go to state 41
    CTE_FLOAT       shift and go to state 42

    compare                        shift and go to state 108
    exp                            shift and go to state 60
    termino                        shift and go to state 33
    factor                         shift and go to state 36
    variable                       shift and go to state 37
    llamada                        shift and go to state 39
    cte                            shift and go to state 40

state 77

    (58) equal -> compare NOT_EQUAL . compare
    (59) compare -> . exp
    (60) compare -> . exp GREATER exp
    (61) compare -> . exp LESSER exp
    (62) compare -> . exp GREATER_EQUAL exp
    (63) compare -> . exp LESSER_EQUAL exp
    (64) exp -> . termino
    (65) exp -> . termino PLUS exp
    (66) exp -> . termino MINUS exp
    (67) termino -> . factor
    (68) termino -> . factor TIMES termino
    (69) termino -> . factor DIVIDE termino
    (70) termino -> . factor MODULE termino
    (71) factor -> . variable
    (72) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (73) factor -> . llamada
    (74) factor -> . cte
    (75) factor -> . PLUS cte
    (76) factor -> . MINUS cte
    (21) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (22) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (23) variable -> . ID O_ABRACKET exp C_ABRACKET
    (24) variable -> . ID
    (34) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (77) cte -> . CTE_INT
    (78) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 38
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    ID              shift and go to state 31
    CTE_INT         shift and go to state 41
    CTE_FLOAT       shift and go to state 42

    compare                        shift and go to state 109
    exp                            shift and go to state 60
    termino                        shift and go to state 33
    factor                         shift and go to state 36
    variable                       shift and go to state 37
    llamada                        shift and go to state 39
    cte                            shift and go to state 40

state 78

    (60) compare -> exp GREATER . exp
    (64) exp -> . termino
    (65) exp -> . termino PLUS exp
    (66) exp -> . termino MINUS exp
    (67) termino -> . factor
    (68) termino -> . factor TIMES termino
    (69) termino -> . factor DIVIDE termino
    (70) termino -> . factor MODULE termino
    (71) factor -> . variable
    (72) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (73) factor -> . llamada
    (74) factor -> . cte
    (75) factor -> . PLUS cte
    (76) factor -> . MINUS cte
    (21) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (22) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (23) variable -> . ID O_ABRACKET exp C_ABRACKET
    (24) variable -> . ID
    (34) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (77) cte -> . CTE_INT
    (78) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 38
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    ID              shift and go to state 31
    CTE_INT         shift and go to state 41
    CTE_FLOAT       shift and go to state 42

    exp                            shift and go to state 110
    termino                        shift and go to state 33
    factor                         shift and go to state 36
    variable                       shift and go to state 37
    llamada                        shift and go to state 39
    cte                            shift and go to state 40

state 79

    (61) compare -> exp LESSER . exp
    (64) exp -> . termino
    (65) exp -> . termino PLUS exp
    (66) exp -> . termino MINUS exp
    (67) termino -> . factor
    (68) termino -> . factor TIMES termino
    (69) termino -> . factor DIVIDE termino
    (70) termino -> . factor MODULE termino
    (71) factor -> . variable
    (72) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (73) factor -> . llamada
    (74) factor -> . cte
    (75) factor -> . PLUS cte
    (76) factor -> . MINUS cte
    (21) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (22) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (23) variable -> . ID O_ABRACKET exp C_ABRACKET
    (24) variable -> . ID
    (34) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (77) cte -> . CTE_INT
    (78) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 38
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    ID              shift and go to state 31
    CTE_INT         shift and go to state 41
    CTE_FLOAT       shift and go to state 42

    exp                            shift and go to state 111
    termino                        shift and go to state 33
    factor                         shift and go to state 36
    variable                       shift and go to state 37
    llamada                        shift and go to state 39
    cte                            shift and go to state 40

state 80

    (62) compare -> exp GREATER_EQUAL . exp
    (64) exp -> . termino
    (65) exp -> . termino PLUS exp
    (66) exp -> . termino MINUS exp
    (67) termino -> . factor
    (68) termino -> . factor TIMES termino
    (69) termino -> . factor DIVIDE termino
    (70) termino -> . factor MODULE termino
    (71) factor -> . variable
    (72) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (73) factor -> . llamada
    (74) factor -> . cte
    (75) factor -> . PLUS cte
    (76) factor -> . MINUS cte
    (21) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (22) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (23) variable -> . ID O_ABRACKET exp C_ABRACKET
    (24) variable -> . ID
    (34) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (77) cte -> . CTE_INT
    (78) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 38
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    ID              shift and go to state 31
    CTE_INT         shift and go to state 41
    CTE_FLOAT       shift and go to state 42

    exp                            shift and go to state 112
    termino                        shift and go to state 33
    factor                         shift and go to state 36
    variable                       shift and go to state 37
    llamada                        shift and go to state 39
    cte                            shift and go to state 40

state 81

    (63) compare -> exp LESSER_EQUAL . exp
    (64) exp -> . termino
    (65) exp -> . termino PLUS exp
    (66) exp -> . termino MINUS exp
    (67) termino -> . factor
    (68) termino -> . factor TIMES termino
    (69) termino -> . factor DIVIDE termino
    (70) termino -> . factor MODULE termino
    (71) factor -> . variable
    (72) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (73) factor -> . llamada
    (74) factor -> . cte
    (75) factor -> . PLUS cte
    (76) factor -> . MINUS cte
    (21) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (22) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (23) variable -> . ID O_ABRACKET exp C_ABRACKET
    (24) variable -> . ID
    (34) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (77) cte -> . CTE_INT
    (78) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 38
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    ID              shift and go to state 31
    CTE_INT         shift and go to state 41
    CTE_FLOAT       shift and go to state 42

    exp                            shift and go to state 113
    termino                        shift and go to state 33
    factor                         shift and go to state 36
    variable                       shift and go to state 37
    llamada                        shift and go to state 39
    cte                            shift and go to state 40

state 82

    (2) bloque -> O_CBRACKET bloque_prime . C_CBRACKET

    C_CBRACKET      shift and go to state 114


state 83

    (3) bloque_prime -> estatuto . bloque_prime
    (3) bloque_prime -> . estatuto bloque_prime
    (4) bloque_prime -> . epsilon
    (25) estatuto -> . asignacion SEMICOLON
    (26) estatuto -> . llamada SEMICOLON
    (27) estatuto -> . retorno SEMICOLON
    (28) estatuto -> . lectura SEMICOLON
    (29) estatuto -> . escritura SEMICOLON
    (30) estatuto -> . decision
    (31) estatuto -> . while
    (32) estatuto -> . for
    (79) epsilon -> .
    (33) asignacion -> . variable ASSIGN expr
    (34) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (37) retorno -> . RETURN O_PARENTHESIS expr C_PARENTHESIS
    (38) lectura -> . READ O_PARENTHESIS lectura_prime C_PARENTHESIS
    (41) escritura -> . WRITE O_PARENTHESIS escritura_prime C_PARENTHESIS
    (46) decision -> . IF O_PARENTHESIS expr C_PARENTHESIS bloque else
    (49) while -> . WHILE O_PARENTHESIS expr C_PARENTHESIS bloque
    (50) for -> . FOR variable ASSIGN exp TO exp bloque
    (21) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (22) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (23) variable -> . ID O_ABRACKET exp C_ABRACKET
    (24) variable -> . ID

    C_CBRACKET      reduce using rule 79 (epsilon -> .)
    ID              shift and go to state 94
    RETURN          shift and go to state 95
    READ            shift and go to state 96
    WRITE           shift and go to state 97
    IF              shift and go to state 98
    WHILE           shift and go to state 99
    FOR             shift and go to state 100

    estatuto                       shift and go to state 83
    bloque_prime                   shift and go to state 115
    epsilon                        shift and go to state 84
    asignacion                     shift and go to state 85
    llamada                        shift and go to state 86
    retorno                        shift and go to state 87
    lectura                        shift and go to state 88
    escritura                      shift and go to state 89
    decision                       shift and go to state 90
    while                          shift and go to state 91
    for                            shift and go to state 92
    variable                       shift and go to state 93

state 84

    (4) bloque_prime -> epsilon .

    C_CBRACKET      reduce using rule 4 (bloque_prime -> epsilon .)


state 85

    (25) estatuto -> asignacion . SEMICOLON

    SEMICOLON       shift and go to state 116


state 86

    (26) estatuto -> llamada . SEMICOLON

    SEMICOLON       shift and go to state 117


state 87

    (27) estatuto -> retorno . SEMICOLON

    SEMICOLON       shift and go to state 118


state 88

    (28) estatuto -> lectura . SEMICOLON

    SEMICOLON       shift and go to state 119


state 89

    (29) estatuto -> escritura . SEMICOLON

    SEMICOLON       shift and go to state 120


state 90

    (30) estatuto -> decision .

    ID              reduce using rule 30 (estatuto -> decision .)
    RETURN          reduce using rule 30 (estatuto -> decision .)
    READ            reduce using rule 30 (estatuto -> decision .)
    WRITE           reduce using rule 30 (estatuto -> decision .)
    IF              reduce using rule 30 (estatuto -> decision .)
    WHILE           reduce using rule 30 (estatuto -> decision .)
    FOR             reduce using rule 30 (estatuto -> decision .)
    C_CBRACKET      reduce using rule 30 (estatuto -> decision .)


state 91

    (31) estatuto -> while .

    ID              reduce using rule 31 (estatuto -> while .)
    RETURN          reduce using rule 31 (estatuto -> while .)
    READ            reduce using rule 31 (estatuto -> while .)
    WRITE           reduce using rule 31 (estatuto -> while .)
    IF              reduce using rule 31 (estatuto -> while .)
    WHILE           reduce using rule 31 (estatuto -> while .)
    FOR             reduce using rule 31 (estatuto -> while .)
    C_CBRACKET      reduce using rule 31 (estatuto -> while .)


state 92

    (32) estatuto -> for .

    ID              reduce using rule 32 (estatuto -> for .)
    RETURN          reduce using rule 32 (estatuto -> for .)
    READ            reduce using rule 32 (estatuto -> for .)
    WRITE           reduce using rule 32 (estatuto -> for .)
    IF              reduce using rule 32 (estatuto -> for .)
    WHILE           reduce using rule 32 (estatuto -> for .)
    FOR             reduce using rule 32 (estatuto -> for .)
    C_CBRACKET      reduce using rule 32 (estatuto -> for .)


state 93

    (33) asignacion -> variable . ASSIGN expr

    ASSIGN          shift and go to state 121


state 94

    (34) llamada -> ID . O_PARENTHESIS llamada_prime C_PARENTHESIS
    (21) variable -> ID . O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (22) variable -> ID . O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (23) variable -> ID . O_ABRACKET exp C_ABRACKET
    (24) variable -> ID .

    O_PARENTHESIS   shift and go to state 46
    O_ABRACKET      shift and go to state 26
    ASSIGN          reduce using rule 24 (variable -> ID .)


state 95

    (37) retorno -> RETURN . O_PARENTHESIS expr C_PARENTHESIS

    O_PARENTHESIS   shift and go to state 122


state 96

    (38) lectura -> READ . O_PARENTHESIS lectura_prime C_PARENTHESIS

    O_PARENTHESIS   shift and go to state 123


state 97

    (41) escritura -> WRITE . O_PARENTHESIS escritura_prime C_PARENTHESIS

    O_PARENTHESIS   shift and go to state 124


state 98

    (46) decision -> IF . O_PARENTHESIS expr C_PARENTHESIS bloque else

    O_PARENTHESIS   shift and go to state 125


state 99

    (49) while -> WHILE . O_PARENTHESIS expr C_PARENTHESIS bloque

    O_PARENTHESIS   shift and go to state 126


state 100

    (50) for -> FOR . variable ASSIGN exp TO exp bloque
    (21) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (22) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (23) variable -> . ID O_ABRACKET exp C_ABRACKET
    (24) variable -> . ID

    ID              shift and go to state 14

    variable                       shift and go to state 127

state 101

    (16) funcion_base -> FUNCTION funcion_tipo ID O_PARENTHESIS funcion_prime C_PARENTHESIS . declaracion bloque
    (5) declaracion -> . declaracion_base
    (6) declaracion -> . declaracion_base declaracion
    (7) declaracion_base -> . LET declaracion_prime COLON tipo SEMICOLON

    LET             shift and go to state 7

    declaracion                    shift and go to state 128
    declaracion_base               shift and go to state 6

state 102

    (17) funcion_prime -> tipo ID .
    (18) funcion_prime -> tipo ID . COMMA funcion_prime

    C_PARENTHESIS   reduce using rule 17 (funcion_prime -> tipo ID .)
    COMMA           shift and go to state 129


state 103

    (34) llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .

    TIMES           reduce using rule 34 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    DIVIDE          reduce using rule 34 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    MODULE          reduce using rule 34 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    PLUS            reduce using rule 34 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    MINUS           reduce using rule 34 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    C_ABRACKET      reduce using rule 34 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    GREATER         reduce using rule 34 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    LESSER          reduce using rule 34 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    GREATER_EQUAL   reduce using rule 34 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    LESSER_EQUAL    reduce using rule 34 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    EQUAL           reduce using rule 34 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    NOT_EQUAL       reduce using rule 34 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    AND             reduce using rule 34 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    OR              reduce using rule 34 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    C_PARENTHESIS   reduce using rule 34 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    COMMA           reduce using rule 34 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    SEMICOLON       reduce using rule 34 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    TO              reduce using rule 34 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    O_CBRACKET      reduce using rule 34 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)


state 104

    (36) llamada_prime -> exp COMMA . llamada_prime
    (35) llamada_prime -> . exp
    (36) llamada_prime -> . exp COMMA llamada_prime
    (64) exp -> . termino
    (65) exp -> . termino PLUS exp
    (66) exp -> . termino MINUS exp
    (67) termino -> . factor
    (68) termino -> . factor TIMES termino
    (69) termino -> . factor DIVIDE termino
    (70) termino -> . factor MODULE termino
    (71) factor -> . variable
    (72) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (73) factor -> . llamada
    (74) factor -> . cte
    (75) factor -> . PLUS cte
    (76) factor -> . MINUS cte
    (21) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (22) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (23) variable -> . ID O_ABRACKET exp C_ABRACKET
    (24) variable -> . ID
    (34) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (77) cte -> . CTE_INT
    (78) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 38
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    ID              shift and go to state 31
    CTE_INT         shift and go to state 41
    CTE_FLOAT       shift and go to state 42

    exp                            shift and go to state 66
    llamada_prime                  shift and go to state 130
    termino                        shift and go to state 33
    factor                         shift and go to state 36
    variable                       shift and go to state 37
    llamada                        shift and go to state 39
    cte                            shift and go to state 40

state 105

    (21) variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp . C_ABRACKET O_ABRACKET exp C_ABRACKET
    (22) variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp . C_ABRACKET

    C_ABRACKET      shift and go to state 131


state 106

    (53) or -> and OR or .

    C_PARENTHESIS   reduce using rule 53 (or -> and OR or .)
    SEMICOLON       reduce using rule 53 (or -> and OR or .)
    COMMA           reduce using rule 53 (or -> and OR or .)


state 107

    (55) and -> equal AND and .

    OR              reduce using rule 55 (and -> equal AND and .)
    C_PARENTHESIS   reduce using rule 55 (and -> equal AND and .)
    SEMICOLON       reduce using rule 55 (and -> equal AND and .)
    COMMA           reduce using rule 55 (and -> equal AND and .)


state 108

    (57) equal -> compare EQUAL compare .

    AND             reduce using rule 57 (equal -> compare EQUAL compare .)
    OR              reduce using rule 57 (equal -> compare EQUAL compare .)
    C_PARENTHESIS   reduce using rule 57 (equal -> compare EQUAL compare .)
    SEMICOLON       reduce using rule 57 (equal -> compare EQUAL compare .)
    COMMA           reduce using rule 57 (equal -> compare EQUAL compare .)


state 109

    (58) equal -> compare NOT_EQUAL compare .

    AND             reduce using rule 58 (equal -> compare NOT_EQUAL compare .)
    OR              reduce using rule 58 (equal -> compare NOT_EQUAL compare .)
    C_PARENTHESIS   reduce using rule 58 (equal -> compare NOT_EQUAL compare .)
    SEMICOLON       reduce using rule 58 (equal -> compare NOT_EQUAL compare .)
    COMMA           reduce using rule 58 (equal -> compare NOT_EQUAL compare .)


state 110

    (60) compare -> exp GREATER exp .

    EQUAL           reduce using rule 60 (compare -> exp GREATER exp .)
    NOT_EQUAL       reduce using rule 60 (compare -> exp GREATER exp .)
    AND             reduce using rule 60 (compare -> exp GREATER exp .)
    OR              reduce using rule 60 (compare -> exp GREATER exp .)
    C_PARENTHESIS   reduce using rule 60 (compare -> exp GREATER exp .)
    SEMICOLON       reduce using rule 60 (compare -> exp GREATER exp .)
    COMMA           reduce using rule 60 (compare -> exp GREATER exp .)


state 111

    (61) compare -> exp LESSER exp .

    EQUAL           reduce using rule 61 (compare -> exp LESSER exp .)
    NOT_EQUAL       reduce using rule 61 (compare -> exp LESSER exp .)
    AND             reduce using rule 61 (compare -> exp LESSER exp .)
    OR              reduce using rule 61 (compare -> exp LESSER exp .)
    C_PARENTHESIS   reduce using rule 61 (compare -> exp LESSER exp .)
    SEMICOLON       reduce using rule 61 (compare -> exp LESSER exp .)
    COMMA           reduce using rule 61 (compare -> exp LESSER exp .)


state 112

    (62) compare -> exp GREATER_EQUAL exp .

    EQUAL           reduce using rule 62 (compare -> exp GREATER_EQUAL exp .)
    NOT_EQUAL       reduce using rule 62 (compare -> exp GREATER_EQUAL exp .)
    AND             reduce using rule 62 (compare -> exp GREATER_EQUAL exp .)
    OR              reduce using rule 62 (compare -> exp GREATER_EQUAL exp .)
    C_PARENTHESIS   reduce using rule 62 (compare -> exp GREATER_EQUAL exp .)
    SEMICOLON       reduce using rule 62 (compare -> exp GREATER_EQUAL exp .)
    COMMA           reduce using rule 62 (compare -> exp GREATER_EQUAL exp .)


state 113

    (63) compare -> exp LESSER_EQUAL exp .

    EQUAL           reduce using rule 63 (compare -> exp LESSER_EQUAL exp .)
    NOT_EQUAL       reduce using rule 63 (compare -> exp LESSER_EQUAL exp .)
    AND             reduce using rule 63 (compare -> exp LESSER_EQUAL exp .)
    OR              reduce using rule 63 (compare -> exp LESSER_EQUAL exp .)
    C_PARENTHESIS   reduce using rule 63 (compare -> exp LESSER_EQUAL exp .)
    SEMICOLON       reduce using rule 63 (compare -> exp LESSER_EQUAL exp .)
    COMMA           reduce using rule 63 (compare -> exp LESSER_EQUAL exp .)


state 114

    (2) bloque -> O_CBRACKET bloque_prime C_CBRACKET .

    $end            reduce using rule 2 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    FUNCTION        reduce using rule 2 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    MAIN            reduce using rule 2 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    ELSE            reduce using rule 2 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    ID              reduce using rule 2 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    RETURN          reduce using rule 2 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    READ            reduce using rule 2 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    WRITE           reduce using rule 2 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    IF              reduce using rule 2 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    WHILE           reduce using rule 2 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    FOR             reduce using rule 2 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    C_CBRACKET      reduce using rule 2 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)


state 115

    (3) bloque_prime -> estatuto bloque_prime .

    C_CBRACKET      reduce using rule 3 (bloque_prime -> estatuto bloque_prime .)


state 116

    (25) estatuto -> asignacion SEMICOLON .

    ID              reduce using rule 25 (estatuto -> asignacion SEMICOLON .)
    RETURN          reduce using rule 25 (estatuto -> asignacion SEMICOLON .)
    READ            reduce using rule 25 (estatuto -> asignacion SEMICOLON .)
    WRITE           reduce using rule 25 (estatuto -> asignacion SEMICOLON .)
    IF              reduce using rule 25 (estatuto -> asignacion SEMICOLON .)
    WHILE           reduce using rule 25 (estatuto -> asignacion SEMICOLON .)
    FOR             reduce using rule 25 (estatuto -> asignacion SEMICOLON .)
    C_CBRACKET      reduce using rule 25 (estatuto -> asignacion SEMICOLON .)


state 117

    (26) estatuto -> llamada SEMICOLON .

    ID              reduce using rule 26 (estatuto -> llamada SEMICOLON .)
    RETURN          reduce using rule 26 (estatuto -> llamada SEMICOLON .)
    READ            reduce using rule 26 (estatuto -> llamada SEMICOLON .)
    WRITE           reduce using rule 26 (estatuto -> llamada SEMICOLON .)
    IF              reduce using rule 26 (estatuto -> llamada SEMICOLON .)
    WHILE           reduce using rule 26 (estatuto -> llamada SEMICOLON .)
    FOR             reduce using rule 26 (estatuto -> llamada SEMICOLON .)
    C_CBRACKET      reduce using rule 26 (estatuto -> llamada SEMICOLON .)


state 118

    (27) estatuto -> retorno SEMICOLON .

    ID              reduce using rule 27 (estatuto -> retorno SEMICOLON .)
    RETURN          reduce using rule 27 (estatuto -> retorno SEMICOLON .)
    READ            reduce using rule 27 (estatuto -> retorno SEMICOLON .)
    WRITE           reduce using rule 27 (estatuto -> retorno SEMICOLON .)
    IF              reduce using rule 27 (estatuto -> retorno SEMICOLON .)
    WHILE           reduce using rule 27 (estatuto -> retorno SEMICOLON .)
    FOR             reduce using rule 27 (estatuto -> retorno SEMICOLON .)
    C_CBRACKET      reduce using rule 27 (estatuto -> retorno SEMICOLON .)


state 119

    (28) estatuto -> lectura SEMICOLON .

    ID              reduce using rule 28 (estatuto -> lectura SEMICOLON .)
    RETURN          reduce using rule 28 (estatuto -> lectura SEMICOLON .)
    READ            reduce using rule 28 (estatuto -> lectura SEMICOLON .)
    WRITE           reduce using rule 28 (estatuto -> lectura SEMICOLON .)
    IF              reduce using rule 28 (estatuto -> lectura SEMICOLON .)
    WHILE           reduce using rule 28 (estatuto -> lectura SEMICOLON .)
    FOR             reduce using rule 28 (estatuto -> lectura SEMICOLON .)
    C_CBRACKET      reduce using rule 28 (estatuto -> lectura SEMICOLON .)


state 120

    (29) estatuto -> escritura SEMICOLON .

    ID              reduce using rule 29 (estatuto -> escritura SEMICOLON .)
    RETURN          reduce using rule 29 (estatuto -> escritura SEMICOLON .)
    READ            reduce using rule 29 (estatuto -> escritura SEMICOLON .)
    WRITE           reduce using rule 29 (estatuto -> escritura SEMICOLON .)
    IF              reduce using rule 29 (estatuto -> escritura SEMICOLON .)
    WHILE           reduce using rule 29 (estatuto -> escritura SEMICOLON .)
    FOR             reduce using rule 29 (estatuto -> escritura SEMICOLON .)
    C_CBRACKET      reduce using rule 29 (estatuto -> escritura SEMICOLON .)


state 121

    (33) asignacion -> variable ASSIGN . expr
    (51) expr -> . or
    (52) or -> . and
    (53) or -> . and OR or
    (54) and -> . equal
    (55) and -> . equal AND and
    (56) equal -> . compare
    (57) equal -> . compare EQUAL compare
    (58) equal -> . compare NOT_EQUAL compare
    (59) compare -> . exp
    (60) compare -> . exp GREATER exp
    (61) compare -> . exp LESSER exp
    (62) compare -> . exp GREATER_EQUAL exp
    (63) compare -> . exp LESSER_EQUAL exp
    (64) exp -> . termino
    (65) exp -> . termino PLUS exp
    (66) exp -> . termino MINUS exp
    (67) termino -> . factor
    (68) termino -> . factor TIMES termino
    (69) termino -> . factor DIVIDE termino
    (70) termino -> . factor MODULE termino
    (71) factor -> . variable
    (72) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (73) factor -> . llamada
    (74) factor -> . cte
    (75) factor -> . PLUS cte
    (76) factor -> . MINUS cte
    (21) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (22) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (23) variable -> . ID O_ABRACKET exp C_ABRACKET
    (24) variable -> . ID
    (34) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (77) cte -> . CTE_INT
    (78) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 38
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    ID              shift and go to state 31
    CTE_INT         shift and go to state 41
    CTE_FLOAT       shift and go to state 42

    variable                       shift and go to state 37
    expr                           shift and go to state 132
    or                             shift and go to state 56
    and                            shift and go to state 57
    equal                          shift and go to state 58
    compare                        shift and go to state 59
    exp                            shift and go to state 60
    termino                        shift and go to state 33
    factor                         shift and go to state 36
    llamada                        shift and go to state 39
    cte                            shift and go to state 40

state 122

    (37) retorno -> RETURN O_PARENTHESIS . expr C_PARENTHESIS
    (51) expr -> . or
    (52) or -> . and
    (53) or -> . and OR or
    (54) and -> . equal
    (55) and -> . equal AND and
    (56) equal -> . compare
    (57) equal -> . compare EQUAL compare
    (58) equal -> . compare NOT_EQUAL compare
    (59) compare -> . exp
    (60) compare -> . exp GREATER exp
    (61) compare -> . exp LESSER exp
    (62) compare -> . exp GREATER_EQUAL exp
    (63) compare -> . exp LESSER_EQUAL exp
    (64) exp -> . termino
    (65) exp -> . termino PLUS exp
    (66) exp -> . termino MINUS exp
    (67) termino -> . factor
    (68) termino -> . factor TIMES termino
    (69) termino -> . factor DIVIDE termino
    (70) termino -> . factor MODULE termino
    (71) factor -> . variable
    (72) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (73) factor -> . llamada
    (74) factor -> . cte
    (75) factor -> . PLUS cte
    (76) factor -> . MINUS cte
    (21) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (22) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (23) variable -> . ID O_ABRACKET exp C_ABRACKET
    (24) variable -> . ID
    (34) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (77) cte -> . CTE_INT
    (78) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 38
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    ID              shift and go to state 31
    CTE_INT         shift and go to state 41
    CTE_FLOAT       shift and go to state 42

    expr                           shift and go to state 133
    or                             shift and go to state 56
    and                            shift and go to state 57
    equal                          shift and go to state 58
    compare                        shift and go to state 59
    exp                            shift and go to state 60
    termino                        shift and go to state 33
    factor                         shift and go to state 36
    variable                       shift and go to state 37
    llamada                        shift and go to state 39
    cte                            shift and go to state 40

state 123

    (38) lectura -> READ O_PARENTHESIS . lectura_prime C_PARENTHESIS
    (39) lectura_prime -> . variable
    (40) lectura_prime -> . variable COMMA lectura_prime
    (21) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (22) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (23) variable -> . ID O_ABRACKET exp C_ABRACKET
    (24) variable -> . ID

    ID              shift and go to state 14

    lectura_prime                  shift and go to state 134
    variable                       shift and go to state 135

state 124

    (41) escritura -> WRITE O_PARENTHESIS . escritura_prime C_PARENTHESIS
    (42) escritura_prime -> . expr
    (43) escritura_prime -> . CTE_STRING
    (44) escritura_prime -> . expr COMMA escritura_prime
    (45) escritura_prime -> . CTE_STRING COMMA escritura_prime
    (51) expr -> . or
    (52) or -> . and
    (53) or -> . and OR or
    (54) and -> . equal
    (55) and -> . equal AND and
    (56) equal -> . compare
    (57) equal -> . compare EQUAL compare
    (58) equal -> . compare NOT_EQUAL compare
    (59) compare -> . exp
    (60) compare -> . exp GREATER exp
    (61) compare -> . exp LESSER exp
    (62) compare -> . exp GREATER_EQUAL exp
    (63) compare -> . exp LESSER_EQUAL exp
    (64) exp -> . termino
    (65) exp -> . termino PLUS exp
    (66) exp -> . termino MINUS exp
    (67) termino -> . factor
    (68) termino -> . factor TIMES termino
    (69) termino -> . factor DIVIDE termino
    (70) termino -> . factor MODULE termino
    (71) factor -> . variable
    (72) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (73) factor -> . llamada
    (74) factor -> . cte
    (75) factor -> . PLUS cte
    (76) factor -> . MINUS cte
    (21) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (22) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (23) variable -> . ID O_ABRACKET exp C_ABRACKET
    (24) variable -> . ID
    (34) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (77) cte -> . CTE_INT
    (78) cte -> . CTE_FLOAT

    CTE_STRING      shift and go to state 138
    O_PARENTHESIS   shift and go to state 38
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    ID              shift and go to state 31
    CTE_INT         shift and go to state 41
    CTE_FLOAT       shift and go to state 42

    escritura_prime                shift and go to state 136
    expr                           shift and go to state 137
    or                             shift and go to state 56
    and                            shift and go to state 57
    equal                          shift and go to state 58
    compare                        shift and go to state 59
    exp                            shift and go to state 60
    termino                        shift and go to state 33
    factor                         shift and go to state 36
    variable                       shift and go to state 37
    llamada                        shift and go to state 39
    cte                            shift and go to state 40

state 125

    (46) decision -> IF O_PARENTHESIS . expr C_PARENTHESIS bloque else
    (51) expr -> . or
    (52) or -> . and
    (53) or -> . and OR or
    (54) and -> . equal
    (55) and -> . equal AND and
    (56) equal -> . compare
    (57) equal -> . compare EQUAL compare
    (58) equal -> . compare NOT_EQUAL compare
    (59) compare -> . exp
    (60) compare -> . exp GREATER exp
    (61) compare -> . exp LESSER exp
    (62) compare -> . exp GREATER_EQUAL exp
    (63) compare -> . exp LESSER_EQUAL exp
    (64) exp -> . termino
    (65) exp -> . termino PLUS exp
    (66) exp -> . termino MINUS exp
    (67) termino -> . factor
    (68) termino -> . factor TIMES termino
    (69) termino -> . factor DIVIDE termino
    (70) termino -> . factor MODULE termino
    (71) factor -> . variable
    (72) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (73) factor -> . llamada
    (74) factor -> . cte
    (75) factor -> . PLUS cte
    (76) factor -> . MINUS cte
    (21) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (22) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (23) variable -> . ID O_ABRACKET exp C_ABRACKET
    (24) variable -> . ID
    (34) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (77) cte -> . CTE_INT
    (78) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 38
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    ID              shift and go to state 31
    CTE_INT         shift and go to state 41
    CTE_FLOAT       shift and go to state 42

    expr                           shift and go to state 139
    or                             shift and go to state 56
    and                            shift and go to state 57
    equal                          shift and go to state 58
    compare                        shift and go to state 59
    exp                            shift and go to state 60
    termino                        shift and go to state 33
    factor                         shift and go to state 36
    variable                       shift and go to state 37
    llamada                        shift and go to state 39
    cte                            shift and go to state 40

state 126

    (49) while -> WHILE O_PARENTHESIS . expr C_PARENTHESIS bloque
    (51) expr -> . or
    (52) or -> . and
    (53) or -> . and OR or
    (54) and -> . equal
    (55) and -> . equal AND and
    (56) equal -> . compare
    (57) equal -> . compare EQUAL compare
    (58) equal -> . compare NOT_EQUAL compare
    (59) compare -> . exp
    (60) compare -> . exp GREATER exp
    (61) compare -> . exp LESSER exp
    (62) compare -> . exp GREATER_EQUAL exp
    (63) compare -> . exp LESSER_EQUAL exp
    (64) exp -> . termino
    (65) exp -> . termino PLUS exp
    (66) exp -> . termino MINUS exp
    (67) termino -> . factor
    (68) termino -> . factor TIMES termino
    (69) termino -> . factor DIVIDE termino
    (70) termino -> . factor MODULE termino
    (71) factor -> . variable
    (72) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (73) factor -> . llamada
    (74) factor -> . cte
    (75) factor -> . PLUS cte
    (76) factor -> . MINUS cte
    (21) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (22) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (23) variable -> . ID O_ABRACKET exp C_ABRACKET
    (24) variable -> . ID
    (34) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (77) cte -> . CTE_INT
    (78) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 38
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    ID              shift and go to state 31
    CTE_INT         shift and go to state 41
    CTE_FLOAT       shift and go to state 42

    expr                           shift and go to state 140
    or                             shift and go to state 56
    and                            shift and go to state 57
    equal                          shift and go to state 58
    compare                        shift and go to state 59
    exp                            shift and go to state 60
    termino                        shift and go to state 33
    factor                         shift and go to state 36
    variable                       shift and go to state 37
    llamada                        shift and go to state 39
    cte                            shift and go to state 40

state 127

    (50) for -> FOR variable . ASSIGN exp TO exp bloque

    ASSIGN          shift and go to state 141


state 128

    (16) funcion_base -> FUNCTION funcion_tipo ID O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion . bloque
    (2) bloque -> . O_CBRACKET bloque_prime C_CBRACKET

    O_CBRACKET      shift and go to state 62

    bloque                         shift and go to state 142

state 129

    (18) funcion_prime -> tipo ID COMMA . funcion_prime
    (17) funcion_prime -> . tipo ID
    (18) funcion_prime -> . tipo ID COMMA funcion_prime
    (10) tipo -> . INT
    (11) tipo -> . FLOAT
    (12) tipo -> . CHAR
    (13) tipo -> . STRING

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    STRING          shift and go to state 23

    tipo                           shift and go to state 64
    funcion_prime                  shift and go to state 143

state 130

    (36) llamada_prime -> exp COMMA llamada_prime .

    C_PARENTHESIS   reduce using rule 36 (llamada_prime -> exp COMMA llamada_prime .)


state 131

    (21) variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET . O_ABRACKET exp C_ABRACKET
    (22) variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .

    O_ABRACKET      shift and go to state 144
    COMMA           reduce using rule 22 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    COLON           reduce using rule 22 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    TIMES           reduce using rule 22 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    DIVIDE          reduce using rule 22 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    MODULE          reduce using rule 22 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    PLUS            reduce using rule 22 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    MINUS           reduce using rule 22 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    C_ABRACKET      reduce using rule 22 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    GREATER         reduce using rule 22 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    LESSER          reduce using rule 22 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    GREATER_EQUAL   reduce using rule 22 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    LESSER_EQUAL    reduce using rule 22 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    EQUAL           reduce using rule 22 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    NOT_EQUAL       reduce using rule 22 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    AND             reduce using rule 22 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    OR              reduce using rule 22 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    C_PARENTHESIS   reduce using rule 22 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    SEMICOLON       reduce using rule 22 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    TO              reduce using rule 22 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    O_CBRACKET      reduce using rule 22 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    ASSIGN          reduce using rule 22 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)


state 132

    (33) asignacion -> variable ASSIGN expr .

    SEMICOLON       reduce using rule 33 (asignacion -> variable ASSIGN expr .)


state 133

    (37) retorno -> RETURN O_PARENTHESIS expr . C_PARENTHESIS

    C_PARENTHESIS   shift and go to state 145


state 134

    (38) lectura -> READ O_PARENTHESIS lectura_prime . C_PARENTHESIS

    C_PARENTHESIS   shift and go to state 146


state 135

    (39) lectura_prime -> variable .
    (40) lectura_prime -> variable . COMMA lectura_prime

    C_PARENTHESIS   reduce using rule 39 (lectura_prime -> variable .)
    COMMA           shift and go to state 147


state 136

    (41) escritura -> WRITE O_PARENTHESIS escritura_prime . C_PARENTHESIS

    C_PARENTHESIS   shift and go to state 148


state 137

    (42) escritura_prime -> expr .
    (44) escritura_prime -> expr . COMMA escritura_prime

    C_PARENTHESIS   reduce using rule 42 (escritura_prime -> expr .)
    COMMA           shift and go to state 149


state 138

    (43) escritura_prime -> CTE_STRING .
    (45) escritura_prime -> CTE_STRING . COMMA escritura_prime

    C_PARENTHESIS   reduce using rule 43 (escritura_prime -> CTE_STRING .)
    COMMA           shift and go to state 150


state 139

    (46) decision -> IF O_PARENTHESIS expr . C_PARENTHESIS bloque else

    C_PARENTHESIS   shift and go to state 151


state 140

    (49) while -> WHILE O_PARENTHESIS expr . C_PARENTHESIS bloque

    C_PARENTHESIS   shift and go to state 152


state 141

    (50) for -> FOR variable ASSIGN . exp TO exp bloque
    (64) exp -> . termino
    (65) exp -> . termino PLUS exp
    (66) exp -> . termino MINUS exp
    (67) termino -> . factor
    (68) termino -> . factor TIMES termino
    (69) termino -> . factor DIVIDE termino
    (70) termino -> . factor MODULE termino
    (71) factor -> . variable
    (72) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (73) factor -> . llamada
    (74) factor -> . cte
    (75) factor -> . PLUS cte
    (76) factor -> . MINUS cte
    (21) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (22) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (23) variable -> . ID O_ABRACKET exp C_ABRACKET
    (24) variable -> . ID
    (34) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (77) cte -> . CTE_INT
    (78) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 38
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    ID              shift and go to state 31
    CTE_INT         shift and go to state 41
    CTE_FLOAT       shift and go to state 42

    variable                       shift and go to state 37
    exp                            shift and go to state 153
    termino                        shift and go to state 33
    factor                         shift and go to state 36
    llamada                        shift and go to state 39
    cte                            shift and go to state 40

state 142

    (16) funcion_base -> FUNCTION funcion_tipo ID O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion bloque .

    FUNCTION        reduce using rule 16 (funcion_base -> FUNCTION funcion_tipo ID O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion bloque .)
    MAIN            reduce using rule 16 (funcion_base -> FUNCTION funcion_tipo ID O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion bloque .)


state 143

    (18) funcion_prime -> tipo ID COMMA funcion_prime .

    C_PARENTHESIS   reduce using rule 18 (funcion_prime -> tipo ID COMMA funcion_prime .)


state 144

    (21) variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET . exp C_ABRACKET
    (64) exp -> . termino
    (65) exp -> . termino PLUS exp
    (66) exp -> . termino MINUS exp
    (67) termino -> . factor
    (68) termino -> . factor TIMES termino
    (69) termino -> . factor DIVIDE termino
    (70) termino -> . factor MODULE termino
    (71) factor -> . variable
    (72) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (73) factor -> . llamada
    (74) factor -> . cte
    (75) factor -> . PLUS cte
    (76) factor -> . MINUS cte
    (21) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (22) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (23) variable -> . ID O_ABRACKET exp C_ABRACKET
    (24) variable -> . ID
    (34) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (77) cte -> . CTE_INT
    (78) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 38
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    ID              shift and go to state 31
    CTE_INT         shift and go to state 41
    CTE_FLOAT       shift and go to state 42

    exp                            shift and go to state 154
    termino                        shift and go to state 33
    factor                         shift and go to state 36
    variable                       shift and go to state 37
    llamada                        shift and go to state 39
    cte                            shift and go to state 40

state 145

    (37) retorno -> RETURN O_PARENTHESIS expr C_PARENTHESIS .

    SEMICOLON       reduce using rule 37 (retorno -> RETURN O_PARENTHESIS expr C_PARENTHESIS .)


state 146

    (38) lectura -> READ O_PARENTHESIS lectura_prime C_PARENTHESIS .

    SEMICOLON       reduce using rule 38 (lectura -> READ O_PARENTHESIS lectura_prime C_PARENTHESIS .)


state 147

    (40) lectura_prime -> variable COMMA . lectura_prime
    (39) lectura_prime -> . variable
    (40) lectura_prime -> . variable COMMA lectura_prime
    (21) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (22) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (23) variable -> . ID O_ABRACKET exp C_ABRACKET
    (24) variable -> . ID

    ID              shift and go to state 14

    variable                       shift and go to state 135
    lectura_prime                  shift and go to state 155

state 148

    (41) escritura -> WRITE O_PARENTHESIS escritura_prime C_PARENTHESIS .

    SEMICOLON       reduce using rule 41 (escritura -> WRITE O_PARENTHESIS escritura_prime C_PARENTHESIS .)


state 149

    (44) escritura_prime -> expr COMMA . escritura_prime
    (42) escritura_prime -> . expr
    (43) escritura_prime -> . CTE_STRING
    (44) escritura_prime -> . expr COMMA escritura_prime
    (45) escritura_prime -> . CTE_STRING COMMA escritura_prime
    (51) expr -> . or
    (52) or -> . and
    (53) or -> . and OR or
    (54) and -> . equal
    (55) and -> . equal AND and
    (56) equal -> . compare
    (57) equal -> . compare EQUAL compare
    (58) equal -> . compare NOT_EQUAL compare
    (59) compare -> . exp
    (60) compare -> . exp GREATER exp
    (61) compare -> . exp LESSER exp
    (62) compare -> . exp GREATER_EQUAL exp
    (63) compare -> . exp LESSER_EQUAL exp
    (64) exp -> . termino
    (65) exp -> . termino PLUS exp
    (66) exp -> . termino MINUS exp
    (67) termino -> . factor
    (68) termino -> . factor TIMES termino
    (69) termino -> . factor DIVIDE termino
    (70) termino -> . factor MODULE termino
    (71) factor -> . variable
    (72) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (73) factor -> . llamada
    (74) factor -> . cte
    (75) factor -> . PLUS cte
    (76) factor -> . MINUS cte
    (21) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (22) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (23) variable -> . ID O_ABRACKET exp C_ABRACKET
    (24) variable -> . ID
    (34) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (77) cte -> . CTE_INT
    (78) cte -> . CTE_FLOAT

    CTE_STRING      shift and go to state 138
    O_PARENTHESIS   shift and go to state 38
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    ID              shift and go to state 31
    CTE_INT         shift and go to state 41
    CTE_FLOAT       shift and go to state 42

    expr                           shift and go to state 137
    escritura_prime                shift and go to state 156
    or                             shift and go to state 56
    and                            shift and go to state 57
    equal                          shift and go to state 58
    compare                        shift and go to state 59
    exp                            shift and go to state 60
    termino                        shift and go to state 33
    factor                         shift and go to state 36
    variable                       shift and go to state 37
    llamada                        shift and go to state 39
    cte                            shift and go to state 40

state 150

    (45) escritura_prime -> CTE_STRING COMMA . escritura_prime
    (42) escritura_prime -> . expr
    (43) escritura_prime -> . CTE_STRING
    (44) escritura_prime -> . expr COMMA escritura_prime
    (45) escritura_prime -> . CTE_STRING COMMA escritura_prime
    (51) expr -> . or
    (52) or -> . and
    (53) or -> . and OR or
    (54) and -> . equal
    (55) and -> . equal AND and
    (56) equal -> . compare
    (57) equal -> . compare EQUAL compare
    (58) equal -> . compare NOT_EQUAL compare
    (59) compare -> . exp
    (60) compare -> . exp GREATER exp
    (61) compare -> . exp LESSER exp
    (62) compare -> . exp GREATER_EQUAL exp
    (63) compare -> . exp LESSER_EQUAL exp
    (64) exp -> . termino
    (65) exp -> . termino PLUS exp
    (66) exp -> . termino MINUS exp
    (67) termino -> . factor
    (68) termino -> . factor TIMES termino
    (69) termino -> . factor DIVIDE termino
    (70) termino -> . factor MODULE termino
    (71) factor -> . variable
    (72) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (73) factor -> . llamada
    (74) factor -> . cte
    (75) factor -> . PLUS cte
    (76) factor -> . MINUS cte
    (21) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (22) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (23) variable -> . ID O_ABRACKET exp C_ABRACKET
    (24) variable -> . ID
    (34) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (77) cte -> . CTE_INT
    (78) cte -> . CTE_FLOAT

    CTE_STRING      shift and go to state 138
    O_PARENTHESIS   shift and go to state 38
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    ID              shift and go to state 31
    CTE_INT         shift and go to state 41
    CTE_FLOAT       shift and go to state 42

    escritura_prime                shift and go to state 157
    expr                           shift and go to state 137
    or                             shift and go to state 56
    and                            shift and go to state 57
    equal                          shift and go to state 58
    compare                        shift and go to state 59
    exp                            shift and go to state 60
    termino                        shift and go to state 33
    factor                         shift and go to state 36
    variable                       shift and go to state 37
    llamada                        shift and go to state 39
    cte                            shift and go to state 40

state 151

    (46) decision -> IF O_PARENTHESIS expr C_PARENTHESIS . bloque else
    (2) bloque -> . O_CBRACKET bloque_prime C_CBRACKET

    O_CBRACKET      shift and go to state 62

    bloque                         shift and go to state 158

state 152

    (49) while -> WHILE O_PARENTHESIS expr C_PARENTHESIS . bloque
    (2) bloque -> . O_CBRACKET bloque_prime C_CBRACKET

    O_CBRACKET      shift and go to state 62

    bloque                         shift and go to state 159

state 153

    (50) for -> FOR variable ASSIGN exp . TO exp bloque

    TO              shift and go to state 160


state 154

    (21) variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp . C_ABRACKET

    C_ABRACKET      shift and go to state 161


state 155

    (40) lectura_prime -> variable COMMA lectura_prime .

    C_PARENTHESIS   reduce using rule 40 (lectura_prime -> variable COMMA lectura_prime .)


state 156

    (44) escritura_prime -> expr COMMA escritura_prime .

    C_PARENTHESIS   reduce using rule 44 (escritura_prime -> expr COMMA escritura_prime .)


state 157

    (45) escritura_prime -> CTE_STRING COMMA escritura_prime .

    C_PARENTHESIS   reduce using rule 45 (escritura_prime -> CTE_STRING COMMA escritura_prime .)


state 158

    (46) decision -> IF O_PARENTHESIS expr C_PARENTHESIS bloque . else
    (47) else -> . ELSE bloque
    (48) else -> . epsilon
    (79) epsilon -> .

    ELSE            shift and go to state 163
    ID              reduce using rule 79 (epsilon -> .)
    RETURN          reduce using rule 79 (epsilon -> .)
    READ            reduce using rule 79 (epsilon -> .)
    WRITE           reduce using rule 79 (epsilon -> .)
    IF              reduce using rule 79 (epsilon -> .)
    WHILE           reduce using rule 79 (epsilon -> .)
    FOR             reduce using rule 79 (epsilon -> .)
    C_CBRACKET      reduce using rule 79 (epsilon -> .)

    else                           shift and go to state 162
    epsilon                        shift and go to state 164

state 159

    (49) while -> WHILE O_PARENTHESIS expr C_PARENTHESIS bloque .

    ID              reduce using rule 49 (while -> WHILE O_PARENTHESIS expr C_PARENTHESIS bloque .)
    RETURN          reduce using rule 49 (while -> WHILE O_PARENTHESIS expr C_PARENTHESIS bloque .)
    READ            reduce using rule 49 (while -> WHILE O_PARENTHESIS expr C_PARENTHESIS bloque .)
    WRITE           reduce using rule 49 (while -> WHILE O_PARENTHESIS expr C_PARENTHESIS bloque .)
    IF              reduce using rule 49 (while -> WHILE O_PARENTHESIS expr C_PARENTHESIS bloque .)
    WHILE           reduce using rule 49 (while -> WHILE O_PARENTHESIS expr C_PARENTHESIS bloque .)
    FOR             reduce using rule 49 (while -> WHILE O_PARENTHESIS expr C_PARENTHESIS bloque .)
    C_CBRACKET      reduce using rule 49 (while -> WHILE O_PARENTHESIS expr C_PARENTHESIS bloque .)


state 160

    (50) for -> FOR variable ASSIGN exp TO . exp bloque
    (64) exp -> . termino
    (65) exp -> . termino PLUS exp
    (66) exp -> . termino MINUS exp
    (67) termino -> . factor
    (68) termino -> . factor TIMES termino
    (69) termino -> . factor DIVIDE termino
    (70) termino -> . factor MODULE termino
    (71) factor -> . variable
    (72) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (73) factor -> . llamada
    (74) factor -> . cte
    (75) factor -> . PLUS cte
    (76) factor -> . MINUS cte
    (21) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (22) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (23) variable -> . ID O_ABRACKET exp C_ABRACKET
    (24) variable -> . ID
    (34) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (77) cte -> . CTE_INT
    (78) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 38
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    ID              shift and go to state 31
    CTE_INT         shift and go to state 41
    CTE_FLOAT       shift and go to state 42

    variable                       shift and go to state 37
    exp                            shift and go to state 165
    termino                        shift and go to state 33
    factor                         shift and go to state 36
    llamada                        shift and go to state 39
    cte                            shift and go to state 40

state 161

    (21) variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .

    COMMA           reduce using rule 21 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    COLON           reduce using rule 21 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    TIMES           reduce using rule 21 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    DIVIDE          reduce using rule 21 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    MODULE          reduce using rule 21 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    PLUS            reduce using rule 21 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    MINUS           reduce using rule 21 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    C_ABRACKET      reduce using rule 21 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    GREATER         reduce using rule 21 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    LESSER          reduce using rule 21 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    GREATER_EQUAL   reduce using rule 21 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    LESSER_EQUAL    reduce using rule 21 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    EQUAL           reduce using rule 21 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    NOT_EQUAL       reduce using rule 21 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    AND             reduce using rule 21 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    OR              reduce using rule 21 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    C_PARENTHESIS   reduce using rule 21 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    SEMICOLON       reduce using rule 21 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    TO              reduce using rule 21 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    O_CBRACKET      reduce using rule 21 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    ASSIGN          reduce using rule 21 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)


state 162

    (46) decision -> IF O_PARENTHESIS expr C_PARENTHESIS bloque else .

    ID              reduce using rule 46 (decision -> IF O_PARENTHESIS expr C_PARENTHESIS bloque else .)
    RETURN          reduce using rule 46 (decision -> IF O_PARENTHESIS expr C_PARENTHESIS bloque else .)
    READ            reduce using rule 46 (decision -> IF O_PARENTHESIS expr C_PARENTHESIS bloque else .)
    WRITE           reduce using rule 46 (decision -> IF O_PARENTHESIS expr C_PARENTHESIS bloque else .)
    IF              reduce using rule 46 (decision -> IF O_PARENTHESIS expr C_PARENTHESIS bloque else .)
    WHILE           reduce using rule 46 (decision -> IF O_PARENTHESIS expr C_PARENTHESIS bloque else .)
    FOR             reduce using rule 46 (decision -> IF O_PARENTHESIS expr C_PARENTHESIS bloque else .)
    C_CBRACKET      reduce using rule 46 (decision -> IF O_PARENTHESIS expr C_PARENTHESIS bloque else .)


state 163

    (47) else -> ELSE . bloque
    (2) bloque -> . O_CBRACKET bloque_prime C_CBRACKET

    O_CBRACKET      shift and go to state 62

    bloque                         shift and go to state 166

state 164

    (48) else -> epsilon .

    ID              reduce using rule 48 (else -> epsilon .)
    RETURN          reduce using rule 48 (else -> epsilon .)
    READ            reduce using rule 48 (else -> epsilon .)
    WRITE           reduce using rule 48 (else -> epsilon .)
    IF              reduce using rule 48 (else -> epsilon .)
    WHILE           reduce using rule 48 (else -> epsilon .)
    FOR             reduce using rule 48 (else -> epsilon .)
    C_CBRACKET      reduce using rule 48 (else -> epsilon .)


state 165

    (50) for -> FOR variable ASSIGN exp TO exp . bloque
    (2) bloque -> . O_CBRACKET bloque_prime C_CBRACKET

    O_CBRACKET      shift and go to state 62

    bloque                         shift and go to state 167

state 166

    (47) else -> ELSE bloque .

    ID              reduce using rule 47 (else -> ELSE bloque .)
    RETURN          reduce using rule 47 (else -> ELSE bloque .)
    READ            reduce using rule 47 (else -> ELSE bloque .)
    WRITE           reduce using rule 47 (else -> ELSE bloque .)
    IF              reduce using rule 47 (else -> ELSE bloque .)
    WHILE           reduce using rule 47 (else -> ELSE bloque .)
    FOR             reduce using rule 47 (else -> ELSE bloque .)
    C_CBRACKET      reduce using rule 47 (else -> ELSE bloque .)


state 167

    (50) for -> FOR variable ASSIGN exp TO exp bloque .

    ID              reduce using rule 50 (for -> FOR variable ASSIGN exp TO exp bloque .)
    RETURN          reduce using rule 50 (for -> FOR variable ASSIGN exp TO exp bloque .)
    READ            reduce using rule 50 (for -> FOR variable ASSIGN exp TO exp bloque .)
    WRITE           reduce using rule 50 (for -> FOR variable ASSIGN exp TO exp bloque .)
    IF              reduce using rule 50 (for -> FOR variable ASSIGN exp TO exp bloque .)
    WHILE           reduce using rule 50 (for -> FOR variable ASSIGN exp TO exp bloque .)
    FOR             reduce using rule 50 (for -> FOR variable ASSIGN exp TO exp bloque .)
    C_CBRACKET      reduce using rule 50 (for -> FOR variable ASSIGN exp TO exp bloque .)

