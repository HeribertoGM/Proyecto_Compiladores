Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CTE_CHAR

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAM ID SEMICOLON declaracion funcion MAIN O_PARENTHESIS C_PARENTHESIS bloque
Rule 2     bloque -> O_CBRACKET bloque_prime C_CBRACKET
Rule 3     bloque_prime -> estatuto bloque_prime
Rule 4     bloque_prime -> epsilon
Rule 5     declaracion -> declaracion_base
Rule 6     declaracion -> declaracion_base declaracion
Rule 7     declaracion_base -> LET declaracion_prime COLON declaracion_tipo SEMICOLON
Rule 8     declaracion_prime -> declaracion_variable
Rule 9     declaracion_prime -> declaracion_variable COMMA declaracion_prime
Rule 10    declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
Rule 11    declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
Rule 12    declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET
Rule 13    declaracion_variable -> ID
Rule 14    declaracion_tipo -> INT
Rule 15    declaracion_tipo -> FLOAT
Rule 16    declaracion_tipo -> CHAR
Rule 17    declaracion_tipo -> STRING
Rule 18    tipo -> INT
Rule 19    tipo -> FLOAT
Rule 20    tipo -> CHAR
Rule 21    tipo -> STRING
Rule 22    funcion -> funcion_base funcion
Rule 23    funcion -> epsilon
Rule 24    funcion_base -> FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion bloque
Rule 25    funcion_prime -> tipo ID
Rule 26    funcion_prime -> tipo ID COMMA funcion_prime
Rule 27    funcion_ident -> VOID ID
Rule 28    funcion_ident -> INT ID
Rule 29    funcion_ident -> FLOAT ID
Rule 30    funcion_ident -> CHAR ID
Rule 31    funcion_ident -> STRING ID
Rule 32    variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
Rule 33    variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
Rule 34    variable -> ID O_ABRACKET exp C_ABRACKET
Rule 35    variable -> ID
Rule 36    estatuto -> asignacion SEMICOLON
Rule 37    estatuto -> llamada SEMICOLON
Rule 38    estatuto -> retorno SEMICOLON
Rule 39    estatuto -> lectura SEMICOLON
Rule 40    estatuto -> escritura SEMICOLON
Rule 41    estatuto -> decision
Rule 42    estatuto -> while
Rule 43    estatuto -> for
Rule 44    asignacion -> variable ASSIGN expr
Rule 45    llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS
Rule 46    llamada_prime -> exp
Rule 47    llamada_prime -> exp COMMA llamada_prime
Rule 48    retorno -> RETURN O_PARENTHESIS expr C_PARENTHESIS
Rule 49    lectura -> READ O_PARENTHESIS lectura_prime C_PARENTHESIS
Rule 50    lectura_prime -> variable
Rule 51    lectura_prime -> variable COMMA lectura_prime
Rule 52    escritura -> WRITE O_PARENTHESIS escritura_prime C_PARENTHESIS
Rule 53    escritura_prime -> expr
Rule 54    escritura_prime -> CTE_STRING
Rule 55    escritura_prime -> expr COMMA escritura_prime
Rule 56    escritura_prime -> CTE_STRING COMMA escritura_prime
Rule 57    decision -> IF O_PARENTHESIS expr C_PARENTHESIS bloque else
Rule 58    else -> ELSE bloque
Rule 59    else -> epsilon
Rule 60    while -> WHILE O_PARENTHESIS expr C_PARENTHESIS bloque
Rule 61    for -> FOR variable ASSIGN exp TO exp bloque
Rule 62    expr -> or
Rule 63    or -> and
Rule 64    or -> and OR or
Rule 65    and -> equal
Rule 66    and -> equal AND and
Rule 67    equal -> compare
Rule 68    equal -> compare EQUAL compare
Rule 69    equal -> compare NOT_EQUAL compare
Rule 70    compare -> exp
Rule 71    compare -> exp GREATER exp
Rule 72    compare -> exp LESSER exp
Rule 73    compare -> exp GREATER_EQUAL exp
Rule 74    compare -> exp LESSER_EQUAL exp
Rule 75    exp -> termino
Rule 76    exp -> termino PLUS exp
Rule 77    exp -> termino MINUS exp
Rule 78    termino -> factor
Rule 79    termino -> factor TIMES termino
Rule 80    termino -> factor DIVIDE termino
Rule 81    termino -> factor MODULE termino
Rule 82    factor -> variable
Rule 83    factor -> O_PARENTHESIS expr C_PARENTHESIS
Rule 84    factor -> llamada
Rule 85    factor -> cte
Rule 86    factor -> PLUS cte
Rule 87    factor -> MINUS cte
Rule 88    cte -> CTE_INT
Rule 89    cte -> CTE_FLOAT
Rule 90    epsilon -> <empty>

Terminals, with rules where they appear

AND                  : 66
ASSIGN               : 44 61
CHAR                 : 16 20 30
COLON                : 7
COMMA                : 9 26 47 51 55 56
CTE_CHAR             : 
CTE_FLOAT            : 89
CTE_INT              : 10 10 10 11 11 12 88
CTE_STRING           : 54 56
C_ABRACKET           : 10 10 10 11 11 12 32 32 32 33 33 34
C_CBRACKET           : 2
C_PARENTHESIS        : 1 24 45 48 49 52 57 60 83
DIVIDE               : 80
ELSE                 : 58
EQUAL                : 68
FLOAT                : 15 19 29
FOR                  : 61
FUNCTION             : 24
GREATER              : 71
GREATER_EQUAL        : 73
ID                   : 1 10 11 12 13 25 26 27 28 29 30 31 32 33 34 35 45
IF                   : 57
INT                  : 14 18 28
LESSER               : 72
LESSER_EQUAL         : 74
LET                  : 7
MAIN                 : 1
MINUS                : 77 87
MODULE               : 81
NOT_EQUAL            : 69
OR                   : 64
O_ABRACKET           : 10 10 10 11 11 12 32 32 32 33 33 34
O_CBRACKET           : 2
O_PARENTHESIS        : 1 24 45 48 49 52 57 60 83
PLUS                 : 76 86
PROGRAM              : 1
READ                 : 49
RETURN               : 48
SEMICOLON            : 1 7 36 37 38 39 40
STRING               : 17 21 31
TIMES                : 79
TO                   : 61
VOID                 : 27
WHILE                : 60
WRITE                : 52
error                : 

Nonterminals, with rules where they appear

and                  : 63 64 66
asignacion           : 36
bloque               : 1 24 57 58 60 61
bloque_prime         : 2 3
compare              : 67 68 68 69 69
cte                  : 85 86 87
decision             : 41
declaracion          : 1 6 24
declaracion_base     : 5 6
declaracion_prime    : 7 9
declaracion_tipo     : 7
declaracion_variable : 8 9
else                 : 57
epsilon              : 4 23 59
equal                : 65 66
escritura            : 40
escritura_prime      : 52 55 56
estatuto             : 3
exp                  : 32 32 32 33 33 34 46 47 61 61 70 71 71 72 72 73 73 74 74 76 77
expr                 : 44 48 53 55 57 60 83
factor               : 78 79 80 81
for                  : 43
funcion              : 1 22
funcion_base         : 22
funcion_ident        : 24
funcion_prime        : 24 26
lectura              : 39
lectura_prime        : 49 51
llamada              : 37 84
llamada_prime        : 45 47
or                   : 62 64
programa             : 0
retorno              : 38
termino              : 75 76 77 79 80 81
tipo                 : 25 26
variable             : 44 50 51 61 82
while                : 42

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAM ID SEMICOLON declaracion funcion MAIN O_PARENTHESIS C_PARENTHESIS bloque

    PROGRAM         shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> PROGRAM . ID SEMICOLON declaracion funcion MAIN O_PARENTHESIS C_PARENTHESIS bloque

    ID              shift and go to state 3


state 3

    (1) programa -> PROGRAM ID . SEMICOLON declaracion funcion MAIN O_PARENTHESIS C_PARENTHESIS bloque

    SEMICOLON       shift and go to state 4


state 4

    (1) programa -> PROGRAM ID SEMICOLON . declaracion funcion MAIN O_PARENTHESIS C_PARENTHESIS bloque
    (5) declaracion -> . declaracion_base
    (6) declaracion -> . declaracion_base declaracion
    (7) declaracion_base -> . LET declaracion_prime COLON declaracion_tipo SEMICOLON

    LET             shift and go to state 7

    declaracion                    shift and go to state 5
    declaracion_base               shift and go to state 6

state 5

    (1) programa -> PROGRAM ID SEMICOLON declaracion . funcion MAIN O_PARENTHESIS C_PARENTHESIS bloque
    (22) funcion -> . funcion_base funcion
    (23) funcion -> . epsilon
    (24) funcion_base -> . FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion bloque
    (90) epsilon -> .

    FUNCTION        shift and go to state 11
    MAIN            reduce using rule 90 (epsilon -> .)

    funcion                        shift and go to state 8
    funcion_base                   shift and go to state 9
    epsilon                        shift and go to state 10

state 6

    (5) declaracion -> declaracion_base .
    (6) declaracion -> declaracion_base . declaracion
    (5) declaracion -> . declaracion_base
    (6) declaracion -> . declaracion_base declaracion
    (7) declaracion_base -> . LET declaracion_prime COLON declaracion_tipo SEMICOLON

    FUNCTION        reduce using rule 5 (declaracion -> declaracion_base .)
    MAIN            reduce using rule 5 (declaracion -> declaracion_base .)
    O_CBRACKET      reduce using rule 5 (declaracion -> declaracion_base .)
    LET             shift and go to state 7

    declaracion_base               shift and go to state 6
    declaracion                    shift and go to state 12

state 7

    (7) declaracion_base -> LET . declaracion_prime COLON declaracion_tipo SEMICOLON
    (8) declaracion_prime -> . declaracion_variable
    (9) declaracion_prime -> . declaracion_variable COMMA declaracion_prime
    (10) declaracion_variable -> . ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (11) declaracion_variable -> . ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (12) declaracion_variable -> . ID O_ABRACKET CTE_INT C_ABRACKET
    (13) declaracion_variable -> . ID

    ID              shift and go to state 15

    declaracion_prime              shift and go to state 13
    declaracion_variable           shift and go to state 14

state 8

    (1) programa -> PROGRAM ID SEMICOLON declaracion funcion . MAIN O_PARENTHESIS C_PARENTHESIS bloque

    MAIN            shift and go to state 16


state 9

    (22) funcion -> funcion_base . funcion
    (22) funcion -> . funcion_base funcion
    (23) funcion -> . epsilon
    (24) funcion_base -> . FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion bloque
    (90) epsilon -> .

    FUNCTION        shift and go to state 11
    MAIN            reduce using rule 90 (epsilon -> .)

    funcion_base                   shift and go to state 9
    funcion                        shift and go to state 17
    epsilon                        shift and go to state 10

state 10

    (23) funcion -> epsilon .

    MAIN            reduce using rule 23 (funcion -> epsilon .)


state 11

    (24) funcion_base -> FUNCTION . funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion bloque
    (27) funcion_ident -> . VOID ID
    (28) funcion_ident -> . INT ID
    (29) funcion_ident -> . FLOAT ID
    (30) funcion_ident -> . CHAR ID
    (31) funcion_ident -> . STRING ID

    VOID            shift and go to state 19
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    STRING          shift and go to state 23

    funcion_ident                  shift and go to state 18

state 12

    (6) declaracion -> declaracion_base declaracion .

    FUNCTION        reduce using rule 6 (declaracion -> declaracion_base declaracion .)
    MAIN            reduce using rule 6 (declaracion -> declaracion_base declaracion .)
    O_CBRACKET      reduce using rule 6 (declaracion -> declaracion_base declaracion .)


state 13

    (7) declaracion_base -> LET declaracion_prime . COLON declaracion_tipo SEMICOLON

    COLON           shift and go to state 24


state 14

    (8) declaracion_prime -> declaracion_variable .
    (9) declaracion_prime -> declaracion_variable . COMMA declaracion_prime

    COLON           reduce using rule 8 (declaracion_prime -> declaracion_variable .)
    COMMA           shift and go to state 25


state 15

    (10) declaracion_variable -> ID . O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (11) declaracion_variable -> ID . O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (12) declaracion_variable -> ID . O_ABRACKET CTE_INT C_ABRACKET
    (13) declaracion_variable -> ID .

    O_ABRACKET      shift and go to state 26
    COMMA           reduce using rule 13 (declaracion_variable -> ID .)
    COLON           reduce using rule 13 (declaracion_variable -> ID .)


state 16

    (1) programa -> PROGRAM ID SEMICOLON declaracion funcion MAIN . O_PARENTHESIS C_PARENTHESIS bloque

    O_PARENTHESIS   shift and go to state 27


state 17

    (22) funcion -> funcion_base funcion .

    MAIN            reduce using rule 22 (funcion -> funcion_base funcion .)


state 18

    (24) funcion_base -> FUNCTION funcion_ident . O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion bloque

    O_PARENTHESIS   shift and go to state 28


state 19

    (27) funcion_ident -> VOID . ID

    ID              shift and go to state 29


state 20

    (28) funcion_ident -> INT . ID

    ID              shift and go to state 30


state 21

    (29) funcion_ident -> FLOAT . ID

    ID              shift and go to state 31


state 22

    (30) funcion_ident -> CHAR . ID

    ID              shift and go to state 32


state 23

    (31) funcion_ident -> STRING . ID

    ID              shift and go to state 33


state 24

    (7) declaracion_base -> LET declaracion_prime COLON . declaracion_tipo SEMICOLON
    (14) declaracion_tipo -> . INT
    (15) declaracion_tipo -> . FLOAT
    (16) declaracion_tipo -> . CHAR
    (17) declaracion_tipo -> . STRING

    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    CHAR            shift and go to state 37
    STRING          shift and go to state 38

    declaracion_tipo               shift and go to state 34

state 25

    (9) declaracion_prime -> declaracion_variable COMMA . declaracion_prime
    (8) declaracion_prime -> . declaracion_variable
    (9) declaracion_prime -> . declaracion_variable COMMA declaracion_prime
    (10) declaracion_variable -> . ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (11) declaracion_variable -> . ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (12) declaracion_variable -> . ID O_ABRACKET CTE_INT C_ABRACKET
    (13) declaracion_variable -> . ID

    ID              shift and go to state 15

    declaracion_variable           shift and go to state 14
    declaracion_prime              shift and go to state 39

state 26

    (10) declaracion_variable -> ID O_ABRACKET . CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (11) declaracion_variable -> ID O_ABRACKET . CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (12) declaracion_variable -> ID O_ABRACKET . CTE_INT C_ABRACKET

    CTE_INT         shift and go to state 40


state 27

    (1) programa -> PROGRAM ID SEMICOLON declaracion funcion MAIN O_PARENTHESIS . C_PARENTHESIS bloque

    C_PARENTHESIS   shift and go to state 41


state 28

    (24) funcion_base -> FUNCTION funcion_ident O_PARENTHESIS . funcion_prime C_PARENTHESIS declaracion bloque
    (25) funcion_prime -> . tipo ID
    (26) funcion_prime -> . tipo ID COMMA funcion_prime
    (18) tipo -> . INT
    (19) tipo -> . FLOAT
    (20) tipo -> . CHAR
    (21) tipo -> . STRING

    INT             shift and go to state 44
    FLOAT           shift and go to state 45
    CHAR            shift and go to state 46
    STRING          shift and go to state 47

    funcion_prime                  shift and go to state 42
    tipo                           shift and go to state 43

state 29

    (27) funcion_ident -> VOID ID .

    O_PARENTHESIS   reduce using rule 27 (funcion_ident -> VOID ID .)


state 30

    (28) funcion_ident -> INT ID .

    O_PARENTHESIS   reduce using rule 28 (funcion_ident -> INT ID .)


state 31

    (29) funcion_ident -> FLOAT ID .

    O_PARENTHESIS   reduce using rule 29 (funcion_ident -> FLOAT ID .)


state 32

    (30) funcion_ident -> CHAR ID .

    O_PARENTHESIS   reduce using rule 30 (funcion_ident -> CHAR ID .)


state 33

    (31) funcion_ident -> STRING ID .

    O_PARENTHESIS   reduce using rule 31 (funcion_ident -> STRING ID .)


state 34

    (7) declaracion_base -> LET declaracion_prime COLON declaracion_tipo . SEMICOLON

    SEMICOLON       shift and go to state 48


state 35

    (14) declaracion_tipo -> INT .

    SEMICOLON       reduce using rule 14 (declaracion_tipo -> INT .)


state 36

    (15) declaracion_tipo -> FLOAT .

    SEMICOLON       reduce using rule 15 (declaracion_tipo -> FLOAT .)


state 37

    (16) declaracion_tipo -> CHAR .

    SEMICOLON       reduce using rule 16 (declaracion_tipo -> CHAR .)


state 38

    (17) declaracion_tipo -> STRING .

    SEMICOLON       reduce using rule 17 (declaracion_tipo -> STRING .)


state 39

    (9) declaracion_prime -> declaracion_variable COMMA declaracion_prime .

    COLON           reduce using rule 9 (declaracion_prime -> declaracion_variable COMMA declaracion_prime .)


state 40

    (10) declaracion_variable -> ID O_ABRACKET CTE_INT . C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (11) declaracion_variable -> ID O_ABRACKET CTE_INT . C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (12) declaracion_variable -> ID O_ABRACKET CTE_INT . C_ABRACKET

    C_ABRACKET      shift and go to state 49


state 41

    (1) programa -> PROGRAM ID SEMICOLON declaracion funcion MAIN O_PARENTHESIS C_PARENTHESIS . bloque
    (2) bloque -> . O_CBRACKET bloque_prime C_CBRACKET

    O_CBRACKET      shift and go to state 51

    bloque                         shift and go to state 50

state 42

    (24) funcion_base -> FUNCTION funcion_ident O_PARENTHESIS funcion_prime . C_PARENTHESIS declaracion bloque

    C_PARENTHESIS   shift and go to state 52


state 43

    (25) funcion_prime -> tipo . ID
    (26) funcion_prime -> tipo . ID COMMA funcion_prime

    ID              shift and go to state 53


state 44

    (18) tipo -> INT .

    ID              reduce using rule 18 (tipo -> INT .)


state 45

    (19) tipo -> FLOAT .

    ID              reduce using rule 19 (tipo -> FLOAT .)


state 46

    (20) tipo -> CHAR .

    ID              reduce using rule 20 (tipo -> CHAR .)


state 47

    (21) tipo -> STRING .

    ID              reduce using rule 21 (tipo -> STRING .)


state 48

    (7) declaracion_base -> LET declaracion_prime COLON declaracion_tipo SEMICOLON .

    LET             reduce using rule 7 (declaracion_base -> LET declaracion_prime COLON declaracion_tipo SEMICOLON .)
    FUNCTION        reduce using rule 7 (declaracion_base -> LET declaracion_prime COLON declaracion_tipo SEMICOLON .)
    MAIN            reduce using rule 7 (declaracion_base -> LET declaracion_prime COLON declaracion_tipo SEMICOLON .)
    O_CBRACKET      reduce using rule 7 (declaracion_base -> LET declaracion_prime COLON declaracion_tipo SEMICOLON .)


state 49

    (10) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET . O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (11) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET . O_ABRACKET CTE_INT C_ABRACKET
    (12) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET .

    O_ABRACKET      shift and go to state 54
    COMMA           reduce using rule 12 (declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET .)
    COLON           reduce using rule 12 (declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET .)


state 50

    (1) programa -> PROGRAM ID SEMICOLON declaracion funcion MAIN O_PARENTHESIS C_PARENTHESIS bloque .

    $end            reduce using rule 1 (programa -> PROGRAM ID SEMICOLON declaracion funcion MAIN O_PARENTHESIS C_PARENTHESIS bloque .)


state 51

    (2) bloque -> O_CBRACKET . bloque_prime C_CBRACKET
    (3) bloque_prime -> . estatuto bloque_prime
    (4) bloque_prime -> . epsilon
    (36) estatuto -> . asignacion SEMICOLON
    (37) estatuto -> . llamada SEMICOLON
    (38) estatuto -> . retorno SEMICOLON
    (39) estatuto -> . lectura SEMICOLON
    (40) estatuto -> . escritura SEMICOLON
    (41) estatuto -> . decision
    (42) estatuto -> . while
    (43) estatuto -> . for
    (90) epsilon -> .
    (44) asignacion -> . variable ASSIGN expr
    (45) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (48) retorno -> . RETURN O_PARENTHESIS expr C_PARENTHESIS
    (49) lectura -> . READ O_PARENTHESIS lectura_prime C_PARENTHESIS
    (52) escritura -> . WRITE O_PARENTHESIS escritura_prime C_PARENTHESIS
    (57) decision -> . IF O_PARENTHESIS expr C_PARENTHESIS bloque else
    (60) while -> . WHILE O_PARENTHESIS expr C_PARENTHESIS bloque
    (61) for -> . FOR variable ASSIGN exp TO exp bloque
    (32) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (33) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID

    C_CBRACKET      reduce using rule 90 (epsilon -> .)
    ID              shift and go to state 67
    RETURN          shift and go to state 68
    READ            shift and go to state 69
    WRITE           shift and go to state 70
    IF              shift and go to state 71
    WHILE           shift and go to state 72
    FOR             shift and go to state 73

    bloque_prime                   shift and go to state 55
    estatuto                       shift and go to state 56
    epsilon                        shift and go to state 57
    asignacion                     shift and go to state 58
    llamada                        shift and go to state 59
    retorno                        shift and go to state 60
    lectura                        shift and go to state 61
    escritura                      shift and go to state 62
    decision                       shift and go to state 63
    while                          shift and go to state 64
    for                            shift and go to state 65
    variable                       shift and go to state 66

state 52

    (24) funcion_base -> FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS . declaracion bloque
    (5) declaracion -> . declaracion_base
    (6) declaracion -> . declaracion_base declaracion
    (7) declaracion_base -> . LET declaracion_prime COLON declaracion_tipo SEMICOLON

    LET             shift and go to state 7

    declaracion                    shift and go to state 74
    declaracion_base               shift and go to state 6

state 53

    (25) funcion_prime -> tipo ID .
    (26) funcion_prime -> tipo ID . COMMA funcion_prime

    C_PARENTHESIS   reduce using rule 25 (funcion_prime -> tipo ID .)
    COMMA           shift and go to state 75


state 54

    (10) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET . CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (11) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET . CTE_INT C_ABRACKET

    CTE_INT         shift and go to state 76


state 55

    (2) bloque -> O_CBRACKET bloque_prime . C_CBRACKET

    C_CBRACKET      shift and go to state 77


state 56

    (3) bloque_prime -> estatuto . bloque_prime
    (3) bloque_prime -> . estatuto bloque_prime
    (4) bloque_prime -> . epsilon
    (36) estatuto -> . asignacion SEMICOLON
    (37) estatuto -> . llamada SEMICOLON
    (38) estatuto -> . retorno SEMICOLON
    (39) estatuto -> . lectura SEMICOLON
    (40) estatuto -> . escritura SEMICOLON
    (41) estatuto -> . decision
    (42) estatuto -> . while
    (43) estatuto -> . for
    (90) epsilon -> .
    (44) asignacion -> . variable ASSIGN expr
    (45) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (48) retorno -> . RETURN O_PARENTHESIS expr C_PARENTHESIS
    (49) lectura -> . READ O_PARENTHESIS lectura_prime C_PARENTHESIS
    (52) escritura -> . WRITE O_PARENTHESIS escritura_prime C_PARENTHESIS
    (57) decision -> . IF O_PARENTHESIS expr C_PARENTHESIS bloque else
    (60) while -> . WHILE O_PARENTHESIS expr C_PARENTHESIS bloque
    (61) for -> . FOR variable ASSIGN exp TO exp bloque
    (32) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (33) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID

    C_CBRACKET      reduce using rule 90 (epsilon -> .)
    ID              shift and go to state 67
    RETURN          shift and go to state 68
    READ            shift and go to state 69
    WRITE           shift and go to state 70
    IF              shift and go to state 71
    WHILE           shift and go to state 72
    FOR             shift and go to state 73

    estatuto                       shift and go to state 56
    bloque_prime                   shift and go to state 78
    epsilon                        shift and go to state 57
    asignacion                     shift and go to state 58
    llamada                        shift and go to state 59
    retorno                        shift and go to state 60
    lectura                        shift and go to state 61
    escritura                      shift and go to state 62
    decision                       shift and go to state 63
    while                          shift and go to state 64
    for                            shift and go to state 65
    variable                       shift and go to state 66

state 57

    (4) bloque_prime -> epsilon .

    C_CBRACKET      reduce using rule 4 (bloque_prime -> epsilon .)


state 58

    (36) estatuto -> asignacion . SEMICOLON

    SEMICOLON       shift and go to state 79


state 59

    (37) estatuto -> llamada . SEMICOLON

    SEMICOLON       shift and go to state 80


state 60

    (38) estatuto -> retorno . SEMICOLON

    SEMICOLON       shift and go to state 81


state 61

    (39) estatuto -> lectura . SEMICOLON

    SEMICOLON       shift and go to state 82


state 62

    (40) estatuto -> escritura . SEMICOLON

    SEMICOLON       shift and go to state 83


state 63

    (41) estatuto -> decision .

    ID              reduce using rule 41 (estatuto -> decision .)
    RETURN          reduce using rule 41 (estatuto -> decision .)
    READ            reduce using rule 41 (estatuto -> decision .)
    WRITE           reduce using rule 41 (estatuto -> decision .)
    IF              reduce using rule 41 (estatuto -> decision .)
    WHILE           reduce using rule 41 (estatuto -> decision .)
    FOR             reduce using rule 41 (estatuto -> decision .)
    C_CBRACKET      reduce using rule 41 (estatuto -> decision .)


state 64

    (42) estatuto -> while .

    ID              reduce using rule 42 (estatuto -> while .)
    RETURN          reduce using rule 42 (estatuto -> while .)
    READ            reduce using rule 42 (estatuto -> while .)
    WRITE           reduce using rule 42 (estatuto -> while .)
    IF              reduce using rule 42 (estatuto -> while .)
    WHILE           reduce using rule 42 (estatuto -> while .)
    FOR             reduce using rule 42 (estatuto -> while .)
    C_CBRACKET      reduce using rule 42 (estatuto -> while .)


state 65

    (43) estatuto -> for .

    ID              reduce using rule 43 (estatuto -> for .)
    RETURN          reduce using rule 43 (estatuto -> for .)
    READ            reduce using rule 43 (estatuto -> for .)
    WRITE           reduce using rule 43 (estatuto -> for .)
    IF              reduce using rule 43 (estatuto -> for .)
    WHILE           reduce using rule 43 (estatuto -> for .)
    FOR             reduce using rule 43 (estatuto -> for .)
    C_CBRACKET      reduce using rule 43 (estatuto -> for .)


state 66

    (44) asignacion -> variable . ASSIGN expr

    ASSIGN          shift and go to state 84


state 67

    (45) llamada -> ID . O_PARENTHESIS llamada_prime C_PARENTHESIS
    (32) variable -> ID . O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (33) variable -> ID . O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (34) variable -> ID . O_ABRACKET exp C_ABRACKET
    (35) variable -> ID .

    O_PARENTHESIS   shift and go to state 85
    O_ABRACKET      shift and go to state 86
    ASSIGN          reduce using rule 35 (variable -> ID .)


state 68

    (48) retorno -> RETURN . O_PARENTHESIS expr C_PARENTHESIS

    O_PARENTHESIS   shift and go to state 87


state 69

    (49) lectura -> READ . O_PARENTHESIS lectura_prime C_PARENTHESIS

    O_PARENTHESIS   shift and go to state 88


state 70

    (52) escritura -> WRITE . O_PARENTHESIS escritura_prime C_PARENTHESIS

    O_PARENTHESIS   shift and go to state 89


state 71

    (57) decision -> IF . O_PARENTHESIS expr C_PARENTHESIS bloque else

    O_PARENTHESIS   shift and go to state 90


state 72

    (60) while -> WHILE . O_PARENTHESIS expr C_PARENTHESIS bloque

    O_PARENTHESIS   shift and go to state 91


state 73

    (61) for -> FOR . variable ASSIGN exp TO exp bloque
    (32) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (33) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID

    ID              shift and go to state 93

    variable                       shift and go to state 92

state 74

    (24) funcion_base -> FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion . bloque
    (2) bloque -> . O_CBRACKET bloque_prime C_CBRACKET

    O_CBRACKET      shift and go to state 51

    bloque                         shift and go to state 94

state 75

    (26) funcion_prime -> tipo ID COMMA . funcion_prime
    (25) funcion_prime -> . tipo ID
    (26) funcion_prime -> . tipo ID COMMA funcion_prime
    (18) tipo -> . INT
    (19) tipo -> . FLOAT
    (20) tipo -> . CHAR
    (21) tipo -> . STRING

    INT             shift and go to state 44
    FLOAT           shift and go to state 45
    CHAR            shift and go to state 46
    STRING          shift and go to state 47

    tipo                           shift and go to state 43
    funcion_prime                  shift and go to state 95

state 76

    (10) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT . C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (11) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT . C_ABRACKET

    C_ABRACKET      shift and go to state 96


state 77

    (2) bloque -> O_CBRACKET bloque_prime C_CBRACKET .

    $end            reduce using rule 2 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    FUNCTION        reduce using rule 2 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    MAIN            reduce using rule 2 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    ELSE            reduce using rule 2 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    ID              reduce using rule 2 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    RETURN          reduce using rule 2 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    READ            reduce using rule 2 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    WRITE           reduce using rule 2 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    IF              reduce using rule 2 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    WHILE           reduce using rule 2 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    FOR             reduce using rule 2 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    C_CBRACKET      reduce using rule 2 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)


state 78

    (3) bloque_prime -> estatuto bloque_prime .

    C_CBRACKET      reduce using rule 3 (bloque_prime -> estatuto bloque_prime .)


state 79

    (36) estatuto -> asignacion SEMICOLON .

    ID              reduce using rule 36 (estatuto -> asignacion SEMICOLON .)
    RETURN          reduce using rule 36 (estatuto -> asignacion SEMICOLON .)
    READ            reduce using rule 36 (estatuto -> asignacion SEMICOLON .)
    WRITE           reduce using rule 36 (estatuto -> asignacion SEMICOLON .)
    IF              reduce using rule 36 (estatuto -> asignacion SEMICOLON .)
    WHILE           reduce using rule 36 (estatuto -> asignacion SEMICOLON .)
    FOR             reduce using rule 36 (estatuto -> asignacion SEMICOLON .)
    C_CBRACKET      reduce using rule 36 (estatuto -> asignacion SEMICOLON .)


state 80

    (37) estatuto -> llamada SEMICOLON .

    ID              reduce using rule 37 (estatuto -> llamada SEMICOLON .)
    RETURN          reduce using rule 37 (estatuto -> llamada SEMICOLON .)
    READ            reduce using rule 37 (estatuto -> llamada SEMICOLON .)
    WRITE           reduce using rule 37 (estatuto -> llamada SEMICOLON .)
    IF              reduce using rule 37 (estatuto -> llamada SEMICOLON .)
    WHILE           reduce using rule 37 (estatuto -> llamada SEMICOLON .)
    FOR             reduce using rule 37 (estatuto -> llamada SEMICOLON .)
    C_CBRACKET      reduce using rule 37 (estatuto -> llamada SEMICOLON .)


state 81

    (38) estatuto -> retorno SEMICOLON .

    ID              reduce using rule 38 (estatuto -> retorno SEMICOLON .)
    RETURN          reduce using rule 38 (estatuto -> retorno SEMICOLON .)
    READ            reduce using rule 38 (estatuto -> retorno SEMICOLON .)
    WRITE           reduce using rule 38 (estatuto -> retorno SEMICOLON .)
    IF              reduce using rule 38 (estatuto -> retorno SEMICOLON .)
    WHILE           reduce using rule 38 (estatuto -> retorno SEMICOLON .)
    FOR             reduce using rule 38 (estatuto -> retorno SEMICOLON .)
    C_CBRACKET      reduce using rule 38 (estatuto -> retorno SEMICOLON .)


state 82

    (39) estatuto -> lectura SEMICOLON .

    ID              reduce using rule 39 (estatuto -> lectura SEMICOLON .)
    RETURN          reduce using rule 39 (estatuto -> lectura SEMICOLON .)
    READ            reduce using rule 39 (estatuto -> lectura SEMICOLON .)
    WRITE           reduce using rule 39 (estatuto -> lectura SEMICOLON .)
    IF              reduce using rule 39 (estatuto -> lectura SEMICOLON .)
    WHILE           reduce using rule 39 (estatuto -> lectura SEMICOLON .)
    FOR             reduce using rule 39 (estatuto -> lectura SEMICOLON .)
    C_CBRACKET      reduce using rule 39 (estatuto -> lectura SEMICOLON .)


state 83

    (40) estatuto -> escritura SEMICOLON .

    ID              reduce using rule 40 (estatuto -> escritura SEMICOLON .)
    RETURN          reduce using rule 40 (estatuto -> escritura SEMICOLON .)
    READ            reduce using rule 40 (estatuto -> escritura SEMICOLON .)
    WRITE           reduce using rule 40 (estatuto -> escritura SEMICOLON .)
    IF              reduce using rule 40 (estatuto -> escritura SEMICOLON .)
    WHILE           reduce using rule 40 (estatuto -> escritura SEMICOLON .)
    FOR             reduce using rule 40 (estatuto -> escritura SEMICOLON .)
    C_CBRACKET      reduce using rule 40 (estatuto -> escritura SEMICOLON .)


state 84

    (44) asignacion -> variable ASSIGN . expr
    (62) expr -> . or
    (63) or -> . and
    (64) or -> . and OR or
    (65) and -> . equal
    (66) and -> . equal AND and
    (67) equal -> . compare
    (68) equal -> . compare EQUAL compare
    (69) equal -> . compare NOT_EQUAL compare
    (70) compare -> . exp
    (71) compare -> . exp GREATER exp
    (72) compare -> . exp LESSER exp
    (73) compare -> . exp GREATER_EQUAL exp
    (74) compare -> . exp LESSER_EQUAL exp
    (75) exp -> . termino
    (76) exp -> . termino PLUS exp
    (77) exp -> . termino MINUS exp
    (78) termino -> . factor
    (79) termino -> . factor TIMES termino
    (80) termino -> . factor DIVIDE termino
    (81) termino -> . factor MODULE termino
    (82) factor -> . variable
    (83) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (84) factor -> . llamada
    (85) factor -> . cte
    (86) factor -> . PLUS cte
    (87) factor -> . MINUS cte
    (32) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (33) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID
    (45) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (88) cte -> . CTE_INT
    (89) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 108
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    ID              shift and go to state 111
    CTE_INT         shift and go to state 112
    CTE_FLOAT       shift and go to state 113

    variable                       shift and go to state 97
    expr                           shift and go to state 98
    or                             shift and go to state 99
    and                            shift and go to state 100
    equal                          shift and go to state 101
    compare                        shift and go to state 102
    exp                            shift and go to state 103
    termino                        shift and go to state 104
    factor                         shift and go to state 107
    llamada                        shift and go to state 109
    cte                            shift and go to state 110

state 85

    (45) llamada -> ID O_PARENTHESIS . llamada_prime C_PARENTHESIS
    (46) llamada_prime -> . exp
    (47) llamada_prime -> . exp COMMA llamada_prime
    (75) exp -> . termino
    (76) exp -> . termino PLUS exp
    (77) exp -> . termino MINUS exp
    (78) termino -> . factor
    (79) termino -> . factor TIMES termino
    (80) termino -> . factor DIVIDE termino
    (81) termino -> . factor MODULE termino
    (82) factor -> . variable
    (83) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (84) factor -> . llamada
    (85) factor -> . cte
    (86) factor -> . PLUS cte
    (87) factor -> . MINUS cte
    (32) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (33) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID
    (45) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (88) cte -> . CTE_INT
    (89) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 108
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    ID              shift and go to state 111
    CTE_INT         shift and go to state 112
    CTE_FLOAT       shift and go to state 113

    llamada_prime                  shift and go to state 114
    exp                            shift and go to state 115
    termino                        shift and go to state 104
    factor                         shift and go to state 107
    variable                       shift and go to state 97
    llamada                        shift and go to state 109
    cte                            shift and go to state 110

state 86

    (32) variable -> ID O_ABRACKET . exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (33) variable -> ID O_ABRACKET . exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (34) variable -> ID O_ABRACKET . exp C_ABRACKET
    (75) exp -> . termino
    (76) exp -> . termino PLUS exp
    (77) exp -> . termino MINUS exp
    (78) termino -> . factor
    (79) termino -> . factor TIMES termino
    (80) termino -> . factor DIVIDE termino
    (81) termino -> . factor MODULE termino
    (82) factor -> . variable
    (83) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (84) factor -> . llamada
    (85) factor -> . cte
    (86) factor -> . PLUS cte
    (87) factor -> . MINUS cte
    (32) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (33) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID
    (45) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (88) cte -> . CTE_INT
    (89) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 108
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    ID              shift and go to state 111
    CTE_INT         shift and go to state 112
    CTE_FLOAT       shift and go to state 113

    exp                            shift and go to state 116
    termino                        shift and go to state 104
    factor                         shift and go to state 107
    variable                       shift and go to state 97
    llamada                        shift and go to state 109
    cte                            shift and go to state 110

state 87

    (48) retorno -> RETURN O_PARENTHESIS . expr C_PARENTHESIS
    (62) expr -> . or
    (63) or -> . and
    (64) or -> . and OR or
    (65) and -> . equal
    (66) and -> . equal AND and
    (67) equal -> . compare
    (68) equal -> . compare EQUAL compare
    (69) equal -> . compare NOT_EQUAL compare
    (70) compare -> . exp
    (71) compare -> . exp GREATER exp
    (72) compare -> . exp LESSER exp
    (73) compare -> . exp GREATER_EQUAL exp
    (74) compare -> . exp LESSER_EQUAL exp
    (75) exp -> . termino
    (76) exp -> . termino PLUS exp
    (77) exp -> . termino MINUS exp
    (78) termino -> . factor
    (79) termino -> . factor TIMES termino
    (80) termino -> . factor DIVIDE termino
    (81) termino -> . factor MODULE termino
    (82) factor -> . variable
    (83) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (84) factor -> . llamada
    (85) factor -> . cte
    (86) factor -> . PLUS cte
    (87) factor -> . MINUS cte
    (32) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (33) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID
    (45) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (88) cte -> . CTE_INT
    (89) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 108
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    ID              shift and go to state 111
    CTE_INT         shift and go to state 112
    CTE_FLOAT       shift and go to state 113

    expr                           shift and go to state 117
    or                             shift and go to state 99
    and                            shift and go to state 100
    equal                          shift and go to state 101
    compare                        shift and go to state 102
    exp                            shift and go to state 103
    termino                        shift and go to state 104
    factor                         shift and go to state 107
    variable                       shift and go to state 97
    llamada                        shift and go to state 109
    cte                            shift and go to state 110

state 88

    (49) lectura -> READ O_PARENTHESIS . lectura_prime C_PARENTHESIS
    (50) lectura_prime -> . variable
    (51) lectura_prime -> . variable COMMA lectura_prime
    (32) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (33) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID

    ID              shift and go to state 93

    lectura_prime                  shift and go to state 118
    variable                       shift and go to state 119

state 89

    (52) escritura -> WRITE O_PARENTHESIS . escritura_prime C_PARENTHESIS
    (53) escritura_prime -> . expr
    (54) escritura_prime -> . CTE_STRING
    (55) escritura_prime -> . expr COMMA escritura_prime
    (56) escritura_prime -> . CTE_STRING COMMA escritura_prime
    (62) expr -> . or
    (63) or -> . and
    (64) or -> . and OR or
    (65) and -> . equal
    (66) and -> . equal AND and
    (67) equal -> . compare
    (68) equal -> . compare EQUAL compare
    (69) equal -> . compare NOT_EQUAL compare
    (70) compare -> . exp
    (71) compare -> . exp GREATER exp
    (72) compare -> . exp LESSER exp
    (73) compare -> . exp GREATER_EQUAL exp
    (74) compare -> . exp LESSER_EQUAL exp
    (75) exp -> . termino
    (76) exp -> . termino PLUS exp
    (77) exp -> . termino MINUS exp
    (78) termino -> . factor
    (79) termino -> . factor TIMES termino
    (80) termino -> . factor DIVIDE termino
    (81) termino -> . factor MODULE termino
    (82) factor -> . variable
    (83) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (84) factor -> . llamada
    (85) factor -> . cte
    (86) factor -> . PLUS cte
    (87) factor -> . MINUS cte
    (32) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (33) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID
    (45) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (88) cte -> . CTE_INT
    (89) cte -> . CTE_FLOAT

    CTE_STRING      shift and go to state 122
    O_PARENTHESIS   shift and go to state 108
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    ID              shift and go to state 111
    CTE_INT         shift and go to state 112
    CTE_FLOAT       shift and go to state 113

    escritura_prime                shift and go to state 120
    expr                           shift and go to state 121
    or                             shift and go to state 99
    and                            shift and go to state 100
    equal                          shift and go to state 101
    compare                        shift and go to state 102
    exp                            shift and go to state 103
    termino                        shift and go to state 104
    factor                         shift and go to state 107
    variable                       shift and go to state 97
    llamada                        shift and go to state 109
    cte                            shift and go to state 110

state 90

    (57) decision -> IF O_PARENTHESIS . expr C_PARENTHESIS bloque else
    (62) expr -> . or
    (63) or -> . and
    (64) or -> . and OR or
    (65) and -> . equal
    (66) and -> . equal AND and
    (67) equal -> . compare
    (68) equal -> . compare EQUAL compare
    (69) equal -> . compare NOT_EQUAL compare
    (70) compare -> . exp
    (71) compare -> . exp GREATER exp
    (72) compare -> . exp LESSER exp
    (73) compare -> . exp GREATER_EQUAL exp
    (74) compare -> . exp LESSER_EQUAL exp
    (75) exp -> . termino
    (76) exp -> . termino PLUS exp
    (77) exp -> . termino MINUS exp
    (78) termino -> . factor
    (79) termino -> . factor TIMES termino
    (80) termino -> . factor DIVIDE termino
    (81) termino -> . factor MODULE termino
    (82) factor -> . variable
    (83) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (84) factor -> . llamada
    (85) factor -> . cte
    (86) factor -> . PLUS cte
    (87) factor -> . MINUS cte
    (32) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (33) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID
    (45) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (88) cte -> . CTE_INT
    (89) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 108
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    ID              shift and go to state 111
    CTE_INT         shift and go to state 112
    CTE_FLOAT       shift and go to state 113

    expr                           shift and go to state 123
    or                             shift and go to state 99
    and                            shift and go to state 100
    equal                          shift and go to state 101
    compare                        shift and go to state 102
    exp                            shift and go to state 103
    termino                        shift and go to state 104
    factor                         shift and go to state 107
    variable                       shift and go to state 97
    llamada                        shift and go to state 109
    cte                            shift and go to state 110

state 91

    (60) while -> WHILE O_PARENTHESIS . expr C_PARENTHESIS bloque
    (62) expr -> . or
    (63) or -> . and
    (64) or -> . and OR or
    (65) and -> . equal
    (66) and -> . equal AND and
    (67) equal -> . compare
    (68) equal -> . compare EQUAL compare
    (69) equal -> . compare NOT_EQUAL compare
    (70) compare -> . exp
    (71) compare -> . exp GREATER exp
    (72) compare -> . exp LESSER exp
    (73) compare -> . exp GREATER_EQUAL exp
    (74) compare -> . exp LESSER_EQUAL exp
    (75) exp -> . termino
    (76) exp -> . termino PLUS exp
    (77) exp -> . termino MINUS exp
    (78) termino -> . factor
    (79) termino -> . factor TIMES termino
    (80) termino -> . factor DIVIDE termino
    (81) termino -> . factor MODULE termino
    (82) factor -> . variable
    (83) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (84) factor -> . llamada
    (85) factor -> . cte
    (86) factor -> . PLUS cte
    (87) factor -> . MINUS cte
    (32) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (33) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID
    (45) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (88) cte -> . CTE_INT
    (89) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 108
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    ID              shift and go to state 111
    CTE_INT         shift and go to state 112
    CTE_FLOAT       shift and go to state 113

    expr                           shift and go to state 124
    or                             shift and go to state 99
    and                            shift and go to state 100
    equal                          shift and go to state 101
    compare                        shift and go to state 102
    exp                            shift and go to state 103
    termino                        shift and go to state 104
    factor                         shift and go to state 107
    variable                       shift and go to state 97
    llamada                        shift and go to state 109
    cte                            shift and go to state 110

state 92

    (61) for -> FOR variable . ASSIGN exp TO exp bloque

    ASSIGN          shift and go to state 125


state 93

    (32) variable -> ID . O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (33) variable -> ID . O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (34) variable -> ID . O_ABRACKET exp C_ABRACKET
    (35) variable -> ID .

    O_ABRACKET      shift and go to state 86
    ASSIGN          reduce using rule 35 (variable -> ID .)
    COMMA           reduce using rule 35 (variable -> ID .)
    C_PARENTHESIS   reduce using rule 35 (variable -> ID .)


state 94

    (24) funcion_base -> FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion bloque .

    FUNCTION        reduce using rule 24 (funcion_base -> FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion bloque .)
    MAIN            reduce using rule 24 (funcion_base -> FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion bloque .)


state 95

    (26) funcion_prime -> tipo ID COMMA funcion_prime .

    C_PARENTHESIS   reduce using rule 26 (funcion_prime -> tipo ID COMMA funcion_prime .)


state 96

    (10) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET . O_ABRACKET CTE_INT C_ABRACKET
    (11) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET .

    O_ABRACKET      shift and go to state 126
    COMMA           reduce using rule 11 (declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET .)
    COLON           reduce using rule 11 (declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET .)


state 97

    (82) factor -> variable .

    TIMES           reduce using rule 82 (factor -> variable .)
    DIVIDE          reduce using rule 82 (factor -> variable .)
    MODULE          reduce using rule 82 (factor -> variable .)
    PLUS            reduce using rule 82 (factor -> variable .)
    MINUS           reduce using rule 82 (factor -> variable .)
    GREATER         reduce using rule 82 (factor -> variable .)
    LESSER          reduce using rule 82 (factor -> variable .)
    GREATER_EQUAL   reduce using rule 82 (factor -> variable .)
    LESSER_EQUAL    reduce using rule 82 (factor -> variable .)
    EQUAL           reduce using rule 82 (factor -> variable .)
    NOT_EQUAL       reduce using rule 82 (factor -> variable .)
    AND             reduce using rule 82 (factor -> variable .)
    OR              reduce using rule 82 (factor -> variable .)
    SEMICOLON       reduce using rule 82 (factor -> variable .)
    COMMA           reduce using rule 82 (factor -> variable .)
    C_PARENTHESIS   reduce using rule 82 (factor -> variable .)
    C_ABRACKET      reduce using rule 82 (factor -> variable .)
    TO              reduce using rule 82 (factor -> variable .)
    O_CBRACKET      reduce using rule 82 (factor -> variable .)


state 98

    (44) asignacion -> variable ASSIGN expr .

    SEMICOLON       reduce using rule 44 (asignacion -> variable ASSIGN expr .)


state 99

    (62) expr -> or .

    SEMICOLON       reduce using rule 62 (expr -> or .)
    C_PARENTHESIS   reduce using rule 62 (expr -> or .)
    COMMA           reduce using rule 62 (expr -> or .)


state 100

    (63) or -> and .
    (64) or -> and . OR or

    SEMICOLON       reduce using rule 63 (or -> and .)
    C_PARENTHESIS   reduce using rule 63 (or -> and .)
    COMMA           reduce using rule 63 (or -> and .)
    OR              shift and go to state 127


state 101

    (65) and -> equal .
    (66) and -> equal . AND and

    OR              reduce using rule 65 (and -> equal .)
    SEMICOLON       reduce using rule 65 (and -> equal .)
    C_PARENTHESIS   reduce using rule 65 (and -> equal .)
    COMMA           reduce using rule 65 (and -> equal .)
    AND             shift and go to state 128


state 102

    (67) equal -> compare .
    (68) equal -> compare . EQUAL compare
    (69) equal -> compare . NOT_EQUAL compare

    AND             reduce using rule 67 (equal -> compare .)
    OR              reduce using rule 67 (equal -> compare .)
    SEMICOLON       reduce using rule 67 (equal -> compare .)
    C_PARENTHESIS   reduce using rule 67 (equal -> compare .)
    COMMA           reduce using rule 67 (equal -> compare .)
    EQUAL           shift and go to state 129
    NOT_EQUAL       shift and go to state 130


state 103

    (70) compare -> exp .
    (71) compare -> exp . GREATER exp
    (72) compare -> exp . LESSER exp
    (73) compare -> exp . GREATER_EQUAL exp
    (74) compare -> exp . LESSER_EQUAL exp

    EQUAL           reduce using rule 70 (compare -> exp .)
    NOT_EQUAL       reduce using rule 70 (compare -> exp .)
    AND             reduce using rule 70 (compare -> exp .)
    OR              reduce using rule 70 (compare -> exp .)
    SEMICOLON       reduce using rule 70 (compare -> exp .)
    C_PARENTHESIS   reduce using rule 70 (compare -> exp .)
    COMMA           reduce using rule 70 (compare -> exp .)
    GREATER         shift and go to state 131
    LESSER          shift and go to state 132
    GREATER_EQUAL   shift and go to state 133
    LESSER_EQUAL    shift and go to state 134


state 104

    (75) exp -> termino .
    (76) exp -> termino . PLUS exp
    (77) exp -> termino . MINUS exp

    GREATER         reduce using rule 75 (exp -> termino .)
    LESSER          reduce using rule 75 (exp -> termino .)
    GREATER_EQUAL   reduce using rule 75 (exp -> termino .)
    LESSER_EQUAL    reduce using rule 75 (exp -> termino .)
    EQUAL           reduce using rule 75 (exp -> termino .)
    NOT_EQUAL       reduce using rule 75 (exp -> termino .)
    AND             reduce using rule 75 (exp -> termino .)
    OR              reduce using rule 75 (exp -> termino .)
    SEMICOLON       reduce using rule 75 (exp -> termino .)
    COMMA           reduce using rule 75 (exp -> termino .)
    C_PARENTHESIS   reduce using rule 75 (exp -> termino .)
    C_ABRACKET      reduce using rule 75 (exp -> termino .)
    TO              reduce using rule 75 (exp -> termino .)
    O_CBRACKET      reduce using rule 75 (exp -> termino .)
    PLUS            shift and go to state 135
    MINUS           shift and go to state 136


state 105

    (86) factor -> PLUS . cte
    (88) cte -> . CTE_INT
    (89) cte -> . CTE_FLOAT

    CTE_INT         shift and go to state 112
    CTE_FLOAT       shift and go to state 113

    cte                            shift and go to state 137

state 106

    (87) factor -> MINUS . cte
    (88) cte -> . CTE_INT
    (89) cte -> . CTE_FLOAT

    CTE_INT         shift and go to state 112
    CTE_FLOAT       shift and go to state 113

    cte                            shift and go to state 138

state 107

    (78) termino -> factor .
    (79) termino -> factor . TIMES termino
    (80) termino -> factor . DIVIDE termino
    (81) termino -> factor . MODULE termino

    PLUS            reduce using rule 78 (termino -> factor .)
    MINUS           reduce using rule 78 (termino -> factor .)
    GREATER         reduce using rule 78 (termino -> factor .)
    LESSER          reduce using rule 78 (termino -> factor .)
    GREATER_EQUAL   reduce using rule 78 (termino -> factor .)
    LESSER_EQUAL    reduce using rule 78 (termino -> factor .)
    EQUAL           reduce using rule 78 (termino -> factor .)
    NOT_EQUAL       reduce using rule 78 (termino -> factor .)
    AND             reduce using rule 78 (termino -> factor .)
    OR              reduce using rule 78 (termino -> factor .)
    SEMICOLON       reduce using rule 78 (termino -> factor .)
    COMMA           reduce using rule 78 (termino -> factor .)
    C_PARENTHESIS   reduce using rule 78 (termino -> factor .)
    C_ABRACKET      reduce using rule 78 (termino -> factor .)
    TO              reduce using rule 78 (termino -> factor .)
    O_CBRACKET      reduce using rule 78 (termino -> factor .)
    TIMES           shift and go to state 139
    DIVIDE          shift and go to state 140
    MODULE          shift and go to state 141


state 108

    (83) factor -> O_PARENTHESIS . expr C_PARENTHESIS
    (62) expr -> . or
    (63) or -> . and
    (64) or -> . and OR or
    (65) and -> . equal
    (66) and -> . equal AND and
    (67) equal -> . compare
    (68) equal -> . compare EQUAL compare
    (69) equal -> . compare NOT_EQUAL compare
    (70) compare -> . exp
    (71) compare -> . exp GREATER exp
    (72) compare -> . exp LESSER exp
    (73) compare -> . exp GREATER_EQUAL exp
    (74) compare -> . exp LESSER_EQUAL exp
    (75) exp -> . termino
    (76) exp -> . termino PLUS exp
    (77) exp -> . termino MINUS exp
    (78) termino -> . factor
    (79) termino -> . factor TIMES termino
    (80) termino -> . factor DIVIDE termino
    (81) termino -> . factor MODULE termino
    (82) factor -> . variable
    (83) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (84) factor -> . llamada
    (85) factor -> . cte
    (86) factor -> . PLUS cte
    (87) factor -> . MINUS cte
    (32) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (33) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID
    (45) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (88) cte -> . CTE_INT
    (89) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 108
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    ID              shift and go to state 111
    CTE_INT         shift and go to state 112
    CTE_FLOAT       shift and go to state 113

    expr                           shift and go to state 142
    or                             shift and go to state 99
    and                            shift and go to state 100
    equal                          shift and go to state 101
    compare                        shift and go to state 102
    exp                            shift and go to state 103
    termino                        shift and go to state 104
    factor                         shift and go to state 107
    variable                       shift and go to state 97
    llamada                        shift and go to state 109
    cte                            shift and go to state 110

state 109

    (84) factor -> llamada .

    TIMES           reduce using rule 84 (factor -> llamada .)
    DIVIDE          reduce using rule 84 (factor -> llamada .)
    MODULE          reduce using rule 84 (factor -> llamada .)
    PLUS            reduce using rule 84 (factor -> llamada .)
    MINUS           reduce using rule 84 (factor -> llamada .)
    GREATER         reduce using rule 84 (factor -> llamada .)
    LESSER          reduce using rule 84 (factor -> llamada .)
    GREATER_EQUAL   reduce using rule 84 (factor -> llamada .)
    LESSER_EQUAL    reduce using rule 84 (factor -> llamada .)
    EQUAL           reduce using rule 84 (factor -> llamada .)
    NOT_EQUAL       reduce using rule 84 (factor -> llamada .)
    AND             reduce using rule 84 (factor -> llamada .)
    OR              reduce using rule 84 (factor -> llamada .)
    SEMICOLON       reduce using rule 84 (factor -> llamada .)
    COMMA           reduce using rule 84 (factor -> llamada .)
    C_PARENTHESIS   reduce using rule 84 (factor -> llamada .)
    C_ABRACKET      reduce using rule 84 (factor -> llamada .)
    TO              reduce using rule 84 (factor -> llamada .)
    O_CBRACKET      reduce using rule 84 (factor -> llamada .)


state 110

    (85) factor -> cte .

    TIMES           reduce using rule 85 (factor -> cte .)
    DIVIDE          reduce using rule 85 (factor -> cte .)
    MODULE          reduce using rule 85 (factor -> cte .)
    PLUS            reduce using rule 85 (factor -> cte .)
    MINUS           reduce using rule 85 (factor -> cte .)
    GREATER         reduce using rule 85 (factor -> cte .)
    LESSER          reduce using rule 85 (factor -> cte .)
    GREATER_EQUAL   reduce using rule 85 (factor -> cte .)
    LESSER_EQUAL    reduce using rule 85 (factor -> cte .)
    EQUAL           reduce using rule 85 (factor -> cte .)
    NOT_EQUAL       reduce using rule 85 (factor -> cte .)
    AND             reduce using rule 85 (factor -> cte .)
    OR              reduce using rule 85 (factor -> cte .)
    SEMICOLON       reduce using rule 85 (factor -> cte .)
    COMMA           reduce using rule 85 (factor -> cte .)
    C_PARENTHESIS   reduce using rule 85 (factor -> cte .)
    C_ABRACKET      reduce using rule 85 (factor -> cte .)
    TO              reduce using rule 85 (factor -> cte .)
    O_CBRACKET      reduce using rule 85 (factor -> cte .)


state 111

    (32) variable -> ID . O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (33) variable -> ID . O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (34) variable -> ID . O_ABRACKET exp C_ABRACKET
    (35) variable -> ID .
    (45) llamada -> ID . O_PARENTHESIS llamada_prime C_PARENTHESIS

    O_ABRACKET      shift and go to state 86
    TIMES           reduce using rule 35 (variable -> ID .)
    DIVIDE          reduce using rule 35 (variable -> ID .)
    MODULE          reduce using rule 35 (variable -> ID .)
    PLUS            reduce using rule 35 (variable -> ID .)
    MINUS           reduce using rule 35 (variable -> ID .)
    GREATER         reduce using rule 35 (variable -> ID .)
    LESSER          reduce using rule 35 (variable -> ID .)
    GREATER_EQUAL   reduce using rule 35 (variable -> ID .)
    LESSER_EQUAL    reduce using rule 35 (variable -> ID .)
    EQUAL           reduce using rule 35 (variable -> ID .)
    NOT_EQUAL       reduce using rule 35 (variable -> ID .)
    AND             reduce using rule 35 (variable -> ID .)
    OR              reduce using rule 35 (variable -> ID .)
    SEMICOLON       reduce using rule 35 (variable -> ID .)
    COMMA           reduce using rule 35 (variable -> ID .)
    C_PARENTHESIS   reduce using rule 35 (variable -> ID .)
    C_ABRACKET      reduce using rule 35 (variable -> ID .)
    TO              reduce using rule 35 (variable -> ID .)
    O_CBRACKET      reduce using rule 35 (variable -> ID .)
    O_PARENTHESIS   shift and go to state 85


state 112

    (88) cte -> CTE_INT .

    TIMES           reduce using rule 88 (cte -> CTE_INT .)
    DIVIDE          reduce using rule 88 (cte -> CTE_INT .)
    MODULE          reduce using rule 88 (cte -> CTE_INT .)
    PLUS            reduce using rule 88 (cte -> CTE_INT .)
    MINUS           reduce using rule 88 (cte -> CTE_INT .)
    GREATER         reduce using rule 88 (cte -> CTE_INT .)
    LESSER          reduce using rule 88 (cte -> CTE_INT .)
    GREATER_EQUAL   reduce using rule 88 (cte -> CTE_INT .)
    LESSER_EQUAL    reduce using rule 88 (cte -> CTE_INT .)
    EQUAL           reduce using rule 88 (cte -> CTE_INT .)
    NOT_EQUAL       reduce using rule 88 (cte -> CTE_INT .)
    AND             reduce using rule 88 (cte -> CTE_INT .)
    OR              reduce using rule 88 (cte -> CTE_INT .)
    SEMICOLON       reduce using rule 88 (cte -> CTE_INT .)
    COMMA           reduce using rule 88 (cte -> CTE_INT .)
    C_PARENTHESIS   reduce using rule 88 (cte -> CTE_INT .)
    C_ABRACKET      reduce using rule 88 (cte -> CTE_INT .)
    TO              reduce using rule 88 (cte -> CTE_INT .)
    O_CBRACKET      reduce using rule 88 (cte -> CTE_INT .)


state 113

    (89) cte -> CTE_FLOAT .

    TIMES           reduce using rule 89 (cte -> CTE_FLOAT .)
    DIVIDE          reduce using rule 89 (cte -> CTE_FLOAT .)
    MODULE          reduce using rule 89 (cte -> CTE_FLOAT .)
    PLUS            reduce using rule 89 (cte -> CTE_FLOAT .)
    MINUS           reduce using rule 89 (cte -> CTE_FLOAT .)
    GREATER         reduce using rule 89 (cte -> CTE_FLOAT .)
    LESSER          reduce using rule 89 (cte -> CTE_FLOAT .)
    GREATER_EQUAL   reduce using rule 89 (cte -> CTE_FLOAT .)
    LESSER_EQUAL    reduce using rule 89 (cte -> CTE_FLOAT .)
    EQUAL           reduce using rule 89 (cte -> CTE_FLOAT .)
    NOT_EQUAL       reduce using rule 89 (cte -> CTE_FLOAT .)
    AND             reduce using rule 89 (cte -> CTE_FLOAT .)
    OR              reduce using rule 89 (cte -> CTE_FLOAT .)
    SEMICOLON       reduce using rule 89 (cte -> CTE_FLOAT .)
    COMMA           reduce using rule 89 (cte -> CTE_FLOAT .)
    C_PARENTHESIS   reduce using rule 89 (cte -> CTE_FLOAT .)
    C_ABRACKET      reduce using rule 89 (cte -> CTE_FLOAT .)
    TO              reduce using rule 89 (cte -> CTE_FLOAT .)
    O_CBRACKET      reduce using rule 89 (cte -> CTE_FLOAT .)


state 114

    (45) llamada -> ID O_PARENTHESIS llamada_prime . C_PARENTHESIS

    C_PARENTHESIS   shift and go to state 143


state 115

    (46) llamada_prime -> exp .
    (47) llamada_prime -> exp . COMMA llamada_prime

    C_PARENTHESIS   reduce using rule 46 (llamada_prime -> exp .)
    COMMA           shift and go to state 144


state 116

    (32) variable -> ID O_ABRACKET exp . C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (33) variable -> ID O_ABRACKET exp . C_ABRACKET O_ABRACKET exp C_ABRACKET
    (34) variable -> ID O_ABRACKET exp . C_ABRACKET

    C_ABRACKET      shift and go to state 145


state 117

    (48) retorno -> RETURN O_PARENTHESIS expr . C_PARENTHESIS

    C_PARENTHESIS   shift and go to state 146


state 118

    (49) lectura -> READ O_PARENTHESIS lectura_prime . C_PARENTHESIS

    C_PARENTHESIS   shift and go to state 147


state 119

    (50) lectura_prime -> variable .
    (51) lectura_prime -> variable . COMMA lectura_prime

    C_PARENTHESIS   reduce using rule 50 (lectura_prime -> variable .)
    COMMA           shift and go to state 148


state 120

    (52) escritura -> WRITE O_PARENTHESIS escritura_prime . C_PARENTHESIS

    C_PARENTHESIS   shift and go to state 149


state 121

    (53) escritura_prime -> expr .
    (55) escritura_prime -> expr . COMMA escritura_prime

    C_PARENTHESIS   reduce using rule 53 (escritura_prime -> expr .)
    COMMA           shift and go to state 150


state 122

    (54) escritura_prime -> CTE_STRING .
    (56) escritura_prime -> CTE_STRING . COMMA escritura_prime

    C_PARENTHESIS   reduce using rule 54 (escritura_prime -> CTE_STRING .)
    COMMA           shift and go to state 151


state 123

    (57) decision -> IF O_PARENTHESIS expr . C_PARENTHESIS bloque else

    C_PARENTHESIS   shift and go to state 152


state 124

    (60) while -> WHILE O_PARENTHESIS expr . C_PARENTHESIS bloque

    C_PARENTHESIS   shift and go to state 153


state 125

    (61) for -> FOR variable ASSIGN . exp TO exp bloque
    (75) exp -> . termino
    (76) exp -> . termino PLUS exp
    (77) exp -> . termino MINUS exp
    (78) termino -> . factor
    (79) termino -> . factor TIMES termino
    (80) termino -> . factor DIVIDE termino
    (81) termino -> . factor MODULE termino
    (82) factor -> . variable
    (83) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (84) factor -> . llamada
    (85) factor -> . cte
    (86) factor -> . PLUS cte
    (87) factor -> . MINUS cte
    (32) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (33) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID
    (45) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (88) cte -> . CTE_INT
    (89) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 108
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    ID              shift and go to state 111
    CTE_INT         shift and go to state 112
    CTE_FLOAT       shift and go to state 113

    variable                       shift and go to state 97
    exp                            shift and go to state 154
    termino                        shift and go to state 104
    factor                         shift and go to state 107
    llamada                        shift and go to state 109
    cte                            shift and go to state 110

state 126

    (10) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET . CTE_INT C_ABRACKET

    CTE_INT         shift and go to state 155


state 127

    (64) or -> and OR . or
    (63) or -> . and
    (64) or -> . and OR or
    (65) and -> . equal
    (66) and -> . equal AND and
    (67) equal -> . compare
    (68) equal -> . compare EQUAL compare
    (69) equal -> . compare NOT_EQUAL compare
    (70) compare -> . exp
    (71) compare -> . exp GREATER exp
    (72) compare -> . exp LESSER exp
    (73) compare -> . exp GREATER_EQUAL exp
    (74) compare -> . exp LESSER_EQUAL exp
    (75) exp -> . termino
    (76) exp -> . termino PLUS exp
    (77) exp -> . termino MINUS exp
    (78) termino -> . factor
    (79) termino -> . factor TIMES termino
    (80) termino -> . factor DIVIDE termino
    (81) termino -> . factor MODULE termino
    (82) factor -> . variable
    (83) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (84) factor -> . llamada
    (85) factor -> . cte
    (86) factor -> . PLUS cte
    (87) factor -> . MINUS cte
    (32) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (33) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID
    (45) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (88) cte -> . CTE_INT
    (89) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 108
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    ID              shift and go to state 111
    CTE_INT         shift and go to state 112
    CTE_FLOAT       shift and go to state 113

    and                            shift and go to state 100
    or                             shift and go to state 156
    equal                          shift and go to state 101
    compare                        shift and go to state 102
    exp                            shift and go to state 103
    termino                        shift and go to state 104
    factor                         shift and go to state 107
    variable                       shift and go to state 97
    llamada                        shift and go to state 109
    cte                            shift and go to state 110

state 128

    (66) and -> equal AND . and
    (65) and -> . equal
    (66) and -> . equal AND and
    (67) equal -> . compare
    (68) equal -> . compare EQUAL compare
    (69) equal -> . compare NOT_EQUAL compare
    (70) compare -> . exp
    (71) compare -> . exp GREATER exp
    (72) compare -> . exp LESSER exp
    (73) compare -> . exp GREATER_EQUAL exp
    (74) compare -> . exp LESSER_EQUAL exp
    (75) exp -> . termino
    (76) exp -> . termino PLUS exp
    (77) exp -> . termino MINUS exp
    (78) termino -> . factor
    (79) termino -> . factor TIMES termino
    (80) termino -> . factor DIVIDE termino
    (81) termino -> . factor MODULE termino
    (82) factor -> . variable
    (83) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (84) factor -> . llamada
    (85) factor -> . cte
    (86) factor -> . PLUS cte
    (87) factor -> . MINUS cte
    (32) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (33) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID
    (45) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (88) cte -> . CTE_INT
    (89) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 108
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    ID              shift and go to state 111
    CTE_INT         shift and go to state 112
    CTE_FLOAT       shift and go to state 113

    equal                          shift and go to state 101
    and                            shift and go to state 157
    compare                        shift and go to state 102
    exp                            shift and go to state 103
    termino                        shift and go to state 104
    factor                         shift and go to state 107
    variable                       shift and go to state 97
    llamada                        shift and go to state 109
    cte                            shift and go to state 110

state 129

    (68) equal -> compare EQUAL . compare
    (70) compare -> . exp
    (71) compare -> . exp GREATER exp
    (72) compare -> . exp LESSER exp
    (73) compare -> . exp GREATER_EQUAL exp
    (74) compare -> . exp LESSER_EQUAL exp
    (75) exp -> . termino
    (76) exp -> . termino PLUS exp
    (77) exp -> . termino MINUS exp
    (78) termino -> . factor
    (79) termino -> . factor TIMES termino
    (80) termino -> . factor DIVIDE termino
    (81) termino -> . factor MODULE termino
    (82) factor -> . variable
    (83) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (84) factor -> . llamada
    (85) factor -> . cte
    (86) factor -> . PLUS cte
    (87) factor -> . MINUS cte
    (32) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (33) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID
    (45) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (88) cte -> . CTE_INT
    (89) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 108
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    ID              shift and go to state 111
    CTE_INT         shift and go to state 112
    CTE_FLOAT       shift and go to state 113

    compare                        shift and go to state 158
    exp                            shift and go to state 103
    termino                        shift and go to state 104
    factor                         shift and go to state 107
    variable                       shift and go to state 97
    llamada                        shift and go to state 109
    cte                            shift and go to state 110

state 130

    (69) equal -> compare NOT_EQUAL . compare
    (70) compare -> . exp
    (71) compare -> . exp GREATER exp
    (72) compare -> . exp LESSER exp
    (73) compare -> . exp GREATER_EQUAL exp
    (74) compare -> . exp LESSER_EQUAL exp
    (75) exp -> . termino
    (76) exp -> . termino PLUS exp
    (77) exp -> . termino MINUS exp
    (78) termino -> . factor
    (79) termino -> . factor TIMES termino
    (80) termino -> . factor DIVIDE termino
    (81) termino -> . factor MODULE termino
    (82) factor -> . variable
    (83) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (84) factor -> . llamada
    (85) factor -> . cte
    (86) factor -> . PLUS cte
    (87) factor -> . MINUS cte
    (32) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (33) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID
    (45) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (88) cte -> . CTE_INT
    (89) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 108
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    ID              shift and go to state 111
    CTE_INT         shift and go to state 112
    CTE_FLOAT       shift and go to state 113

    compare                        shift and go to state 159
    exp                            shift and go to state 103
    termino                        shift and go to state 104
    factor                         shift and go to state 107
    variable                       shift and go to state 97
    llamada                        shift and go to state 109
    cte                            shift and go to state 110

state 131

    (71) compare -> exp GREATER . exp
    (75) exp -> . termino
    (76) exp -> . termino PLUS exp
    (77) exp -> . termino MINUS exp
    (78) termino -> . factor
    (79) termino -> . factor TIMES termino
    (80) termino -> . factor DIVIDE termino
    (81) termino -> . factor MODULE termino
    (82) factor -> . variable
    (83) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (84) factor -> . llamada
    (85) factor -> . cte
    (86) factor -> . PLUS cte
    (87) factor -> . MINUS cte
    (32) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (33) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID
    (45) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (88) cte -> . CTE_INT
    (89) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 108
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    ID              shift and go to state 111
    CTE_INT         shift and go to state 112
    CTE_FLOAT       shift and go to state 113

    exp                            shift and go to state 160
    termino                        shift and go to state 104
    factor                         shift and go to state 107
    variable                       shift and go to state 97
    llamada                        shift and go to state 109
    cte                            shift and go to state 110

state 132

    (72) compare -> exp LESSER . exp
    (75) exp -> . termino
    (76) exp -> . termino PLUS exp
    (77) exp -> . termino MINUS exp
    (78) termino -> . factor
    (79) termino -> . factor TIMES termino
    (80) termino -> . factor DIVIDE termino
    (81) termino -> . factor MODULE termino
    (82) factor -> . variable
    (83) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (84) factor -> . llamada
    (85) factor -> . cte
    (86) factor -> . PLUS cte
    (87) factor -> . MINUS cte
    (32) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (33) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID
    (45) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (88) cte -> . CTE_INT
    (89) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 108
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    ID              shift and go to state 111
    CTE_INT         shift and go to state 112
    CTE_FLOAT       shift and go to state 113

    exp                            shift and go to state 161
    termino                        shift and go to state 104
    factor                         shift and go to state 107
    variable                       shift and go to state 97
    llamada                        shift and go to state 109
    cte                            shift and go to state 110

state 133

    (73) compare -> exp GREATER_EQUAL . exp
    (75) exp -> . termino
    (76) exp -> . termino PLUS exp
    (77) exp -> . termino MINUS exp
    (78) termino -> . factor
    (79) termino -> . factor TIMES termino
    (80) termino -> . factor DIVIDE termino
    (81) termino -> . factor MODULE termino
    (82) factor -> . variable
    (83) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (84) factor -> . llamada
    (85) factor -> . cte
    (86) factor -> . PLUS cte
    (87) factor -> . MINUS cte
    (32) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (33) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID
    (45) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (88) cte -> . CTE_INT
    (89) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 108
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    ID              shift and go to state 111
    CTE_INT         shift and go to state 112
    CTE_FLOAT       shift and go to state 113

    exp                            shift and go to state 162
    termino                        shift and go to state 104
    factor                         shift and go to state 107
    variable                       shift and go to state 97
    llamada                        shift and go to state 109
    cte                            shift and go to state 110

state 134

    (74) compare -> exp LESSER_EQUAL . exp
    (75) exp -> . termino
    (76) exp -> . termino PLUS exp
    (77) exp -> . termino MINUS exp
    (78) termino -> . factor
    (79) termino -> . factor TIMES termino
    (80) termino -> . factor DIVIDE termino
    (81) termino -> . factor MODULE termino
    (82) factor -> . variable
    (83) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (84) factor -> . llamada
    (85) factor -> . cte
    (86) factor -> . PLUS cte
    (87) factor -> . MINUS cte
    (32) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (33) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID
    (45) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (88) cte -> . CTE_INT
    (89) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 108
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    ID              shift and go to state 111
    CTE_INT         shift and go to state 112
    CTE_FLOAT       shift and go to state 113

    exp                            shift and go to state 163
    termino                        shift and go to state 104
    factor                         shift and go to state 107
    variable                       shift and go to state 97
    llamada                        shift and go to state 109
    cte                            shift and go to state 110

state 135

    (76) exp -> termino PLUS . exp
    (75) exp -> . termino
    (76) exp -> . termino PLUS exp
    (77) exp -> . termino MINUS exp
    (78) termino -> . factor
    (79) termino -> . factor TIMES termino
    (80) termino -> . factor DIVIDE termino
    (81) termino -> . factor MODULE termino
    (82) factor -> . variable
    (83) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (84) factor -> . llamada
    (85) factor -> . cte
    (86) factor -> . PLUS cte
    (87) factor -> . MINUS cte
    (32) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (33) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID
    (45) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (88) cte -> . CTE_INT
    (89) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 108
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    ID              shift and go to state 111
    CTE_INT         shift and go to state 112
    CTE_FLOAT       shift and go to state 113

    termino                        shift and go to state 104
    exp                            shift and go to state 164
    factor                         shift and go to state 107
    variable                       shift and go to state 97
    llamada                        shift and go to state 109
    cte                            shift and go to state 110

state 136

    (77) exp -> termino MINUS . exp
    (75) exp -> . termino
    (76) exp -> . termino PLUS exp
    (77) exp -> . termino MINUS exp
    (78) termino -> . factor
    (79) termino -> . factor TIMES termino
    (80) termino -> . factor DIVIDE termino
    (81) termino -> . factor MODULE termino
    (82) factor -> . variable
    (83) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (84) factor -> . llamada
    (85) factor -> . cte
    (86) factor -> . PLUS cte
    (87) factor -> . MINUS cte
    (32) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (33) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID
    (45) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (88) cte -> . CTE_INT
    (89) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 108
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    ID              shift and go to state 111
    CTE_INT         shift and go to state 112
    CTE_FLOAT       shift and go to state 113

    termino                        shift and go to state 104
    exp                            shift and go to state 165
    factor                         shift and go to state 107
    variable                       shift and go to state 97
    llamada                        shift and go to state 109
    cte                            shift and go to state 110

state 137

    (86) factor -> PLUS cte .

    TIMES           reduce using rule 86 (factor -> PLUS cte .)
    DIVIDE          reduce using rule 86 (factor -> PLUS cte .)
    MODULE          reduce using rule 86 (factor -> PLUS cte .)
    PLUS            reduce using rule 86 (factor -> PLUS cte .)
    MINUS           reduce using rule 86 (factor -> PLUS cte .)
    GREATER         reduce using rule 86 (factor -> PLUS cte .)
    LESSER          reduce using rule 86 (factor -> PLUS cte .)
    GREATER_EQUAL   reduce using rule 86 (factor -> PLUS cte .)
    LESSER_EQUAL    reduce using rule 86 (factor -> PLUS cte .)
    EQUAL           reduce using rule 86 (factor -> PLUS cte .)
    NOT_EQUAL       reduce using rule 86 (factor -> PLUS cte .)
    AND             reduce using rule 86 (factor -> PLUS cte .)
    OR              reduce using rule 86 (factor -> PLUS cte .)
    SEMICOLON       reduce using rule 86 (factor -> PLUS cte .)
    COMMA           reduce using rule 86 (factor -> PLUS cte .)
    C_PARENTHESIS   reduce using rule 86 (factor -> PLUS cte .)
    C_ABRACKET      reduce using rule 86 (factor -> PLUS cte .)
    TO              reduce using rule 86 (factor -> PLUS cte .)
    O_CBRACKET      reduce using rule 86 (factor -> PLUS cte .)


state 138

    (87) factor -> MINUS cte .

    TIMES           reduce using rule 87 (factor -> MINUS cte .)
    DIVIDE          reduce using rule 87 (factor -> MINUS cte .)
    MODULE          reduce using rule 87 (factor -> MINUS cte .)
    PLUS            reduce using rule 87 (factor -> MINUS cte .)
    MINUS           reduce using rule 87 (factor -> MINUS cte .)
    GREATER         reduce using rule 87 (factor -> MINUS cte .)
    LESSER          reduce using rule 87 (factor -> MINUS cte .)
    GREATER_EQUAL   reduce using rule 87 (factor -> MINUS cte .)
    LESSER_EQUAL    reduce using rule 87 (factor -> MINUS cte .)
    EQUAL           reduce using rule 87 (factor -> MINUS cte .)
    NOT_EQUAL       reduce using rule 87 (factor -> MINUS cte .)
    AND             reduce using rule 87 (factor -> MINUS cte .)
    OR              reduce using rule 87 (factor -> MINUS cte .)
    SEMICOLON       reduce using rule 87 (factor -> MINUS cte .)
    COMMA           reduce using rule 87 (factor -> MINUS cte .)
    C_PARENTHESIS   reduce using rule 87 (factor -> MINUS cte .)
    C_ABRACKET      reduce using rule 87 (factor -> MINUS cte .)
    TO              reduce using rule 87 (factor -> MINUS cte .)
    O_CBRACKET      reduce using rule 87 (factor -> MINUS cte .)


state 139

    (79) termino -> factor TIMES . termino
    (78) termino -> . factor
    (79) termino -> . factor TIMES termino
    (80) termino -> . factor DIVIDE termino
    (81) termino -> . factor MODULE termino
    (82) factor -> . variable
    (83) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (84) factor -> . llamada
    (85) factor -> . cte
    (86) factor -> . PLUS cte
    (87) factor -> . MINUS cte
    (32) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (33) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID
    (45) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (88) cte -> . CTE_INT
    (89) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 108
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    ID              shift and go to state 111
    CTE_INT         shift and go to state 112
    CTE_FLOAT       shift and go to state 113

    factor                         shift and go to state 107
    termino                        shift and go to state 166
    variable                       shift and go to state 97
    llamada                        shift and go to state 109
    cte                            shift and go to state 110

state 140

    (80) termino -> factor DIVIDE . termino
    (78) termino -> . factor
    (79) termino -> . factor TIMES termino
    (80) termino -> . factor DIVIDE termino
    (81) termino -> . factor MODULE termino
    (82) factor -> . variable
    (83) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (84) factor -> . llamada
    (85) factor -> . cte
    (86) factor -> . PLUS cte
    (87) factor -> . MINUS cte
    (32) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (33) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID
    (45) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (88) cte -> . CTE_INT
    (89) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 108
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    ID              shift and go to state 111
    CTE_INT         shift and go to state 112
    CTE_FLOAT       shift and go to state 113

    factor                         shift and go to state 107
    termino                        shift and go to state 167
    variable                       shift and go to state 97
    llamada                        shift and go to state 109
    cte                            shift and go to state 110

state 141

    (81) termino -> factor MODULE . termino
    (78) termino -> . factor
    (79) termino -> . factor TIMES termino
    (80) termino -> . factor DIVIDE termino
    (81) termino -> . factor MODULE termino
    (82) factor -> . variable
    (83) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (84) factor -> . llamada
    (85) factor -> . cte
    (86) factor -> . PLUS cte
    (87) factor -> . MINUS cte
    (32) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (33) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID
    (45) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (88) cte -> . CTE_INT
    (89) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 108
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    ID              shift and go to state 111
    CTE_INT         shift and go to state 112
    CTE_FLOAT       shift and go to state 113

    factor                         shift and go to state 107
    termino                        shift and go to state 168
    variable                       shift and go to state 97
    llamada                        shift and go to state 109
    cte                            shift and go to state 110

state 142

    (83) factor -> O_PARENTHESIS expr . C_PARENTHESIS

    C_PARENTHESIS   shift and go to state 169


state 143

    (45) llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .

    SEMICOLON       reduce using rule 45 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    TIMES           reduce using rule 45 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    DIVIDE          reduce using rule 45 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    MODULE          reduce using rule 45 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    PLUS            reduce using rule 45 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    MINUS           reduce using rule 45 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    GREATER         reduce using rule 45 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    LESSER          reduce using rule 45 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    GREATER_EQUAL   reduce using rule 45 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    LESSER_EQUAL    reduce using rule 45 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    EQUAL           reduce using rule 45 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    NOT_EQUAL       reduce using rule 45 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    AND             reduce using rule 45 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    OR              reduce using rule 45 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    COMMA           reduce using rule 45 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    C_PARENTHESIS   reduce using rule 45 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    C_ABRACKET      reduce using rule 45 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    TO              reduce using rule 45 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    O_CBRACKET      reduce using rule 45 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)


state 144

    (47) llamada_prime -> exp COMMA . llamada_prime
    (46) llamada_prime -> . exp
    (47) llamada_prime -> . exp COMMA llamada_prime
    (75) exp -> . termino
    (76) exp -> . termino PLUS exp
    (77) exp -> . termino MINUS exp
    (78) termino -> . factor
    (79) termino -> . factor TIMES termino
    (80) termino -> . factor DIVIDE termino
    (81) termino -> . factor MODULE termino
    (82) factor -> . variable
    (83) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (84) factor -> . llamada
    (85) factor -> . cte
    (86) factor -> . PLUS cte
    (87) factor -> . MINUS cte
    (32) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (33) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID
    (45) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (88) cte -> . CTE_INT
    (89) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 108
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    ID              shift and go to state 111
    CTE_INT         shift and go to state 112
    CTE_FLOAT       shift and go to state 113

    exp                            shift and go to state 115
    llamada_prime                  shift and go to state 170
    termino                        shift and go to state 104
    factor                         shift and go to state 107
    variable                       shift and go to state 97
    llamada                        shift and go to state 109
    cte                            shift and go to state 110

state 145

    (32) variable -> ID O_ABRACKET exp C_ABRACKET . O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (33) variable -> ID O_ABRACKET exp C_ABRACKET . O_ABRACKET exp C_ABRACKET
    (34) variable -> ID O_ABRACKET exp C_ABRACKET .

    O_ABRACKET      shift and go to state 171
    ASSIGN          reduce using rule 34 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    TIMES           reduce using rule 34 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    DIVIDE          reduce using rule 34 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    MODULE          reduce using rule 34 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    PLUS            reduce using rule 34 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    MINUS           reduce using rule 34 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    GREATER         reduce using rule 34 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    LESSER          reduce using rule 34 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    GREATER_EQUAL   reduce using rule 34 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    LESSER_EQUAL    reduce using rule 34 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    EQUAL           reduce using rule 34 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    NOT_EQUAL       reduce using rule 34 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    AND             reduce using rule 34 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    OR              reduce using rule 34 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    SEMICOLON       reduce using rule 34 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    COMMA           reduce using rule 34 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    C_PARENTHESIS   reduce using rule 34 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    C_ABRACKET      reduce using rule 34 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    TO              reduce using rule 34 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    O_CBRACKET      reduce using rule 34 (variable -> ID O_ABRACKET exp C_ABRACKET .)


state 146

    (48) retorno -> RETURN O_PARENTHESIS expr C_PARENTHESIS .

    SEMICOLON       reduce using rule 48 (retorno -> RETURN O_PARENTHESIS expr C_PARENTHESIS .)


state 147

    (49) lectura -> READ O_PARENTHESIS lectura_prime C_PARENTHESIS .

    SEMICOLON       reduce using rule 49 (lectura -> READ O_PARENTHESIS lectura_prime C_PARENTHESIS .)


state 148

    (51) lectura_prime -> variable COMMA . lectura_prime
    (50) lectura_prime -> . variable
    (51) lectura_prime -> . variable COMMA lectura_prime
    (32) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (33) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID

    ID              shift and go to state 93

    variable                       shift and go to state 119
    lectura_prime                  shift and go to state 172

state 149

    (52) escritura -> WRITE O_PARENTHESIS escritura_prime C_PARENTHESIS .

    SEMICOLON       reduce using rule 52 (escritura -> WRITE O_PARENTHESIS escritura_prime C_PARENTHESIS .)


state 150

    (55) escritura_prime -> expr COMMA . escritura_prime
    (53) escritura_prime -> . expr
    (54) escritura_prime -> . CTE_STRING
    (55) escritura_prime -> . expr COMMA escritura_prime
    (56) escritura_prime -> . CTE_STRING COMMA escritura_prime
    (62) expr -> . or
    (63) or -> . and
    (64) or -> . and OR or
    (65) and -> . equal
    (66) and -> . equal AND and
    (67) equal -> . compare
    (68) equal -> . compare EQUAL compare
    (69) equal -> . compare NOT_EQUAL compare
    (70) compare -> . exp
    (71) compare -> . exp GREATER exp
    (72) compare -> . exp LESSER exp
    (73) compare -> . exp GREATER_EQUAL exp
    (74) compare -> . exp LESSER_EQUAL exp
    (75) exp -> . termino
    (76) exp -> . termino PLUS exp
    (77) exp -> . termino MINUS exp
    (78) termino -> . factor
    (79) termino -> . factor TIMES termino
    (80) termino -> . factor DIVIDE termino
    (81) termino -> . factor MODULE termino
    (82) factor -> . variable
    (83) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (84) factor -> . llamada
    (85) factor -> . cte
    (86) factor -> . PLUS cte
    (87) factor -> . MINUS cte
    (32) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (33) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID
    (45) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (88) cte -> . CTE_INT
    (89) cte -> . CTE_FLOAT

    CTE_STRING      shift and go to state 122
    O_PARENTHESIS   shift and go to state 108
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    ID              shift and go to state 111
    CTE_INT         shift and go to state 112
    CTE_FLOAT       shift and go to state 113

    expr                           shift and go to state 121
    escritura_prime                shift and go to state 173
    or                             shift and go to state 99
    and                            shift and go to state 100
    equal                          shift and go to state 101
    compare                        shift and go to state 102
    exp                            shift and go to state 103
    termino                        shift and go to state 104
    factor                         shift and go to state 107
    variable                       shift and go to state 97
    llamada                        shift and go to state 109
    cte                            shift and go to state 110

state 151

    (56) escritura_prime -> CTE_STRING COMMA . escritura_prime
    (53) escritura_prime -> . expr
    (54) escritura_prime -> . CTE_STRING
    (55) escritura_prime -> . expr COMMA escritura_prime
    (56) escritura_prime -> . CTE_STRING COMMA escritura_prime
    (62) expr -> . or
    (63) or -> . and
    (64) or -> . and OR or
    (65) and -> . equal
    (66) and -> . equal AND and
    (67) equal -> . compare
    (68) equal -> . compare EQUAL compare
    (69) equal -> . compare NOT_EQUAL compare
    (70) compare -> . exp
    (71) compare -> . exp GREATER exp
    (72) compare -> . exp LESSER exp
    (73) compare -> . exp GREATER_EQUAL exp
    (74) compare -> . exp LESSER_EQUAL exp
    (75) exp -> . termino
    (76) exp -> . termino PLUS exp
    (77) exp -> . termino MINUS exp
    (78) termino -> . factor
    (79) termino -> . factor TIMES termino
    (80) termino -> . factor DIVIDE termino
    (81) termino -> . factor MODULE termino
    (82) factor -> . variable
    (83) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (84) factor -> . llamada
    (85) factor -> . cte
    (86) factor -> . PLUS cte
    (87) factor -> . MINUS cte
    (32) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (33) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID
    (45) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (88) cte -> . CTE_INT
    (89) cte -> . CTE_FLOAT

    CTE_STRING      shift and go to state 122
    O_PARENTHESIS   shift and go to state 108
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    ID              shift and go to state 111
    CTE_INT         shift and go to state 112
    CTE_FLOAT       shift and go to state 113

    escritura_prime                shift and go to state 174
    expr                           shift and go to state 121
    or                             shift and go to state 99
    and                            shift and go to state 100
    equal                          shift and go to state 101
    compare                        shift and go to state 102
    exp                            shift and go to state 103
    termino                        shift and go to state 104
    factor                         shift and go to state 107
    variable                       shift and go to state 97
    llamada                        shift and go to state 109
    cte                            shift and go to state 110

state 152

    (57) decision -> IF O_PARENTHESIS expr C_PARENTHESIS . bloque else
    (2) bloque -> . O_CBRACKET bloque_prime C_CBRACKET

    O_CBRACKET      shift and go to state 51

    bloque                         shift and go to state 175

state 153

    (60) while -> WHILE O_PARENTHESIS expr C_PARENTHESIS . bloque
    (2) bloque -> . O_CBRACKET bloque_prime C_CBRACKET

    O_CBRACKET      shift and go to state 51

    bloque                         shift and go to state 176

state 154

    (61) for -> FOR variable ASSIGN exp . TO exp bloque

    TO              shift and go to state 177


state 155

    (10) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT . C_ABRACKET

    C_ABRACKET      shift and go to state 178


state 156

    (64) or -> and OR or .

    SEMICOLON       reduce using rule 64 (or -> and OR or .)
    C_PARENTHESIS   reduce using rule 64 (or -> and OR or .)
    COMMA           reduce using rule 64 (or -> and OR or .)


state 157

    (66) and -> equal AND and .

    OR              reduce using rule 66 (and -> equal AND and .)
    SEMICOLON       reduce using rule 66 (and -> equal AND and .)
    C_PARENTHESIS   reduce using rule 66 (and -> equal AND and .)
    COMMA           reduce using rule 66 (and -> equal AND and .)


state 158

    (68) equal -> compare EQUAL compare .

    AND             reduce using rule 68 (equal -> compare EQUAL compare .)
    OR              reduce using rule 68 (equal -> compare EQUAL compare .)
    SEMICOLON       reduce using rule 68 (equal -> compare EQUAL compare .)
    C_PARENTHESIS   reduce using rule 68 (equal -> compare EQUAL compare .)
    COMMA           reduce using rule 68 (equal -> compare EQUAL compare .)


state 159

    (69) equal -> compare NOT_EQUAL compare .

    AND             reduce using rule 69 (equal -> compare NOT_EQUAL compare .)
    OR              reduce using rule 69 (equal -> compare NOT_EQUAL compare .)
    SEMICOLON       reduce using rule 69 (equal -> compare NOT_EQUAL compare .)
    C_PARENTHESIS   reduce using rule 69 (equal -> compare NOT_EQUAL compare .)
    COMMA           reduce using rule 69 (equal -> compare NOT_EQUAL compare .)


state 160

    (71) compare -> exp GREATER exp .

    EQUAL           reduce using rule 71 (compare -> exp GREATER exp .)
    NOT_EQUAL       reduce using rule 71 (compare -> exp GREATER exp .)
    AND             reduce using rule 71 (compare -> exp GREATER exp .)
    OR              reduce using rule 71 (compare -> exp GREATER exp .)
    SEMICOLON       reduce using rule 71 (compare -> exp GREATER exp .)
    C_PARENTHESIS   reduce using rule 71 (compare -> exp GREATER exp .)
    COMMA           reduce using rule 71 (compare -> exp GREATER exp .)


state 161

    (72) compare -> exp LESSER exp .

    EQUAL           reduce using rule 72 (compare -> exp LESSER exp .)
    NOT_EQUAL       reduce using rule 72 (compare -> exp LESSER exp .)
    AND             reduce using rule 72 (compare -> exp LESSER exp .)
    OR              reduce using rule 72 (compare -> exp LESSER exp .)
    SEMICOLON       reduce using rule 72 (compare -> exp LESSER exp .)
    C_PARENTHESIS   reduce using rule 72 (compare -> exp LESSER exp .)
    COMMA           reduce using rule 72 (compare -> exp LESSER exp .)


state 162

    (73) compare -> exp GREATER_EQUAL exp .

    EQUAL           reduce using rule 73 (compare -> exp GREATER_EQUAL exp .)
    NOT_EQUAL       reduce using rule 73 (compare -> exp GREATER_EQUAL exp .)
    AND             reduce using rule 73 (compare -> exp GREATER_EQUAL exp .)
    OR              reduce using rule 73 (compare -> exp GREATER_EQUAL exp .)
    SEMICOLON       reduce using rule 73 (compare -> exp GREATER_EQUAL exp .)
    C_PARENTHESIS   reduce using rule 73 (compare -> exp GREATER_EQUAL exp .)
    COMMA           reduce using rule 73 (compare -> exp GREATER_EQUAL exp .)


state 163

    (74) compare -> exp LESSER_EQUAL exp .

    EQUAL           reduce using rule 74 (compare -> exp LESSER_EQUAL exp .)
    NOT_EQUAL       reduce using rule 74 (compare -> exp LESSER_EQUAL exp .)
    AND             reduce using rule 74 (compare -> exp LESSER_EQUAL exp .)
    OR              reduce using rule 74 (compare -> exp LESSER_EQUAL exp .)
    SEMICOLON       reduce using rule 74 (compare -> exp LESSER_EQUAL exp .)
    C_PARENTHESIS   reduce using rule 74 (compare -> exp LESSER_EQUAL exp .)
    COMMA           reduce using rule 74 (compare -> exp LESSER_EQUAL exp .)


state 164

    (76) exp -> termino PLUS exp .

    GREATER         reduce using rule 76 (exp -> termino PLUS exp .)
    LESSER          reduce using rule 76 (exp -> termino PLUS exp .)
    GREATER_EQUAL   reduce using rule 76 (exp -> termino PLUS exp .)
    LESSER_EQUAL    reduce using rule 76 (exp -> termino PLUS exp .)
    EQUAL           reduce using rule 76 (exp -> termino PLUS exp .)
    NOT_EQUAL       reduce using rule 76 (exp -> termino PLUS exp .)
    AND             reduce using rule 76 (exp -> termino PLUS exp .)
    OR              reduce using rule 76 (exp -> termino PLUS exp .)
    SEMICOLON       reduce using rule 76 (exp -> termino PLUS exp .)
    COMMA           reduce using rule 76 (exp -> termino PLUS exp .)
    C_PARENTHESIS   reduce using rule 76 (exp -> termino PLUS exp .)
    C_ABRACKET      reduce using rule 76 (exp -> termino PLUS exp .)
    TO              reduce using rule 76 (exp -> termino PLUS exp .)
    O_CBRACKET      reduce using rule 76 (exp -> termino PLUS exp .)


state 165

    (77) exp -> termino MINUS exp .

    GREATER         reduce using rule 77 (exp -> termino MINUS exp .)
    LESSER          reduce using rule 77 (exp -> termino MINUS exp .)
    GREATER_EQUAL   reduce using rule 77 (exp -> termino MINUS exp .)
    LESSER_EQUAL    reduce using rule 77 (exp -> termino MINUS exp .)
    EQUAL           reduce using rule 77 (exp -> termino MINUS exp .)
    NOT_EQUAL       reduce using rule 77 (exp -> termino MINUS exp .)
    AND             reduce using rule 77 (exp -> termino MINUS exp .)
    OR              reduce using rule 77 (exp -> termino MINUS exp .)
    SEMICOLON       reduce using rule 77 (exp -> termino MINUS exp .)
    COMMA           reduce using rule 77 (exp -> termino MINUS exp .)
    C_PARENTHESIS   reduce using rule 77 (exp -> termino MINUS exp .)
    C_ABRACKET      reduce using rule 77 (exp -> termino MINUS exp .)
    TO              reduce using rule 77 (exp -> termino MINUS exp .)
    O_CBRACKET      reduce using rule 77 (exp -> termino MINUS exp .)


state 166

    (79) termino -> factor TIMES termino .

    PLUS            reduce using rule 79 (termino -> factor TIMES termino .)
    MINUS           reduce using rule 79 (termino -> factor TIMES termino .)
    GREATER         reduce using rule 79 (termino -> factor TIMES termino .)
    LESSER          reduce using rule 79 (termino -> factor TIMES termino .)
    GREATER_EQUAL   reduce using rule 79 (termino -> factor TIMES termino .)
    LESSER_EQUAL    reduce using rule 79 (termino -> factor TIMES termino .)
    EQUAL           reduce using rule 79 (termino -> factor TIMES termino .)
    NOT_EQUAL       reduce using rule 79 (termino -> factor TIMES termino .)
    AND             reduce using rule 79 (termino -> factor TIMES termino .)
    OR              reduce using rule 79 (termino -> factor TIMES termino .)
    SEMICOLON       reduce using rule 79 (termino -> factor TIMES termino .)
    COMMA           reduce using rule 79 (termino -> factor TIMES termino .)
    C_PARENTHESIS   reduce using rule 79 (termino -> factor TIMES termino .)
    C_ABRACKET      reduce using rule 79 (termino -> factor TIMES termino .)
    TO              reduce using rule 79 (termino -> factor TIMES termino .)
    O_CBRACKET      reduce using rule 79 (termino -> factor TIMES termino .)


state 167

    (80) termino -> factor DIVIDE termino .

    PLUS            reduce using rule 80 (termino -> factor DIVIDE termino .)
    MINUS           reduce using rule 80 (termino -> factor DIVIDE termino .)
    GREATER         reduce using rule 80 (termino -> factor DIVIDE termino .)
    LESSER          reduce using rule 80 (termino -> factor DIVIDE termino .)
    GREATER_EQUAL   reduce using rule 80 (termino -> factor DIVIDE termino .)
    LESSER_EQUAL    reduce using rule 80 (termino -> factor DIVIDE termino .)
    EQUAL           reduce using rule 80 (termino -> factor DIVIDE termino .)
    NOT_EQUAL       reduce using rule 80 (termino -> factor DIVIDE termino .)
    AND             reduce using rule 80 (termino -> factor DIVIDE termino .)
    OR              reduce using rule 80 (termino -> factor DIVIDE termino .)
    SEMICOLON       reduce using rule 80 (termino -> factor DIVIDE termino .)
    COMMA           reduce using rule 80 (termino -> factor DIVIDE termino .)
    C_PARENTHESIS   reduce using rule 80 (termino -> factor DIVIDE termino .)
    C_ABRACKET      reduce using rule 80 (termino -> factor DIVIDE termino .)
    TO              reduce using rule 80 (termino -> factor DIVIDE termino .)
    O_CBRACKET      reduce using rule 80 (termino -> factor DIVIDE termino .)


state 168

    (81) termino -> factor MODULE termino .

    PLUS            reduce using rule 81 (termino -> factor MODULE termino .)
    MINUS           reduce using rule 81 (termino -> factor MODULE termino .)
    GREATER         reduce using rule 81 (termino -> factor MODULE termino .)
    LESSER          reduce using rule 81 (termino -> factor MODULE termino .)
    GREATER_EQUAL   reduce using rule 81 (termino -> factor MODULE termino .)
    LESSER_EQUAL    reduce using rule 81 (termino -> factor MODULE termino .)
    EQUAL           reduce using rule 81 (termino -> factor MODULE termino .)
    NOT_EQUAL       reduce using rule 81 (termino -> factor MODULE termino .)
    AND             reduce using rule 81 (termino -> factor MODULE termino .)
    OR              reduce using rule 81 (termino -> factor MODULE termino .)
    SEMICOLON       reduce using rule 81 (termino -> factor MODULE termino .)
    COMMA           reduce using rule 81 (termino -> factor MODULE termino .)
    C_PARENTHESIS   reduce using rule 81 (termino -> factor MODULE termino .)
    C_ABRACKET      reduce using rule 81 (termino -> factor MODULE termino .)
    TO              reduce using rule 81 (termino -> factor MODULE termino .)
    O_CBRACKET      reduce using rule 81 (termino -> factor MODULE termino .)


state 169

    (83) factor -> O_PARENTHESIS expr C_PARENTHESIS .

    TIMES           reduce using rule 83 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    DIVIDE          reduce using rule 83 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    MODULE          reduce using rule 83 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    PLUS            reduce using rule 83 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    MINUS           reduce using rule 83 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    GREATER         reduce using rule 83 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    LESSER          reduce using rule 83 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    GREATER_EQUAL   reduce using rule 83 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    LESSER_EQUAL    reduce using rule 83 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    EQUAL           reduce using rule 83 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    NOT_EQUAL       reduce using rule 83 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    AND             reduce using rule 83 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    OR              reduce using rule 83 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    SEMICOLON       reduce using rule 83 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    COMMA           reduce using rule 83 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    C_PARENTHESIS   reduce using rule 83 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    C_ABRACKET      reduce using rule 83 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    TO              reduce using rule 83 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    O_CBRACKET      reduce using rule 83 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)


state 170

    (47) llamada_prime -> exp COMMA llamada_prime .

    C_PARENTHESIS   reduce using rule 47 (llamada_prime -> exp COMMA llamada_prime .)


state 171

    (32) variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET . exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (33) variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET . exp C_ABRACKET
    (75) exp -> . termino
    (76) exp -> . termino PLUS exp
    (77) exp -> . termino MINUS exp
    (78) termino -> . factor
    (79) termino -> . factor TIMES termino
    (80) termino -> . factor DIVIDE termino
    (81) termino -> . factor MODULE termino
    (82) factor -> . variable
    (83) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (84) factor -> . llamada
    (85) factor -> . cte
    (86) factor -> . PLUS cte
    (87) factor -> . MINUS cte
    (32) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (33) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID
    (45) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (88) cte -> . CTE_INT
    (89) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 108
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    ID              shift and go to state 111
    CTE_INT         shift and go to state 112
    CTE_FLOAT       shift and go to state 113

    exp                            shift and go to state 179
    termino                        shift and go to state 104
    factor                         shift and go to state 107
    variable                       shift and go to state 97
    llamada                        shift and go to state 109
    cte                            shift and go to state 110

state 172

    (51) lectura_prime -> variable COMMA lectura_prime .

    C_PARENTHESIS   reduce using rule 51 (lectura_prime -> variable COMMA lectura_prime .)


state 173

    (55) escritura_prime -> expr COMMA escritura_prime .

    C_PARENTHESIS   reduce using rule 55 (escritura_prime -> expr COMMA escritura_prime .)


state 174

    (56) escritura_prime -> CTE_STRING COMMA escritura_prime .

    C_PARENTHESIS   reduce using rule 56 (escritura_prime -> CTE_STRING COMMA escritura_prime .)


state 175

    (57) decision -> IF O_PARENTHESIS expr C_PARENTHESIS bloque . else
    (58) else -> . ELSE bloque
    (59) else -> . epsilon
    (90) epsilon -> .

    ELSE            shift and go to state 181
    ID              reduce using rule 90 (epsilon -> .)
    RETURN          reduce using rule 90 (epsilon -> .)
    READ            reduce using rule 90 (epsilon -> .)
    WRITE           reduce using rule 90 (epsilon -> .)
    IF              reduce using rule 90 (epsilon -> .)
    WHILE           reduce using rule 90 (epsilon -> .)
    FOR             reduce using rule 90 (epsilon -> .)
    C_CBRACKET      reduce using rule 90 (epsilon -> .)

    else                           shift and go to state 180
    epsilon                        shift and go to state 182

state 176

    (60) while -> WHILE O_PARENTHESIS expr C_PARENTHESIS bloque .

    ID              reduce using rule 60 (while -> WHILE O_PARENTHESIS expr C_PARENTHESIS bloque .)
    RETURN          reduce using rule 60 (while -> WHILE O_PARENTHESIS expr C_PARENTHESIS bloque .)
    READ            reduce using rule 60 (while -> WHILE O_PARENTHESIS expr C_PARENTHESIS bloque .)
    WRITE           reduce using rule 60 (while -> WHILE O_PARENTHESIS expr C_PARENTHESIS bloque .)
    IF              reduce using rule 60 (while -> WHILE O_PARENTHESIS expr C_PARENTHESIS bloque .)
    WHILE           reduce using rule 60 (while -> WHILE O_PARENTHESIS expr C_PARENTHESIS bloque .)
    FOR             reduce using rule 60 (while -> WHILE O_PARENTHESIS expr C_PARENTHESIS bloque .)
    C_CBRACKET      reduce using rule 60 (while -> WHILE O_PARENTHESIS expr C_PARENTHESIS bloque .)


state 177

    (61) for -> FOR variable ASSIGN exp TO . exp bloque
    (75) exp -> . termino
    (76) exp -> . termino PLUS exp
    (77) exp -> . termino MINUS exp
    (78) termino -> . factor
    (79) termino -> . factor TIMES termino
    (80) termino -> . factor DIVIDE termino
    (81) termino -> . factor MODULE termino
    (82) factor -> . variable
    (83) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (84) factor -> . llamada
    (85) factor -> . cte
    (86) factor -> . PLUS cte
    (87) factor -> . MINUS cte
    (32) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (33) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID
    (45) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (88) cte -> . CTE_INT
    (89) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 108
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    ID              shift and go to state 111
    CTE_INT         shift and go to state 112
    CTE_FLOAT       shift and go to state 113

    variable                       shift and go to state 97
    exp                            shift and go to state 183
    termino                        shift and go to state 104
    factor                         shift and go to state 107
    llamada                        shift and go to state 109
    cte                            shift and go to state 110

state 178

    (10) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET .

    COMMA           reduce using rule 10 (declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET .)
    COLON           reduce using rule 10 (declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET .)


state 179

    (32) variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp . C_ABRACKET O_ABRACKET exp C_ABRACKET
    (33) variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp . C_ABRACKET

    C_ABRACKET      shift and go to state 184


state 180

    (57) decision -> IF O_PARENTHESIS expr C_PARENTHESIS bloque else .

    ID              reduce using rule 57 (decision -> IF O_PARENTHESIS expr C_PARENTHESIS bloque else .)
    RETURN          reduce using rule 57 (decision -> IF O_PARENTHESIS expr C_PARENTHESIS bloque else .)
    READ            reduce using rule 57 (decision -> IF O_PARENTHESIS expr C_PARENTHESIS bloque else .)
    WRITE           reduce using rule 57 (decision -> IF O_PARENTHESIS expr C_PARENTHESIS bloque else .)
    IF              reduce using rule 57 (decision -> IF O_PARENTHESIS expr C_PARENTHESIS bloque else .)
    WHILE           reduce using rule 57 (decision -> IF O_PARENTHESIS expr C_PARENTHESIS bloque else .)
    FOR             reduce using rule 57 (decision -> IF O_PARENTHESIS expr C_PARENTHESIS bloque else .)
    C_CBRACKET      reduce using rule 57 (decision -> IF O_PARENTHESIS expr C_PARENTHESIS bloque else .)


state 181

    (58) else -> ELSE . bloque
    (2) bloque -> . O_CBRACKET bloque_prime C_CBRACKET

    O_CBRACKET      shift and go to state 51

    bloque                         shift and go to state 185

state 182

    (59) else -> epsilon .

    ID              reduce using rule 59 (else -> epsilon .)
    RETURN          reduce using rule 59 (else -> epsilon .)
    READ            reduce using rule 59 (else -> epsilon .)
    WRITE           reduce using rule 59 (else -> epsilon .)
    IF              reduce using rule 59 (else -> epsilon .)
    WHILE           reduce using rule 59 (else -> epsilon .)
    FOR             reduce using rule 59 (else -> epsilon .)
    C_CBRACKET      reduce using rule 59 (else -> epsilon .)


state 183

    (61) for -> FOR variable ASSIGN exp TO exp . bloque
    (2) bloque -> . O_CBRACKET bloque_prime C_CBRACKET

    O_CBRACKET      shift and go to state 51

    bloque                         shift and go to state 186

state 184

    (32) variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET . O_ABRACKET exp C_ABRACKET
    (33) variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .

    O_ABRACKET      shift and go to state 187
    ASSIGN          reduce using rule 33 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    TIMES           reduce using rule 33 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    DIVIDE          reduce using rule 33 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    MODULE          reduce using rule 33 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    PLUS            reduce using rule 33 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    MINUS           reduce using rule 33 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    GREATER         reduce using rule 33 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    LESSER          reduce using rule 33 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    GREATER_EQUAL   reduce using rule 33 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    LESSER_EQUAL    reduce using rule 33 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    EQUAL           reduce using rule 33 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    NOT_EQUAL       reduce using rule 33 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    AND             reduce using rule 33 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    OR              reduce using rule 33 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    SEMICOLON       reduce using rule 33 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    COMMA           reduce using rule 33 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    C_PARENTHESIS   reduce using rule 33 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    C_ABRACKET      reduce using rule 33 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    TO              reduce using rule 33 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    O_CBRACKET      reduce using rule 33 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)


state 185

    (58) else -> ELSE bloque .

    ID              reduce using rule 58 (else -> ELSE bloque .)
    RETURN          reduce using rule 58 (else -> ELSE bloque .)
    READ            reduce using rule 58 (else -> ELSE bloque .)
    WRITE           reduce using rule 58 (else -> ELSE bloque .)
    IF              reduce using rule 58 (else -> ELSE bloque .)
    WHILE           reduce using rule 58 (else -> ELSE bloque .)
    FOR             reduce using rule 58 (else -> ELSE bloque .)
    C_CBRACKET      reduce using rule 58 (else -> ELSE bloque .)


state 186

    (61) for -> FOR variable ASSIGN exp TO exp bloque .

    ID              reduce using rule 61 (for -> FOR variable ASSIGN exp TO exp bloque .)
    RETURN          reduce using rule 61 (for -> FOR variable ASSIGN exp TO exp bloque .)
    READ            reduce using rule 61 (for -> FOR variable ASSIGN exp TO exp bloque .)
    WRITE           reduce using rule 61 (for -> FOR variable ASSIGN exp TO exp bloque .)
    IF              reduce using rule 61 (for -> FOR variable ASSIGN exp TO exp bloque .)
    WHILE           reduce using rule 61 (for -> FOR variable ASSIGN exp TO exp bloque .)
    FOR             reduce using rule 61 (for -> FOR variable ASSIGN exp TO exp bloque .)
    C_CBRACKET      reduce using rule 61 (for -> FOR variable ASSIGN exp TO exp bloque .)


state 187

    (32) variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET . exp C_ABRACKET
    (75) exp -> . termino
    (76) exp -> . termino PLUS exp
    (77) exp -> . termino MINUS exp
    (78) termino -> . factor
    (79) termino -> . factor TIMES termino
    (80) termino -> . factor DIVIDE termino
    (81) termino -> . factor MODULE termino
    (82) factor -> . variable
    (83) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (84) factor -> . llamada
    (85) factor -> . cte
    (86) factor -> . PLUS cte
    (87) factor -> . MINUS cte
    (32) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (33) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID
    (45) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (88) cte -> . CTE_INT
    (89) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 108
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    ID              shift and go to state 111
    CTE_INT         shift and go to state 112
    CTE_FLOAT       shift and go to state 113

    exp                            shift and go to state 188
    termino                        shift and go to state 104
    factor                         shift and go to state 107
    variable                       shift and go to state 97
    llamada                        shift and go to state 109
    cte                            shift and go to state 110

state 188

    (32) variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp . C_ABRACKET

    C_ABRACKET      shift and go to state 189


state 189

    (32) variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .

    ASSIGN          reduce using rule 32 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    TIMES           reduce using rule 32 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    DIVIDE          reduce using rule 32 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    MODULE          reduce using rule 32 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    PLUS            reduce using rule 32 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    MINUS           reduce using rule 32 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    GREATER         reduce using rule 32 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    LESSER          reduce using rule 32 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    GREATER_EQUAL   reduce using rule 32 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    LESSER_EQUAL    reduce using rule 32 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    EQUAL           reduce using rule 32 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    NOT_EQUAL       reduce using rule 32 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    AND             reduce using rule 32 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    OR              reduce using rule 32 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    SEMICOLON       reduce using rule 32 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    COMMA           reduce using rule 32 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    C_PARENTHESIS   reduce using rule 32 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    C_ABRACKET      reduce using rule 32 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    TO              reduce using rule 32 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    O_CBRACKET      reduce using rule 32 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)

