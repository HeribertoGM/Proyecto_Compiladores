Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CTE_CHAR

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAM ID SEMICOLON declaracion_global funcion MAIN O_PARENTHESIS C_PARENTHESIS bloque
Rule 2     bloque -> O_CBRACKET bloque_prime C_CBRACKET
Rule 3     bloque_prime -> estatuto bloque_prime
Rule 4     bloque_prime -> epsilon
Rule 5     declaracion_funcion -> declaracion
Rule 6     declaracion_global -> declaracion
Rule 7     declaracion -> declaracion_base
Rule 8     declaracion -> declaracion_base declaracion
Rule 9     declaracion_base -> LET declaracion_prime COLON declaracion_tipo SEMICOLON
Rule 10    declaracion_prime -> declaracion_variable
Rule 11    declaracion_prime -> declaracion_variable COMMA declaracion_prime
Rule 12    declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
Rule 13    declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
Rule 14    declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET
Rule 15    declaracion_variable -> ID
Rule 16    declaracion_tipo -> INT
Rule 17    declaracion_tipo -> FLOAT
Rule 18    declaracion_tipo -> CHAR
Rule 19    declaracion_tipo -> STRING
Rule 20    tipo -> INT
Rule 21    tipo -> FLOAT
Rule 22    tipo -> CHAR
Rule 23    tipo -> STRING
Rule 24    funcion -> funcion_base funcion
Rule 25    funcion -> epsilon
Rule 26    funcion_base -> FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque
Rule 27    funcion_prime -> tipo ID
Rule 28    funcion_prime -> tipo ID COMMA funcion_prime
Rule 29    funcion_ident -> VOID ID
Rule 30    funcion_ident -> INT ID
Rule 31    funcion_ident -> FLOAT ID
Rule 32    funcion_ident -> CHAR ID
Rule 33    funcion_ident -> STRING ID
Rule 34    variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
Rule 35    variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
Rule 36    variable -> ID O_ABRACKET exp C_ABRACKET
Rule 37    variable -> ID
Rule 38    estatuto -> asignacion SEMICOLON
Rule 39    estatuto -> llamada SEMICOLON
Rule 40    estatuto -> retorno SEMICOLON
Rule 41    estatuto -> lectura SEMICOLON
Rule 42    estatuto -> escritura SEMICOLON
Rule 43    estatuto -> decision
Rule 44    estatuto -> while
Rule 45    estatuto -> for
Rule 46    asignacion -> variable ASSIGN expr
Rule 47    llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS
Rule 48    llamada_prime -> exp
Rule 49    llamada_prime -> exp COMMA llamada_prime
Rule 50    retorno -> RETURN O_PARENTHESIS expr C_PARENTHESIS
Rule 51    lectura -> READ O_PARENTHESIS lectura_prime C_PARENTHESIS
Rule 52    lectura_prime -> variable
Rule 53    lectura_prime -> variable COMMA lectura_prime
Rule 54    escritura -> WRITE O_PARENTHESIS escritura_prime C_PARENTHESIS
Rule 55    escritura_prime -> expr
Rule 56    escritura_prime -> CTE_STRING
Rule 57    escritura_prime -> expr COMMA escritura_prime
Rule 58    escritura_prime -> CTE_STRING COMMA escritura_prime
Rule 59    decision -> IF O_PARENTHESIS expr C_PARENTHESIS bloque else
Rule 60    else -> ELSE bloque
Rule 61    else -> epsilon
Rule 62    while -> WHILE O_PARENTHESIS expr C_PARENTHESIS bloque
Rule 63    for -> FOR variable ASSIGN exp TO exp bloque
Rule 64    expr -> or
Rule 65    or -> and
Rule 66    or -> and OR or
Rule 67    and -> equal
Rule 68    and -> equal AND and
Rule 69    equal -> compare
Rule 70    equal -> compare EQUAL compare
Rule 71    equal -> compare NOT_EQUAL compare
Rule 72    compare -> exp
Rule 73    compare -> exp GREATER exp
Rule 74    compare -> exp LESSER exp
Rule 75    compare -> exp GREATER_EQUAL exp
Rule 76    compare -> exp LESSER_EQUAL exp
Rule 77    exp -> termino
Rule 78    exp -> termino PLUS exp
Rule 79    exp -> termino MINUS exp
Rule 80    termino -> factor
Rule 81    termino -> factor TIMES termino
Rule 82    termino -> factor DIVIDE termino
Rule 83    termino -> factor MODULE termino
Rule 84    factor -> variable
Rule 85    factor -> O_PARENTHESIS expr C_PARENTHESIS
Rule 86    factor -> llamada
Rule 87    factor -> cte
Rule 88    factor -> PLUS cte
Rule 89    factor -> MINUS cte
Rule 90    cte -> CTE_INT
Rule 91    cte -> CTE_FLOAT
Rule 92    epsilon -> <empty>

Terminals, with rules where they appear

AND                  : 68
ASSIGN               : 46 63
CHAR                 : 18 22 32
COLON                : 9
COMMA                : 11 28 49 53 57 58
CTE_CHAR             : 
CTE_FLOAT            : 91
CTE_INT              : 12 12 12 13 13 14 90
CTE_STRING           : 56 58
C_ABRACKET           : 12 12 12 13 13 14 34 34 34 35 35 36
C_CBRACKET           : 2
C_PARENTHESIS        : 1 26 47 50 51 54 59 62 85
DIVIDE               : 82
ELSE                 : 60
EQUAL                : 70
FLOAT                : 17 21 31
FOR                  : 63
FUNCTION             : 26
GREATER              : 73
GREATER_EQUAL        : 75
ID                   : 1 12 13 14 15 27 28 29 30 31 32 33 34 35 36 37 47
IF                   : 59
INT                  : 16 20 30
LESSER               : 74
LESSER_EQUAL         : 76
LET                  : 9
MAIN                 : 1
MINUS                : 79 89
MODULE               : 83
NOT_EQUAL            : 71
OR                   : 66
O_ABRACKET           : 12 12 12 13 13 14 34 34 34 35 35 36
O_CBRACKET           : 2
O_PARENTHESIS        : 1 26 47 50 51 54 59 62 85
PLUS                 : 78 88
PROGRAM              : 1
READ                 : 51
RETURN               : 50
SEMICOLON            : 1 9 38 39 40 41 42
STRING               : 19 23 33
TIMES                : 81
TO                   : 63
VOID                 : 29
WHILE                : 62
WRITE                : 54
error                : 

Nonterminals, with rules where they appear

and                  : 65 66 68
asignacion           : 38
bloque               : 1 26 59 60 62 63
bloque_prime         : 2 3
compare              : 69 70 70 71 71
cte                  : 87 88 89
decision             : 43
declaracion          : 5 6 8
declaracion_base     : 7 8
declaracion_funcion  : 26
declaracion_global   : 1
declaracion_prime    : 9 11
declaracion_tipo     : 9
declaracion_variable : 10 11
else                 : 59
epsilon              : 4 25 61
equal                : 67 68
escritura            : 42
escritura_prime      : 54 57 58
estatuto             : 3
exp                  : 34 34 34 35 35 36 48 49 63 63 72 73 73 74 74 75 75 76 76 78 79
expr                 : 46 50 55 57 59 62 85
factor               : 80 81 82 83
for                  : 45
funcion              : 1 24
funcion_base         : 24
funcion_ident        : 26
funcion_prime        : 26 28
lectura              : 41
lectura_prime        : 51 53
llamada              : 39 86
llamada_prime        : 47 49
or                   : 64 66
programa             : 0
retorno              : 40
termino              : 77 78 79 81 82 83
tipo                 : 27 28
variable             : 46 52 53 63 84
while                : 44

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAM ID SEMICOLON declaracion_global funcion MAIN O_PARENTHESIS C_PARENTHESIS bloque

    PROGRAM         shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> PROGRAM . ID SEMICOLON declaracion_global funcion MAIN O_PARENTHESIS C_PARENTHESIS bloque

    ID              shift and go to state 3


state 3

    (1) programa -> PROGRAM ID . SEMICOLON declaracion_global funcion MAIN O_PARENTHESIS C_PARENTHESIS bloque

    SEMICOLON       shift and go to state 4


state 4

    (1) programa -> PROGRAM ID SEMICOLON . declaracion_global funcion MAIN O_PARENTHESIS C_PARENTHESIS bloque
    (6) declaracion_global -> . declaracion
    (7) declaracion -> . declaracion_base
    (8) declaracion -> . declaracion_base declaracion
    (9) declaracion_base -> . LET declaracion_prime COLON declaracion_tipo SEMICOLON

    LET             shift and go to state 8

    declaracion_global             shift and go to state 5
    declaracion                    shift and go to state 6
    declaracion_base               shift and go to state 7

state 5

    (1) programa -> PROGRAM ID SEMICOLON declaracion_global . funcion MAIN O_PARENTHESIS C_PARENTHESIS bloque
    (24) funcion -> . funcion_base funcion
    (25) funcion -> . epsilon
    (26) funcion_base -> . FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque
    (92) epsilon -> .

    FUNCTION        shift and go to state 12
    MAIN            reduce using rule 92 (epsilon -> .)

    funcion                        shift and go to state 9
    funcion_base                   shift and go to state 10
    epsilon                        shift and go to state 11

state 6

    (6) declaracion_global -> declaracion .

    FUNCTION        reduce using rule 6 (declaracion_global -> declaracion .)
    MAIN            reduce using rule 6 (declaracion_global -> declaracion .)


state 7

    (7) declaracion -> declaracion_base .
    (8) declaracion -> declaracion_base . declaracion
    (7) declaracion -> . declaracion_base
    (8) declaracion -> . declaracion_base declaracion
    (9) declaracion_base -> . LET declaracion_prime COLON declaracion_tipo SEMICOLON

    FUNCTION        reduce using rule 7 (declaracion -> declaracion_base .)
    MAIN            reduce using rule 7 (declaracion -> declaracion_base .)
    O_CBRACKET      reduce using rule 7 (declaracion -> declaracion_base .)
    LET             shift and go to state 8

    declaracion_base               shift and go to state 7
    declaracion                    shift and go to state 13

state 8

    (9) declaracion_base -> LET . declaracion_prime COLON declaracion_tipo SEMICOLON
    (10) declaracion_prime -> . declaracion_variable
    (11) declaracion_prime -> . declaracion_variable COMMA declaracion_prime
    (12) declaracion_variable -> . ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (13) declaracion_variable -> . ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (14) declaracion_variable -> . ID O_ABRACKET CTE_INT C_ABRACKET
    (15) declaracion_variable -> . ID

    ID              shift and go to state 16

    declaracion_prime              shift and go to state 14
    declaracion_variable           shift and go to state 15

state 9

    (1) programa -> PROGRAM ID SEMICOLON declaracion_global funcion . MAIN O_PARENTHESIS C_PARENTHESIS bloque

    MAIN            shift and go to state 17


state 10

    (24) funcion -> funcion_base . funcion
    (24) funcion -> . funcion_base funcion
    (25) funcion -> . epsilon
    (26) funcion_base -> . FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque
    (92) epsilon -> .

    FUNCTION        shift and go to state 12
    MAIN            reduce using rule 92 (epsilon -> .)

    funcion_base                   shift and go to state 10
    funcion                        shift and go to state 18
    epsilon                        shift and go to state 11

state 11

    (25) funcion -> epsilon .

    MAIN            reduce using rule 25 (funcion -> epsilon .)


state 12

    (26) funcion_base -> FUNCTION . funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque
    (29) funcion_ident -> . VOID ID
    (30) funcion_ident -> . INT ID
    (31) funcion_ident -> . FLOAT ID
    (32) funcion_ident -> . CHAR ID
    (33) funcion_ident -> . STRING ID

    VOID            shift and go to state 20
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    CHAR            shift and go to state 23
    STRING          shift and go to state 24

    funcion_ident                  shift and go to state 19

state 13

    (8) declaracion -> declaracion_base declaracion .

    FUNCTION        reduce using rule 8 (declaracion -> declaracion_base declaracion .)
    MAIN            reduce using rule 8 (declaracion -> declaracion_base declaracion .)
    O_CBRACKET      reduce using rule 8 (declaracion -> declaracion_base declaracion .)


state 14

    (9) declaracion_base -> LET declaracion_prime . COLON declaracion_tipo SEMICOLON

    COLON           shift and go to state 25


state 15

    (10) declaracion_prime -> declaracion_variable .
    (11) declaracion_prime -> declaracion_variable . COMMA declaracion_prime

    COLON           reduce using rule 10 (declaracion_prime -> declaracion_variable .)
    COMMA           shift and go to state 26


state 16

    (12) declaracion_variable -> ID . O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (13) declaracion_variable -> ID . O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (14) declaracion_variable -> ID . O_ABRACKET CTE_INT C_ABRACKET
    (15) declaracion_variable -> ID .

    O_ABRACKET      shift and go to state 27
    COMMA           reduce using rule 15 (declaracion_variable -> ID .)
    COLON           reduce using rule 15 (declaracion_variable -> ID .)


state 17

    (1) programa -> PROGRAM ID SEMICOLON declaracion_global funcion MAIN . O_PARENTHESIS C_PARENTHESIS bloque

    O_PARENTHESIS   shift and go to state 28


state 18

    (24) funcion -> funcion_base funcion .

    MAIN            reduce using rule 24 (funcion -> funcion_base funcion .)


state 19

    (26) funcion_base -> FUNCTION funcion_ident . O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque

    O_PARENTHESIS   shift and go to state 29


state 20

    (29) funcion_ident -> VOID . ID

    ID              shift and go to state 30


state 21

    (30) funcion_ident -> INT . ID

    ID              shift and go to state 31


state 22

    (31) funcion_ident -> FLOAT . ID

    ID              shift and go to state 32


state 23

    (32) funcion_ident -> CHAR . ID

    ID              shift and go to state 33


state 24

    (33) funcion_ident -> STRING . ID

    ID              shift and go to state 34


state 25

    (9) declaracion_base -> LET declaracion_prime COLON . declaracion_tipo SEMICOLON
    (16) declaracion_tipo -> . INT
    (17) declaracion_tipo -> . FLOAT
    (18) declaracion_tipo -> . CHAR
    (19) declaracion_tipo -> . STRING

    INT             shift and go to state 36
    FLOAT           shift and go to state 37
    CHAR            shift and go to state 38
    STRING          shift and go to state 39

    declaracion_tipo               shift and go to state 35

state 26

    (11) declaracion_prime -> declaracion_variable COMMA . declaracion_prime
    (10) declaracion_prime -> . declaracion_variable
    (11) declaracion_prime -> . declaracion_variable COMMA declaracion_prime
    (12) declaracion_variable -> . ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (13) declaracion_variable -> . ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (14) declaracion_variable -> . ID O_ABRACKET CTE_INT C_ABRACKET
    (15) declaracion_variable -> . ID

    ID              shift and go to state 16

    declaracion_variable           shift and go to state 15
    declaracion_prime              shift and go to state 40

state 27

    (12) declaracion_variable -> ID O_ABRACKET . CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (13) declaracion_variable -> ID O_ABRACKET . CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (14) declaracion_variable -> ID O_ABRACKET . CTE_INT C_ABRACKET

    CTE_INT         shift and go to state 41


state 28

    (1) programa -> PROGRAM ID SEMICOLON declaracion_global funcion MAIN O_PARENTHESIS . C_PARENTHESIS bloque

    C_PARENTHESIS   shift and go to state 42


state 29

    (26) funcion_base -> FUNCTION funcion_ident O_PARENTHESIS . funcion_prime C_PARENTHESIS declaracion_funcion bloque
    (27) funcion_prime -> . tipo ID
    (28) funcion_prime -> . tipo ID COMMA funcion_prime
    (20) tipo -> . INT
    (21) tipo -> . FLOAT
    (22) tipo -> . CHAR
    (23) tipo -> . STRING

    INT             shift and go to state 45
    FLOAT           shift and go to state 46
    CHAR            shift and go to state 47
    STRING          shift and go to state 48

    funcion_prime                  shift and go to state 43
    tipo                           shift and go to state 44

state 30

    (29) funcion_ident -> VOID ID .

    O_PARENTHESIS   reduce using rule 29 (funcion_ident -> VOID ID .)


state 31

    (30) funcion_ident -> INT ID .

    O_PARENTHESIS   reduce using rule 30 (funcion_ident -> INT ID .)


state 32

    (31) funcion_ident -> FLOAT ID .

    O_PARENTHESIS   reduce using rule 31 (funcion_ident -> FLOAT ID .)


state 33

    (32) funcion_ident -> CHAR ID .

    O_PARENTHESIS   reduce using rule 32 (funcion_ident -> CHAR ID .)


state 34

    (33) funcion_ident -> STRING ID .

    O_PARENTHESIS   reduce using rule 33 (funcion_ident -> STRING ID .)


state 35

    (9) declaracion_base -> LET declaracion_prime COLON declaracion_tipo . SEMICOLON

    SEMICOLON       shift and go to state 49


state 36

    (16) declaracion_tipo -> INT .

    SEMICOLON       reduce using rule 16 (declaracion_tipo -> INT .)


state 37

    (17) declaracion_tipo -> FLOAT .

    SEMICOLON       reduce using rule 17 (declaracion_tipo -> FLOAT .)


state 38

    (18) declaracion_tipo -> CHAR .

    SEMICOLON       reduce using rule 18 (declaracion_tipo -> CHAR .)


state 39

    (19) declaracion_tipo -> STRING .

    SEMICOLON       reduce using rule 19 (declaracion_tipo -> STRING .)


state 40

    (11) declaracion_prime -> declaracion_variable COMMA declaracion_prime .

    COLON           reduce using rule 11 (declaracion_prime -> declaracion_variable COMMA declaracion_prime .)


state 41

    (12) declaracion_variable -> ID O_ABRACKET CTE_INT . C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (13) declaracion_variable -> ID O_ABRACKET CTE_INT . C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (14) declaracion_variable -> ID O_ABRACKET CTE_INT . C_ABRACKET

    C_ABRACKET      shift and go to state 50


state 42

    (1) programa -> PROGRAM ID SEMICOLON declaracion_global funcion MAIN O_PARENTHESIS C_PARENTHESIS . bloque
    (2) bloque -> . O_CBRACKET bloque_prime C_CBRACKET

    O_CBRACKET      shift and go to state 52

    bloque                         shift and go to state 51

state 43

    (26) funcion_base -> FUNCTION funcion_ident O_PARENTHESIS funcion_prime . C_PARENTHESIS declaracion_funcion bloque

    C_PARENTHESIS   shift and go to state 53


state 44

    (27) funcion_prime -> tipo . ID
    (28) funcion_prime -> tipo . ID COMMA funcion_prime

    ID              shift and go to state 54


state 45

    (20) tipo -> INT .

    ID              reduce using rule 20 (tipo -> INT .)


state 46

    (21) tipo -> FLOAT .

    ID              reduce using rule 21 (tipo -> FLOAT .)


state 47

    (22) tipo -> CHAR .

    ID              reduce using rule 22 (tipo -> CHAR .)


state 48

    (23) tipo -> STRING .

    ID              reduce using rule 23 (tipo -> STRING .)


state 49

    (9) declaracion_base -> LET declaracion_prime COLON declaracion_tipo SEMICOLON .

    LET             reduce using rule 9 (declaracion_base -> LET declaracion_prime COLON declaracion_tipo SEMICOLON .)
    FUNCTION        reduce using rule 9 (declaracion_base -> LET declaracion_prime COLON declaracion_tipo SEMICOLON .)
    MAIN            reduce using rule 9 (declaracion_base -> LET declaracion_prime COLON declaracion_tipo SEMICOLON .)
    O_CBRACKET      reduce using rule 9 (declaracion_base -> LET declaracion_prime COLON declaracion_tipo SEMICOLON .)


state 50

    (12) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET . O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (13) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET . O_ABRACKET CTE_INT C_ABRACKET
    (14) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET .

    O_ABRACKET      shift and go to state 55
    COMMA           reduce using rule 14 (declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET .)
    COLON           reduce using rule 14 (declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET .)


state 51

    (1) programa -> PROGRAM ID SEMICOLON declaracion_global funcion MAIN O_PARENTHESIS C_PARENTHESIS bloque .

    $end            reduce using rule 1 (programa -> PROGRAM ID SEMICOLON declaracion_global funcion MAIN O_PARENTHESIS C_PARENTHESIS bloque .)


state 52

    (2) bloque -> O_CBRACKET . bloque_prime C_CBRACKET
    (3) bloque_prime -> . estatuto bloque_prime
    (4) bloque_prime -> . epsilon
    (38) estatuto -> . asignacion SEMICOLON
    (39) estatuto -> . llamada SEMICOLON
    (40) estatuto -> . retorno SEMICOLON
    (41) estatuto -> . lectura SEMICOLON
    (42) estatuto -> . escritura SEMICOLON
    (43) estatuto -> . decision
    (44) estatuto -> . while
    (45) estatuto -> . for
    (92) epsilon -> .
    (46) asignacion -> . variable ASSIGN expr
    (47) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (50) retorno -> . RETURN O_PARENTHESIS expr C_PARENTHESIS
    (51) lectura -> . READ O_PARENTHESIS lectura_prime C_PARENTHESIS
    (54) escritura -> . WRITE O_PARENTHESIS escritura_prime C_PARENTHESIS
    (59) decision -> . IF O_PARENTHESIS expr C_PARENTHESIS bloque else
    (62) while -> . WHILE O_PARENTHESIS expr C_PARENTHESIS bloque
    (63) for -> . FOR variable ASSIGN exp TO exp bloque
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID

    C_CBRACKET      reduce using rule 92 (epsilon -> .)
    ID              shift and go to state 68
    RETURN          shift and go to state 69
    READ            shift and go to state 70
    WRITE           shift and go to state 71
    IF              shift and go to state 72
    WHILE           shift and go to state 73
    FOR             shift and go to state 74

    bloque_prime                   shift and go to state 56
    estatuto                       shift and go to state 57
    epsilon                        shift and go to state 58
    asignacion                     shift and go to state 59
    llamada                        shift and go to state 60
    retorno                        shift and go to state 61
    lectura                        shift and go to state 62
    escritura                      shift and go to state 63
    decision                       shift and go to state 64
    while                          shift and go to state 65
    for                            shift and go to state 66
    variable                       shift and go to state 67

state 53

    (26) funcion_base -> FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS . declaracion_funcion bloque
    (5) declaracion_funcion -> . declaracion
    (7) declaracion -> . declaracion_base
    (8) declaracion -> . declaracion_base declaracion
    (9) declaracion_base -> . LET declaracion_prime COLON declaracion_tipo SEMICOLON

    LET             shift and go to state 8

    declaracion_funcion            shift and go to state 75
    declaracion                    shift and go to state 76
    declaracion_base               shift and go to state 7

state 54

    (27) funcion_prime -> tipo ID .
    (28) funcion_prime -> tipo ID . COMMA funcion_prime

    C_PARENTHESIS   reduce using rule 27 (funcion_prime -> tipo ID .)
    COMMA           shift and go to state 77


state 55

    (12) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET . CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (13) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET . CTE_INT C_ABRACKET

    CTE_INT         shift and go to state 78


state 56

    (2) bloque -> O_CBRACKET bloque_prime . C_CBRACKET

    C_CBRACKET      shift and go to state 79


state 57

    (3) bloque_prime -> estatuto . bloque_prime
    (3) bloque_prime -> . estatuto bloque_prime
    (4) bloque_prime -> . epsilon
    (38) estatuto -> . asignacion SEMICOLON
    (39) estatuto -> . llamada SEMICOLON
    (40) estatuto -> . retorno SEMICOLON
    (41) estatuto -> . lectura SEMICOLON
    (42) estatuto -> . escritura SEMICOLON
    (43) estatuto -> . decision
    (44) estatuto -> . while
    (45) estatuto -> . for
    (92) epsilon -> .
    (46) asignacion -> . variable ASSIGN expr
    (47) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (50) retorno -> . RETURN O_PARENTHESIS expr C_PARENTHESIS
    (51) lectura -> . READ O_PARENTHESIS lectura_prime C_PARENTHESIS
    (54) escritura -> . WRITE O_PARENTHESIS escritura_prime C_PARENTHESIS
    (59) decision -> . IF O_PARENTHESIS expr C_PARENTHESIS bloque else
    (62) while -> . WHILE O_PARENTHESIS expr C_PARENTHESIS bloque
    (63) for -> . FOR variable ASSIGN exp TO exp bloque
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID

    C_CBRACKET      reduce using rule 92 (epsilon -> .)
    ID              shift and go to state 68
    RETURN          shift and go to state 69
    READ            shift and go to state 70
    WRITE           shift and go to state 71
    IF              shift and go to state 72
    WHILE           shift and go to state 73
    FOR             shift and go to state 74

    estatuto                       shift and go to state 57
    bloque_prime                   shift and go to state 80
    epsilon                        shift and go to state 58
    asignacion                     shift and go to state 59
    llamada                        shift and go to state 60
    retorno                        shift and go to state 61
    lectura                        shift and go to state 62
    escritura                      shift and go to state 63
    decision                       shift and go to state 64
    while                          shift and go to state 65
    for                            shift and go to state 66
    variable                       shift and go to state 67

state 58

    (4) bloque_prime -> epsilon .

    C_CBRACKET      reduce using rule 4 (bloque_prime -> epsilon .)


state 59

    (38) estatuto -> asignacion . SEMICOLON

    SEMICOLON       shift and go to state 81


state 60

    (39) estatuto -> llamada . SEMICOLON

    SEMICOLON       shift and go to state 82


state 61

    (40) estatuto -> retorno . SEMICOLON

    SEMICOLON       shift and go to state 83


state 62

    (41) estatuto -> lectura . SEMICOLON

    SEMICOLON       shift and go to state 84


state 63

    (42) estatuto -> escritura . SEMICOLON

    SEMICOLON       shift and go to state 85


state 64

    (43) estatuto -> decision .

    ID              reduce using rule 43 (estatuto -> decision .)
    RETURN          reduce using rule 43 (estatuto -> decision .)
    READ            reduce using rule 43 (estatuto -> decision .)
    WRITE           reduce using rule 43 (estatuto -> decision .)
    IF              reduce using rule 43 (estatuto -> decision .)
    WHILE           reduce using rule 43 (estatuto -> decision .)
    FOR             reduce using rule 43 (estatuto -> decision .)
    C_CBRACKET      reduce using rule 43 (estatuto -> decision .)


state 65

    (44) estatuto -> while .

    ID              reduce using rule 44 (estatuto -> while .)
    RETURN          reduce using rule 44 (estatuto -> while .)
    READ            reduce using rule 44 (estatuto -> while .)
    WRITE           reduce using rule 44 (estatuto -> while .)
    IF              reduce using rule 44 (estatuto -> while .)
    WHILE           reduce using rule 44 (estatuto -> while .)
    FOR             reduce using rule 44 (estatuto -> while .)
    C_CBRACKET      reduce using rule 44 (estatuto -> while .)


state 66

    (45) estatuto -> for .

    ID              reduce using rule 45 (estatuto -> for .)
    RETURN          reduce using rule 45 (estatuto -> for .)
    READ            reduce using rule 45 (estatuto -> for .)
    WRITE           reduce using rule 45 (estatuto -> for .)
    IF              reduce using rule 45 (estatuto -> for .)
    WHILE           reduce using rule 45 (estatuto -> for .)
    FOR             reduce using rule 45 (estatuto -> for .)
    C_CBRACKET      reduce using rule 45 (estatuto -> for .)


state 67

    (46) asignacion -> variable . ASSIGN expr

    ASSIGN          shift and go to state 86


state 68

    (47) llamada -> ID . O_PARENTHESIS llamada_prime C_PARENTHESIS
    (34) variable -> ID . O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (35) variable -> ID . O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> ID . O_ABRACKET exp C_ABRACKET
    (37) variable -> ID .

    O_PARENTHESIS   shift and go to state 87
    O_ABRACKET      shift and go to state 88
    ASSIGN          reduce using rule 37 (variable -> ID .)


state 69

    (50) retorno -> RETURN . O_PARENTHESIS expr C_PARENTHESIS

    O_PARENTHESIS   shift and go to state 89


state 70

    (51) lectura -> READ . O_PARENTHESIS lectura_prime C_PARENTHESIS

    O_PARENTHESIS   shift and go to state 90


state 71

    (54) escritura -> WRITE . O_PARENTHESIS escritura_prime C_PARENTHESIS

    O_PARENTHESIS   shift and go to state 91


state 72

    (59) decision -> IF . O_PARENTHESIS expr C_PARENTHESIS bloque else

    O_PARENTHESIS   shift and go to state 92


state 73

    (62) while -> WHILE . O_PARENTHESIS expr C_PARENTHESIS bloque

    O_PARENTHESIS   shift and go to state 93


state 74

    (63) for -> FOR . variable ASSIGN exp TO exp bloque
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID

    ID              shift and go to state 95

    variable                       shift and go to state 94

state 75

    (26) funcion_base -> FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion . bloque
    (2) bloque -> . O_CBRACKET bloque_prime C_CBRACKET

    O_CBRACKET      shift and go to state 52

    bloque                         shift and go to state 96

state 76

    (5) declaracion_funcion -> declaracion .

    O_CBRACKET      reduce using rule 5 (declaracion_funcion -> declaracion .)


state 77

    (28) funcion_prime -> tipo ID COMMA . funcion_prime
    (27) funcion_prime -> . tipo ID
    (28) funcion_prime -> . tipo ID COMMA funcion_prime
    (20) tipo -> . INT
    (21) tipo -> . FLOAT
    (22) tipo -> . CHAR
    (23) tipo -> . STRING

    INT             shift and go to state 45
    FLOAT           shift and go to state 46
    CHAR            shift and go to state 47
    STRING          shift and go to state 48

    tipo                           shift and go to state 44
    funcion_prime                  shift and go to state 97

state 78

    (12) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT . C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (13) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT . C_ABRACKET

    C_ABRACKET      shift and go to state 98


state 79

    (2) bloque -> O_CBRACKET bloque_prime C_CBRACKET .

    $end            reduce using rule 2 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    FUNCTION        reduce using rule 2 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    MAIN            reduce using rule 2 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    ELSE            reduce using rule 2 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    ID              reduce using rule 2 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    RETURN          reduce using rule 2 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    READ            reduce using rule 2 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    WRITE           reduce using rule 2 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    IF              reduce using rule 2 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    WHILE           reduce using rule 2 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    FOR             reduce using rule 2 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    C_CBRACKET      reduce using rule 2 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)


state 80

    (3) bloque_prime -> estatuto bloque_prime .

    C_CBRACKET      reduce using rule 3 (bloque_prime -> estatuto bloque_prime .)


state 81

    (38) estatuto -> asignacion SEMICOLON .

    ID              reduce using rule 38 (estatuto -> asignacion SEMICOLON .)
    RETURN          reduce using rule 38 (estatuto -> asignacion SEMICOLON .)
    READ            reduce using rule 38 (estatuto -> asignacion SEMICOLON .)
    WRITE           reduce using rule 38 (estatuto -> asignacion SEMICOLON .)
    IF              reduce using rule 38 (estatuto -> asignacion SEMICOLON .)
    WHILE           reduce using rule 38 (estatuto -> asignacion SEMICOLON .)
    FOR             reduce using rule 38 (estatuto -> asignacion SEMICOLON .)
    C_CBRACKET      reduce using rule 38 (estatuto -> asignacion SEMICOLON .)


state 82

    (39) estatuto -> llamada SEMICOLON .

    ID              reduce using rule 39 (estatuto -> llamada SEMICOLON .)
    RETURN          reduce using rule 39 (estatuto -> llamada SEMICOLON .)
    READ            reduce using rule 39 (estatuto -> llamada SEMICOLON .)
    WRITE           reduce using rule 39 (estatuto -> llamada SEMICOLON .)
    IF              reduce using rule 39 (estatuto -> llamada SEMICOLON .)
    WHILE           reduce using rule 39 (estatuto -> llamada SEMICOLON .)
    FOR             reduce using rule 39 (estatuto -> llamada SEMICOLON .)
    C_CBRACKET      reduce using rule 39 (estatuto -> llamada SEMICOLON .)


state 83

    (40) estatuto -> retorno SEMICOLON .

    ID              reduce using rule 40 (estatuto -> retorno SEMICOLON .)
    RETURN          reduce using rule 40 (estatuto -> retorno SEMICOLON .)
    READ            reduce using rule 40 (estatuto -> retorno SEMICOLON .)
    WRITE           reduce using rule 40 (estatuto -> retorno SEMICOLON .)
    IF              reduce using rule 40 (estatuto -> retorno SEMICOLON .)
    WHILE           reduce using rule 40 (estatuto -> retorno SEMICOLON .)
    FOR             reduce using rule 40 (estatuto -> retorno SEMICOLON .)
    C_CBRACKET      reduce using rule 40 (estatuto -> retorno SEMICOLON .)


state 84

    (41) estatuto -> lectura SEMICOLON .

    ID              reduce using rule 41 (estatuto -> lectura SEMICOLON .)
    RETURN          reduce using rule 41 (estatuto -> lectura SEMICOLON .)
    READ            reduce using rule 41 (estatuto -> lectura SEMICOLON .)
    WRITE           reduce using rule 41 (estatuto -> lectura SEMICOLON .)
    IF              reduce using rule 41 (estatuto -> lectura SEMICOLON .)
    WHILE           reduce using rule 41 (estatuto -> lectura SEMICOLON .)
    FOR             reduce using rule 41 (estatuto -> lectura SEMICOLON .)
    C_CBRACKET      reduce using rule 41 (estatuto -> lectura SEMICOLON .)


state 85

    (42) estatuto -> escritura SEMICOLON .

    ID              reduce using rule 42 (estatuto -> escritura SEMICOLON .)
    RETURN          reduce using rule 42 (estatuto -> escritura SEMICOLON .)
    READ            reduce using rule 42 (estatuto -> escritura SEMICOLON .)
    WRITE           reduce using rule 42 (estatuto -> escritura SEMICOLON .)
    IF              reduce using rule 42 (estatuto -> escritura SEMICOLON .)
    WHILE           reduce using rule 42 (estatuto -> escritura SEMICOLON .)
    FOR             reduce using rule 42 (estatuto -> escritura SEMICOLON .)
    C_CBRACKET      reduce using rule 42 (estatuto -> escritura SEMICOLON .)


state 86

    (46) asignacion -> variable ASSIGN . expr
    (64) expr -> . or
    (65) or -> . and
    (66) or -> . and OR or
    (67) and -> . equal
    (68) and -> . equal AND and
    (69) equal -> . compare
    (70) equal -> . compare EQUAL compare
    (71) equal -> . compare NOT_EQUAL compare
    (72) compare -> . exp
    (73) compare -> . exp GREATER exp
    (74) compare -> . exp LESSER exp
    (75) compare -> . exp GREATER_EQUAL exp
    (76) compare -> . exp LESSER_EQUAL exp
    (77) exp -> . termino
    (78) exp -> . termino PLUS exp
    (79) exp -> . termino MINUS exp
    (80) termino -> . factor
    (81) termino -> . factor TIMES termino
    (82) termino -> . factor DIVIDE termino
    (83) termino -> . factor MODULE termino
    (84) factor -> . variable
    (85) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (86) factor -> . llamada
    (87) factor -> . cte
    (88) factor -> . PLUS cte
    (89) factor -> . MINUS cte
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID
    (47) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (90) cte -> . CTE_INT
    (91) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 110
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    ID              shift and go to state 113
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 115

    variable                       shift and go to state 99
    expr                           shift and go to state 100
    or                             shift and go to state 101
    and                            shift and go to state 102
    equal                          shift and go to state 103
    compare                        shift and go to state 104
    exp                            shift and go to state 105
    termino                        shift and go to state 106
    factor                         shift and go to state 109
    llamada                        shift and go to state 111
    cte                            shift and go to state 112

state 87

    (47) llamada -> ID O_PARENTHESIS . llamada_prime C_PARENTHESIS
    (48) llamada_prime -> . exp
    (49) llamada_prime -> . exp COMMA llamada_prime
    (77) exp -> . termino
    (78) exp -> . termino PLUS exp
    (79) exp -> . termino MINUS exp
    (80) termino -> . factor
    (81) termino -> . factor TIMES termino
    (82) termino -> . factor DIVIDE termino
    (83) termino -> . factor MODULE termino
    (84) factor -> . variable
    (85) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (86) factor -> . llamada
    (87) factor -> . cte
    (88) factor -> . PLUS cte
    (89) factor -> . MINUS cte
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID
    (47) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (90) cte -> . CTE_INT
    (91) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 110
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    ID              shift and go to state 113
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 115

    llamada_prime                  shift and go to state 116
    exp                            shift and go to state 117
    termino                        shift and go to state 106
    factor                         shift and go to state 109
    variable                       shift and go to state 99
    llamada                        shift and go to state 111
    cte                            shift and go to state 112

state 88

    (34) variable -> ID O_ABRACKET . exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (35) variable -> ID O_ABRACKET . exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> ID O_ABRACKET . exp C_ABRACKET
    (77) exp -> . termino
    (78) exp -> . termino PLUS exp
    (79) exp -> . termino MINUS exp
    (80) termino -> . factor
    (81) termino -> . factor TIMES termino
    (82) termino -> . factor DIVIDE termino
    (83) termino -> . factor MODULE termino
    (84) factor -> . variable
    (85) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (86) factor -> . llamada
    (87) factor -> . cte
    (88) factor -> . PLUS cte
    (89) factor -> . MINUS cte
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID
    (47) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (90) cte -> . CTE_INT
    (91) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 110
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    ID              shift and go to state 113
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 115

    exp                            shift and go to state 118
    termino                        shift and go to state 106
    factor                         shift and go to state 109
    variable                       shift and go to state 99
    llamada                        shift and go to state 111
    cte                            shift and go to state 112

state 89

    (50) retorno -> RETURN O_PARENTHESIS . expr C_PARENTHESIS
    (64) expr -> . or
    (65) or -> . and
    (66) or -> . and OR or
    (67) and -> . equal
    (68) and -> . equal AND and
    (69) equal -> . compare
    (70) equal -> . compare EQUAL compare
    (71) equal -> . compare NOT_EQUAL compare
    (72) compare -> . exp
    (73) compare -> . exp GREATER exp
    (74) compare -> . exp LESSER exp
    (75) compare -> . exp GREATER_EQUAL exp
    (76) compare -> . exp LESSER_EQUAL exp
    (77) exp -> . termino
    (78) exp -> . termino PLUS exp
    (79) exp -> . termino MINUS exp
    (80) termino -> . factor
    (81) termino -> . factor TIMES termino
    (82) termino -> . factor DIVIDE termino
    (83) termino -> . factor MODULE termino
    (84) factor -> . variable
    (85) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (86) factor -> . llamada
    (87) factor -> . cte
    (88) factor -> . PLUS cte
    (89) factor -> . MINUS cte
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID
    (47) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (90) cte -> . CTE_INT
    (91) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 110
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    ID              shift and go to state 113
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 115

    expr                           shift and go to state 119
    or                             shift and go to state 101
    and                            shift and go to state 102
    equal                          shift and go to state 103
    compare                        shift and go to state 104
    exp                            shift and go to state 105
    termino                        shift and go to state 106
    factor                         shift and go to state 109
    variable                       shift and go to state 99
    llamada                        shift and go to state 111
    cte                            shift and go to state 112

state 90

    (51) lectura -> READ O_PARENTHESIS . lectura_prime C_PARENTHESIS
    (52) lectura_prime -> . variable
    (53) lectura_prime -> . variable COMMA lectura_prime
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID

    ID              shift and go to state 95

    lectura_prime                  shift and go to state 120
    variable                       shift and go to state 121

state 91

    (54) escritura -> WRITE O_PARENTHESIS . escritura_prime C_PARENTHESIS
    (55) escritura_prime -> . expr
    (56) escritura_prime -> . CTE_STRING
    (57) escritura_prime -> . expr COMMA escritura_prime
    (58) escritura_prime -> . CTE_STRING COMMA escritura_prime
    (64) expr -> . or
    (65) or -> . and
    (66) or -> . and OR or
    (67) and -> . equal
    (68) and -> . equal AND and
    (69) equal -> . compare
    (70) equal -> . compare EQUAL compare
    (71) equal -> . compare NOT_EQUAL compare
    (72) compare -> . exp
    (73) compare -> . exp GREATER exp
    (74) compare -> . exp LESSER exp
    (75) compare -> . exp GREATER_EQUAL exp
    (76) compare -> . exp LESSER_EQUAL exp
    (77) exp -> . termino
    (78) exp -> . termino PLUS exp
    (79) exp -> . termino MINUS exp
    (80) termino -> . factor
    (81) termino -> . factor TIMES termino
    (82) termino -> . factor DIVIDE termino
    (83) termino -> . factor MODULE termino
    (84) factor -> . variable
    (85) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (86) factor -> . llamada
    (87) factor -> . cte
    (88) factor -> . PLUS cte
    (89) factor -> . MINUS cte
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID
    (47) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (90) cte -> . CTE_INT
    (91) cte -> . CTE_FLOAT

    CTE_STRING      shift and go to state 124
    O_PARENTHESIS   shift and go to state 110
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    ID              shift and go to state 113
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 115

    escritura_prime                shift and go to state 122
    expr                           shift and go to state 123
    or                             shift and go to state 101
    and                            shift and go to state 102
    equal                          shift and go to state 103
    compare                        shift and go to state 104
    exp                            shift and go to state 105
    termino                        shift and go to state 106
    factor                         shift and go to state 109
    variable                       shift and go to state 99
    llamada                        shift and go to state 111
    cte                            shift and go to state 112

state 92

    (59) decision -> IF O_PARENTHESIS . expr C_PARENTHESIS bloque else
    (64) expr -> . or
    (65) or -> . and
    (66) or -> . and OR or
    (67) and -> . equal
    (68) and -> . equal AND and
    (69) equal -> . compare
    (70) equal -> . compare EQUAL compare
    (71) equal -> . compare NOT_EQUAL compare
    (72) compare -> . exp
    (73) compare -> . exp GREATER exp
    (74) compare -> . exp LESSER exp
    (75) compare -> . exp GREATER_EQUAL exp
    (76) compare -> . exp LESSER_EQUAL exp
    (77) exp -> . termino
    (78) exp -> . termino PLUS exp
    (79) exp -> . termino MINUS exp
    (80) termino -> . factor
    (81) termino -> . factor TIMES termino
    (82) termino -> . factor DIVIDE termino
    (83) termino -> . factor MODULE termino
    (84) factor -> . variable
    (85) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (86) factor -> . llamada
    (87) factor -> . cte
    (88) factor -> . PLUS cte
    (89) factor -> . MINUS cte
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID
    (47) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (90) cte -> . CTE_INT
    (91) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 110
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    ID              shift and go to state 113
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 115

    expr                           shift and go to state 125
    or                             shift and go to state 101
    and                            shift and go to state 102
    equal                          shift and go to state 103
    compare                        shift and go to state 104
    exp                            shift and go to state 105
    termino                        shift and go to state 106
    factor                         shift and go to state 109
    variable                       shift and go to state 99
    llamada                        shift and go to state 111
    cte                            shift and go to state 112

state 93

    (62) while -> WHILE O_PARENTHESIS . expr C_PARENTHESIS bloque
    (64) expr -> . or
    (65) or -> . and
    (66) or -> . and OR or
    (67) and -> . equal
    (68) and -> . equal AND and
    (69) equal -> . compare
    (70) equal -> . compare EQUAL compare
    (71) equal -> . compare NOT_EQUAL compare
    (72) compare -> . exp
    (73) compare -> . exp GREATER exp
    (74) compare -> . exp LESSER exp
    (75) compare -> . exp GREATER_EQUAL exp
    (76) compare -> . exp LESSER_EQUAL exp
    (77) exp -> . termino
    (78) exp -> . termino PLUS exp
    (79) exp -> . termino MINUS exp
    (80) termino -> . factor
    (81) termino -> . factor TIMES termino
    (82) termino -> . factor DIVIDE termino
    (83) termino -> . factor MODULE termino
    (84) factor -> . variable
    (85) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (86) factor -> . llamada
    (87) factor -> . cte
    (88) factor -> . PLUS cte
    (89) factor -> . MINUS cte
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID
    (47) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (90) cte -> . CTE_INT
    (91) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 110
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    ID              shift and go to state 113
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 115

    expr                           shift and go to state 126
    or                             shift and go to state 101
    and                            shift and go to state 102
    equal                          shift and go to state 103
    compare                        shift and go to state 104
    exp                            shift and go to state 105
    termino                        shift and go to state 106
    factor                         shift and go to state 109
    variable                       shift and go to state 99
    llamada                        shift and go to state 111
    cte                            shift and go to state 112

state 94

    (63) for -> FOR variable . ASSIGN exp TO exp bloque

    ASSIGN          shift and go to state 127


state 95

    (34) variable -> ID . O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (35) variable -> ID . O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> ID . O_ABRACKET exp C_ABRACKET
    (37) variable -> ID .

    O_ABRACKET      shift and go to state 88
    ASSIGN          reduce using rule 37 (variable -> ID .)
    COMMA           reduce using rule 37 (variable -> ID .)
    C_PARENTHESIS   reduce using rule 37 (variable -> ID .)


state 96

    (26) funcion_base -> FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque .

    FUNCTION        reduce using rule 26 (funcion_base -> FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque .)
    MAIN            reduce using rule 26 (funcion_base -> FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque .)


state 97

    (28) funcion_prime -> tipo ID COMMA funcion_prime .

    C_PARENTHESIS   reduce using rule 28 (funcion_prime -> tipo ID COMMA funcion_prime .)


state 98

    (12) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET . O_ABRACKET CTE_INT C_ABRACKET
    (13) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET .

    O_ABRACKET      shift and go to state 128
    COMMA           reduce using rule 13 (declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET .)
    COLON           reduce using rule 13 (declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET .)


state 99

    (84) factor -> variable .

    TIMES           reduce using rule 84 (factor -> variable .)
    DIVIDE          reduce using rule 84 (factor -> variable .)
    MODULE          reduce using rule 84 (factor -> variable .)
    PLUS            reduce using rule 84 (factor -> variable .)
    MINUS           reduce using rule 84 (factor -> variable .)
    GREATER         reduce using rule 84 (factor -> variable .)
    LESSER          reduce using rule 84 (factor -> variable .)
    GREATER_EQUAL   reduce using rule 84 (factor -> variable .)
    LESSER_EQUAL    reduce using rule 84 (factor -> variable .)
    EQUAL           reduce using rule 84 (factor -> variable .)
    NOT_EQUAL       reduce using rule 84 (factor -> variable .)
    AND             reduce using rule 84 (factor -> variable .)
    OR              reduce using rule 84 (factor -> variable .)
    SEMICOLON       reduce using rule 84 (factor -> variable .)
    COMMA           reduce using rule 84 (factor -> variable .)
    C_PARENTHESIS   reduce using rule 84 (factor -> variable .)
    C_ABRACKET      reduce using rule 84 (factor -> variable .)
    TO              reduce using rule 84 (factor -> variable .)
    O_CBRACKET      reduce using rule 84 (factor -> variable .)


state 100

    (46) asignacion -> variable ASSIGN expr .

    SEMICOLON       reduce using rule 46 (asignacion -> variable ASSIGN expr .)


state 101

    (64) expr -> or .

    SEMICOLON       reduce using rule 64 (expr -> or .)
    C_PARENTHESIS   reduce using rule 64 (expr -> or .)
    COMMA           reduce using rule 64 (expr -> or .)


state 102

    (65) or -> and .
    (66) or -> and . OR or

    SEMICOLON       reduce using rule 65 (or -> and .)
    C_PARENTHESIS   reduce using rule 65 (or -> and .)
    COMMA           reduce using rule 65 (or -> and .)
    OR              shift and go to state 129


state 103

    (67) and -> equal .
    (68) and -> equal . AND and

    OR              reduce using rule 67 (and -> equal .)
    SEMICOLON       reduce using rule 67 (and -> equal .)
    C_PARENTHESIS   reduce using rule 67 (and -> equal .)
    COMMA           reduce using rule 67 (and -> equal .)
    AND             shift and go to state 130


state 104

    (69) equal -> compare .
    (70) equal -> compare . EQUAL compare
    (71) equal -> compare . NOT_EQUAL compare

    AND             reduce using rule 69 (equal -> compare .)
    OR              reduce using rule 69 (equal -> compare .)
    SEMICOLON       reduce using rule 69 (equal -> compare .)
    C_PARENTHESIS   reduce using rule 69 (equal -> compare .)
    COMMA           reduce using rule 69 (equal -> compare .)
    EQUAL           shift and go to state 131
    NOT_EQUAL       shift and go to state 132


state 105

    (72) compare -> exp .
    (73) compare -> exp . GREATER exp
    (74) compare -> exp . LESSER exp
    (75) compare -> exp . GREATER_EQUAL exp
    (76) compare -> exp . LESSER_EQUAL exp

    EQUAL           reduce using rule 72 (compare -> exp .)
    NOT_EQUAL       reduce using rule 72 (compare -> exp .)
    AND             reduce using rule 72 (compare -> exp .)
    OR              reduce using rule 72 (compare -> exp .)
    SEMICOLON       reduce using rule 72 (compare -> exp .)
    C_PARENTHESIS   reduce using rule 72 (compare -> exp .)
    COMMA           reduce using rule 72 (compare -> exp .)
    GREATER         shift and go to state 133
    LESSER          shift and go to state 134
    GREATER_EQUAL   shift and go to state 135
    LESSER_EQUAL    shift and go to state 136


state 106

    (77) exp -> termino .
    (78) exp -> termino . PLUS exp
    (79) exp -> termino . MINUS exp

    GREATER         reduce using rule 77 (exp -> termino .)
    LESSER          reduce using rule 77 (exp -> termino .)
    GREATER_EQUAL   reduce using rule 77 (exp -> termino .)
    LESSER_EQUAL    reduce using rule 77 (exp -> termino .)
    EQUAL           reduce using rule 77 (exp -> termino .)
    NOT_EQUAL       reduce using rule 77 (exp -> termino .)
    AND             reduce using rule 77 (exp -> termino .)
    OR              reduce using rule 77 (exp -> termino .)
    SEMICOLON       reduce using rule 77 (exp -> termino .)
    COMMA           reduce using rule 77 (exp -> termino .)
    C_PARENTHESIS   reduce using rule 77 (exp -> termino .)
    C_ABRACKET      reduce using rule 77 (exp -> termino .)
    TO              reduce using rule 77 (exp -> termino .)
    O_CBRACKET      reduce using rule 77 (exp -> termino .)
    PLUS            shift and go to state 137
    MINUS           shift and go to state 138


state 107

    (88) factor -> PLUS . cte
    (90) cte -> . CTE_INT
    (91) cte -> . CTE_FLOAT

    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 115

    cte                            shift and go to state 139

state 108

    (89) factor -> MINUS . cte
    (90) cte -> . CTE_INT
    (91) cte -> . CTE_FLOAT

    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 115

    cte                            shift and go to state 140

state 109

    (80) termino -> factor .
    (81) termino -> factor . TIMES termino
    (82) termino -> factor . DIVIDE termino
    (83) termino -> factor . MODULE termino

    PLUS            reduce using rule 80 (termino -> factor .)
    MINUS           reduce using rule 80 (termino -> factor .)
    GREATER         reduce using rule 80 (termino -> factor .)
    LESSER          reduce using rule 80 (termino -> factor .)
    GREATER_EQUAL   reduce using rule 80 (termino -> factor .)
    LESSER_EQUAL    reduce using rule 80 (termino -> factor .)
    EQUAL           reduce using rule 80 (termino -> factor .)
    NOT_EQUAL       reduce using rule 80 (termino -> factor .)
    AND             reduce using rule 80 (termino -> factor .)
    OR              reduce using rule 80 (termino -> factor .)
    SEMICOLON       reduce using rule 80 (termino -> factor .)
    COMMA           reduce using rule 80 (termino -> factor .)
    C_PARENTHESIS   reduce using rule 80 (termino -> factor .)
    C_ABRACKET      reduce using rule 80 (termino -> factor .)
    TO              reduce using rule 80 (termino -> factor .)
    O_CBRACKET      reduce using rule 80 (termino -> factor .)
    TIMES           shift and go to state 141
    DIVIDE          shift and go to state 142
    MODULE          shift and go to state 143


state 110

    (85) factor -> O_PARENTHESIS . expr C_PARENTHESIS
    (64) expr -> . or
    (65) or -> . and
    (66) or -> . and OR or
    (67) and -> . equal
    (68) and -> . equal AND and
    (69) equal -> . compare
    (70) equal -> . compare EQUAL compare
    (71) equal -> . compare NOT_EQUAL compare
    (72) compare -> . exp
    (73) compare -> . exp GREATER exp
    (74) compare -> . exp LESSER exp
    (75) compare -> . exp GREATER_EQUAL exp
    (76) compare -> . exp LESSER_EQUAL exp
    (77) exp -> . termino
    (78) exp -> . termino PLUS exp
    (79) exp -> . termino MINUS exp
    (80) termino -> . factor
    (81) termino -> . factor TIMES termino
    (82) termino -> . factor DIVIDE termino
    (83) termino -> . factor MODULE termino
    (84) factor -> . variable
    (85) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (86) factor -> . llamada
    (87) factor -> . cte
    (88) factor -> . PLUS cte
    (89) factor -> . MINUS cte
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID
    (47) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (90) cte -> . CTE_INT
    (91) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 110
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    ID              shift and go to state 113
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 115

    expr                           shift and go to state 144
    or                             shift and go to state 101
    and                            shift and go to state 102
    equal                          shift and go to state 103
    compare                        shift and go to state 104
    exp                            shift and go to state 105
    termino                        shift and go to state 106
    factor                         shift and go to state 109
    variable                       shift and go to state 99
    llamada                        shift and go to state 111
    cte                            shift and go to state 112

state 111

    (86) factor -> llamada .

    TIMES           reduce using rule 86 (factor -> llamada .)
    DIVIDE          reduce using rule 86 (factor -> llamada .)
    MODULE          reduce using rule 86 (factor -> llamada .)
    PLUS            reduce using rule 86 (factor -> llamada .)
    MINUS           reduce using rule 86 (factor -> llamada .)
    GREATER         reduce using rule 86 (factor -> llamada .)
    LESSER          reduce using rule 86 (factor -> llamada .)
    GREATER_EQUAL   reduce using rule 86 (factor -> llamada .)
    LESSER_EQUAL    reduce using rule 86 (factor -> llamada .)
    EQUAL           reduce using rule 86 (factor -> llamada .)
    NOT_EQUAL       reduce using rule 86 (factor -> llamada .)
    AND             reduce using rule 86 (factor -> llamada .)
    OR              reduce using rule 86 (factor -> llamada .)
    SEMICOLON       reduce using rule 86 (factor -> llamada .)
    COMMA           reduce using rule 86 (factor -> llamada .)
    C_PARENTHESIS   reduce using rule 86 (factor -> llamada .)
    C_ABRACKET      reduce using rule 86 (factor -> llamada .)
    TO              reduce using rule 86 (factor -> llamada .)
    O_CBRACKET      reduce using rule 86 (factor -> llamada .)


state 112

    (87) factor -> cte .

    TIMES           reduce using rule 87 (factor -> cte .)
    DIVIDE          reduce using rule 87 (factor -> cte .)
    MODULE          reduce using rule 87 (factor -> cte .)
    PLUS            reduce using rule 87 (factor -> cte .)
    MINUS           reduce using rule 87 (factor -> cte .)
    GREATER         reduce using rule 87 (factor -> cte .)
    LESSER          reduce using rule 87 (factor -> cte .)
    GREATER_EQUAL   reduce using rule 87 (factor -> cte .)
    LESSER_EQUAL    reduce using rule 87 (factor -> cte .)
    EQUAL           reduce using rule 87 (factor -> cte .)
    NOT_EQUAL       reduce using rule 87 (factor -> cte .)
    AND             reduce using rule 87 (factor -> cte .)
    OR              reduce using rule 87 (factor -> cte .)
    SEMICOLON       reduce using rule 87 (factor -> cte .)
    COMMA           reduce using rule 87 (factor -> cte .)
    C_PARENTHESIS   reduce using rule 87 (factor -> cte .)
    C_ABRACKET      reduce using rule 87 (factor -> cte .)
    TO              reduce using rule 87 (factor -> cte .)
    O_CBRACKET      reduce using rule 87 (factor -> cte .)


state 113

    (34) variable -> ID . O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (35) variable -> ID . O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> ID . O_ABRACKET exp C_ABRACKET
    (37) variable -> ID .
    (47) llamada -> ID . O_PARENTHESIS llamada_prime C_PARENTHESIS

    O_ABRACKET      shift and go to state 88
    TIMES           reduce using rule 37 (variable -> ID .)
    DIVIDE          reduce using rule 37 (variable -> ID .)
    MODULE          reduce using rule 37 (variable -> ID .)
    PLUS            reduce using rule 37 (variable -> ID .)
    MINUS           reduce using rule 37 (variable -> ID .)
    GREATER         reduce using rule 37 (variable -> ID .)
    LESSER          reduce using rule 37 (variable -> ID .)
    GREATER_EQUAL   reduce using rule 37 (variable -> ID .)
    LESSER_EQUAL    reduce using rule 37 (variable -> ID .)
    EQUAL           reduce using rule 37 (variable -> ID .)
    NOT_EQUAL       reduce using rule 37 (variable -> ID .)
    AND             reduce using rule 37 (variable -> ID .)
    OR              reduce using rule 37 (variable -> ID .)
    SEMICOLON       reduce using rule 37 (variable -> ID .)
    COMMA           reduce using rule 37 (variable -> ID .)
    C_PARENTHESIS   reduce using rule 37 (variable -> ID .)
    C_ABRACKET      reduce using rule 37 (variable -> ID .)
    TO              reduce using rule 37 (variable -> ID .)
    O_CBRACKET      reduce using rule 37 (variable -> ID .)
    O_PARENTHESIS   shift and go to state 87


state 114

    (90) cte -> CTE_INT .

    TIMES           reduce using rule 90 (cte -> CTE_INT .)
    DIVIDE          reduce using rule 90 (cte -> CTE_INT .)
    MODULE          reduce using rule 90 (cte -> CTE_INT .)
    PLUS            reduce using rule 90 (cte -> CTE_INT .)
    MINUS           reduce using rule 90 (cte -> CTE_INT .)
    GREATER         reduce using rule 90 (cte -> CTE_INT .)
    LESSER          reduce using rule 90 (cte -> CTE_INT .)
    GREATER_EQUAL   reduce using rule 90 (cte -> CTE_INT .)
    LESSER_EQUAL    reduce using rule 90 (cte -> CTE_INT .)
    EQUAL           reduce using rule 90 (cte -> CTE_INT .)
    NOT_EQUAL       reduce using rule 90 (cte -> CTE_INT .)
    AND             reduce using rule 90 (cte -> CTE_INT .)
    OR              reduce using rule 90 (cte -> CTE_INT .)
    SEMICOLON       reduce using rule 90 (cte -> CTE_INT .)
    COMMA           reduce using rule 90 (cte -> CTE_INT .)
    C_PARENTHESIS   reduce using rule 90 (cte -> CTE_INT .)
    C_ABRACKET      reduce using rule 90 (cte -> CTE_INT .)
    TO              reduce using rule 90 (cte -> CTE_INT .)
    O_CBRACKET      reduce using rule 90 (cte -> CTE_INT .)


state 115

    (91) cte -> CTE_FLOAT .

    TIMES           reduce using rule 91 (cte -> CTE_FLOAT .)
    DIVIDE          reduce using rule 91 (cte -> CTE_FLOAT .)
    MODULE          reduce using rule 91 (cte -> CTE_FLOAT .)
    PLUS            reduce using rule 91 (cte -> CTE_FLOAT .)
    MINUS           reduce using rule 91 (cte -> CTE_FLOAT .)
    GREATER         reduce using rule 91 (cte -> CTE_FLOAT .)
    LESSER          reduce using rule 91 (cte -> CTE_FLOAT .)
    GREATER_EQUAL   reduce using rule 91 (cte -> CTE_FLOAT .)
    LESSER_EQUAL    reduce using rule 91 (cte -> CTE_FLOAT .)
    EQUAL           reduce using rule 91 (cte -> CTE_FLOAT .)
    NOT_EQUAL       reduce using rule 91 (cte -> CTE_FLOAT .)
    AND             reduce using rule 91 (cte -> CTE_FLOAT .)
    OR              reduce using rule 91 (cte -> CTE_FLOAT .)
    SEMICOLON       reduce using rule 91 (cte -> CTE_FLOAT .)
    COMMA           reduce using rule 91 (cte -> CTE_FLOAT .)
    C_PARENTHESIS   reduce using rule 91 (cte -> CTE_FLOAT .)
    C_ABRACKET      reduce using rule 91 (cte -> CTE_FLOAT .)
    TO              reduce using rule 91 (cte -> CTE_FLOAT .)
    O_CBRACKET      reduce using rule 91 (cte -> CTE_FLOAT .)


state 116

    (47) llamada -> ID O_PARENTHESIS llamada_prime . C_PARENTHESIS

    C_PARENTHESIS   shift and go to state 145


state 117

    (48) llamada_prime -> exp .
    (49) llamada_prime -> exp . COMMA llamada_prime

    C_PARENTHESIS   reduce using rule 48 (llamada_prime -> exp .)
    COMMA           shift and go to state 146


state 118

    (34) variable -> ID O_ABRACKET exp . C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (35) variable -> ID O_ABRACKET exp . C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> ID O_ABRACKET exp . C_ABRACKET

    C_ABRACKET      shift and go to state 147


state 119

    (50) retorno -> RETURN O_PARENTHESIS expr . C_PARENTHESIS

    C_PARENTHESIS   shift and go to state 148


state 120

    (51) lectura -> READ O_PARENTHESIS lectura_prime . C_PARENTHESIS

    C_PARENTHESIS   shift and go to state 149


state 121

    (52) lectura_prime -> variable .
    (53) lectura_prime -> variable . COMMA lectura_prime

    C_PARENTHESIS   reduce using rule 52 (lectura_prime -> variable .)
    COMMA           shift and go to state 150


state 122

    (54) escritura -> WRITE O_PARENTHESIS escritura_prime . C_PARENTHESIS

    C_PARENTHESIS   shift and go to state 151


state 123

    (55) escritura_prime -> expr .
    (57) escritura_prime -> expr . COMMA escritura_prime

    C_PARENTHESIS   reduce using rule 55 (escritura_prime -> expr .)
    COMMA           shift and go to state 152


state 124

    (56) escritura_prime -> CTE_STRING .
    (58) escritura_prime -> CTE_STRING . COMMA escritura_prime

    C_PARENTHESIS   reduce using rule 56 (escritura_prime -> CTE_STRING .)
    COMMA           shift and go to state 153


state 125

    (59) decision -> IF O_PARENTHESIS expr . C_PARENTHESIS bloque else

    C_PARENTHESIS   shift and go to state 154


state 126

    (62) while -> WHILE O_PARENTHESIS expr . C_PARENTHESIS bloque

    C_PARENTHESIS   shift and go to state 155


state 127

    (63) for -> FOR variable ASSIGN . exp TO exp bloque
    (77) exp -> . termino
    (78) exp -> . termino PLUS exp
    (79) exp -> . termino MINUS exp
    (80) termino -> . factor
    (81) termino -> . factor TIMES termino
    (82) termino -> . factor DIVIDE termino
    (83) termino -> . factor MODULE termino
    (84) factor -> . variable
    (85) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (86) factor -> . llamada
    (87) factor -> . cte
    (88) factor -> . PLUS cte
    (89) factor -> . MINUS cte
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID
    (47) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (90) cte -> . CTE_INT
    (91) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 110
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    ID              shift and go to state 113
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 115

    variable                       shift and go to state 99
    exp                            shift and go to state 156
    termino                        shift and go to state 106
    factor                         shift and go to state 109
    llamada                        shift and go to state 111
    cte                            shift and go to state 112

state 128

    (12) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET . CTE_INT C_ABRACKET

    CTE_INT         shift and go to state 157


state 129

    (66) or -> and OR . or
    (65) or -> . and
    (66) or -> . and OR or
    (67) and -> . equal
    (68) and -> . equal AND and
    (69) equal -> . compare
    (70) equal -> . compare EQUAL compare
    (71) equal -> . compare NOT_EQUAL compare
    (72) compare -> . exp
    (73) compare -> . exp GREATER exp
    (74) compare -> . exp LESSER exp
    (75) compare -> . exp GREATER_EQUAL exp
    (76) compare -> . exp LESSER_EQUAL exp
    (77) exp -> . termino
    (78) exp -> . termino PLUS exp
    (79) exp -> . termino MINUS exp
    (80) termino -> . factor
    (81) termino -> . factor TIMES termino
    (82) termino -> . factor DIVIDE termino
    (83) termino -> . factor MODULE termino
    (84) factor -> . variable
    (85) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (86) factor -> . llamada
    (87) factor -> . cte
    (88) factor -> . PLUS cte
    (89) factor -> . MINUS cte
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID
    (47) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (90) cte -> . CTE_INT
    (91) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 110
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    ID              shift and go to state 113
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 115

    and                            shift and go to state 102
    or                             shift and go to state 158
    equal                          shift and go to state 103
    compare                        shift and go to state 104
    exp                            shift and go to state 105
    termino                        shift and go to state 106
    factor                         shift and go to state 109
    variable                       shift and go to state 99
    llamada                        shift and go to state 111
    cte                            shift and go to state 112

state 130

    (68) and -> equal AND . and
    (67) and -> . equal
    (68) and -> . equal AND and
    (69) equal -> . compare
    (70) equal -> . compare EQUAL compare
    (71) equal -> . compare NOT_EQUAL compare
    (72) compare -> . exp
    (73) compare -> . exp GREATER exp
    (74) compare -> . exp LESSER exp
    (75) compare -> . exp GREATER_EQUAL exp
    (76) compare -> . exp LESSER_EQUAL exp
    (77) exp -> . termino
    (78) exp -> . termino PLUS exp
    (79) exp -> . termino MINUS exp
    (80) termino -> . factor
    (81) termino -> . factor TIMES termino
    (82) termino -> . factor DIVIDE termino
    (83) termino -> . factor MODULE termino
    (84) factor -> . variable
    (85) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (86) factor -> . llamada
    (87) factor -> . cte
    (88) factor -> . PLUS cte
    (89) factor -> . MINUS cte
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID
    (47) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (90) cte -> . CTE_INT
    (91) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 110
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    ID              shift and go to state 113
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 115

    equal                          shift and go to state 103
    and                            shift and go to state 159
    compare                        shift and go to state 104
    exp                            shift and go to state 105
    termino                        shift and go to state 106
    factor                         shift and go to state 109
    variable                       shift and go to state 99
    llamada                        shift and go to state 111
    cte                            shift and go to state 112

state 131

    (70) equal -> compare EQUAL . compare
    (72) compare -> . exp
    (73) compare -> . exp GREATER exp
    (74) compare -> . exp LESSER exp
    (75) compare -> . exp GREATER_EQUAL exp
    (76) compare -> . exp LESSER_EQUAL exp
    (77) exp -> . termino
    (78) exp -> . termino PLUS exp
    (79) exp -> . termino MINUS exp
    (80) termino -> . factor
    (81) termino -> . factor TIMES termino
    (82) termino -> . factor DIVIDE termino
    (83) termino -> . factor MODULE termino
    (84) factor -> . variable
    (85) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (86) factor -> . llamada
    (87) factor -> . cte
    (88) factor -> . PLUS cte
    (89) factor -> . MINUS cte
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID
    (47) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (90) cte -> . CTE_INT
    (91) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 110
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    ID              shift and go to state 113
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 115

    compare                        shift and go to state 160
    exp                            shift and go to state 105
    termino                        shift and go to state 106
    factor                         shift and go to state 109
    variable                       shift and go to state 99
    llamada                        shift and go to state 111
    cte                            shift and go to state 112

state 132

    (71) equal -> compare NOT_EQUAL . compare
    (72) compare -> . exp
    (73) compare -> . exp GREATER exp
    (74) compare -> . exp LESSER exp
    (75) compare -> . exp GREATER_EQUAL exp
    (76) compare -> . exp LESSER_EQUAL exp
    (77) exp -> . termino
    (78) exp -> . termino PLUS exp
    (79) exp -> . termino MINUS exp
    (80) termino -> . factor
    (81) termino -> . factor TIMES termino
    (82) termino -> . factor DIVIDE termino
    (83) termino -> . factor MODULE termino
    (84) factor -> . variable
    (85) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (86) factor -> . llamada
    (87) factor -> . cte
    (88) factor -> . PLUS cte
    (89) factor -> . MINUS cte
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID
    (47) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (90) cte -> . CTE_INT
    (91) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 110
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    ID              shift and go to state 113
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 115

    compare                        shift and go to state 161
    exp                            shift and go to state 105
    termino                        shift and go to state 106
    factor                         shift and go to state 109
    variable                       shift and go to state 99
    llamada                        shift and go to state 111
    cte                            shift and go to state 112

state 133

    (73) compare -> exp GREATER . exp
    (77) exp -> . termino
    (78) exp -> . termino PLUS exp
    (79) exp -> . termino MINUS exp
    (80) termino -> . factor
    (81) termino -> . factor TIMES termino
    (82) termino -> . factor DIVIDE termino
    (83) termino -> . factor MODULE termino
    (84) factor -> . variable
    (85) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (86) factor -> . llamada
    (87) factor -> . cte
    (88) factor -> . PLUS cte
    (89) factor -> . MINUS cte
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID
    (47) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (90) cte -> . CTE_INT
    (91) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 110
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    ID              shift and go to state 113
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 115

    exp                            shift and go to state 162
    termino                        shift and go to state 106
    factor                         shift and go to state 109
    variable                       shift and go to state 99
    llamada                        shift and go to state 111
    cte                            shift and go to state 112

state 134

    (74) compare -> exp LESSER . exp
    (77) exp -> . termino
    (78) exp -> . termino PLUS exp
    (79) exp -> . termino MINUS exp
    (80) termino -> . factor
    (81) termino -> . factor TIMES termino
    (82) termino -> . factor DIVIDE termino
    (83) termino -> . factor MODULE termino
    (84) factor -> . variable
    (85) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (86) factor -> . llamada
    (87) factor -> . cte
    (88) factor -> . PLUS cte
    (89) factor -> . MINUS cte
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID
    (47) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (90) cte -> . CTE_INT
    (91) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 110
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    ID              shift and go to state 113
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 115

    exp                            shift and go to state 163
    termino                        shift and go to state 106
    factor                         shift and go to state 109
    variable                       shift and go to state 99
    llamada                        shift and go to state 111
    cte                            shift and go to state 112

state 135

    (75) compare -> exp GREATER_EQUAL . exp
    (77) exp -> . termino
    (78) exp -> . termino PLUS exp
    (79) exp -> . termino MINUS exp
    (80) termino -> . factor
    (81) termino -> . factor TIMES termino
    (82) termino -> . factor DIVIDE termino
    (83) termino -> . factor MODULE termino
    (84) factor -> . variable
    (85) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (86) factor -> . llamada
    (87) factor -> . cte
    (88) factor -> . PLUS cte
    (89) factor -> . MINUS cte
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID
    (47) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (90) cte -> . CTE_INT
    (91) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 110
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    ID              shift and go to state 113
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 115

    exp                            shift and go to state 164
    termino                        shift and go to state 106
    factor                         shift and go to state 109
    variable                       shift and go to state 99
    llamada                        shift and go to state 111
    cte                            shift and go to state 112

state 136

    (76) compare -> exp LESSER_EQUAL . exp
    (77) exp -> . termino
    (78) exp -> . termino PLUS exp
    (79) exp -> . termino MINUS exp
    (80) termino -> . factor
    (81) termino -> . factor TIMES termino
    (82) termino -> . factor DIVIDE termino
    (83) termino -> . factor MODULE termino
    (84) factor -> . variable
    (85) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (86) factor -> . llamada
    (87) factor -> . cte
    (88) factor -> . PLUS cte
    (89) factor -> . MINUS cte
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID
    (47) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (90) cte -> . CTE_INT
    (91) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 110
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    ID              shift and go to state 113
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 115

    exp                            shift and go to state 165
    termino                        shift and go to state 106
    factor                         shift and go to state 109
    variable                       shift and go to state 99
    llamada                        shift and go to state 111
    cte                            shift and go to state 112

state 137

    (78) exp -> termino PLUS . exp
    (77) exp -> . termino
    (78) exp -> . termino PLUS exp
    (79) exp -> . termino MINUS exp
    (80) termino -> . factor
    (81) termino -> . factor TIMES termino
    (82) termino -> . factor DIVIDE termino
    (83) termino -> . factor MODULE termino
    (84) factor -> . variable
    (85) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (86) factor -> . llamada
    (87) factor -> . cte
    (88) factor -> . PLUS cte
    (89) factor -> . MINUS cte
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID
    (47) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (90) cte -> . CTE_INT
    (91) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 110
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    ID              shift and go to state 113
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 115

    termino                        shift and go to state 106
    exp                            shift and go to state 166
    factor                         shift and go to state 109
    variable                       shift and go to state 99
    llamada                        shift and go to state 111
    cte                            shift and go to state 112

state 138

    (79) exp -> termino MINUS . exp
    (77) exp -> . termino
    (78) exp -> . termino PLUS exp
    (79) exp -> . termino MINUS exp
    (80) termino -> . factor
    (81) termino -> . factor TIMES termino
    (82) termino -> . factor DIVIDE termino
    (83) termino -> . factor MODULE termino
    (84) factor -> . variable
    (85) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (86) factor -> . llamada
    (87) factor -> . cte
    (88) factor -> . PLUS cte
    (89) factor -> . MINUS cte
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID
    (47) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (90) cte -> . CTE_INT
    (91) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 110
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    ID              shift and go to state 113
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 115

    termino                        shift and go to state 106
    exp                            shift and go to state 167
    factor                         shift and go to state 109
    variable                       shift and go to state 99
    llamada                        shift and go to state 111
    cte                            shift and go to state 112

state 139

    (88) factor -> PLUS cte .

    TIMES           reduce using rule 88 (factor -> PLUS cte .)
    DIVIDE          reduce using rule 88 (factor -> PLUS cte .)
    MODULE          reduce using rule 88 (factor -> PLUS cte .)
    PLUS            reduce using rule 88 (factor -> PLUS cte .)
    MINUS           reduce using rule 88 (factor -> PLUS cte .)
    GREATER         reduce using rule 88 (factor -> PLUS cte .)
    LESSER          reduce using rule 88 (factor -> PLUS cte .)
    GREATER_EQUAL   reduce using rule 88 (factor -> PLUS cte .)
    LESSER_EQUAL    reduce using rule 88 (factor -> PLUS cte .)
    EQUAL           reduce using rule 88 (factor -> PLUS cte .)
    NOT_EQUAL       reduce using rule 88 (factor -> PLUS cte .)
    AND             reduce using rule 88 (factor -> PLUS cte .)
    OR              reduce using rule 88 (factor -> PLUS cte .)
    SEMICOLON       reduce using rule 88 (factor -> PLUS cte .)
    COMMA           reduce using rule 88 (factor -> PLUS cte .)
    C_PARENTHESIS   reduce using rule 88 (factor -> PLUS cte .)
    C_ABRACKET      reduce using rule 88 (factor -> PLUS cte .)
    TO              reduce using rule 88 (factor -> PLUS cte .)
    O_CBRACKET      reduce using rule 88 (factor -> PLUS cte .)


state 140

    (89) factor -> MINUS cte .

    TIMES           reduce using rule 89 (factor -> MINUS cte .)
    DIVIDE          reduce using rule 89 (factor -> MINUS cte .)
    MODULE          reduce using rule 89 (factor -> MINUS cte .)
    PLUS            reduce using rule 89 (factor -> MINUS cte .)
    MINUS           reduce using rule 89 (factor -> MINUS cte .)
    GREATER         reduce using rule 89 (factor -> MINUS cte .)
    LESSER          reduce using rule 89 (factor -> MINUS cte .)
    GREATER_EQUAL   reduce using rule 89 (factor -> MINUS cte .)
    LESSER_EQUAL    reduce using rule 89 (factor -> MINUS cte .)
    EQUAL           reduce using rule 89 (factor -> MINUS cte .)
    NOT_EQUAL       reduce using rule 89 (factor -> MINUS cte .)
    AND             reduce using rule 89 (factor -> MINUS cte .)
    OR              reduce using rule 89 (factor -> MINUS cte .)
    SEMICOLON       reduce using rule 89 (factor -> MINUS cte .)
    COMMA           reduce using rule 89 (factor -> MINUS cte .)
    C_PARENTHESIS   reduce using rule 89 (factor -> MINUS cte .)
    C_ABRACKET      reduce using rule 89 (factor -> MINUS cte .)
    TO              reduce using rule 89 (factor -> MINUS cte .)
    O_CBRACKET      reduce using rule 89 (factor -> MINUS cte .)


state 141

    (81) termino -> factor TIMES . termino
    (80) termino -> . factor
    (81) termino -> . factor TIMES termino
    (82) termino -> . factor DIVIDE termino
    (83) termino -> . factor MODULE termino
    (84) factor -> . variable
    (85) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (86) factor -> . llamada
    (87) factor -> . cte
    (88) factor -> . PLUS cte
    (89) factor -> . MINUS cte
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID
    (47) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (90) cte -> . CTE_INT
    (91) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 110
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    ID              shift and go to state 113
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 115

    factor                         shift and go to state 109
    termino                        shift and go to state 168
    variable                       shift and go to state 99
    llamada                        shift and go to state 111
    cte                            shift and go to state 112

state 142

    (82) termino -> factor DIVIDE . termino
    (80) termino -> . factor
    (81) termino -> . factor TIMES termino
    (82) termino -> . factor DIVIDE termino
    (83) termino -> . factor MODULE termino
    (84) factor -> . variable
    (85) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (86) factor -> . llamada
    (87) factor -> . cte
    (88) factor -> . PLUS cte
    (89) factor -> . MINUS cte
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID
    (47) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (90) cte -> . CTE_INT
    (91) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 110
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    ID              shift and go to state 113
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 115

    factor                         shift and go to state 109
    termino                        shift and go to state 169
    variable                       shift and go to state 99
    llamada                        shift and go to state 111
    cte                            shift and go to state 112

state 143

    (83) termino -> factor MODULE . termino
    (80) termino -> . factor
    (81) termino -> . factor TIMES termino
    (82) termino -> . factor DIVIDE termino
    (83) termino -> . factor MODULE termino
    (84) factor -> . variable
    (85) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (86) factor -> . llamada
    (87) factor -> . cte
    (88) factor -> . PLUS cte
    (89) factor -> . MINUS cte
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID
    (47) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (90) cte -> . CTE_INT
    (91) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 110
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    ID              shift and go to state 113
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 115

    factor                         shift and go to state 109
    termino                        shift and go to state 170
    variable                       shift and go to state 99
    llamada                        shift and go to state 111
    cte                            shift and go to state 112

state 144

    (85) factor -> O_PARENTHESIS expr . C_PARENTHESIS

    C_PARENTHESIS   shift and go to state 171


state 145

    (47) llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .

    SEMICOLON       reduce using rule 47 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    TIMES           reduce using rule 47 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    DIVIDE          reduce using rule 47 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    MODULE          reduce using rule 47 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    PLUS            reduce using rule 47 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    MINUS           reduce using rule 47 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    GREATER         reduce using rule 47 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    LESSER          reduce using rule 47 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    GREATER_EQUAL   reduce using rule 47 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    LESSER_EQUAL    reduce using rule 47 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    EQUAL           reduce using rule 47 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    NOT_EQUAL       reduce using rule 47 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    AND             reduce using rule 47 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    OR              reduce using rule 47 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    COMMA           reduce using rule 47 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    C_PARENTHESIS   reduce using rule 47 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    C_ABRACKET      reduce using rule 47 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    TO              reduce using rule 47 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    O_CBRACKET      reduce using rule 47 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)


state 146

    (49) llamada_prime -> exp COMMA . llamada_prime
    (48) llamada_prime -> . exp
    (49) llamada_prime -> . exp COMMA llamada_prime
    (77) exp -> . termino
    (78) exp -> . termino PLUS exp
    (79) exp -> . termino MINUS exp
    (80) termino -> . factor
    (81) termino -> . factor TIMES termino
    (82) termino -> . factor DIVIDE termino
    (83) termino -> . factor MODULE termino
    (84) factor -> . variable
    (85) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (86) factor -> . llamada
    (87) factor -> . cte
    (88) factor -> . PLUS cte
    (89) factor -> . MINUS cte
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID
    (47) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (90) cte -> . CTE_INT
    (91) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 110
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    ID              shift and go to state 113
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 115

    exp                            shift and go to state 117
    llamada_prime                  shift and go to state 172
    termino                        shift and go to state 106
    factor                         shift and go to state 109
    variable                       shift and go to state 99
    llamada                        shift and go to state 111
    cte                            shift and go to state 112

state 147

    (34) variable -> ID O_ABRACKET exp C_ABRACKET . O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (35) variable -> ID O_ABRACKET exp C_ABRACKET . O_ABRACKET exp C_ABRACKET
    (36) variable -> ID O_ABRACKET exp C_ABRACKET .

    O_ABRACKET      shift and go to state 173
    ASSIGN          reduce using rule 36 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    TIMES           reduce using rule 36 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    DIVIDE          reduce using rule 36 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    MODULE          reduce using rule 36 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    PLUS            reduce using rule 36 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    MINUS           reduce using rule 36 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    GREATER         reduce using rule 36 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    LESSER          reduce using rule 36 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    GREATER_EQUAL   reduce using rule 36 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    LESSER_EQUAL    reduce using rule 36 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    EQUAL           reduce using rule 36 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    NOT_EQUAL       reduce using rule 36 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    AND             reduce using rule 36 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    OR              reduce using rule 36 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    SEMICOLON       reduce using rule 36 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    COMMA           reduce using rule 36 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    C_PARENTHESIS   reduce using rule 36 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    C_ABRACKET      reduce using rule 36 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    TO              reduce using rule 36 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    O_CBRACKET      reduce using rule 36 (variable -> ID O_ABRACKET exp C_ABRACKET .)


state 148

    (50) retorno -> RETURN O_PARENTHESIS expr C_PARENTHESIS .

    SEMICOLON       reduce using rule 50 (retorno -> RETURN O_PARENTHESIS expr C_PARENTHESIS .)


state 149

    (51) lectura -> READ O_PARENTHESIS lectura_prime C_PARENTHESIS .

    SEMICOLON       reduce using rule 51 (lectura -> READ O_PARENTHESIS lectura_prime C_PARENTHESIS .)


state 150

    (53) lectura_prime -> variable COMMA . lectura_prime
    (52) lectura_prime -> . variable
    (53) lectura_prime -> . variable COMMA lectura_prime
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID

    ID              shift and go to state 95

    variable                       shift and go to state 121
    lectura_prime                  shift and go to state 174

state 151

    (54) escritura -> WRITE O_PARENTHESIS escritura_prime C_PARENTHESIS .

    SEMICOLON       reduce using rule 54 (escritura -> WRITE O_PARENTHESIS escritura_prime C_PARENTHESIS .)


state 152

    (57) escritura_prime -> expr COMMA . escritura_prime
    (55) escritura_prime -> . expr
    (56) escritura_prime -> . CTE_STRING
    (57) escritura_prime -> . expr COMMA escritura_prime
    (58) escritura_prime -> . CTE_STRING COMMA escritura_prime
    (64) expr -> . or
    (65) or -> . and
    (66) or -> . and OR or
    (67) and -> . equal
    (68) and -> . equal AND and
    (69) equal -> . compare
    (70) equal -> . compare EQUAL compare
    (71) equal -> . compare NOT_EQUAL compare
    (72) compare -> . exp
    (73) compare -> . exp GREATER exp
    (74) compare -> . exp LESSER exp
    (75) compare -> . exp GREATER_EQUAL exp
    (76) compare -> . exp LESSER_EQUAL exp
    (77) exp -> . termino
    (78) exp -> . termino PLUS exp
    (79) exp -> . termino MINUS exp
    (80) termino -> . factor
    (81) termino -> . factor TIMES termino
    (82) termino -> . factor DIVIDE termino
    (83) termino -> . factor MODULE termino
    (84) factor -> . variable
    (85) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (86) factor -> . llamada
    (87) factor -> . cte
    (88) factor -> . PLUS cte
    (89) factor -> . MINUS cte
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID
    (47) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (90) cte -> . CTE_INT
    (91) cte -> . CTE_FLOAT

    CTE_STRING      shift and go to state 124
    O_PARENTHESIS   shift and go to state 110
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    ID              shift and go to state 113
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 115

    expr                           shift and go to state 123
    escritura_prime                shift and go to state 175
    or                             shift and go to state 101
    and                            shift and go to state 102
    equal                          shift and go to state 103
    compare                        shift and go to state 104
    exp                            shift and go to state 105
    termino                        shift and go to state 106
    factor                         shift and go to state 109
    variable                       shift and go to state 99
    llamada                        shift and go to state 111
    cte                            shift and go to state 112

state 153

    (58) escritura_prime -> CTE_STRING COMMA . escritura_prime
    (55) escritura_prime -> . expr
    (56) escritura_prime -> . CTE_STRING
    (57) escritura_prime -> . expr COMMA escritura_prime
    (58) escritura_prime -> . CTE_STRING COMMA escritura_prime
    (64) expr -> . or
    (65) or -> . and
    (66) or -> . and OR or
    (67) and -> . equal
    (68) and -> . equal AND and
    (69) equal -> . compare
    (70) equal -> . compare EQUAL compare
    (71) equal -> . compare NOT_EQUAL compare
    (72) compare -> . exp
    (73) compare -> . exp GREATER exp
    (74) compare -> . exp LESSER exp
    (75) compare -> . exp GREATER_EQUAL exp
    (76) compare -> . exp LESSER_EQUAL exp
    (77) exp -> . termino
    (78) exp -> . termino PLUS exp
    (79) exp -> . termino MINUS exp
    (80) termino -> . factor
    (81) termino -> . factor TIMES termino
    (82) termino -> . factor DIVIDE termino
    (83) termino -> . factor MODULE termino
    (84) factor -> . variable
    (85) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (86) factor -> . llamada
    (87) factor -> . cte
    (88) factor -> . PLUS cte
    (89) factor -> . MINUS cte
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID
    (47) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (90) cte -> . CTE_INT
    (91) cte -> . CTE_FLOAT

    CTE_STRING      shift and go to state 124
    O_PARENTHESIS   shift and go to state 110
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    ID              shift and go to state 113
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 115

    escritura_prime                shift and go to state 176
    expr                           shift and go to state 123
    or                             shift and go to state 101
    and                            shift and go to state 102
    equal                          shift and go to state 103
    compare                        shift and go to state 104
    exp                            shift and go to state 105
    termino                        shift and go to state 106
    factor                         shift and go to state 109
    variable                       shift and go to state 99
    llamada                        shift and go to state 111
    cte                            shift and go to state 112

state 154

    (59) decision -> IF O_PARENTHESIS expr C_PARENTHESIS . bloque else
    (2) bloque -> . O_CBRACKET bloque_prime C_CBRACKET

    O_CBRACKET      shift and go to state 52

    bloque                         shift and go to state 177

state 155

    (62) while -> WHILE O_PARENTHESIS expr C_PARENTHESIS . bloque
    (2) bloque -> . O_CBRACKET bloque_prime C_CBRACKET

    O_CBRACKET      shift and go to state 52

    bloque                         shift and go to state 178

state 156

    (63) for -> FOR variable ASSIGN exp . TO exp bloque

    TO              shift and go to state 179


state 157

    (12) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT . C_ABRACKET

    C_ABRACKET      shift and go to state 180


state 158

    (66) or -> and OR or .

    SEMICOLON       reduce using rule 66 (or -> and OR or .)
    C_PARENTHESIS   reduce using rule 66 (or -> and OR or .)
    COMMA           reduce using rule 66 (or -> and OR or .)


state 159

    (68) and -> equal AND and .

    OR              reduce using rule 68 (and -> equal AND and .)
    SEMICOLON       reduce using rule 68 (and -> equal AND and .)
    C_PARENTHESIS   reduce using rule 68 (and -> equal AND and .)
    COMMA           reduce using rule 68 (and -> equal AND and .)


state 160

    (70) equal -> compare EQUAL compare .

    AND             reduce using rule 70 (equal -> compare EQUAL compare .)
    OR              reduce using rule 70 (equal -> compare EQUAL compare .)
    SEMICOLON       reduce using rule 70 (equal -> compare EQUAL compare .)
    C_PARENTHESIS   reduce using rule 70 (equal -> compare EQUAL compare .)
    COMMA           reduce using rule 70 (equal -> compare EQUAL compare .)


state 161

    (71) equal -> compare NOT_EQUAL compare .

    AND             reduce using rule 71 (equal -> compare NOT_EQUAL compare .)
    OR              reduce using rule 71 (equal -> compare NOT_EQUAL compare .)
    SEMICOLON       reduce using rule 71 (equal -> compare NOT_EQUAL compare .)
    C_PARENTHESIS   reduce using rule 71 (equal -> compare NOT_EQUAL compare .)
    COMMA           reduce using rule 71 (equal -> compare NOT_EQUAL compare .)


state 162

    (73) compare -> exp GREATER exp .

    EQUAL           reduce using rule 73 (compare -> exp GREATER exp .)
    NOT_EQUAL       reduce using rule 73 (compare -> exp GREATER exp .)
    AND             reduce using rule 73 (compare -> exp GREATER exp .)
    OR              reduce using rule 73 (compare -> exp GREATER exp .)
    SEMICOLON       reduce using rule 73 (compare -> exp GREATER exp .)
    C_PARENTHESIS   reduce using rule 73 (compare -> exp GREATER exp .)
    COMMA           reduce using rule 73 (compare -> exp GREATER exp .)


state 163

    (74) compare -> exp LESSER exp .

    EQUAL           reduce using rule 74 (compare -> exp LESSER exp .)
    NOT_EQUAL       reduce using rule 74 (compare -> exp LESSER exp .)
    AND             reduce using rule 74 (compare -> exp LESSER exp .)
    OR              reduce using rule 74 (compare -> exp LESSER exp .)
    SEMICOLON       reduce using rule 74 (compare -> exp LESSER exp .)
    C_PARENTHESIS   reduce using rule 74 (compare -> exp LESSER exp .)
    COMMA           reduce using rule 74 (compare -> exp LESSER exp .)


state 164

    (75) compare -> exp GREATER_EQUAL exp .

    EQUAL           reduce using rule 75 (compare -> exp GREATER_EQUAL exp .)
    NOT_EQUAL       reduce using rule 75 (compare -> exp GREATER_EQUAL exp .)
    AND             reduce using rule 75 (compare -> exp GREATER_EQUAL exp .)
    OR              reduce using rule 75 (compare -> exp GREATER_EQUAL exp .)
    SEMICOLON       reduce using rule 75 (compare -> exp GREATER_EQUAL exp .)
    C_PARENTHESIS   reduce using rule 75 (compare -> exp GREATER_EQUAL exp .)
    COMMA           reduce using rule 75 (compare -> exp GREATER_EQUAL exp .)


state 165

    (76) compare -> exp LESSER_EQUAL exp .

    EQUAL           reduce using rule 76 (compare -> exp LESSER_EQUAL exp .)
    NOT_EQUAL       reduce using rule 76 (compare -> exp LESSER_EQUAL exp .)
    AND             reduce using rule 76 (compare -> exp LESSER_EQUAL exp .)
    OR              reduce using rule 76 (compare -> exp LESSER_EQUAL exp .)
    SEMICOLON       reduce using rule 76 (compare -> exp LESSER_EQUAL exp .)
    C_PARENTHESIS   reduce using rule 76 (compare -> exp LESSER_EQUAL exp .)
    COMMA           reduce using rule 76 (compare -> exp LESSER_EQUAL exp .)


state 166

    (78) exp -> termino PLUS exp .

    GREATER         reduce using rule 78 (exp -> termino PLUS exp .)
    LESSER          reduce using rule 78 (exp -> termino PLUS exp .)
    GREATER_EQUAL   reduce using rule 78 (exp -> termino PLUS exp .)
    LESSER_EQUAL    reduce using rule 78 (exp -> termino PLUS exp .)
    EQUAL           reduce using rule 78 (exp -> termino PLUS exp .)
    NOT_EQUAL       reduce using rule 78 (exp -> termino PLUS exp .)
    AND             reduce using rule 78 (exp -> termino PLUS exp .)
    OR              reduce using rule 78 (exp -> termino PLUS exp .)
    SEMICOLON       reduce using rule 78 (exp -> termino PLUS exp .)
    COMMA           reduce using rule 78 (exp -> termino PLUS exp .)
    C_PARENTHESIS   reduce using rule 78 (exp -> termino PLUS exp .)
    C_ABRACKET      reduce using rule 78 (exp -> termino PLUS exp .)
    TO              reduce using rule 78 (exp -> termino PLUS exp .)
    O_CBRACKET      reduce using rule 78 (exp -> termino PLUS exp .)


state 167

    (79) exp -> termino MINUS exp .

    GREATER         reduce using rule 79 (exp -> termino MINUS exp .)
    LESSER          reduce using rule 79 (exp -> termino MINUS exp .)
    GREATER_EQUAL   reduce using rule 79 (exp -> termino MINUS exp .)
    LESSER_EQUAL    reduce using rule 79 (exp -> termino MINUS exp .)
    EQUAL           reduce using rule 79 (exp -> termino MINUS exp .)
    NOT_EQUAL       reduce using rule 79 (exp -> termino MINUS exp .)
    AND             reduce using rule 79 (exp -> termino MINUS exp .)
    OR              reduce using rule 79 (exp -> termino MINUS exp .)
    SEMICOLON       reduce using rule 79 (exp -> termino MINUS exp .)
    COMMA           reduce using rule 79 (exp -> termino MINUS exp .)
    C_PARENTHESIS   reduce using rule 79 (exp -> termino MINUS exp .)
    C_ABRACKET      reduce using rule 79 (exp -> termino MINUS exp .)
    TO              reduce using rule 79 (exp -> termino MINUS exp .)
    O_CBRACKET      reduce using rule 79 (exp -> termino MINUS exp .)


state 168

    (81) termino -> factor TIMES termino .

    PLUS            reduce using rule 81 (termino -> factor TIMES termino .)
    MINUS           reduce using rule 81 (termino -> factor TIMES termino .)
    GREATER         reduce using rule 81 (termino -> factor TIMES termino .)
    LESSER          reduce using rule 81 (termino -> factor TIMES termino .)
    GREATER_EQUAL   reduce using rule 81 (termino -> factor TIMES termino .)
    LESSER_EQUAL    reduce using rule 81 (termino -> factor TIMES termino .)
    EQUAL           reduce using rule 81 (termino -> factor TIMES termino .)
    NOT_EQUAL       reduce using rule 81 (termino -> factor TIMES termino .)
    AND             reduce using rule 81 (termino -> factor TIMES termino .)
    OR              reduce using rule 81 (termino -> factor TIMES termino .)
    SEMICOLON       reduce using rule 81 (termino -> factor TIMES termino .)
    COMMA           reduce using rule 81 (termino -> factor TIMES termino .)
    C_PARENTHESIS   reduce using rule 81 (termino -> factor TIMES termino .)
    C_ABRACKET      reduce using rule 81 (termino -> factor TIMES termino .)
    TO              reduce using rule 81 (termino -> factor TIMES termino .)
    O_CBRACKET      reduce using rule 81 (termino -> factor TIMES termino .)


state 169

    (82) termino -> factor DIVIDE termino .

    PLUS            reduce using rule 82 (termino -> factor DIVIDE termino .)
    MINUS           reduce using rule 82 (termino -> factor DIVIDE termino .)
    GREATER         reduce using rule 82 (termino -> factor DIVIDE termino .)
    LESSER          reduce using rule 82 (termino -> factor DIVIDE termino .)
    GREATER_EQUAL   reduce using rule 82 (termino -> factor DIVIDE termino .)
    LESSER_EQUAL    reduce using rule 82 (termino -> factor DIVIDE termino .)
    EQUAL           reduce using rule 82 (termino -> factor DIVIDE termino .)
    NOT_EQUAL       reduce using rule 82 (termino -> factor DIVIDE termino .)
    AND             reduce using rule 82 (termino -> factor DIVIDE termino .)
    OR              reduce using rule 82 (termino -> factor DIVIDE termino .)
    SEMICOLON       reduce using rule 82 (termino -> factor DIVIDE termino .)
    COMMA           reduce using rule 82 (termino -> factor DIVIDE termino .)
    C_PARENTHESIS   reduce using rule 82 (termino -> factor DIVIDE termino .)
    C_ABRACKET      reduce using rule 82 (termino -> factor DIVIDE termino .)
    TO              reduce using rule 82 (termino -> factor DIVIDE termino .)
    O_CBRACKET      reduce using rule 82 (termino -> factor DIVIDE termino .)


state 170

    (83) termino -> factor MODULE termino .

    PLUS            reduce using rule 83 (termino -> factor MODULE termino .)
    MINUS           reduce using rule 83 (termino -> factor MODULE termino .)
    GREATER         reduce using rule 83 (termino -> factor MODULE termino .)
    LESSER          reduce using rule 83 (termino -> factor MODULE termino .)
    GREATER_EQUAL   reduce using rule 83 (termino -> factor MODULE termino .)
    LESSER_EQUAL    reduce using rule 83 (termino -> factor MODULE termino .)
    EQUAL           reduce using rule 83 (termino -> factor MODULE termino .)
    NOT_EQUAL       reduce using rule 83 (termino -> factor MODULE termino .)
    AND             reduce using rule 83 (termino -> factor MODULE termino .)
    OR              reduce using rule 83 (termino -> factor MODULE termino .)
    SEMICOLON       reduce using rule 83 (termino -> factor MODULE termino .)
    COMMA           reduce using rule 83 (termino -> factor MODULE termino .)
    C_PARENTHESIS   reduce using rule 83 (termino -> factor MODULE termino .)
    C_ABRACKET      reduce using rule 83 (termino -> factor MODULE termino .)
    TO              reduce using rule 83 (termino -> factor MODULE termino .)
    O_CBRACKET      reduce using rule 83 (termino -> factor MODULE termino .)


state 171

    (85) factor -> O_PARENTHESIS expr C_PARENTHESIS .

    TIMES           reduce using rule 85 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    DIVIDE          reduce using rule 85 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    MODULE          reduce using rule 85 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    PLUS            reduce using rule 85 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    MINUS           reduce using rule 85 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    GREATER         reduce using rule 85 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    LESSER          reduce using rule 85 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    GREATER_EQUAL   reduce using rule 85 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    LESSER_EQUAL    reduce using rule 85 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    EQUAL           reduce using rule 85 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    NOT_EQUAL       reduce using rule 85 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    AND             reduce using rule 85 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    OR              reduce using rule 85 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    SEMICOLON       reduce using rule 85 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    COMMA           reduce using rule 85 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    C_PARENTHESIS   reduce using rule 85 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    C_ABRACKET      reduce using rule 85 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    TO              reduce using rule 85 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    O_CBRACKET      reduce using rule 85 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)


state 172

    (49) llamada_prime -> exp COMMA llamada_prime .

    C_PARENTHESIS   reduce using rule 49 (llamada_prime -> exp COMMA llamada_prime .)


state 173

    (34) variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET . exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (35) variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET . exp C_ABRACKET
    (77) exp -> . termino
    (78) exp -> . termino PLUS exp
    (79) exp -> . termino MINUS exp
    (80) termino -> . factor
    (81) termino -> . factor TIMES termino
    (82) termino -> . factor DIVIDE termino
    (83) termino -> . factor MODULE termino
    (84) factor -> . variable
    (85) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (86) factor -> . llamada
    (87) factor -> . cte
    (88) factor -> . PLUS cte
    (89) factor -> . MINUS cte
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID
    (47) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (90) cte -> . CTE_INT
    (91) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 110
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    ID              shift and go to state 113
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 115

    exp                            shift and go to state 181
    termino                        shift and go to state 106
    factor                         shift and go to state 109
    variable                       shift and go to state 99
    llamada                        shift and go to state 111
    cte                            shift and go to state 112

state 174

    (53) lectura_prime -> variable COMMA lectura_prime .

    C_PARENTHESIS   reduce using rule 53 (lectura_prime -> variable COMMA lectura_prime .)


state 175

    (57) escritura_prime -> expr COMMA escritura_prime .

    C_PARENTHESIS   reduce using rule 57 (escritura_prime -> expr COMMA escritura_prime .)


state 176

    (58) escritura_prime -> CTE_STRING COMMA escritura_prime .

    C_PARENTHESIS   reduce using rule 58 (escritura_prime -> CTE_STRING COMMA escritura_prime .)


state 177

    (59) decision -> IF O_PARENTHESIS expr C_PARENTHESIS bloque . else
    (60) else -> . ELSE bloque
    (61) else -> . epsilon
    (92) epsilon -> .

    ELSE            shift and go to state 183
    ID              reduce using rule 92 (epsilon -> .)
    RETURN          reduce using rule 92 (epsilon -> .)
    READ            reduce using rule 92 (epsilon -> .)
    WRITE           reduce using rule 92 (epsilon -> .)
    IF              reduce using rule 92 (epsilon -> .)
    WHILE           reduce using rule 92 (epsilon -> .)
    FOR             reduce using rule 92 (epsilon -> .)
    C_CBRACKET      reduce using rule 92 (epsilon -> .)

    else                           shift and go to state 182
    epsilon                        shift and go to state 184

state 178

    (62) while -> WHILE O_PARENTHESIS expr C_PARENTHESIS bloque .

    ID              reduce using rule 62 (while -> WHILE O_PARENTHESIS expr C_PARENTHESIS bloque .)
    RETURN          reduce using rule 62 (while -> WHILE O_PARENTHESIS expr C_PARENTHESIS bloque .)
    READ            reduce using rule 62 (while -> WHILE O_PARENTHESIS expr C_PARENTHESIS bloque .)
    WRITE           reduce using rule 62 (while -> WHILE O_PARENTHESIS expr C_PARENTHESIS bloque .)
    IF              reduce using rule 62 (while -> WHILE O_PARENTHESIS expr C_PARENTHESIS bloque .)
    WHILE           reduce using rule 62 (while -> WHILE O_PARENTHESIS expr C_PARENTHESIS bloque .)
    FOR             reduce using rule 62 (while -> WHILE O_PARENTHESIS expr C_PARENTHESIS bloque .)
    C_CBRACKET      reduce using rule 62 (while -> WHILE O_PARENTHESIS expr C_PARENTHESIS bloque .)


state 179

    (63) for -> FOR variable ASSIGN exp TO . exp bloque
    (77) exp -> . termino
    (78) exp -> . termino PLUS exp
    (79) exp -> . termino MINUS exp
    (80) termino -> . factor
    (81) termino -> . factor TIMES termino
    (82) termino -> . factor DIVIDE termino
    (83) termino -> . factor MODULE termino
    (84) factor -> . variable
    (85) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (86) factor -> . llamada
    (87) factor -> . cte
    (88) factor -> . PLUS cte
    (89) factor -> . MINUS cte
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID
    (47) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (90) cte -> . CTE_INT
    (91) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 110
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    ID              shift and go to state 113
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 115

    variable                       shift and go to state 99
    exp                            shift and go to state 185
    termino                        shift and go to state 106
    factor                         shift and go to state 109
    llamada                        shift and go to state 111
    cte                            shift and go to state 112

state 180

    (12) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET .

    COMMA           reduce using rule 12 (declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET .)
    COLON           reduce using rule 12 (declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET .)


state 181

    (34) variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp . C_ABRACKET O_ABRACKET exp C_ABRACKET
    (35) variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp . C_ABRACKET

    C_ABRACKET      shift and go to state 186


state 182

    (59) decision -> IF O_PARENTHESIS expr C_PARENTHESIS bloque else .

    ID              reduce using rule 59 (decision -> IF O_PARENTHESIS expr C_PARENTHESIS bloque else .)
    RETURN          reduce using rule 59 (decision -> IF O_PARENTHESIS expr C_PARENTHESIS bloque else .)
    READ            reduce using rule 59 (decision -> IF O_PARENTHESIS expr C_PARENTHESIS bloque else .)
    WRITE           reduce using rule 59 (decision -> IF O_PARENTHESIS expr C_PARENTHESIS bloque else .)
    IF              reduce using rule 59 (decision -> IF O_PARENTHESIS expr C_PARENTHESIS bloque else .)
    WHILE           reduce using rule 59 (decision -> IF O_PARENTHESIS expr C_PARENTHESIS bloque else .)
    FOR             reduce using rule 59 (decision -> IF O_PARENTHESIS expr C_PARENTHESIS bloque else .)
    C_CBRACKET      reduce using rule 59 (decision -> IF O_PARENTHESIS expr C_PARENTHESIS bloque else .)


state 183

    (60) else -> ELSE . bloque
    (2) bloque -> . O_CBRACKET bloque_prime C_CBRACKET

    O_CBRACKET      shift and go to state 52

    bloque                         shift and go to state 187

state 184

    (61) else -> epsilon .

    ID              reduce using rule 61 (else -> epsilon .)
    RETURN          reduce using rule 61 (else -> epsilon .)
    READ            reduce using rule 61 (else -> epsilon .)
    WRITE           reduce using rule 61 (else -> epsilon .)
    IF              reduce using rule 61 (else -> epsilon .)
    WHILE           reduce using rule 61 (else -> epsilon .)
    FOR             reduce using rule 61 (else -> epsilon .)
    C_CBRACKET      reduce using rule 61 (else -> epsilon .)


state 185

    (63) for -> FOR variable ASSIGN exp TO exp . bloque
    (2) bloque -> . O_CBRACKET bloque_prime C_CBRACKET

    O_CBRACKET      shift and go to state 52

    bloque                         shift and go to state 188

state 186

    (34) variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET . O_ABRACKET exp C_ABRACKET
    (35) variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .

    O_ABRACKET      shift and go to state 189
    ASSIGN          reduce using rule 35 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    TIMES           reduce using rule 35 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    DIVIDE          reduce using rule 35 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    MODULE          reduce using rule 35 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    PLUS            reduce using rule 35 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    MINUS           reduce using rule 35 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    GREATER         reduce using rule 35 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    LESSER          reduce using rule 35 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    GREATER_EQUAL   reduce using rule 35 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    LESSER_EQUAL    reduce using rule 35 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    EQUAL           reduce using rule 35 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    NOT_EQUAL       reduce using rule 35 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    AND             reduce using rule 35 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    OR              reduce using rule 35 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    SEMICOLON       reduce using rule 35 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    COMMA           reduce using rule 35 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    C_PARENTHESIS   reduce using rule 35 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    C_ABRACKET      reduce using rule 35 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    TO              reduce using rule 35 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    O_CBRACKET      reduce using rule 35 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)


state 187

    (60) else -> ELSE bloque .

    ID              reduce using rule 60 (else -> ELSE bloque .)
    RETURN          reduce using rule 60 (else -> ELSE bloque .)
    READ            reduce using rule 60 (else -> ELSE bloque .)
    WRITE           reduce using rule 60 (else -> ELSE bloque .)
    IF              reduce using rule 60 (else -> ELSE bloque .)
    WHILE           reduce using rule 60 (else -> ELSE bloque .)
    FOR             reduce using rule 60 (else -> ELSE bloque .)
    C_CBRACKET      reduce using rule 60 (else -> ELSE bloque .)


state 188

    (63) for -> FOR variable ASSIGN exp TO exp bloque .

    ID              reduce using rule 63 (for -> FOR variable ASSIGN exp TO exp bloque .)
    RETURN          reduce using rule 63 (for -> FOR variable ASSIGN exp TO exp bloque .)
    READ            reduce using rule 63 (for -> FOR variable ASSIGN exp TO exp bloque .)
    WRITE           reduce using rule 63 (for -> FOR variable ASSIGN exp TO exp bloque .)
    IF              reduce using rule 63 (for -> FOR variable ASSIGN exp TO exp bloque .)
    WHILE           reduce using rule 63 (for -> FOR variable ASSIGN exp TO exp bloque .)
    FOR             reduce using rule 63 (for -> FOR variable ASSIGN exp TO exp bloque .)
    C_CBRACKET      reduce using rule 63 (for -> FOR variable ASSIGN exp TO exp bloque .)


state 189

    (34) variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET . exp C_ABRACKET
    (77) exp -> . termino
    (78) exp -> . termino PLUS exp
    (79) exp -> . termino MINUS exp
    (80) termino -> . factor
    (81) termino -> . factor TIMES termino
    (82) termino -> . factor DIVIDE termino
    (83) termino -> . factor MODULE termino
    (84) factor -> . variable
    (85) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (86) factor -> . llamada
    (87) factor -> . cte
    (88) factor -> . PLUS cte
    (89) factor -> . MINUS cte
    (34) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID
    (47) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (90) cte -> . CTE_INT
    (91) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 110
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    ID              shift and go to state 113
    CTE_INT         shift and go to state 114
    CTE_FLOAT       shift and go to state 115

    exp                            shift and go to state 190
    termino                        shift and go to state 106
    factor                         shift and go to state 109
    variable                       shift and go to state 99
    llamada                        shift and go to state 111
    cte                            shift and go to state 112

state 190

    (34) variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp . C_ABRACKET

    C_ABRACKET      shift and go to state 191


state 191

    (34) variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .

    ASSIGN          reduce using rule 34 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    TIMES           reduce using rule 34 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    DIVIDE          reduce using rule 34 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    MODULE          reduce using rule 34 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    PLUS            reduce using rule 34 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    MINUS           reduce using rule 34 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    GREATER         reduce using rule 34 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    LESSER          reduce using rule 34 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    GREATER_EQUAL   reduce using rule 34 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    LESSER_EQUAL    reduce using rule 34 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    EQUAL           reduce using rule 34 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    NOT_EQUAL       reduce using rule 34 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    AND             reduce using rule 34 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    OR              reduce using rule 34 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    SEMICOLON       reduce using rule 34 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    COMMA           reduce using rule 34 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    C_PARENTHESIS   reduce using rule 34 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    C_ABRACKET      reduce using rule 34 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    TO              reduce using rule 34 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    O_CBRACKET      reduce using rule 34 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)

