Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CTE_CHAR

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAM ID SEMICOLON declaracion_global funcion main bloque
Rule 2     main -> MAIN O_PARENTHESIS C_PARENTHESIS
Rule 3     bloque -> O_CBRACKET bloque_prime C_CBRACKET
Rule 4     bloque_prime -> estatuto bloque_prime
Rule 5     bloque_prime -> epsilon
Rule 6     declaracion_funcion -> declaracion
Rule 7     declaracion_global -> declaracion
Rule 8     declaracion -> declaracion_base
Rule 9     declaracion -> declaracion_base declaracion
Rule 10    declaracion_base -> LET declaracion_prime COLON declaracion_tipo SEMICOLON
Rule 11    declaracion_prime -> declaracion_variable
Rule 12    declaracion_prime -> declaracion_variable COMMA declaracion_prime
Rule 13    declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
Rule 14    declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
Rule 15    declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET
Rule 16    declaracion_variable -> ID
Rule 17    declaracion_tipo -> INT
Rule 18    declaracion_tipo -> FLOAT
Rule 19    declaracion_tipo -> CHAR
Rule 20    declaracion_tipo -> STRING
Rule 21    tipo -> INT
Rule 22    tipo -> FLOAT
Rule 23    tipo -> CHAR
Rule 24    tipo -> STRING
Rule 25    funcion -> funcion_base funcion
Rule 26    funcion -> epsilon
Rule 27    funcion_base -> FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque
Rule 28    funcion_prime -> tipo ID
Rule 29    funcion_prime -> tipo ID COMMA funcion_prime
Rule 30    funcion_ident -> VOID ID
Rule 31    funcion_ident -> INT ID
Rule 32    funcion_ident -> FLOAT ID
Rule 33    funcion_ident -> CHAR ID
Rule 34    funcion_ident -> STRING ID
Rule 35    variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
Rule 36    variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
Rule 37    variable -> ID O_ABRACKET exp C_ABRACKET
Rule 38    variable -> ID
Rule 39    estatuto -> asignacion SEMICOLON
Rule 40    estatuto -> llamada SEMICOLON
Rule 41    estatuto -> retorno SEMICOLON
Rule 42    estatuto -> lectura SEMICOLON
Rule 43    estatuto -> escritura SEMICOLON
Rule 44    estatuto -> decision
Rule 45    estatuto -> while
Rule 46    estatuto -> for
Rule 47    asignacion -> variable ASSIGN asignacion_expr
Rule 48    asignacion_expr -> expr
Rule 49    llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS
Rule 50    llamada_prime -> exp
Rule 51    llamada_prime -> exp COMMA llamada_prime
Rule 52    retorno -> RETURN O_PARENTHESIS expr C_PARENTHESIS
Rule 53    lectura -> READ O_PARENTHESIS lectura_prime C_PARENTHESIS
Rule 54    lectura_prime -> variable
Rule 55    lectura_prime -> variable COMMA lectura_prime
Rule 56    escritura -> WRITE O_PARENTHESIS escritura_prime C_PARENTHESIS
Rule 57    escritura_prime -> expr
Rule 58    escritura_prime -> escritura_string
Rule 59    escritura_prime -> expr COMMA escritura_prime
Rule 60    escritura_prime -> escritura_string COMMA escritura_prime
Rule 61    escritura_string -> CTE_STRING
Rule 62    decision -> IF O_PARENTHESIS decision_expr C_PARENTHESIS bloque else
Rule 63    decision_expr -> expr
Rule 64    else -> else_prime bloque
Rule 65    else -> epsilon
Rule 66    else_prime -> ELSE
Rule 67    while -> while_prime while_expr bloque
Rule 68    while_prime -> WHILE
Rule 69    while_expr -> O_PARENTHESIS expr C_PARENTHESIS
Rule 70    for -> FOR for_asignacion for_to for_exp bloque
Rule 71    for_asignacion -> variable ASSIGN for_asignacion_expr
Rule 72    for_asignacion_expr -> expr
Rule 73    for_to -> TO
Rule 74    for_exp -> exp
Rule 75    expr -> or
Rule 76    or -> and
Rule 77    or -> and or_operador or
Rule 78    or_operador -> OR
Rule 79    and -> equal
Rule 80    and -> equal and_operador and
Rule 81    and_operador -> AND
Rule 82    equal -> compare
Rule 83    equal -> compare equal_operador compare
Rule 84    equal_operador -> EQUAL
Rule 85    equal_operador -> NOT_EQUAL
Rule 86    compare -> exp
Rule 87    compare -> exp compare_operador exp
Rule 88    compare_operador -> GREATER
Rule 89    compare_operador -> LESSER
Rule 90    compare_operador -> GREATER_EQUAL
Rule 91    compare_operador -> LESSER_EQUAL
Rule 92    exp -> termino
Rule 93    exp -> termino exp_operador exp
Rule 94    exp_operador -> PLUS
Rule 95    exp_operador -> MINUS
Rule 96    termino -> factor
Rule 97    termino -> factor termino_operador termino
Rule 98    termino_operador -> TIMES
Rule 99    termino_operador -> DIVIDE
Rule 100   termino_operador -> MODULE
Rule 101   factor -> variable
Rule 102   factor -> O_PARENTHESIS expr C_PARENTHESIS
Rule 103   factor -> llamada
Rule 104   factor -> cte
Rule 105   factor -> PLUS cte
Rule 106   factor -> MINUS cte
Rule 107   cte -> CTE_INT
Rule 108   cte -> CTE_FLOAT
Rule 109   epsilon -> <empty>

Terminals, with rules where they appear

AND                  : 81
ASSIGN               : 47 71
CHAR                 : 19 23 33
COLON                : 10
COMMA                : 12 29 51 55 59 60
CTE_CHAR             : 
CTE_FLOAT            : 108
CTE_INT              : 13 13 13 14 14 15 107
CTE_STRING           : 61
C_ABRACKET           : 13 13 13 14 14 15 35 35 35 36 36 37
C_CBRACKET           : 3
C_PARENTHESIS        : 2 27 49 52 53 56 62 69 102
DIVIDE               : 99
ELSE                 : 66
EQUAL                : 84
FLOAT                : 18 22 32
FOR                  : 70
FUNCTION             : 27
GREATER              : 88
GREATER_EQUAL        : 90
ID                   : 1 13 14 15 16 28 29 30 31 32 33 34 35 36 37 38 49
IF                   : 62
INT                  : 17 21 31
LESSER               : 89
LESSER_EQUAL         : 91
LET                  : 10
MAIN                 : 2
MINUS                : 95 106
MODULE               : 100
NOT_EQUAL            : 85
OR                   : 78
O_ABRACKET           : 13 13 13 14 14 15 35 35 35 36 36 37
O_CBRACKET           : 3
O_PARENTHESIS        : 2 27 49 52 53 56 62 69 102
PLUS                 : 94 105
PROGRAM              : 1
READ                 : 53
RETURN               : 52
SEMICOLON            : 1 10 39 40 41 42 43
STRING               : 20 24 34
TIMES                : 98
TO                   : 73
VOID                 : 30
WHILE                : 68
WRITE                : 56
error                : 

Nonterminals, with rules where they appear

and                  : 76 77 80
and_operador         : 80
asignacion           : 39
asignacion_expr      : 47
bloque               : 1 27 62 64 67 70
bloque_prime         : 3 4
compare              : 82 83 83
compare_operador     : 87
cte                  : 104 105 106
decision             : 44
decision_expr        : 62
declaracion          : 6 7 9
declaracion_base     : 8 9
declaracion_funcion  : 27
declaracion_global   : 1
declaracion_prime    : 10 12
declaracion_tipo     : 10
declaracion_variable : 11 12
else                 : 62
else_prime           : 64
epsilon              : 5 26 65
equal                : 79 80
equal_operador       : 83
escritura            : 43
escritura_prime      : 56 59 60
escritura_string     : 58 60
estatuto             : 4
exp                  : 35 35 35 36 36 37 50 51 74 86 87 87 93
exp_operador         : 93
expr                 : 48 52 57 59 63 69 72 102
factor               : 96 97
for                  : 46
for_asignacion       : 70
for_asignacion_expr  : 71
for_exp              : 70
for_to               : 70
funcion              : 1 25
funcion_base         : 25
funcion_ident        : 27
funcion_prime        : 27 29
lectura              : 42
lectura_prime        : 53 55
llamada              : 40 103
llamada_prime        : 49 51
main                 : 1
or                   : 75 77
or_operador          : 77
programa             : 0
retorno              : 41
termino              : 92 93 97
termino_operador     : 97
tipo                 : 28 29
variable             : 47 54 55 71 101
while                : 45
while_expr           : 67
while_prime          : 67

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAM ID SEMICOLON declaracion_global funcion main bloque

    PROGRAM         shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> PROGRAM . ID SEMICOLON declaracion_global funcion main bloque

    ID              shift and go to state 3


state 3

    (1) programa -> PROGRAM ID . SEMICOLON declaracion_global funcion main bloque

    SEMICOLON       shift and go to state 4


state 4

    (1) programa -> PROGRAM ID SEMICOLON . declaracion_global funcion main bloque
    (7) declaracion_global -> . declaracion
    (8) declaracion -> . declaracion_base
    (9) declaracion -> . declaracion_base declaracion
    (10) declaracion_base -> . LET declaracion_prime COLON declaracion_tipo SEMICOLON

    LET             shift and go to state 8

    declaracion_global             shift and go to state 5
    declaracion                    shift and go to state 6
    declaracion_base               shift and go to state 7

state 5

    (1) programa -> PROGRAM ID SEMICOLON declaracion_global . funcion main bloque
    (25) funcion -> . funcion_base funcion
    (26) funcion -> . epsilon
    (27) funcion_base -> . FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque
    (109) epsilon -> .

    FUNCTION        shift and go to state 12
    MAIN            reduce using rule 109 (epsilon -> .)

    funcion                        shift and go to state 9
    funcion_base                   shift and go to state 10
    epsilon                        shift and go to state 11

state 6

    (7) declaracion_global -> declaracion .

    FUNCTION        reduce using rule 7 (declaracion_global -> declaracion .)
    MAIN            reduce using rule 7 (declaracion_global -> declaracion .)


state 7

    (8) declaracion -> declaracion_base .
    (9) declaracion -> declaracion_base . declaracion
    (8) declaracion -> . declaracion_base
    (9) declaracion -> . declaracion_base declaracion
    (10) declaracion_base -> . LET declaracion_prime COLON declaracion_tipo SEMICOLON

    FUNCTION        reduce using rule 8 (declaracion -> declaracion_base .)
    MAIN            reduce using rule 8 (declaracion -> declaracion_base .)
    O_CBRACKET      reduce using rule 8 (declaracion -> declaracion_base .)
    LET             shift and go to state 8

    declaracion_base               shift and go to state 7
    declaracion                    shift and go to state 13

state 8

    (10) declaracion_base -> LET . declaracion_prime COLON declaracion_tipo SEMICOLON
    (11) declaracion_prime -> . declaracion_variable
    (12) declaracion_prime -> . declaracion_variable COMMA declaracion_prime
    (13) declaracion_variable -> . ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (14) declaracion_variable -> . ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (15) declaracion_variable -> . ID O_ABRACKET CTE_INT C_ABRACKET
    (16) declaracion_variable -> . ID

    ID              shift and go to state 16

    declaracion_prime              shift and go to state 14
    declaracion_variable           shift and go to state 15

state 9

    (1) programa -> PROGRAM ID SEMICOLON declaracion_global funcion . main bloque
    (2) main -> . MAIN O_PARENTHESIS C_PARENTHESIS

    MAIN            shift and go to state 18

    main                           shift and go to state 17

state 10

    (25) funcion -> funcion_base . funcion
    (25) funcion -> . funcion_base funcion
    (26) funcion -> . epsilon
    (27) funcion_base -> . FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque
    (109) epsilon -> .

    FUNCTION        shift and go to state 12
    MAIN            reduce using rule 109 (epsilon -> .)

    funcion_base                   shift and go to state 10
    funcion                        shift and go to state 19
    epsilon                        shift and go to state 11

state 11

    (26) funcion -> epsilon .

    MAIN            reduce using rule 26 (funcion -> epsilon .)


state 12

    (27) funcion_base -> FUNCTION . funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque
    (30) funcion_ident -> . VOID ID
    (31) funcion_ident -> . INT ID
    (32) funcion_ident -> . FLOAT ID
    (33) funcion_ident -> . CHAR ID
    (34) funcion_ident -> . STRING ID

    VOID            shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    STRING          shift and go to state 25

    funcion_ident                  shift and go to state 20

state 13

    (9) declaracion -> declaracion_base declaracion .

    FUNCTION        reduce using rule 9 (declaracion -> declaracion_base declaracion .)
    MAIN            reduce using rule 9 (declaracion -> declaracion_base declaracion .)
    O_CBRACKET      reduce using rule 9 (declaracion -> declaracion_base declaracion .)


state 14

    (10) declaracion_base -> LET declaracion_prime . COLON declaracion_tipo SEMICOLON

    COLON           shift and go to state 26


state 15

    (11) declaracion_prime -> declaracion_variable .
    (12) declaracion_prime -> declaracion_variable . COMMA declaracion_prime

    COLON           reduce using rule 11 (declaracion_prime -> declaracion_variable .)
    COMMA           shift and go to state 27


state 16

    (13) declaracion_variable -> ID . O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (14) declaracion_variable -> ID . O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (15) declaracion_variable -> ID . O_ABRACKET CTE_INT C_ABRACKET
    (16) declaracion_variable -> ID .

    O_ABRACKET      shift and go to state 28
    COMMA           reduce using rule 16 (declaracion_variable -> ID .)
    COLON           reduce using rule 16 (declaracion_variable -> ID .)


state 17

    (1) programa -> PROGRAM ID SEMICOLON declaracion_global funcion main . bloque
    (3) bloque -> . O_CBRACKET bloque_prime C_CBRACKET

    O_CBRACKET      shift and go to state 30

    bloque                         shift and go to state 29

state 18

    (2) main -> MAIN . O_PARENTHESIS C_PARENTHESIS

    O_PARENTHESIS   shift and go to state 31


state 19

    (25) funcion -> funcion_base funcion .

    MAIN            reduce using rule 25 (funcion -> funcion_base funcion .)


state 20

    (27) funcion_base -> FUNCTION funcion_ident . O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque

    O_PARENTHESIS   shift and go to state 32


state 21

    (30) funcion_ident -> VOID . ID

    ID              shift and go to state 33


state 22

    (31) funcion_ident -> INT . ID

    ID              shift and go to state 34


state 23

    (32) funcion_ident -> FLOAT . ID

    ID              shift and go to state 35


state 24

    (33) funcion_ident -> CHAR . ID

    ID              shift and go to state 36


state 25

    (34) funcion_ident -> STRING . ID

    ID              shift and go to state 37


state 26

    (10) declaracion_base -> LET declaracion_prime COLON . declaracion_tipo SEMICOLON
    (17) declaracion_tipo -> . INT
    (18) declaracion_tipo -> . FLOAT
    (19) declaracion_tipo -> . CHAR
    (20) declaracion_tipo -> . STRING

    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    CHAR            shift and go to state 41
    STRING          shift and go to state 42

    declaracion_tipo               shift and go to state 38

state 27

    (12) declaracion_prime -> declaracion_variable COMMA . declaracion_prime
    (11) declaracion_prime -> . declaracion_variable
    (12) declaracion_prime -> . declaracion_variable COMMA declaracion_prime
    (13) declaracion_variable -> . ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (14) declaracion_variable -> . ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (15) declaracion_variable -> . ID O_ABRACKET CTE_INT C_ABRACKET
    (16) declaracion_variable -> . ID

    ID              shift and go to state 16

    declaracion_variable           shift and go to state 15
    declaracion_prime              shift and go to state 43

state 28

    (13) declaracion_variable -> ID O_ABRACKET . CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (14) declaracion_variable -> ID O_ABRACKET . CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (15) declaracion_variable -> ID O_ABRACKET . CTE_INT C_ABRACKET

    CTE_INT         shift and go to state 44


state 29

    (1) programa -> PROGRAM ID SEMICOLON declaracion_global funcion main bloque .

    $end            reduce using rule 1 (programa -> PROGRAM ID SEMICOLON declaracion_global funcion main bloque .)


state 30

    (3) bloque -> O_CBRACKET . bloque_prime C_CBRACKET
    (4) bloque_prime -> . estatuto bloque_prime
    (5) bloque_prime -> . epsilon
    (39) estatuto -> . asignacion SEMICOLON
    (40) estatuto -> . llamada SEMICOLON
    (41) estatuto -> . retorno SEMICOLON
    (42) estatuto -> . lectura SEMICOLON
    (43) estatuto -> . escritura SEMICOLON
    (44) estatuto -> . decision
    (45) estatuto -> . while
    (46) estatuto -> . for
    (109) epsilon -> .
    (47) asignacion -> . variable ASSIGN asignacion_expr
    (49) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (52) retorno -> . RETURN O_PARENTHESIS expr C_PARENTHESIS
    (53) lectura -> . READ O_PARENTHESIS lectura_prime C_PARENTHESIS
    (56) escritura -> . WRITE O_PARENTHESIS escritura_prime C_PARENTHESIS
    (62) decision -> . IF O_PARENTHESIS decision_expr C_PARENTHESIS bloque else
    (67) while -> . while_prime while_expr bloque
    (70) for -> . FOR for_asignacion for_to for_exp bloque
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID O_ABRACKET exp C_ABRACKET
    (38) variable -> . ID
    (68) while_prime -> . WHILE

    C_CBRACKET      reduce using rule 109 (epsilon -> .)
    ID              shift and go to state 57
    RETURN          shift and go to state 58
    READ            shift and go to state 59
    WRITE           shift and go to state 60
    IF              shift and go to state 61
    FOR             shift and go to state 63
    WHILE           shift and go to state 64

    bloque_prime                   shift and go to state 45
    estatuto                       shift and go to state 46
    epsilon                        shift and go to state 47
    asignacion                     shift and go to state 48
    llamada                        shift and go to state 49
    retorno                        shift and go to state 50
    lectura                        shift and go to state 51
    escritura                      shift and go to state 52
    decision                       shift and go to state 53
    while                          shift and go to state 54
    for                            shift and go to state 55
    variable                       shift and go to state 56
    while_prime                    shift and go to state 62

state 31

    (2) main -> MAIN O_PARENTHESIS . C_PARENTHESIS

    C_PARENTHESIS   shift and go to state 65


state 32

    (27) funcion_base -> FUNCTION funcion_ident O_PARENTHESIS . funcion_prime C_PARENTHESIS declaracion_funcion bloque
    (28) funcion_prime -> . tipo ID
    (29) funcion_prime -> . tipo ID COMMA funcion_prime
    (21) tipo -> . INT
    (22) tipo -> . FLOAT
    (23) tipo -> . CHAR
    (24) tipo -> . STRING

    INT             shift and go to state 68
    FLOAT           shift and go to state 69
    CHAR            shift and go to state 70
    STRING          shift and go to state 71

    funcion_prime                  shift and go to state 66
    tipo                           shift and go to state 67

state 33

    (30) funcion_ident -> VOID ID .

    O_PARENTHESIS   reduce using rule 30 (funcion_ident -> VOID ID .)


state 34

    (31) funcion_ident -> INT ID .

    O_PARENTHESIS   reduce using rule 31 (funcion_ident -> INT ID .)


state 35

    (32) funcion_ident -> FLOAT ID .

    O_PARENTHESIS   reduce using rule 32 (funcion_ident -> FLOAT ID .)


state 36

    (33) funcion_ident -> CHAR ID .

    O_PARENTHESIS   reduce using rule 33 (funcion_ident -> CHAR ID .)


state 37

    (34) funcion_ident -> STRING ID .

    O_PARENTHESIS   reduce using rule 34 (funcion_ident -> STRING ID .)


state 38

    (10) declaracion_base -> LET declaracion_prime COLON declaracion_tipo . SEMICOLON

    SEMICOLON       shift and go to state 72


state 39

    (17) declaracion_tipo -> INT .

    SEMICOLON       reduce using rule 17 (declaracion_tipo -> INT .)


state 40

    (18) declaracion_tipo -> FLOAT .

    SEMICOLON       reduce using rule 18 (declaracion_tipo -> FLOAT .)


state 41

    (19) declaracion_tipo -> CHAR .

    SEMICOLON       reduce using rule 19 (declaracion_tipo -> CHAR .)


state 42

    (20) declaracion_tipo -> STRING .

    SEMICOLON       reduce using rule 20 (declaracion_tipo -> STRING .)


state 43

    (12) declaracion_prime -> declaracion_variable COMMA declaracion_prime .

    COLON           reduce using rule 12 (declaracion_prime -> declaracion_variable COMMA declaracion_prime .)


state 44

    (13) declaracion_variable -> ID O_ABRACKET CTE_INT . C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (14) declaracion_variable -> ID O_ABRACKET CTE_INT . C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (15) declaracion_variable -> ID O_ABRACKET CTE_INT . C_ABRACKET

    C_ABRACKET      shift and go to state 73


state 45

    (3) bloque -> O_CBRACKET bloque_prime . C_CBRACKET

    C_CBRACKET      shift and go to state 74


state 46

    (4) bloque_prime -> estatuto . bloque_prime
    (4) bloque_prime -> . estatuto bloque_prime
    (5) bloque_prime -> . epsilon
    (39) estatuto -> . asignacion SEMICOLON
    (40) estatuto -> . llamada SEMICOLON
    (41) estatuto -> . retorno SEMICOLON
    (42) estatuto -> . lectura SEMICOLON
    (43) estatuto -> . escritura SEMICOLON
    (44) estatuto -> . decision
    (45) estatuto -> . while
    (46) estatuto -> . for
    (109) epsilon -> .
    (47) asignacion -> . variable ASSIGN asignacion_expr
    (49) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (52) retorno -> . RETURN O_PARENTHESIS expr C_PARENTHESIS
    (53) lectura -> . READ O_PARENTHESIS lectura_prime C_PARENTHESIS
    (56) escritura -> . WRITE O_PARENTHESIS escritura_prime C_PARENTHESIS
    (62) decision -> . IF O_PARENTHESIS decision_expr C_PARENTHESIS bloque else
    (67) while -> . while_prime while_expr bloque
    (70) for -> . FOR for_asignacion for_to for_exp bloque
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID O_ABRACKET exp C_ABRACKET
    (38) variable -> . ID
    (68) while_prime -> . WHILE

    C_CBRACKET      reduce using rule 109 (epsilon -> .)
    ID              shift and go to state 57
    RETURN          shift and go to state 58
    READ            shift and go to state 59
    WRITE           shift and go to state 60
    IF              shift and go to state 61
    FOR             shift and go to state 63
    WHILE           shift and go to state 64

    estatuto                       shift and go to state 46
    bloque_prime                   shift and go to state 75
    epsilon                        shift and go to state 47
    asignacion                     shift and go to state 48
    llamada                        shift and go to state 49
    retorno                        shift and go to state 50
    lectura                        shift and go to state 51
    escritura                      shift and go to state 52
    decision                       shift and go to state 53
    while                          shift and go to state 54
    for                            shift and go to state 55
    variable                       shift and go to state 56
    while_prime                    shift and go to state 62

state 47

    (5) bloque_prime -> epsilon .

    C_CBRACKET      reduce using rule 5 (bloque_prime -> epsilon .)


state 48

    (39) estatuto -> asignacion . SEMICOLON

    SEMICOLON       shift and go to state 76


state 49

    (40) estatuto -> llamada . SEMICOLON

    SEMICOLON       shift and go to state 77


state 50

    (41) estatuto -> retorno . SEMICOLON

    SEMICOLON       shift and go to state 78


state 51

    (42) estatuto -> lectura . SEMICOLON

    SEMICOLON       shift and go to state 79


state 52

    (43) estatuto -> escritura . SEMICOLON

    SEMICOLON       shift and go to state 80


state 53

    (44) estatuto -> decision .

    ID              reduce using rule 44 (estatuto -> decision .)
    RETURN          reduce using rule 44 (estatuto -> decision .)
    READ            reduce using rule 44 (estatuto -> decision .)
    WRITE           reduce using rule 44 (estatuto -> decision .)
    IF              reduce using rule 44 (estatuto -> decision .)
    FOR             reduce using rule 44 (estatuto -> decision .)
    WHILE           reduce using rule 44 (estatuto -> decision .)
    C_CBRACKET      reduce using rule 44 (estatuto -> decision .)


state 54

    (45) estatuto -> while .

    ID              reduce using rule 45 (estatuto -> while .)
    RETURN          reduce using rule 45 (estatuto -> while .)
    READ            reduce using rule 45 (estatuto -> while .)
    WRITE           reduce using rule 45 (estatuto -> while .)
    IF              reduce using rule 45 (estatuto -> while .)
    FOR             reduce using rule 45 (estatuto -> while .)
    WHILE           reduce using rule 45 (estatuto -> while .)
    C_CBRACKET      reduce using rule 45 (estatuto -> while .)


state 55

    (46) estatuto -> for .

    ID              reduce using rule 46 (estatuto -> for .)
    RETURN          reduce using rule 46 (estatuto -> for .)
    READ            reduce using rule 46 (estatuto -> for .)
    WRITE           reduce using rule 46 (estatuto -> for .)
    IF              reduce using rule 46 (estatuto -> for .)
    FOR             reduce using rule 46 (estatuto -> for .)
    WHILE           reduce using rule 46 (estatuto -> for .)
    C_CBRACKET      reduce using rule 46 (estatuto -> for .)


state 56

    (47) asignacion -> variable . ASSIGN asignacion_expr

    ASSIGN          shift and go to state 81


state 57

    (49) llamada -> ID . O_PARENTHESIS llamada_prime C_PARENTHESIS
    (35) variable -> ID . O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> ID . O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> ID . O_ABRACKET exp C_ABRACKET
    (38) variable -> ID .

    O_PARENTHESIS   shift and go to state 82
    O_ABRACKET      shift and go to state 83
    ASSIGN          reduce using rule 38 (variable -> ID .)


state 58

    (52) retorno -> RETURN . O_PARENTHESIS expr C_PARENTHESIS

    O_PARENTHESIS   shift and go to state 84


state 59

    (53) lectura -> READ . O_PARENTHESIS lectura_prime C_PARENTHESIS

    O_PARENTHESIS   shift and go to state 85


state 60

    (56) escritura -> WRITE . O_PARENTHESIS escritura_prime C_PARENTHESIS

    O_PARENTHESIS   shift and go to state 86


state 61

    (62) decision -> IF . O_PARENTHESIS decision_expr C_PARENTHESIS bloque else

    O_PARENTHESIS   shift and go to state 87


state 62

    (67) while -> while_prime . while_expr bloque
    (69) while_expr -> . O_PARENTHESIS expr C_PARENTHESIS

    O_PARENTHESIS   shift and go to state 89

    while_expr                     shift and go to state 88

state 63

    (70) for -> FOR . for_asignacion for_to for_exp bloque
    (71) for_asignacion -> . variable ASSIGN for_asignacion_expr
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID O_ABRACKET exp C_ABRACKET
    (38) variable -> . ID

    ID              shift and go to state 92

    for_asignacion                 shift and go to state 90
    variable                       shift and go to state 91

state 64

    (68) while_prime -> WHILE .

    O_PARENTHESIS   reduce using rule 68 (while_prime -> WHILE .)


state 65

    (2) main -> MAIN O_PARENTHESIS C_PARENTHESIS .

    O_CBRACKET      reduce using rule 2 (main -> MAIN O_PARENTHESIS C_PARENTHESIS .)


state 66

    (27) funcion_base -> FUNCTION funcion_ident O_PARENTHESIS funcion_prime . C_PARENTHESIS declaracion_funcion bloque

    C_PARENTHESIS   shift and go to state 93


state 67

    (28) funcion_prime -> tipo . ID
    (29) funcion_prime -> tipo . ID COMMA funcion_prime

    ID              shift and go to state 94


state 68

    (21) tipo -> INT .

    ID              reduce using rule 21 (tipo -> INT .)


state 69

    (22) tipo -> FLOAT .

    ID              reduce using rule 22 (tipo -> FLOAT .)


state 70

    (23) tipo -> CHAR .

    ID              reduce using rule 23 (tipo -> CHAR .)


state 71

    (24) tipo -> STRING .

    ID              reduce using rule 24 (tipo -> STRING .)


state 72

    (10) declaracion_base -> LET declaracion_prime COLON declaracion_tipo SEMICOLON .

    LET             reduce using rule 10 (declaracion_base -> LET declaracion_prime COLON declaracion_tipo SEMICOLON .)
    FUNCTION        reduce using rule 10 (declaracion_base -> LET declaracion_prime COLON declaracion_tipo SEMICOLON .)
    MAIN            reduce using rule 10 (declaracion_base -> LET declaracion_prime COLON declaracion_tipo SEMICOLON .)
    O_CBRACKET      reduce using rule 10 (declaracion_base -> LET declaracion_prime COLON declaracion_tipo SEMICOLON .)


state 73

    (13) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET . O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (14) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET . O_ABRACKET CTE_INT C_ABRACKET
    (15) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET .

    O_ABRACKET      shift and go to state 95
    COMMA           reduce using rule 15 (declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET .)
    COLON           reduce using rule 15 (declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET .)


state 74

    (3) bloque -> O_CBRACKET bloque_prime C_CBRACKET .

    $end            reduce using rule 3 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    ID              reduce using rule 3 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    RETURN          reduce using rule 3 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    READ            reduce using rule 3 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    WRITE           reduce using rule 3 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    IF              reduce using rule 3 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    FOR             reduce using rule 3 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    WHILE           reduce using rule 3 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    C_CBRACKET      reduce using rule 3 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    FUNCTION        reduce using rule 3 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    MAIN            reduce using rule 3 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    ELSE            reduce using rule 3 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)


state 75

    (4) bloque_prime -> estatuto bloque_prime .

    C_CBRACKET      reduce using rule 4 (bloque_prime -> estatuto bloque_prime .)


state 76

    (39) estatuto -> asignacion SEMICOLON .

    ID              reduce using rule 39 (estatuto -> asignacion SEMICOLON .)
    RETURN          reduce using rule 39 (estatuto -> asignacion SEMICOLON .)
    READ            reduce using rule 39 (estatuto -> asignacion SEMICOLON .)
    WRITE           reduce using rule 39 (estatuto -> asignacion SEMICOLON .)
    IF              reduce using rule 39 (estatuto -> asignacion SEMICOLON .)
    FOR             reduce using rule 39 (estatuto -> asignacion SEMICOLON .)
    WHILE           reduce using rule 39 (estatuto -> asignacion SEMICOLON .)
    C_CBRACKET      reduce using rule 39 (estatuto -> asignacion SEMICOLON .)


state 77

    (40) estatuto -> llamada SEMICOLON .

    ID              reduce using rule 40 (estatuto -> llamada SEMICOLON .)
    RETURN          reduce using rule 40 (estatuto -> llamada SEMICOLON .)
    READ            reduce using rule 40 (estatuto -> llamada SEMICOLON .)
    WRITE           reduce using rule 40 (estatuto -> llamada SEMICOLON .)
    IF              reduce using rule 40 (estatuto -> llamada SEMICOLON .)
    FOR             reduce using rule 40 (estatuto -> llamada SEMICOLON .)
    WHILE           reduce using rule 40 (estatuto -> llamada SEMICOLON .)
    C_CBRACKET      reduce using rule 40 (estatuto -> llamada SEMICOLON .)


state 78

    (41) estatuto -> retorno SEMICOLON .

    ID              reduce using rule 41 (estatuto -> retorno SEMICOLON .)
    RETURN          reduce using rule 41 (estatuto -> retorno SEMICOLON .)
    READ            reduce using rule 41 (estatuto -> retorno SEMICOLON .)
    WRITE           reduce using rule 41 (estatuto -> retorno SEMICOLON .)
    IF              reduce using rule 41 (estatuto -> retorno SEMICOLON .)
    FOR             reduce using rule 41 (estatuto -> retorno SEMICOLON .)
    WHILE           reduce using rule 41 (estatuto -> retorno SEMICOLON .)
    C_CBRACKET      reduce using rule 41 (estatuto -> retorno SEMICOLON .)


state 79

    (42) estatuto -> lectura SEMICOLON .

    ID              reduce using rule 42 (estatuto -> lectura SEMICOLON .)
    RETURN          reduce using rule 42 (estatuto -> lectura SEMICOLON .)
    READ            reduce using rule 42 (estatuto -> lectura SEMICOLON .)
    WRITE           reduce using rule 42 (estatuto -> lectura SEMICOLON .)
    IF              reduce using rule 42 (estatuto -> lectura SEMICOLON .)
    FOR             reduce using rule 42 (estatuto -> lectura SEMICOLON .)
    WHILE           reduce using rule 42 (estatuto -> lectura SEMICOLON .)
    C_CBRACKET      reduce using rule 42 (estatuto -> lectura SEMICOLON .)


state 80

    (43) estatuto -> escritura SEMICOLON .

    ID              reduce using rule 43 (estatuto -> escritura SEMICOLON .)
    RETURN          reduce using rule 43 (estatuto -> escritura SEMICOLON .)
    READ            reduce using rule 43 (estatuto -> escritura SEMICOLON .)
    WRITE           reduce using rule 43 (estatuto -> escritura SEMICOLON .)
    IF              reduce using rule 43 (estatuto -> escritura SEMICOLON .)
    FOR             reduce using rule 43 (estatuto -> escritura SEMICOLON .)
    WHILE           reduce using rule 43 (estatuto -> escritura SEMICOLON .)
    C_CBRACKET      reduce using rule 43 (estatuto -> escritura SEMICOLON .)


state 81

    (47) asignacion -> variable ASSIGN . asignacion_expr
    (48) asignacion_expr -> . expr
    (75) expr -> . or
    (76) or -> . and
    (77) or -> . and or_operador or
    (79) and -> . equal
    (80) and -> . equal and_operador and
    (82) equal -> . compare
    (83) equal -> . compare equal_operador compare
    (86) compare -> . exp
    (87) compare -> . exp compare_operador exp
    (92) exp -> . termino
    (93) exp -> . termino exp_operador exp
    (96) termino -> . factor
    (97) termino -> . factor termino_operador termino
    (101) factor -> . variable
    (102) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (103) factor -> . llamada
    (104) factor -> . cte
    (105) factor -> . PLUS cte
    (106) factor -> . MINUS cte
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID O_ABRACKET exp C_ABRACKET
    (38) variable -> . ID
    (49) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (107) cte -> . CTE_INT
    (108) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 106
    PLUS            shift and go to state 109
    MINUS           shift and go to state 110
    ID              shift and go to state 111
    CTE_INT         shift and go to state 112
    CTE_FLOAT       shift and go to state 113

    variable                       shift and go to state 96
    asignacion_expr                shift and go to state 97
    expr                           shift and go to state 98
    or                             shift and go to state 99
    and                            shift and go to state 100
    equal                          shift and go to state 101
    compare                        shift and go to state 102
    exp                            shift and go to state 103
    termino                        shift and go to state 104
    factor                         shift and go to state 105
    llamada                        shift and go to state 107
    cte                            shift and go to state 108

state 82

    (49) llamada -> ID O_PARENTHESIS . llamada_prime C_PARENTHESIS
    (50) llamada_prime -> . exp
    (51) llamada_prime -> . exp COMMA llamada_prime
    (92) exp -> . termino
    (93) exp -> . termino exp_operador exp
    (96) termino -> . factor
    (97) termino -> . factor termino_operador termino
    (101) factor -> . variable
    (102) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (103) factor -> . llamada
    (104) factor -> . cte
    (105) factor -> . PLUS cte
    (106) factor -> . MINUS cte
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID O_ABRACKET exp C_ABRACKET
    (38) variable -> . ID
    (49) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (107) cte -> . CTE_INT
    (108) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 106
    PLUS            shift and go to state 109
    MINUS           shift and go to state 110
    ID              shift and go to state 111
    CTE_INT         shift and go to state 112
    CTE_FLOAT       shift and go to state 113

    llamada_prime                  shift and go to state 114
    exp                            shift and go to state 115
    termino                        shift and go to state 104
    factor                         shift and go to state 105
    variable                       shift and go to state 96
    llamada                        shift and go to state 107
    cte                            shift and go to state 108

state 83

    (35) variable -> ID O_ABRACKET . exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> ID O_ABRACKET . exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> ID O_ABRACKET . exp C_ABRACKET
    (92) exp -> . termino
    (93) exp -> . termino exp_operador exp
    (96) termino -> . factor
    (97) termino -> . factor termino_operador termino
    (101) factor -> . variable
    (102) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (103) factor -> . llamada
    (104) factor -> . cte
    (105) factor -> . PLUS cte
    (106) factor -> . MINUS cte
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID O_ABRACKET exp C_ABRACKET
    (38) variable -> . ID
    (49) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (107) cte -> . CTE_INT
    (108) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 106
    PLUS            shift and go to state 109
    MINUS           shift and go to state 110
    ID              shift and go to state 111
    CTE_INT         shift and go to state 112
    CTE_FLOAT       shift and go to state 113

    exp                            shift and go to state 116
    termino                        shift and go to state 104
    factor                         shift and go to state 105
    variable                       shift and go to state 96
    llamada                        shift and go to state 107
    cte                            shift and go to state 108

state 84

    (52) retorno -> RETURN O_PARENTHESIS . expr C_PARENTHESIS
    (75) expr -> . or
    (76) or -> . and
    (77) or -> . and or_operador or
    (79) and -> . equal
    (80) and -> . equal and_operador and
    (82) equal -> . compare
    (83) equal -> . compare equal_operador compare
    (86) compare -> . exp
    (87) compare -> . exp compare_operador exp
    (92) exp -> . termino
    (93) exp -> . termino exp_operador exp
    (96) termino -> . factor
    (97) termino -> . factor termino_operador termino
    (101) factor -> . variable
    (102) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (103) factor -> . llamada
    (104) factor -> . cte
    (105) factor -> . PLUS cte
    (106) factor -> . MINUS cte
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID O_ABRACKET exp C_ABRACKET
    (38) variable -> . ID
    (49) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (107) cte -> . CTE_INT
    (108) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 106
    PLUS            shift and go to state 109
    MINUS           shift and go to state 110
    ID              shift and go to state 111
    CTE_INT         shift and go to state 112
    CTE_FLOAT       shift and go to state 113

    expr                           shift and go to state 117
    or                             shift and go to state 99
    and                            shift and go to state 100
    equal                          shift and go to state 101
    compare                        shift and go to state 102
    exp                            shift and go to state 103
    termino                        shift and go to state 104
    factor                         shift and go to state 105
    variable                       shift and go to state 96
    llamada                        shift and go to state 107
    cte                            shift and go to state 108

state 85

    (53) lectura -> READ O_PARENTHESIS . lectura_prime C_PARENTHESIS
    (54) lectura_prime -> . variable
    (55) lectura_prime -> . variable COMMA lectura_prime
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID O_ABRACKET exp C_ABRACKET
    (38) variable -> . ID

    ID              shift and go to state 92

    lectura_prime                  shift and go to state 118
    variable                       shift and go to state 119

state 86

    (56) escritura -> WRITE O_PARENTHESIS . escritura_prime C_PARENTHESIS
    (57) escritura_prime -> . expr
    (58) escritura_prime -> . escritura_string
    (59) escritura_prime -> . expr COMMA escritura_prime
    (60) escritura_prime -> . escritura_string COMMA escritura_prime
    (75) expr -> . or
    (61) escritura_string -> . CTE_STRING
    (76) or -> . and
    (77) or -> . and or_operador or
    (79) and -> . equal
    (80) and -> . equal and_operador and
    (82) equal -> . compare
    (83) equal -> . compare equal_operador compare
    (86) compare -> . exp
    (87) compare -> . exp compare_operador exp
    (92) exp -> . termino
    (93) exp -> . termino exp_operador exp
    (96) termino -> . factor
    (97) termino -> . factor termino_operador termino
    (101) factor -> . variable
    (102) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (103) factor -> . llamada
    (104) factor -> . cte
    (105) factor -> . PLUS cte
    (106) factor -> . MINUS cte
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID O_ABRACKET exp C_ABRACKET
    (38) variable -> . ID
    (49) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (107) cte -> . CTE_INT
    (108) cte -> . CTE_FLOAT

    CTE_STRING      shift and go to state 123
    O_PARENTHESIS   shift and go to state 106
    PLUS            shift and go to state 109
    MINUS           shift and go to state 110
    ID              shift and go to state 111
    CTE_INT         shift and go to state 112
    CTE_FLOAT       shift and go to state 113

    escritura_prime                shift and go to state 120
    expr                           shift and go to state 121
    escritura_string               shift and go to state 122
    or                             shift and go to state 99
    and                            shift and go to state 100
    equal                          shift and go to state 101
    compare                        shift and go to state 102
    exp                            shift and go to state 103
    termino                        shift and go to state 104
    factor                         shift and go to state 105
    variable                       shift and go to state 96
    llamada                        shift and go to state 107
    cte                            shift and go to state 108

state 87

    (62) decision -> IF O_PARENTHESIS . decision_expr C_PARENTHESIS bloque else
    (63) decision_expr -> . expr
    (75) expr -> . or
    (76) or -> . and
    (77) or -> . and or_operador or
    (79) and -> . equal
    (80) and -> . equal and_operador and
    (82) equal -> . compare
    (83) equal -> . compare equal_operador compare
    (86) compare -> . exp
    (87) compare -> . exp compare_operador exp
    (92) exp -> . termino
    (93) exp -> . termino exp_operador exp
    (96) termino -> . factor
    (97) termino -> . factor termino_operador termino
    (101) factor -> . variable
    (102) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (103) factor -> . llamada
    (104) factor -> . cte
    (105) factor -> . PLUS cte
    (106) factor -> . MINUS cte
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID O_ABRACKET exp C_ABRACKET
    (38) variable -> . ID
    (49) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (107) cte -> . CTE_INT
    (108) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 106
    PLUS            shift and go to state 109
    MINUS           shift and go to state 110
    ID              shift and go to state 111
    CTE_INT         shift and go to state 112
    CTE_FLOAT       shift and go to state 113

    decision_expr                  shift and go to state 124
    expr                           shift and go to state 125
    or                             shift and go to state 99
    and                            shift and go to state 100
    equal                          shift and go to state 101
    compare                        shift and go to state 102
    exp                            shift and go to state 103
    termino                        shift and go to state 104
    factor                         shift and go to state 105
    variable                       shift and go to state 96
    llamada                        shift and go to state 107
    cte                            shift and go to state 108

state 88

    (67) while -> while_prime while_expr . bloque
    (3) bloque -> . O_CBRACKET bloque_prime C_CBRACKET

    O_CBRACKET      shift and go to state 30

    bloque                         shift and go to state 126

state 89

    (69) while_expr -> O_PARENTHESIS . expr C_PARENTHESIS
    (75) expr -> . or
    (76) or -> . and
    (77) or -> . and or_operador or
    (79) and -> . equal
    (80) and -> . equal and_operador and
    (82) equal -> . compare
    (83) equal -> . compare equal_operador compare
    (86) compare -> . exp
    (87) compare -> . exp compare_operador exp
    (92) exp -> . termino
    (93) exp -> . termino exp_operador exp
    (96) termino -> . factor
    (97) termino -> . factor termino_operador termino
    (101) factor -> . variable
    (102) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (103) factor -> . llamada
    (104) factor -> . cte
    (105) factor -> . PLUS cte
    (106) factor -> . MINUS cte
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID O_ABRACKET exp C_ABRACKET
    (38) variable -> . ID
    (49) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (107) cte -> . CTE_INT
    (108) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 106
    PLUS            shift and go to state 109
    MINUS           shift and go to state 110
    ID              shift and go to state 111
    CTE_INT         shift and go to state 112
    CTE_FLOAT       shift and go to state 113

    expr                           shift and go to state 127
    or                             shift and go to state 99
    and                            shift and go to state 100
    equal                          shift and go to state 101
    compare                        shift and go to state 102
    exp                            shift and go to state 103
    termino                        shift and go to state 104
    factor                         shift and go to state 105
    variable                       shift and go to state 96
    llamada                        shift and go to state 107
    cte                            shift and go to state 108

state 90

    (70) for -> FOR for_asignacion . for_to for_exp bloque
    (73) for_to -> . TO

    TO              shift and go to state 129

    for_to                         shift and go to state 128

state 91

    (71) for_asignacion -> variable . ASSIGN for_asignacion_expr

    ASSIGN          shift and go to state 130


state 92

    (35) variable -> ID . O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> ID . O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> ID . O_ABRACKET exp C_ABRACKET
    (38) variable -> ID .

    O_ABRACKET      shift and go to state 83
    ASSIGN          reduce using rule 38 (variable -> ID .)
    COMMA           reduce using rule 38 (variable -> ID .)
    C_PARENTHESIS   reduce using rule 38 (variable -> ID .)


state 93

    (27) funcion_base -> FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS . declaracion_funcion bloque
    (6) declaracion_funcion -> . declaracion
    (8) declaracion -> . declaracion_base
    (9) declaracion -> . declaracion_base declaracion
    (10) declaracion_base -> . LET declaracion_prime COLON declaracion_tipo SEMICOLON

    LET             shift and go to state 8

    declaracion_funcion            shift and go to state 131
    declaracion                    shift and go to state 132
    declaracion_base               shift and go to state 7

state 94

    (28) funcion_prime -> tipo ID .
    (29) funcion_prime -> tipo ID . COMMA funcion_prime

    C_PARENTHESIS   reduce using rule 28 (funcion_prime -> tipo ID .)
    COMMA           shift and go to state 133


state 95

    (13) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET . CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (14) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET . CTE_INT C_ABRACKET

    CTE_INT         shift and go to state 134


state 96

    (101) factor -> variable .

    TIMES           reduce using rule 101 (factor -> variable .)
    DIVIDE          reduce using rule 101 (factor -> variable .)
    MODULE          reduce using rule 101 (factor -> variable .)
    PLUS            reduce using rule 101 (factor -> variable .)
    MINUS           reduce using rule 101 (factor -> variable .)
    GREATER         reduce using rule 101 (factor -> variable .)
    LESSER          reduce using rule 101 (factor -> variable .)
    GREATER_EQUAL   reduce using rule 101 (factor -> variable .)
    LESSER_EQUAL    reduce using rule 101 (factor -> variable .)
    EQUAL           reduce using rule 101 (factor -> variable .)
    NOT_EQUAL       reduce using rule 101 (factor -> variable .)
    AND             reduce using rule 101 (factor -> variable .)
    OR              reduce using rule 101 (factor -> variable .)
    SEMICOLON       reduce using rule 101 (factor -> variable .)
    COMMA           reduce using rule 101 (factor -> variable .)
    C_PARENTHESIS   reduce using rule 101 (factor -> variable .)
    C_ABRACKET      reduce using rule 101 (factor -> variable .)
    O_CBRACKET      reduce using rule 101 (factor -> variable .)
    TO              reduce using rule 101 (factor -> variable .)


state 97

    (47) asignacion -> variable ASSIGN asignacion_expr .

    SEMICOLON       reduce using rule 47 (asignacion -> variable ASSIGN asignacion_expr .)


state 98

    (48) asignacion_expr -> expr .

    SEMICOLON       reduce using rule 48 (asignacion_expr -> expr .)


state 99

    (75) expr -> or .

    SEMICOLON       reduce using rule 75 (expr -> or .)
    C_PARENTHESIS   reduce using rule 75 (expr -> or .)
    COMMA           reduce using rule 75 (expr -> or .)
    TO              reduce using rule 75 (expr -> or .)


state 100

    (76) or -> and .
    (77) or -> and . or_operador or
    (78) or_operador -> . OR

    SEMICOLON       reduce using rule 76 (or -> and .)
    C_PARENTHESIS   reduce using rule 76 (or -> and .)
    COMMA           reduce using rule 76 (or -> and .)
    TO              reduce using rule 76 (or -> and .)
    OR              shift and go to state 136

    or_operador                    shift and go to state 135

state 101

    (79) and -> equal .
    (80) and -> equal . and_operador and
    (81) and_operador -> . AND

    OR              reduce using rule 79 (and -> equal .)
    SEMICOLON       reduce using rule 79 (and -> equal .)
    C_PARENTHESIS   reduce using rule 79 (and -> equal .)
    COMMA           reduce using rule 79 (and -> equal .)
    TO              reduce using rule 79 (and -> equal .)
    AND             shift and go to state 138

    and_operador                   shift and go to state 137

state 102

    (82) equal -> compare .
    (83) equal -> compare . equal_operador compare
    (84) equal_operador -> . EQUAL
    (85) equal_operador -> . NOT_EQUAL

    AND             reduce using rule 82 (equal -> compare .)
    OR              reduce using rule 82 (equal -> compare .)
    SEMICOLON       reduce using rule 82 (equal -> compare .)
    C_PARENTHESIS   reduce using rule 82 (equal -> compare .)
    COMMA           reduce using rule 82 (equal -> compare .)
    TO              reduce using rule 82 (equal -> compare .)
    EQUAL           shift and go to state 140
    NOT_EQUAL       shift and go to state 141

    equal_operador                 shift and go to state 139

state 103

    (86) compare -> exp .
    (87) compare -> exp . compare_operador exp
    (88) compare_operador -> . GREATER
    (89) compare_operador -> . LESSER
    (90) compare_operador -> . GREATER_EQUAL
    (91) compare_operador -> . LESSER_EQUAL

    EQUAL           reduce using rule 86 (compare -> exp .)
    NOT_EQUAL       reduce using rule 86 (compare -> exp .)
    AND             reduce using rule 86 (compare -> exp .)
    OR              reduce using rule 86 (compare -> exp .)
    SEMICOLON       reduce using rule 86 (compare -> exp .)
    C_PARENTHESIS   reduce using rule 86 (compare -> exp .)
    COMMA           reduce using rule 86 (compare -> exp .)
    TO              reduce using rule 86 (compare -> exp .)
    GREATER         shift and go to state 143
    LESSER          shift and go to state 144
    GREATER_EQUAL   shift and go to state 145
    LESSER_EQUAL    shift and go to state 146

    compare_operador               shift and go to state 142

state 104

    (92) exp -> termino .
    (93) exp -> termino . exp_operador exp
    (94) exp_operador -> . PLUS
    (95) exp_operador -> . MINUS

    GREATER         reduce using rule 92 (exp -> termino .)
    LESSER          reduce using rule 92 (exp -> termino .)
    GREATER_EQUAL   reduce using rule 92 (exp -> termino .)
    LESSER_EQUAL    reduce using rule 92 (exp -> termino .)
    EQUAL           reduce using rule 92 (exp -> termino .)
    NOT_EQUAL       reduce using rule 92 (exp -> termino .)
    AND             reduce using rule 92 (exp -> termino .)
    OR              reduce using rule 92 (exp -> termino .)
    SEMICOLON       reduce using rule 92 (exp -> termino .)
    COMMA           reduce using rule 92 (exp -> termino .)
    C_PARENTHESIS   reduce using rule 92 (exp -> termino .)
    C_ABRACKET      reduce using rule 92 (exp -> termino .)
    O_CBRACKET      reduce using rule 92 (exp -> termino .)
    TO              reduce using rule 92 (exp -> termino .)
    PLUS            shift and go to state 148
    MINUS           shift and go to state 149

    exp_operador                   shift and go to state 147

state 105

    (96) termino -> factor .
    (97) termino -> factor . termino_operador termino
    (98) termino_operador -> . TIMES
    (99) termino_operador -> . DIVIDE
    (100) termino_operador -> . MODULE

    PLUS            reduce using rule 96 (termino -> factor .)
    MINUS           reduce using rule 96 (termino -> factor .)
    GREATER         reduce using rule 96 (termino -> factor .)
    LESSER          reduce using rule 96 (termino -> factor .)
    GREATER_EQUAL   reduce using rule 96 (termino -> factor .)
    LESSER_EQUAL    reduce using rule 96 (termino -> factor .)
    EQUAL           reduce using rule 96 (termino -> factor .)
    NOT_EQUAL       reduce using rule 96 (termino -> factor .)
    AND             reduce using rule 96 (termino -> factor .)
    OR              reduce using rule 96 (termino -> factor .)
    SEMICOLON       reduce using rule 96 (termino -> factor .)
    COMMA           reduce using rule 96 (termino -> factor .)
    C_PARENTHESIS   reduce using rule 96 (termino -> factor .)
    C_ABRACKET      reduce using rule 96 (termino -> factor .)
    O_CBRACKET      reduce using rule 96 (termino -> factor .)
    TO              reduce using rule 96 (termino -> factor .)
    TIMES           shift and go to state 151
    DIVIDE          shift and go to state 152
    MODULE          shift and go to state 153

    termino_operador               shift and go to state 150

state 106

    (102) factor -> O_PARENTHESIS . expr C_PARENTHESIS
    (75) expr -> . or
    (76) or -> . and
    (77) or -> . and or_operador or
    (79) and -> . equal
    (80) and -> . equal and_operador and
    (82) equal -> . compare
    (83) equal -> . compare equal_operador compare
    (86) compare -> . exp
    (87) compare -> . exp compare_operador exp
    (92) exp -> . termino
    (93) exp -> . termino exp_operador exp
    (96) termino -> . factor
    (97) termino -> . factor termino_operador termino
    (101) factor -> . variable
    (102) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (103) factor -> . llamada
    (104) factor -> . cte
    (105) factor -> . PLUS cte
    (106) factor -> . MINUS cte
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID O_ABRACKET exp C_ABRACKET
    (38) variable -> . ID
    (49) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (107) cte -> . CTE_INT
    (108) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 106
    PLUS            shift and go to state 109
    MINUS           shift and go to state 110
    ID              shift and go to state 111
    CTE_INT         shift and go to state 112
    CTE_FLOAT       shift and go to state 113

    expr                           shift and go to state 154
    or                             shift and go to state 99
    and                            shift and go to state 100
    equal                          shift and go to state 101
    compare                        shift and go to state 102
    exp                            shift and go to state 103
    termino                        shift and go to state 104
    factor                         shift and go to state 105
    variable                       shift and go to state 96
    llamada                        shift and go to state 107
    cte                            shift and go to state 108

state 107

    (103) factor -> llamada .

    TIMES           reduce using rule 103 (factor -> llamada .)
    DIVIDE          reduce using rule 103 (factor -> llamada .)
    MODULE          reduce using rule 103 (factor -> llamada .)
    PLUS            reduce using rule 103 (factor -> llamada .)
    MINUS           reduce using rule 103 (factor -> llamada .)
    GREATER         reduce using rule 103 (factor -> llamada .)
    LESSER          reduce using rule 103 (factor -> llamada .)
    GREATER_EQUAL   reduce using rule 103 (factor -> llamada .)
    LESSER_EQUAL    reduce using rule 103 (factor -> llamada .)
    EQUAL           reduce using rule 103 (factor -> llamada .)
    NOT_EQUAL       reduce using rule 103 (factor -> llamada .)
    AND             reduce using rule 103 (factor -> llamada .)
    OR              reduce using rule 103 (factor -> llamada .)
    SEMICOLON       reduce using rule 103 (factor -> llamada .)
    COMMA           reduce using rule 103 (factor -> llamada .)
    C_PARENTHESIS   reduce using rule 103 (factor -> llamada .)
    C_ABRACKET      reduce using rule 103 (factor -> llamada .)
    O_CBRACKET      reduce using rule 103 (factor -> llamada .)
    TO              reduce using rule 103 (factor -> llamada .)


state 108

    (104) factor -> cte .

    TIMES           reduce using rule 104 (factor -> cte .)
    DIVIDE          reduce using rule 104 (factor -> cte .)
    MODULE          reduce using rule 104 (factor -> cte .)
    PLUS            reduce using rule 104 (factor -> cte .)
    MINUS           reduce using rule 104 (factor -> cte .)
    GREATER         reduce using rule 104 (factor -> cte .)
    LESSER          reduce using rule 104 (factor -> cte .)
    GREATER_EQUAL   reduce using rule 104 (factor -> cte .)
    LESSER_EQUAL    reduce using rule 104 (factor -> cte .)
    EQUAL           reduce using rule 104 (factor -> cte .)
    NOT_EQUAL       reduce using rule 104 (factor -> cte .)
    AND             reduce using rule 104 (factor -> cte .)
    OR              reduce using rule 104 (factor -> cte .)
    SEMICOLON       reduce using rule 104 (factor -> cte .)
    COMMA           reduce using rule 104 (factor -> cte .)
    C_PARENTHESIS   reduce using rule 104 (factor -> cte .)
    C_ABRACKET      reduce using rule 104 (factor -> cte .)
    O_CBRACKET      reduce using rule 104 (factor -> cte .)
    TO              reduce using rule 104 (factor -> cte .)


state 109

    (105) factor -> PLUS . cte
    (107) cte -> . CTE_INT
    (108) cte -> . CTE_FLOAT

    CTE_INT         shift and go to state 112
    CTE_FLOAT       shift and go to state 113

    cte                            shift and go to state 155

state 110

    (106) factor -> MINUS . cte
    (107) cte -> . CTE_INT
    (108) cte -> . CTE_FLOAT

    CTE_INT         shift and go to state 112
    CTE_FLOAT       shift and go to state 113

    cte                            shift and go to state 156

state 111

    (35) variable -> ID . O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> ID . O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> ID . O_ABRACKET exp C_ABRACKET
    (38) variable -> ID .
    (49) llamada -> ID . O_PARENTHESIS llamada_prime C_PARENTHESIS

    O_ABRACKET      shift and go to state 83
    TIMES           reduce using rule 38 (variable -> ID .)
    DIVIDE          reduce using rule 38 (variable -> ID .)
    MODULE          reduce using rule 38 (variable -> ID .)
    PLUS            reduce using rule 38 (variable -> ID .)
    MINUS           reduce using rule 38 (variable -> ID .)
    GREATER         reduce using rule 38 (variable -> ID .)
    LESSER          reduce using rule 38 (variable -> ID .)
    GREATER_EQUAL   reduce using rule 38 (variable -> ID .)
    LESSER_EQUAL    reduce using rule 38 (variable -> ID .)
    EQUAL           reduce using rule 38 (variable -> ID .)
    NOT_EQUAL       reduce using rule 38 (variable -> ID .)
    AND             reduce using rule 38 (variable -> ID .)
    OR              reduce using rule 38 (variable -> ID .)
    SEMICOLON       reduce using rule 38 (variable -> ID .)
    COMMA           reduce using rule 38 (variable -> ID .)
    C_PARENTHESIS   reduce using rule 38 (variable -> ID .)
    C_ABRACKET      reduce using rule 38 (variable -> ID .)
    O_CBRACKET      reduce using rule 38 (variable -> ID .)
    TO              reduce using rule 38 (variable -> ID .)
    O_PARENTHESIS   shift and go to state 82


state 112

    (107) cte -> CTE_INT .

    TIMES           reduce using rule 107 (cte -> CTE_INT .)
    DIVIDE          reduce using rule 107 (cte -> CTE_INT .)
    MODULE          reduce using rule 107 (cte -> CTE_INT .)
    PLUS            reduce using rule 107 (cte -> CTE_INT .)
    MINUS           reduce using rule 107 (cte -> CTE_INT .)
    GREATER         reduce using rule 107 (cte -> CTE_INT .)
    LESSER          reduce using rule 107 (cte -> CTE_INT .)
    GREATER_EQUAL   reduce using rule 107 (cte -> CTE_INT .)
    LESSER_EQUAL    reduce using rule 107 (cte -> CTE_INT .)
    EQUAL           reduce using rule 107 (cte -> CTE_INT .)
    NOT_EQUAL       reduce using rule 107 (cte -> CTE_INT .)
    AND             reduce using rule 107 (cte -> CTE_INT .)
    OR              reduce using rule 107 (cte -> CTE_INT .)
    SEMICOLON       reduce using rule 107 (cte -> CTE_INT .)
    COMMA           reduce using rule 107 (cte -> CTE_INT .)
    C_PARENTHESIS   reduce using rule 107 (cte -> CTE_INT .)
    C_ABRACKET      reduce using rule 107 (cte -> CTE_INT .)
    O_CBRACKET      reduce using rule 107 (cte -> CTE_INT .)
    TO              reduce using rule 107 (cte -> CTE_INT .)


state 113

    (108) cte -> CTE_FLOAT .

    TIMES           reduce using rule 108 (cte -> CTE_FLOAT .)
    DIVIDE          reduce using rule 108 (cte -> CTE_FLOAT .)
    MODULE          reduce using rule 108 (cte -> CTE_FLOAT .)
    PLUS            reduce using rule 108 (cte -> CTE_FLOAT .)
    MINUS           reduce using rule 108 (cte -> CTE_FLOAT .)
    GREATER         reduce using rule 108 (cte -> CTE_FLOAT .)
    LESSER          reduce using rule 108 (cte -> CTE_FLOAT .)
    GREATER_EQUAL   reduce using rule 108 (cte -> CTE_FLOAT .)
    LESSER_EQUAL    reduce using rule 108 (cte -> CTE_FLOAT .)
    EQUAL           reduce using rule 108 (cte -> CTE_FLOAT .)
    NOT_EQUAL       reduce using rule 108 (cte -> CTE_FLOAT .)
    AND             reduce using rule 108 (cte -> CTE_FLOAT .)
    OR              reduce using rule 108 (cte -> CTE_FLOAT .)
    SEMICOLON       reduce using rule 108 (cte -> CTE_FLOAT .)
    COMMA           reduce using rule 108 (cte -> CTE_FLOAT .)
    C_PARENTHESIS   reduce using rule 108 (cte -> CTE_FLOAT .)
    C_ABRACKET      reduce using rule 108 (cte -> CTE_FLOAT .)
    O_CBRACKET      reduce using rule 108 (cte -> CTE_FLOAT .)
    TO              reduce using rule 108 (cte -> CTE_FLOAT .)


state 114

    (49) llamada -> ID O_PARENTHESIS llamada_prime . C_PARENTHESIS

    C_PARENTHESIS   shift and go to state 157


state 115

    (50) llamada_prime -> exp .
    (51) llamada_prime -> exp . COMMA llamada_prime

    C_PARENTHESIS   reduce using rule 50 (llamada_prime -> exp .)
    COMMA           shift and go to state 158


state 116

    (35) variable -> ID O_ABRACKET exp . C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> ID O_ABRACKET exp . C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> ID O_ABRACKET exp . C_ABRACKET

    C_ABRACKET      shift and go to state 159


state 117

    (52) retorno -> RETURN O_PARENTHESIS expr . C_PARENTHESIS

    C_PARENTHESIS   shift and go to state 160


state 118

    (53) lectura -> READ O_PARENTHESIS lectura_prime . C_PARENTHESIS

    C_PARENTHESIS   shift and go to state 161


state 119

    (54) lectura_prime -> variable .
    (55) lectura_prime -> variable . COMMA lectura_prime

    C_PARENTHESIS   reduce using rule 54 (lectura_prime -> variable .)
    COMMA           shift and go to state 162


state 120

    (56) escritura -> WRITE O_PARENTHESIS escritura_prime . C_PARENTHESIS

    C_PARENTHESIS   shift and go to state 163


state 121

    (57) escritura_prime -> expr .
    (59) escritura_prime -> expr . COMMA escritura_prime

    C_PARENTHESIS   reduce using rule 57 (escritura_prime -> expr .)
    COMMA           shift and go to state 164


state 122

    (58) escritura_prime -> escritura_string .
    (60) escritura_prime -> escritura_string . COMMA escritura_prime

    C_PARENTHESIS   reduce using rule 58 (escritura_prime -> escritura_string .)
    COMMA           shift and go to state 165


state 123

    (61) escritura_string -> CTE_STRING .

    COMMA           reduce using rule 61 (escritura_string -> CTE_STRING .)
    C_PARENTHESIS   reduce using rule 61 (escritura_string -> CTE_STRING .)


state 124

    (62) decision -> IF O_PARENTHESIS decision_expr . C_PARENTHESIS bloque else

    C_PARENTHESIS   shift and go to state 166


state 125

    (63) decision_expr -> expr .

    C_PARENTHESIS   reduce using rule 63 (decision_expr -> expr .)


state 126

    (67) while -> while_prime while_expr bloque .

    ID              reduce using rule 67 (while -> while_prime while_expr bloque .)
    RETURN          reduce using rule 67 (while -> while_prime while_expr bloque .)
    READ            reduce using rule 67 (while -> while_prime while_expr bloque .)
    WRITE           reduce using rule 67 (while -> while_prime while_expr bloque .)
    IF              reduce using rule 67 (while -> while_prime while_expr bloque .)
    FOR             reduce using rule 67 (while -> while_prime while_expr bloque .)
    WHILE           reduce using rule 67 (while -> while_prime while_expr bloque .)
    C_CBRACKET      reduce using rule 67 (while -> while_prime while_expr bloque .)


state 127

    (69) while_expr -> O_PARENTHESIS expr . C_PARENTHESIS

    C_PARENTHESIS   shift and go to state 167


state 128

    (70) for -> FOR for_asignacion for_to . for_exp bloque
    (74) for_exp -> . exp
    (92) exp -> . termino
    (93) exp -> . termino exp_operador exp
    (96) termino -> . factor
    (97) termino -> . factor termino_operador termino
    (101) factor -> . variable
    (102) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (103) factor -> . llamada
    (104) factor -> . cte
    (105) factor -> . PLUS cte
    (106) factor -> . MINUS cte
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID O_ABRACKET exp C_ABRACKET
    (38) variable -> . ID
    (49) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (107) cte -> . CTE_INT
    (108) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 106
    PLUS            shift and go to state 109
    MINUS           shift and go to state 110
    ID              shift and go to state 111
    CTE_INT         shift and go to state 112
    CTE_FLOAT       shift and go to state 113

    for_exp                        shift and go to state 168
    exp                            shift and go to state 169
    termino                        shift and go to state 104
    factor                         shift and go to state 105
    variable                       shift and go to state 96
    llamada                        shift and go to state 107
    cte                            shift and go to state 108

state 129

    (73) for_to -> TO .

    O_PARENTHESIS   reduce using rule 73 (for_to -> TO .)
    PLUS            reduce using rule 73 (for_to -> TO .)
    MINUS           reduce using rule 73 (for_to -> TO .)
    ID              reduce using rule 73 (for_to -> TO .)
    CTE_INT         reduce using rule 73 (for_to -> TO .)
    CTE_FLOAT       reduce using rule 73 (for_to -> TO .)


state 130

    (71) for_asignacion -> variable ASSIGN . for_asignacion_expr
    (72) for_asignacion_expr -> . expr
    (75) expr -> . or
    (76) or -> . and
    (77) or -> . and or_operador or
    (79) and -> . equal
    (80) and -> . equal and_operador and
    (82) equal -> . compare
    (83) equal -> . compare equal_operador compare
    (86) compare -> . exp
    (87) compare -> . exp compare_operador exp
    (92) exp -> . termino
    (93) exp -> . termino exp_operador exp
    (96) termino -> . factor
    (97) termino -> . factor termino_operador termino
    (101) factor -> . variable
    (102) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (103) factor -> . llamada
    (104) factor -> . cte
    (105) factor -> . PLUS cte
    (106) factor -> . MINUS cte
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID O_ABRACKET exp C_ABRACKET
    (38) variable -> . ID
    (49) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (107) cte -> . CTE_INT
    (108) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 106
    PLUS            shift and go to state 109
    MINUS           shift and go to state 110
    ID              shift and go to state 111
    CTE_INT         shift and go to state 112
    CTE_FLOAT       shift and go to state 113

    variable                       shift and go to state 96
    for_asignacion_expr            shift and go to state 170
    expr                           shift and go to state 171
    or                             shift and go to state 99
    and                            shift and go to state 100
    equal                          shift and go to state 101
    compare                        shift and go to state 102
    exp                            shift and go to state 103
    termino                        shift and go to state 104
    factor                         shift and go to state 105
    llamada                        shift and go to state 107
    cte                            shift and go to state 108

state 131

    (27) funcion_base -> FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion . bloque
    (3) bloque -> . O_CBRACKET bloque_prime C_CBRACKET

    O_CBRACKET      shift and go to state 30

    bloque                         shift and go to state 172

state 132

    (6) declaracion_funcion -> declaracion .

    O_CBRACKET      reduce using rule 6 (declaracion_funcion -> declaracion .)


state 133

    (29) funcion_prime -> tipo ID COMMA . funcion_prime
    (28) funcion_prime -> . tipo ID
    (29) funcion_prime -> . tipo ID COMMA funcion_prime
    (21) tipo -> . INT
    (22) tipo -> . FLOAT
    (23) tipo -> . CHAR
    (24) tipo -> . STRING

    INT             shift and go to state 68
    FLOAT           shift and go to state 69
    CHAR            shift and go to state 70
    STRING          shift and go to state 71

    tipo                           shift and go to state 67
    funcion_prime                  shift and go to state 173

state 134

    (13) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT . C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (14) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT . C_ABRACKET

    C_ABRACKET      shift and go to state 174


state 135

    (77) or -> and or_operador . or
    (76) or -> . and
    (77) or -> . and or_operador or
    (79) and -> . equal
    (80) and -> . equal and_operador and
    (82) equal -> . compare
    (83) equal -> . compare equal_operador compare
    (86) compare -> . exp
    (87) compare -> . exp compare_operador exp
    (92) exp -> . termino
    (93) exp -> . termino exp_operador exp
    (96) termino -> . factor
    (97) termino -> . factor termino_operador termino
    (101) factor -> . variable
    (102) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (103) factor -> . llamada
    (104) factor -> . cte
    (105) factor -> . PLUS cte
    (106) factor -> . MINUS cte
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID O_ABRACKET exp C_ABRACKET
    (38) variable -> . ID
    (49) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (107) cte -> . CTE_INT
    (108) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 106
    PLUS            shift and go to state 109
    MINUS           shift and go to state 110
    ID              shift and go to state 111
    CTE_INT         shift and go to state 112
    CTE_FLOAT       shift and go to state 113

    and                            shift and go to state 100
    or                             shift and go to state 175
    equal                          shift and go to state 101
    compare                        shift and go to state 102
    exp                            shift and go to state 103
    termino                        shift and go to state 104
    factor                         shift and go to state 105
    variable                       shift and go to state 96
    llamada                        shift and go to state 107
    cte                            shift and go to state 108

state 136

    (78) or_operador -> OR .

    O_PARENTHESIS   reduce using rule 78 (or_operador -> OR .)
    PLUS            reduce using rule 78 (or_operador -> OR .)
    MINUS           reduce using rule 78 (or_operador -> OR .)
    ID              reduce using rule 78 (or_operador -> OR .)
    CTE_INT         reduce using rule 78 (or_operador -> OR .)
    CTE_FLOAT       reduce using rule 78 (or_operador -> OR .)


state 137

    (80) and -> equal and_operador . and
    (79) and -> . equal
    (80) and -> . equal and_operador and
    (82) equal -> . compare
    (83) equal -> . compare equal_operador compare
    (86) compare -> . exp
    (87) compare -> . exp compare_operador exp
    (92) exp -> . termino
    (93) exp -> . termino exp_operador exp
    (96) termino -> . factor
    (97) termino -> . factor termino_operador termino
    (101) factor -> . variable
    (102) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (103) factor -> . llamada
    (104) factor -> . cte
    (105) factor -> . PLUS cte
    (106) factor -> . MINUS cte
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID O_ABRACKET exp C_ABRACKET
    (38) variable -> . ID
    (49) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (107) cte -> . CTE_INT
    (108) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 106
    PLUS            shift and go to state 109
    MINUS           shift and go to state 110
    ID              shift and go to state 111
    CTE_INT         shift and go to state 112
    CTE_FLOAT       shift and go to state 113

    equal                          shift and go to state 101
    and                            shift and go to state 176
    compare                        shift and go to state 102
    exp                            shift and go to state 103
    termino                        shift and go to state 104
    factor                         shift and go to state 105
    variable                       shift and go to state 96
    llamada                        shift and go to state 107
    cte                            shift and go to state 108

state 138

    (81) and_operador -> AND .

    O_PARENTHESIS   reduce using rule 81 (and_operador -> AND .)
    PLUS            reduce using rule 81 (and_operador -> AND .)
    MINUS           reduce using rule 81 (and_operador -> AND .)
    ID              reduce using rule 81 (and_operador -> AND .)
    CTE_INT         reduce using rule 81 (and_operador -> AND .)
    CTE_FLOAT       reduce using rule 81 (and_operador -> AND .)


state 139

    (83) equal -> compare equal_operador . compare
    (86) compare -> . exp
    (87) compare -> . exp compare_operador exp
    (92) exp -> . termino
    (93) exp -> . termino exp_operador exp
    (96) termino -> . factor
    (97) termino -> . factor termino_operador termino
    (101) factor -> . variable
    (102) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (103) factor -> . llamada
    (104) factor -> . cte
    (105) factor -> . PLUS cte
    (106) factor -> . MINUS cte
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID O_ABRACKET exp C_ABRACKET
    (38) variable -> . ID
    (49) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (107) cte -> . CTE_INT
    (108) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 106
    PLUS            shift and go to state 109
    MINUS           shift and go to state 110
    ID              shift and go to state 111
    CTE_INT         shift and go to state 112
    CTE_FLOAT       shift and go to state 113

    compare                        shift and go to state 177
    exp                            shift and go to state 103
    termino                        shift and go to state 104
    factor                         shift and go to state 105
    variable                       shift and go to state 96
    llamada                        shift and go to state 107
    cte                            shift and go to state 108

state 140

    (84) equal_operador -> EQUAL .

    O_PARENTHESIS   reduce using rule 84 (equal_operador -> EQUAL .)
    PLUS            reduce using rule 84 (equal_operador -> EQUAL .)
    MINUS           reduce using rule 84 (equal_operador -> EQUAL .)
    ID              reduce using rule 84 (equal_operador -> EQUAL .)
    CTE_INT         reduce using rule 84 (equal_operador -> EQUAL .)
    CTE_FLOAT       reduce using rule 84 (equal_operador -> EQUAL .)


state 141

    (85) equal_operador -> NOT_EQUAL .

    O_PARENTHESIS   reduce using rule 85 (equal_operador -> NOT_EQUAL .)
    PLUS            reduce using rule 85 (equal_operador -> NOT_EQUAL .)
    MINUS           reduce using rule 85 (equal_operador -> NOT_EQUAL .)
    ID              reduce using rule 85 (equal_operador -> NOT_EQUAL .)
    CTE_INT         reduce using rule 85 (equal_operador -> NOT_EQUAL .)
    CTE_FLOAT       reduce using rule 85 (equal_operador -> NOT_EQUAL .)


state 142

    (87) compare -> exp compare_operador . exp
    (92) exp -> . termino
    (93) exp -> . termino exp_operador exp
    (96) termino -> . factor
    (97) termino -> . factor termino_operador termino
    (101) factor -> . variable
    (102) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (103) factor -> . llamada
    (104) factor -> . cte
    (105) factor -> . PLUS cte
    (106) factor -> . MINUS cte
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID O_ABRACKET exp C_ABRACKET
    (38) variable -> . ID
    (49) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (107) cte -> . CTE_INT
    (108) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 106
    PLUS            shift and go to state 109
    MINUS           shift and go to state 110
    ID              shift and go to state 111
    CTE_INT         shift and go to state 112
    CTE_FLOAT       shift and go to state 113

    exp                            shift and go to state 178
    termino                        shift and go to state 104
    factor                         shift and go to state 105
    variable                       shift and go to state 96
    llamada                        shift and go to state 107
    cte                            shift and go to state 108

state 143

    (88) compare_operador -> GREATER .

    O_PARENTHESIS   reduce using rule 88 (compare_operador -> GREATER .)
    PLUS            reduce using rule 88 (compare_operador -> GREATER .)
    MINUS           reduce using rule 88 (compare_operador -> GREATER .)
    ID              reduce using rule 88 (compare_operador -> GREATER .)
    CTE_INT         reduce using rule 88 (compare_operador -> GREATER .)
    CTE_FLOAT       reduce using rule 88 (compare_operador -> GREATER .)


state 144

    (89) compare_operador -> LESSER .

    O_PARENTHESIS   reduce using rule 89 (compare_operador -> LESSER .)
    PLUS            reduce using rule 89 (compare_operador -> LESSER .)
    MINUS           reduce using rule 89 (compare_operador -> LESSER .)
    ID              reduce using rule 89 (compare_operador -> LESSER .)
    CTE_INT         reduce using rule 89 (compare_operador -> LESSER .)
    CTE_FLOAT       reduce using rule 89 (compare_operador -> LESSER .)


state 145

    (90) compare_operador -> GREATER_EQUAL .

    O_PARENTHESIS   reduce using rule 90 (compare_operador -> GREATER_EQUAL .)
    PLUS            reduce using rule 90 (compare_operador -> GREATER_EQUAL .)
    MINUS           reduce using rule 90 (compare_operador -> GREATER_EQUAL .)
    ID              reduce using rule 90 (compare_operador -> GREATER_EQUAL .)
    CTE_INT         reduce using rule 90 (compare_operador -> GREATER_EQUAL .)
    CTE_FLOAT       reduce using rule 90 (compare_operador -> GREATER_EQUAL .)


state 146

    (91) compare_operador -> LESSER_EQUAL .

    O_PARENTHESIS   reduce using rule 91 (compare_operador -> LESSER_EQUAL .)
    PLUS            reduce using rule 91 (compare_operador -> LESSER_EQUAL .)
    MINUS           reduce using rule 91 (compare_operador -> LESSER_EQUAL .)
    ID              reduce using rule 91 (compare_operador -> LESSER_EQUAL .)
    CTE_INT         reduce using rule 91 (compare_operador -> LESSER_EQUAL .)
    CTE_FLOAT       reduce using rule 91 (compare_operador -> LESSER_EQUAL .)


state 147

    (93) exp -> termino exp_operador . exp
    (92) exp -> . termino
    (93) exp -> . termino exp_operador exp
    (96) termino -> . factor
    (97) termino -> . factor termino_operador termino
    (101) factor -> . variable
    (102) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (103) factor -> . llamada
    (104) factor -> . cte
    (105) factor -> . PLUS cte
    (106) factor -> . MINUS cte
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID O_ABRACKET exp C_ABRACKET
    (38) variable -> . ID
    (49) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (107) cte -> . CTE_INT
    (108) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 106
    PLUS            shift and go to state 109
    MINUS           shift and go to state 110
    ID              shift and go to state 111
    CTE_INT         shift and go to state 112
    CTE_FLOAT       shift and go to state 113

    termino                        shift and go to state 104
    exp                            shift and go to state 179
    factor                         shift and go to state 105
    variable                       shift and go to state 96
    llamada                        shift and go to state 107
    cte                            shift and go to state 108

state 148

    (94) exp_operador -> PLUS .

    O_PARENTHESIS   reduce using rule 94 (exp_operador -> PLUS .)
    PLUS            reduce using rule 94 (exp_operador -> PLUS .)
    MINUS           reduce using rule 94 (exp_operador -> PLUS .)
    ID              reduce using rule 94 (exp_operador -> PLUS .)
    CTE_INT         reduce using rule 94 (exp_operador -> PLUS .)
    CTE_FLOAT       reduce using rule 94 (exp_operador -> PLUS .)


state 149

    (95) exp_operador -> MINUS .

    O_PARENTHESIS   reduce using rule 95 (exp_operador -> MINUS .)
    PLUS            reduce using rule 95 (exp_operador -> MINUS .)
    MINUS           reduce using rule 95 (exp_operador -> MINUS .)
    ID              reduce using rule 95 (exp_operador -> MINUS .)
    CTE_INT         reduce using rule 95 (exp_operador -> MINUS .)
    CTE_FLOAT       reduce using rule 95 (exp_operador -> MINUS .)


state 150

    (97) termino -> factor termino_operador . termino
    (96) termino -> . factor
    (97) termino -> . factor termino_operador termino
    (101) factor -> . variable
    (102) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (103) factor -> . llamada
    (104) factor -> . cte
    (105) factor -> . PLUS cte
    (106) factor -> . MINUS cte
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID O_ABRACKET exp C_ABRACKET
    (38) variable -> . ID
    (49) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (107) cte -> . CTE_INT
    (108) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 106
    PLUS            shift and go to state 109
    MINUS           shift and go to state 110
    ID              shift and go to state 111
    CTE_INT         shift and go to state 112
    CTE_FLOAT       shift and go to state 113

    factor                         shift and go to state 105
    termino                        shift and go to state 180
    variable                       shift and go to state 96
    llamada                        shift and go to state 107
    cte                            shift and go to state 108

state 151

    (98) termino_operador -> TIMES .

    O_PARENTHESIS   reduce using rule 98 (termino_operador -> TIMES .)
    PLUS            reduce using rule 98 (termino_operador -> TIMES .)
    MINUS           reduce using rule 98 (termino_operador -> TIMES .)
    ID              reduce using rule 98 (termino_operador -> TIMES .)
    CTE_INT         reduce using rule 98 (termino_operador -> TIMES .)
    CTE_FLOAT       reduce using rule 98 (termino_operador -> TIMES .)


state 152

    (99) termino_operador -> DIVIDE .

    O_PARENTHESIS   reduce using rule 99 (termino_operador -> DIVIDE .)
    PLUS            reduce using rule 99 (termino_operador -> DIVIDE .)
    MINUS           reduce using rule 99 (termino_operador -> DIVIDE .)
    ID              reduce using rule 99 (termino_operador -> DIVIDE .)
    CTE_INT         reduce using rule 99 (termino_operador -> DIVIDE .)
    CTE_FLOAT       reduce using rule 99 (termino_operador -> DIVIDE .)


state 153

    (100) termino_operador -> MODULE .

    O_PARENTHESIS   reduce using rule 100 (termino_operador -> MODULE .)
    PLUS            reduce using rule 100 (termino_operador -> MODULE .)
    MINUS           reduce using rule 100 (termino_operador -> MODULE .)
    ID              reduce using rule 100 (termino_operador -> MODULE .)
    CTE_INT         reduce using rule 100 (termino_operador -> MODULE .)
    CTE_FLOAT       reduce using rule 100 (termino_operador -> MODULE .)


state 154

    (102) factor -> O_PARENTHESIS expr . C_PARENTHESIS

    C_PARENTHESIS   shift and go to state 181


state 155

    (105) factor -> PLUS cte .

    TIMES           reduce using rule 105 (factor -> PLUS cte .)
    DIVIDE          reduce using rule 105 (factor -> PLUS cte .)
    MODULE          reduce using rule 105 (factor -> PLUS cte .)
    PLUS            reduce using rule 105 (factor -> PLUS cte .)
    MINUS           reduce using rule 105 (factor -> PLUS cte .)
    GREATER         reduce using rule 105 (factor -> PLUS cte .)
    LESSER          reduce using rule 105 (factor -> PLUS cte .)
    GREATER_EQUAL   reduce using rule 105 (factor -> PLUS cte .)
    LESSER_EQUAL    reduce using rule 105 (factor -> PLUS cte .)
    EQUAL           reduce using rule 105 (factor -> PLUS cte .)
    NOT_EQUAL       reduce using rule 105 (factor -> PLUS cte .)
    AND             reduce using rule 105 (factor -> PLUS cte .)
    OR              reduce using rule 105 (factor -> PLUS cte .)
    SEMICOLON       reduce using rule 105 (factor -> PLUS cte .)
    COMMA           reduce using rule 105 (factor -> PLUS cte .)
    C_PARENTHESIS   reduce using rule 105 (factor -> PLUS cte .)
    C_ABRACKET      reduce using rule 105 (factor -> PLUS cte .)
    O_CBRACKET      reduce using rule 105 (factor -> PLUS cte .)
    TO              reduce using rule 105 (factor -> PLUS cte .)


state 156

    (106) factor -> MINUS cte .

    TIMES           reduce using rule 106 (factor -> MINUS cte .)
    DIVIDE          reduce using rule 106 (factor -> MINUS cte .)
    MODULE          reduce using rule 106 (factor -> MINUS cte .)
    PLUS            reduce using rule 106 (factor -> MINUS cte .)
    MINUS           reduce using rule 106 (factor -> MINUS cte .)
    GREATER         reduce using rule 106 (factor -> MINUS cte .)
    LESSER          reduce using rule 106 (factor -> MINUS cte .)
    GREATER_EQUAL   reduce using rule 106 (factor -> MINUS cte .)
    LESSER_EQUAL    reduce using rule 106 (factor -> MINUS cte .)
    EQUAL           reduce using rule 106 (factor -> MINUS cte .)
    NOT_EQUAL       reduce using rule 106 (factor -> MINUS cte .)
    AND             reduce using rule 106 (factor -> MINUS cte .)
    OR              reduce using rule 106 (factor -> MINUS cte .)
    SEMICOLON       reduce using rule 106 (factor -> MINUS cte .)
    COMMA           reduce using rule 106 (factor -> MINUS cte .)
    C_PARENTHESIS   reduce using rule 106 (factor -> MINUS cte .)
    C_ABRACKET      reduce using rule 106 (factor -> MINUS cte .)
    O_CBRACKET      reduce using rule 106 (factor -> MINUS cte .)
    TO              reduce using rule 106 (factor -> MINUS cte .)


state 157

    (49) llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .

    SEMICOLON       reduce using rule 49 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    TIMES           reduce using rule 49 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    DIVIDE          reduce using rule 49 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    MODULE          reduce using rule 49 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    PLUS            reduce using rule 49 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    MINUS           reduce using rule 49 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    GREATER         reduce using rule 49 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    LESSER          reduce using rule 49 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    GREATER_EQUAL   reduce using rule 49 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    LESSER_EQUAL    reduce using rule 49 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    EQUAL           reduce using rule 49 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    NOT_EQUAL       reduce using rule 49 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    AND             reduce using rule 49 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    OR              reduce using rule 49 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    COMMA           reduce using rule 49 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    C_PARENTHESIS   reduce using rule 49 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    C_ABRACKET      reduce using rule 49 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    O_CBRACKET      reduce using rule 49 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    TO              reduce using rule 49 (llamada -> ID O_PARENTHESIS llamada_prime C_PARENTHESIS .)


state 158

    (51) llamada_prime -> exp COMMA . llamada_prime
    (50) llamada_prime -> . exp
    (51) llamada_prime -> . exp COMMA llamada_prime
    (92) exp -> . termino
    (93) exp -> . termino exp_operador exp
    (96) termino -> . factor
    (97) termino -> . factor termino_operador termino
    (101) factor -> . variable
    (102) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (103) factor -> . llamada
    (104) factor -> . cte
    (105) factor -> . PLUS cte
    (106) factor -> . MINUS cte
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID O_ABRACKET exp C_ABRACKET
    (38) variable -> . ID
    (49) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (107) cte -> . CTE_INT
    (108) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 106
    PLUS            shift and go to state 109
    MINUS           shift and go to state 110
    ID              shift and go to state 111
    CTE_INT         shift and go to state 112
    CTE_FLOAT       shift and go to state 113

    exp                            shift and go to state 115
    llamada_prime                  shift and go to state 182
    termino                        shift and go to state 104
    factor                         shift and go to state 105
    variable                       shift and go to state 96
    llamada                        shift and go to state 107
    cte                            shift and go to state 108

state 159

    (35) variable -> ID O_ABRACKET exp C_ABRACKET . O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> ID O_ABRACKET exp C_ABRACKET . O_ABRACKET exp C_ABRACKET
    (37) variable -> ID O_ABRACKET exp C_ABRACKET .

    O_ABRACKET      shift and go to state 183
    ASSIGN          reduce using rule 37 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    TIMES           reduce using rule 37 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    DIVIDE          reduce using rule 37 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    MODULE          reduce using rule 37 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    PLUS            reduce using rule 37 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    MINUS           reduce using rule 37 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    GREATER         reduce using rule 37 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    LESSER          reduce using rule 37 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    GREATER_EQUAL   reduce using rule 37 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    LESSER_EQUAL    reduce using rule 37 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    EQUAL           reduce using rule 37 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    NOT_EQUAL       reduce using rule 37 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    AND             reduce using rule 37 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    OR              reduce using rule 37 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    SEMICOLON       reduce using rule 37 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    COMMA           reduce using rule 37 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    C_PARENTHESIS   reduce using rule 37 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    C_ABRACKET      reduce using rule 37 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    O_CBRACKET      reduce using rule 37 (variable -> ID O_ABRACKET exp C_ABRACKET .)
    TO              reduce using rule 37 (variable -> ID O_ABRACKET exp C_ABRACKET .)


state 160

    (52) retorno -> RETURN O_PARENTHESIS expr C_PARENTHESIS .

    SEMICOLON       reduce using rule 52 (retorno -> RETURN O_PARENTHESIS expr C_PARENTHESIS .)


state 161

    (53) lectura -> READ O_PARENTHESIS lectura_prime C_PARENTHESIS .

    SEMICOLON       reduce using rule 53 (lectura -> READ O_PARENTHESIS lectura_prime C_PARENTHESIS .)


state 162

    (55) lectura_prime -> variable COMMA . lectura_prime
    (54) lectura_prime -> . variable
    (55) lectura_prime -> . variable COMMA lectura_prime
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID O_ABRACKET exp C_ABRACKET
    (38) variable -> . ID

    ID              shift and go to state 92

    variable                       shift and go to state 119
    lectura_prime                  shift and go to state 184

state 163

    (56) escritura -> WRITE O_PARENTHESIS escritura_prime C_PARENTHESIS .

    SEMICOLON       reduce using rule 56 (escritura -> WRITE O_PARENTHESIS escritura_prime C_PARENTHESIS .)


state 164

    (59) escritura_prime -> expr COMMA . escritura_prime
    (57) escritura_prime -> . expr
    (58) escritura_prime -> . escritura_string
    (59) escritura_prime -> . expr COMMA escritura_prime
    (60) escritura_prime -> . escritura_string COMMA escritura_prime
    (75) expr -> . or
    (61) escritura_string -> . CTE_STRING
    (76) or -> . and
    (77) or -> . and or_operador or
    (79) and -> . equal
    (80) and -> . equal and_operador and
    (82) equal -> . compare
    (83) equal -> . compare equal_operador compare
    (86) compare -> . exp
    (87) compare -> . exp compare_operador exp
    (92) exp -> . termino
    (93) exp -> . termino exp_operador exp
    (96) termino -> . factor
    (97) termino -> . factor termino_operador termino
    (101) factor -> . variable
    (102) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (103) factor -> . llamada
    (104) factor -> . cte
    (105) factor -> . PLUS cte
    (106) factor -> . MINUS cte
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID O_ABRACKET exp C_ABRACKET
    (38) variable -> . ID
    (49) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (107) cte -> . CTE_INT
    (108) cte -> . CTE_FLOAT

    CTE_STRING      shift and go to state 123
    O_PARENTHESIS   shift and go to state 106
    PLUS            shift and go to state 109
    MINUS           shift and go to state 110
    ID              shift and go to state 111
    CTE_INT         shift and go to state 112
    CTE_FLOAT       shift and go to state 113

    expr                           shift and go to state 121
    escritura_prime                shift and go to state 185
    escritura_string               shift and go to state 122
    or                             shift and go to state 99
    and                            shift and go to state 100
    equal                          shift and go to state 101
    compare                        shift and go to state 102
    exp                            shift and go to state 103
    termino                        shift and go to state 104
    factor                         shift and go to state 105
    variable                       shift and go to state 96
    llamada                        shift and go to state 107
    cte                            shift and go to state 108

state 165

    (60) escritura_prime -> escritura_string COMMA . escritura_prime
    (57) escritura_prime -> . expr
    (58) escritura_prime -> . escritura_string
    (59) escritura_prime -> . expr COMMA escritura_prime
    (60) escritura_prime -> . escritura_string COMMA escritura_prime
    (75) expr -> . or
    (61) escritura_string -> . CTE_STRING
    (76) or -> . and
    (77) or -> . and or_operador or
    (79) and -> . equal
    (80) and -> . equal and_operador and
    (82) equal -> . compare
    (83) equal -> . compare equal_operador compare
    (86) compare -> . exp
    (87) compare -> . exp compare_operador exp
    (92) exp -> . termino
    (93) exp -> . termino exp_operador exp
    (96) termino -> . factor
    (97) termino -> . factor termino_operador termino
    (101) factor -> . variable
    (102) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (103) factor -> . llamada
    (104) factor -> . cte
    (105) factor -> . PLUS cte
    (106) factor -> . MINUS cte
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID O_ABRACKET exp C_ABRACKET
    (38) variable -> . ID
    (49) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (107) cte -> . CTE_INT
    (108) cte -> . CTE_FLOAT

    CTE_STRING      shift and go to state 123
    O_PARENTHESIS   shift and go to state 106
    PLUS            shift and go to state 109
    MINUS           shift and go to state 110
    ID              shift and go to state 111
    CTE_INT         shift and go to state 112
    CTE_FLOAT       shift and go to state 113

    escritura_string               shift and go to state 122
    escritura_prime                shift and go to state 186
    expr                           shift and go to state 121
    or                             shift and go to state 99
    and                            shift and go to state 100
    equal                          shift and go to state 101
    compare                        shift and go to state 102
    exp                            shift and go to state 103
    termino                        shift and go to state 104
    factor                         shift and go to state 105
    variable                       shift and go to state 96
    llamada                        shift and go to state 107
    cte                            shift and go to state 108

state 166

    (62) decision -> IF O_PARENTHESIS decision_expr C_PARENTHESIS . bloque else
    (3) bloque -> . O_CBRACKET bloque_prime C_CBRACKET

    O_CBRACKET      shift and go to state 30

    bloque                         shift and go to state 187

state 167

    (69) while_expr -> O_PARENTHESIS expr C_PARENTHESIS .

    O_CBRACKET      reduce using rule 69 (while_expr -> O_PARENTHESIS expr C_PARENTHESIS .)


state 168

    (70) for -> FOR for_asignacion for_to for_exp . bloque
    (3) bloque -> . O_CBRACKET bloque_prime C_CBRACKET

    O_CBRACKET      shift and go to state 30

    bloque                         shift and go to state 188

state 169

    (74) for_exp -> exp .

    O_CBRACKET      reduce using rule 74 (for_exp -> exp .)


state 170

    (71) for_asignacion -> variable ASSIGN for_asignacion_expr .

    TO              reduce using rule 71 (for_asignacion -> variable ASSIGN for_asignacion_expr .)


state 171

    (72) for_asignacion_expr -> expr .

    TO              reduce using rule 72 (for_asignacion_expr -> expr .)


state 172

    (27) funcion_base -> FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque .

    FUNCTION        reduce using rule 27 (funcion_base -> FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque .)
    MAIN            reduce using rule 27 (funcion_base -> FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque .)


state 173

    (29) funcion_prime -> tipo ID COMMA funcion_prime .

    C_PARENTHESIS   reduce using rule 29 (funcion_prime -> tipo ID COMMA funcion_prime .)


state 174

    (13) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET . O_ABRACKET CTE_INT C_ABRACKET
    (14) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET .

    O_ABRACKET      shift and go to state 189
    COMMA           reduce using rule 14 (declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET .)
    COLON           reduce using rule 14 (declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET .)


state 175

    (77) or -> and or_operador or .

    SEMICOLON       reduce using rule 77 (or -> and or_operador or .)
    C_PARENTHESIS   reduce using rule 77 (or -> and or_operador or .)
    COMMA           reduce using rule 77 (or -> and or_operador or .)
    TO              reduce using rule 77 (or -> and or_operador or .)


state 176

    (80) and -> equal and_operador and .

    OR              reduce using rule 80 (and -> equal and_operador and .)
    SEMICOLON       reduce using rule 80 (and -> equal and_operador and .)
    C_PARENTHESIS   reduce using rule 80 (and -> equal and_operador and .)
    COMMA           reduce using rule 80 (and -> equal and_operador and .)
    TO              reduce using rule 80 (and -> equal and_operador and .)


state 177

    (83) equal -> compare equal_operador compare .

    AND             reduce using rule 83 (equal -> compare equal_operador compare .)
    OR              reduce using rule 83 (equal -> compare equal_operador compare .)
    SEMICOLON       reduce using rule 83 (equal -> compare equal_operador compare .)
    C_PARENTHESIS   reduce using rule 83 (equal -> compare equal_operador compare .)
    COMMA           reduce using rule 83 (equal -> compare equal_operador compare .)
    TO              reduce using rule 83 (equal -> compare equal_operador compare .)


state 178

    (87) compare -> exp compare_operador exp .

    EQUAL           reduce using rule 87 (compare -> exp compare_operador exp .)
    NOT_EQUAL       reduce using rule 87 (compare -> exp compare_operador exp .)
    AND             reduce using rule 87 (compare -> exp compare_operador exp .)
    OR              reduce using rule 87 (compare -> exp compare_operador exp .)
    SEMICOLON       reduce using rule 87 (compare -> exp compare_operador exp .)
    C_PARENTHESIS   reduce using rule 87 (compare -> exp compare_operador exp .)
    COMMA           reduce using rule 87 (compare -> exp compare_operador exp .)
    TO              reduce using rule 87 (compare -> exp compare_operador exp .)


state 179

    (93) exp -> termino exp_operador exp .

    GREATER         reduce using rule 93 (exp -> termino exp_operador exp .)
    LESSER          reduce using rule 93 (exp -> termino exp_operador exp .)
    GREATER_EQUAL   reduce using rule 93 (exp -> termino exp_operador exp .)
    LESSER_EQUAL    reduce using rule 93 (exp -> termino exp_operador exp .)
    EQUAL           reduce using rule 93 (exp -> termino exp_operador exp .)
    NOT_EQUAL       reduce using rule 93 (exp -> termino exp_operador exp .)
    AND             reduce using rule 93 (exp -> termino exp_operador exp .)
    OR              reduce using rule 93 (exp -> termino exp_operador exp .)
    SEMICOLON       reduce using rule 93 (exp -> termino exp_operador exp .)
    COMMA           reduce using rule 93 (exp -> termino exp_operador exp .)
    C_PARENTHESIS   reduce using rule 93 (exp -> termino exp_operador exp .)
    C_ABRACKET      reduce using rule 93 (exp -> termino exp_operador exp .)
    O_CBRACKET      reduce using rule 93 (exp -> termino exp_operador exp .)
    TO              reduce using rule 93 (exp -> termino exp_operador exp .)


state 180

    (97) termino -> factor termino_operador termino .

    PLUS            reduce using rule 97 (termino -> factor termino_operador termino .)
    MINUS           reduce using rule 97 (termino -> factor termino_operador termino .)
    GREATER         reduce using rule 97 (termino -> factor termino_operador termino .)
    LESSER          reduce using rule 97 (termino -> factor termino_operador termino .)
    GREATER_EQUAL   reduce using rule 97 (termino -> factor termino_operador termino .)
    LESSER_EQUAL    reduce using rule 97 (termino -> factor termino_operador termino .)
    EQUAL           reduce using rule 97 (termino -> factor termino_operador termino .)
    NOT_EQUAL       reduce using rule 97 (termino -> factor termino_operador termino .)
    AND             reduce using rule 97 (termino -> factor termino_operador termino .)
    OR              reduce using rule 97 (termino -> factor termino_operador termino .)
    SEMICOLON       reduce using rule 97 (termino -> factor termino_operador termino .)
    COMMA           reduce using rule 97 (termino -> factor termino_operador termino .)
    C_PARENTHESIS   reduce using rule 97 (termino -> factor termino_operador termino .)
    C_ABRACKET      reduce using rule 97 (termino -> factor termino_operador termino .)
    O_CBRACKET      reduce using rule 97 (termino -> factor termino_operador termino .)
    TO              reduce using rule 97 (termino -> factor termino_operador termino .)


state 181

    (102) factor -> O_PARENTHESIS expr C_PARENTHESIS .

    TIMES           reduce using rule 102 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    DIVIDE          reduce using rule 102 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    MODULE          reduce using rule 102 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    PLUS            reduce using rule 102 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    MINUS           reduce using rule 102 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    GREATER         reduce using rule 102 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    LESSER          reduce using rule 102 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    GREATER_EQUAL   reduce using rule 102 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    LESSER_EQUAL    reduce using rule 102 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    EQUAL           reduce using rule 102 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    NOT_EQUAL       reduce using rule 102 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    AND             reduce using rule 102 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    OR              reduce using rule 102 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    SEMICOLON       reduce using rule 102 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    COMMA           reduce using rule 102 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    C_PARENTHESIS   reduce using rule 102 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    C_ABRACKET      reduce using rule 102 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    O_CBRACKET      reduce using rule 102 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    TO              reduce using rule 102 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)


state 182

    (51) llamada_prime -> exp COMMA llamada_prime .

    C_PARENTHESIS   reduce using rule 51 (llamada_prime -> exp COMMA llamada_prime .)


state 183

    (35) variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET . exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET . exp C_ABRACKET
    (92) exp -> . termino
    (93) exp -> . termino exp_operador exp
    (96) termino -> . factor
    (97) termino -> . factor termino_operador termino
    (101) factor -> . variable
    (102) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (103) factor -> . llamada
    (104) factor -> . cte
    (105) factor -> . PLUS cte
    (106) factor -> . MINUS cte
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID O_ABRACKET exp C_ABRACKET
    (38) variable -> . ID
    (49) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (107) cte -> . CTE_INT
    (108) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 106
    PLUS            shift and go to state 109
    MINUS           shift and go to state 110
    ID              shift and go to state 111
    CTE_INT         shift and go to state 112
    CTE_FLOAT       shift and go to state 113

    exp                            shift and go to state 190
    termino                        shift and go to state 104
    factor                         shift and go to state 105
    variable                       shift and go to state 96
    llamada                        shift and go to state 107
    cte                            shift and go to state 108

state 184

    (55) lectura_prime -> variable COMMA lectura_prime .

    C_PARENTHESIS   reduce using rule 55 (lectura_prime -> variable COMMA lectura_prime .)


state 185

    (59) escritura_prime -> expr COMMA escritura_prime .

    C_PARENTHESIS   reduce using rule 59 (escritura_prime -> expr COMMA escritura_prime .)


state 186

    (60) escritura_prime -> escritura_string COMMA escritura_prime .

    C_PARENTHESIS   reduce using rule 60 (escritura_prime -> escritura_string COMMA escritura_prime .)


state 187

    (62) decision -> IF O_PARENTHESIS decision_expr C_PARENTHESIS bloque . else
    (64) else -> . else_prime bloque
    (65) else -> . epsilon
    (66) else_prime -> . ELSE
    (109) epsilon -> .

    ELSE            shift and go to state 194
    ID              reduce using rule 109 (epsilon -> .)
    RETURN          reduce using rule 109 (epsilon -> .)
    READ            reduce using rule 109 (epsilon -> .)
    WRITE           reduce using rule 109 (epsilon -> .)
    IF              reduce using rule 109 (epsilon -> .)
    FOR             reduce using rule 109 (epsilon -> .)
    WHILE           reduce using rule 109 (epsilon -> .)
    C_CBRACKET      reduce using rule 109 (epsilon -> .)

    else                           shift and go to state 191
    else_prime                     shift and go to state 192
    epsilon                        shift and go to state 193

state 188

    (70) for -> FOR for_asignacion for_to for_exp bloque .

    ID              reduce using rule 70 (for -> FOR for_asignacion for_to for_exp bloque .)
    RETURN          reduce using rule 70 (for -> FOR for_asignacion for_to for_exp bloque .)
    READ            reduce using rule 70 (for -> FOR for_asignacion for_to for_exp bloque .)
    WRITE           reduce using rule 70 (for -> FOR for_asignacion for_to for_exp bloque .)
    IF              reduce using rule 70 (for -> FOR for_asignacion for_to for_exp bloque .)
    FOR             reduce using rule 70 (for -> FOR for_asignacion for_to for_exp bloque .)
    WHILE           reduce using rule 70 (for -> FOR for_asignacion for_to for_exp bloque .)
    C_CBRACKET      reduce using rule 70 (for -> FOR for_asignacion for_to for_exp bloque .)


state 189

    (13) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET . CTE_INT C_ABRACKET

    CTE_INT         shift and go to state 195


state 190

    (35) variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp . C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp . C_ABRACKET

    C_ABRACKET      shift and go to state 196


state 191

    (62) decision -> IF O_PARENTHESIS decision_expr C_PARENTHESIS bloque else .

    ID              reduce using rule 62 (decision -> IF O_PARENTHESIS decision_expr C_PARENTHESIS bloque else .)
    RETURN          reduce using rule 62 (decision -> IF O_PARENTHESIS decision_expr C_PARENTHESIS bloque else .)
    READ            reduce using rule 62 (decision -> IF O_PARENTHESIS decision_expr C_PARENTHESIS bloque else .)
    WRITE           reduce using rule 62 (decision -> IF O_PARENTHESIS decision_expr C_PARENTHESIS bloque else .)
    IF              reduce using rule 62 (decision -> IF O_PARENTHESIS decision_expr C_PARENTHESIS bloque else .)
    FOR             reduce using rule 62 (decision -> IF O_PARENTHESIS decision_expr C_PARENTHESIS bloque else .)
    WHILE           reduce using rule 62 (decision -> IF O_PARENTHESIS decision_expr C_PARENTHESIS bloque else .)
    C_CBRACKET      reduce using rule 62 (decision -> IF O_PARENTHESIS decision_expr C_PARENTHESIS bloque else .)


state 192

    (64) else -> else_prime . bloque
    (3) bloque -> . O_CBRACKET bloque_prime C_CBRACKET

    O_CBRACKET      shift and go to state 30

    bloque                         shift and go to state 197

state 193

    (65) else -> epsilon .

    ID              reduce using rule 65 (else -> epsilon .)
    RETURN          reduce using rule 65 (else -> epsilon .)
    READ            reduce using rule 65 (else -> epsilon .)
    WRITE           reduce using rule 65 (else -> epsilon .)
    IF              reduce using rule 65 (else -> epsilon .)
    FOR             reduce using rule 65 (else -> epsilon .)
    WHILE           reduce using rule 65 (else -> epsilon .)
    C_CBRACKET      reduce using rule 65 (else -> epsilon .)


state 194

    (66) else_prime -> ELSE .

    O_CBRACKET      reduce using rule 66 (else_prime -> ELSE .)


state 195

    (13) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT . C_ABRACKET

    C_ABRACKET      shift and go to state 198


state 196

    (35) variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET . O_ABRACKET exp C_ABRACKET
    (36) variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .

    O_ABRACKET      shift and go to state 199
    ASSIGN          reduce using rule 36 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    TIMES           reduce using rule 36 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    DIVIDE          reduce using rule 36 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    MODULE          reduce using rule 36 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    PLUS            reduce using rule 36 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    MINUS           reduce using rule 36 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    GREATER         reduce using rule 36 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    LESSER          reduce using rule 36 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    GREATER_EQUAL   reduce using rule 36 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    LESSER_EQUAL    reduce using rule 36 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    EQUAL           reduce using rule 36 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    NOT_EQUAL       reduce using rule 36 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    AND             reduce using rule 36 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    OR              reduce using rule 36 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    SEMICOLON       reduce using rule 36 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    COMMA           reduce using rule 36 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    C_PARENTHESIS   reduce using rule 36 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    C_ABRACKET      reduce using rule 36 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    O_CBRACKET      reduce using rule 36 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    TO              reduce using rule 36 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)


state 197

    (64) else -> else_prime bloque .

    ID              reduce using rule 64 (else -> else_prime bloque .)
    RETURN          reduce using rule 64 (else -> else_prime bloque .)
    READ            reduce using rule 64 (else -> else_prime bloque .)
    WRITE           reduce using rule 64 (else -> else_prime bloque .)
    IF              reduce using rule 64 (else -> else_prime bloque .)
    FOR             reduce using rule 64 (else -> else_prime bloque .)
    WHILE           reduce using rule 64 (else -> else_prime bloque .)
    C_CBRACKET      reduce using rule 64 (else -> else_prime bloque .)


state 198

    (13) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET .

    COMMA           reduce using rule 13 (declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET .)
    COLON           reduce using rule 13 (declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET .)


state 199

    (35) variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET . exp C_ABRACKET
    (92) exp -> . termino
    (93) exp -> . termino exp_operador exp
    (96) termino -> . factor
    (97) termino -> . factor termino_operador termino
    (101) factor -> . variable
    (102) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (103) factor -> . llamada
    (104) factor -> . cte
    (105) factor -> . PLUS cte
    (106) factor -> . MINUS cte
    (35) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (36) variable -> . ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET
    (37) variable -> . ID O_ABRACKET exp C_ABRACKET
    (38) variable -> . ID
    (49) llamada -> . ID O_PARENTHESIS llamada_prime C_PARENTHESIS
    (107) cte -> . CTE_INT
    (108) cte -> . CTE_FLOAT

    O_PARENTHESIS   shift and go to state 106
    PLUS            shift and go to state 109
    MINUS           shift and go to state 110
    ID              shift and go to state 111
    CTE_INT         shift and go to state 112
    CTE_FLOAT       shift and go to state 113

    exp                            shift and go to state 200
    termino                        shift and go to state 104
    factor                         shift and go to state 105
    variable                       shift and go to state 96
    llamada                        shift and go to state 107
    cte                            shift and go to state 108

state 200

    (35) variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp . C_ABRACKET

    C_ABRACKET      shift and go to state 201


state 201

    (35) variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .

    ASSIGN          reduce using rule 35 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    TIMES           reduce using rule 35 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    DIVIDE          reduce using rule 35 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    MODULE          reduce using rule 35 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    PLUS            reduce using rule 35 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    MINUS           reduce using rule 35 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    GREATER         reduce using rule 35 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    LESSER          reduce using rule 35 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    GREATER_EQUAL   reduce using rule 35 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    LESSER_EQUAL    reduce using rule 35 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    EQUAL           reduce using rule 35 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    NOT_EQUAL       reduce using rule 35 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    AND             reduce using rule 35 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    OR              reduce using rule 35 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    SEMICOLON       reduce using rule 35 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    COMMA           reduce using rule 35 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    C_PARENTHESIS   reduce using rule 35 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    C_ABRACKET      reduce using rule 35 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    O_CBRACKET      reduce using rule 35 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)
    TO              reduce using rule 35 (variable -> ID O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET O_ABRACKET exp C_ABRACKET .)

