Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CTE_CHAR

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAM ID SEMICOLON declaracion_global funcion main bloque
Rule 2     main -> MAIN O_PARENTHESIS C_PARENTHESIS
Rule 3     bloque -> O_CBRACKET bloque_prime C_CBRACKET
Rule 4     bloque_prime -> estatuto bloque_prime
Rule 5     bloque_prime -> epsilon
Rule 6     declaracion_funcion -> declaracion
Rule 7     declaracion_funcion -> epsilon
Rule 8     declaracion_global -> declaracion
Rule 9     declaracion -> declaracion_base
Rule 10    declaracion -> declaracion_base declaracion
Rule 11    declaracion_base -> LET declaracion_prime COLON declaracion_tipo SEMICOLON
Rule 12    declaracion_prime -> declaracion_variable
Rule 13    declaracion_prime -> declaracion_variable COMMA declaracion_prime
Rule 14    declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
Rule 15    declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
Rule 16    declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET
Rule 17    declaracion_variable -> ID
Rule 18    declaracion_tipo -> INT
Rule 19    declaracion_tipo -> FLOAT
Rule 20    declaracion_tipo -> CHAR
Rule 21    declaracion_tipo -> STRING
Rule 22    param_tipo -> INT ID
Rule 23    param_tipo -> FLOAT ID
Rule 24    param_tipo -> CHAR ID
Rule 25    param_tipo -> STRING ID
Rule 26    funcion -> funcion_base funcion
Rule 27    funcion -> epsilon
Rule 28    funcion_base -> FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque
Rule 29    funcion_prime -> param_tipo
Rule 30    funcion_prime -> param_tipo COMMA funcion_prime
Rule 31    funcion_ident -> VOID ID
Rule 32    funcion_ident -> INT ID
Rule 33    funcion_ident -> FLOAT ID
Rule 34    funcion_ident -> CHAR ID
Rule 35    funcion_ident -> STRING ID
Rule 36    variable -> var_array
Rule 37    variable -> ID
Rule 38    var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
Rule 39    var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
Rule 40    var_array -> arr_id O_ABRACKET exp arr_close_bracket
Rule 41    arr_id -> ID
Rule 42    arr_close_bracket -> C_ABRACKET
Rule 43    arr_open_bracket -> O_ABRACKET
Rule 44    estatuto -> asignacion SEMICOLON
Rule 45    estatuto -> llamada SEMICOLON
Rule 46    estatuto -> retorno SEMICOLON
Rule 47    estatuto -> lectura SEMICOLON
Rule 48    estatuto -> escritura SEMICOLON
Rule 49    estatuto -> decision
Rule 50    estatuto -> while
Rule 51    estatuto -> for
Rule 52    asignacion -> variable ASSIGN asignacion_expr
Rule 53    asignacion_expr -> expr
Rule 54    llamada -> function_id O_PARENTHESIS llamada_prime C_PARENTHESIS
Rule 55    function_id -> ID
Rule 56    llamada_prime -> llamada_exp
Rule 57    llamada_prime -> llamada_exp llamada_comma llamada_prime
Rule 58    llamada_exp -> exp
Rule 59    llamada_comma -> COMMA
Rule 60    retorno -> RETURN expr
Rule 61    lectura -> READ O_PARENTHESIS lectura_prime C_PARENTHESIS
Rule 62    lectura_prime -> variable
Rule 63    lectura_prime -> variable COMMA lectura_prime
Rule 64    escritura -> WRITE O_PARENTHESIS escritura_prime C_PARENTHESIS
Rule 65    escritura_prime -> expr
Rule 66    escritura_prime -> escritura_string
Rule 67    escritura_prime -> expr COMMA escritura_prime
Rule 68    escritura_prime -> escritura_string COMMA escritura_prime
Rule 69    escritura_string -> CTE_STRING
Rule 70    decision -> IF O_PARENTHESIS decision_expr C_PARENTHESIS bloque else
Rule 71    decision_expr -> expr
Rule 72    else -> else_prime bloque
Rule 73    else -> epsilon
Rule 74    else_prime -> ELSE
Rule 75    while -> while_prime while_expr bloque
Rule 76    while_prime -> WHILE
Rule 77    while_expr -> O_PARENTHESIS expr C_PARENTHESIS
Rule 78    for -> FOR for_asignacion for_to for_exp bloque
Rule 79    for_asignacion -> variable ASSIGN for_asignacion_expr
Rule 80    for_asignacion_expr -> expr
Rule 81    for_to -> TO
Rule 82    for_exp -> exp
Rule 83    expr -> or
Rule 84    or -> and
Rule 85    or -> and or_operador or
Rule 86    or_operador -> OR
Rule 87    and -> equal
Rule 88    and -> equal and_operador and
Rule 89    and_operador -> AND
Rule 90    equal -> compare
Rule 91    equal -> compare equal_operador compare
Rule 92    equal_operador -> EQUAL
Rule 93    equal_operador -> NOT_EQUAL
Rule 94    compare -> exp
Rule 95    compare -> exp compare_operador exp
Rule 96    compare_operador -> GREATER
Rule 97    compare_operador -> LESSER
Rule 98    compare_operador -> GREATER_EQUAL
Rule 99    compare_operador -> LESSER_EQUAL
Rule 100   exp -> termino
Rule 101   exp -> termino exp_operador exp
Rule 102   exp_operador -> PLUS
Rule 103   exp_operador -> MINUS
Rule 104   termino -> factor
Rule 105   termino -> factor termino_operador termino
Rule 106   termino_operador -> TIMES
Rule 107   termino_operador -> DIVIDE
Rule 108   termino_operador -> MODULE
Rule 109   factor -> variable
Rule 110   factor -> O_PARENTHESIS expr C_PARENTHESIS
Rule 111   factor -> llamada retorno_llamada
Rule 112   factor -> cte
Rule 113   factor -> PLUS cte
Rule 114   factor -> MINUS cte
Rule 115   retorno_llamada -> epsilon
Rule 116   cte -> CTE_INT
Rule 117   cte -> CTE_FLOAT
Rule 118   epsilon -> <empty>

Terminals, with rules where they appear

AND                  : 89
ASSIGN               : 52 79
CHAR                 : 20 24 34
COLON                : 11
COMMA                : 13 30 59 63 67 68
CTE_CHAR             : 
CTE_FLOAT            : 117
CTE_INT              : 14 14 14 15 15 16 116
CTE_STRING           : 69
C_ABRACKET           : 14 14 14 15 15 16 42
C_CBRACKET           : 3
C_PARENTHESIS        : 2 28 54 61 64 70 77 110
DIVIDE               : 107
ELSE                 : 74
EQUAL                : 92
FLOAT                : 19 23 33
FOR                  : 78
FUNCTION             : 28
GREATER              : 96
GREATER_EQUAL        : 98
ID                   : 1 14 15 16 17 22 23 24 25 31 32 33 34 35 37 41 55
IF                   : 70
INT                  : 18 22 32
LESSER               : 97
LESSER_EQUAL         : 99
LET                  : 11
MAIN                 : 2
MINUS                : 103 114
MODULE               : 108
NOT_EQUAL            : 93
OR                   : 86
O_ABRACKET           : 14 14 14 15 15 16 38 39 40 43
O_CBRACKET           : 3
O_PARENTHESIS        : 2 28 54 61 64 70 77 110
PLUS                 : 102 113
PROGRAM              : 1
READ                 : 61
RETURN               : 60
SEMICOLON            : 1 11 44 45 46 47 48
STRING               : 21 25 35
TIMES                : 106
TO                   : 81
VOID                 : 31
WHILE                : 76
WRITE                : 64
error                : 

Nonterminals, with rules where they appear

and                  : 84 85 88
and_operador         : 88
arr_close_bracket    : 38 38 38 39 39 40
arr_id               : 38 39 40
arr_open_bracket     : 38 38 39
asignacion           : 44
asignacion_expr      : 52
bloque               : 1 28 70 72 75 78
bloque_prime         : 3 4
compare              : 90 91 91
compare_operador     : 95
cte                  : 112 113 114
decision             : 49
decision_expr        : 70
declaracion          : 6 8 10
declaracion_base     : 9 10
declaracion_funcion  : 28
declaracion_global   : 1
declaracion_prime    : 11 13
declaracion_tipo     : 11
declaracion_variable : 12 13
else                 : 70
else_prime           : 72
epsilon              : 5 7 27 73 115
equal                : 87 88
equal_operador       : 91
escritura            : 48
escritura_prime      : 64 67 68
escritura_string     : 66 68
estatuto             : 4
exp                  : 38 38 38 39 39 40 58 82 94 95 95 101
exp_operador         : 101
expr                 : 53 60 65 67 71 77 80 110
factor               : 104 105
for                  : 51
for_asignacion       : 78
for_asignacion_expr  : 79
for_exp              : 78
for_to               : 78
funcion              : 1 26
funcion_base         : 26
funcion_ident        : 28
funcion_prime        : 28 30
function_id          : 54
lectura              : 47
lectura_prime        : 61 63
llamada              : 45 111
llamada_comma        : 57
llamada_exp          : 56 57
llamada_prime        : 54 57
main                 : 1
or                   : 83 85
or_operador          : 85
param_tipo           : 29 30
programa             : 0
retorno              : 46
retorno_llamada      : 111
termino              : 100 101 105
termino_operador     : 105
var_array            : 36
variable             : 52 62 63 79 109
while                : 50
while_expr           : 75
while_prime          : 75

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAM ID SEMICOLON declaracion_global funcion main bloque

    PROGRAM         shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> PROGRAM . ID SEMICOLON declaracion_global funcion main bloque

    ID              shift and go to state 3


state 3

    (1) programa -> PROGRAM ID . SEMICOLON declaracion_global funcion main bloque

    SEMICOLON       shift and go to state 4


state 4

    (1) programa -> PROGRAM ID SEMICOLON . declaracion_global funcion main bloque
    (8) declaracion_global -> . declaracion
    (9) declaracion -> . declaracion_base
    (10) declaracion -> . declaracion_base declaracion
    (11) declaracion_base -> . LET declaracion_prime COLON declaracion_tipo SEMICOLON

    LET             shift and go to state 8

    declaracion_global             shift and go to state 5
    declaracion                    shift and go to state 6
    declaracion_base               shift and go to state 7

state 5

    (1) programa -> PROGRAM ID SEMICOLON declaracion_global . funcion main bloque
    (26) funcion -> . funcion_base funcion
    (27) funcion -> . epsilon
    (28) funcion_base -> . FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque
    (118) epsilon -> .

    FUNCTION        shift and go to state 12
    MAIN            reduce using rule 118 (epsilon -> .)

    funcion                        shift and go to state 9
    funcion_base                   shift and go to state 10
    epsilon                        shift and go to state 11

state 6

    (8) declaracion_global -> declaracion .

    FUNCTION        reduce using rule 8 (declaracion_global -> declaracion .)
    MAIN            reduce using rule 8 (declaracion_global -> declaracion .)


state 7

    (9) declaracion -> declaracion_base .
    (10) declaracion -> declaracion_base . declaracion
    (9) declaracion -> . declaracion_base
    (10) declaracion -> . declaracion_base declaracion
    (11) declaracion_base -> . LET declaracion_prime COLON declaracion_tipo SEMICOLON

    FUNCTION        reduce using rule 9 (declaracion -> declaracion_base .)
    MAIN            reduce using rule 9 (declaracion -> declaracion_base .)
    O_CBRACKET      reduce using rule 9 (declaracion -> declaracion_base .)
    LET             shift and go to state 8

    declaracion_base               shift and go to state 7
    declaracion                    shift and go to state 13

state 8

    (11) declaracion_base -> LET . declaracion_prime COLON declaracion_tipo SEMICOLON
    (12) declaracion_prime -> . declaracion_variable
    (13) declaracion_prime -> . declaracion_variable COMMA declaracion_prime
    (14) declaracion_variable -> . ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (15) declaracion_variable -> . ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (16) declaracion_variable -> . ID O_ABRACKET CTE_INT C_ABRACKET
    (17) declaracion_variable -> . ID

    ID              shift and go to state 16

    declaracion_prime              shift and go to state 14
    declaracion_variable           shift and go to state 15

state 9

    (1) programa -> PROGRAM ID SEMICOLON declaracion_global funcion . main bloque
    (2) main -> . MAIN O_PARENTHESIS C_PARENTHESIS

    MAIN            shift and go to state 18

    main                           shift and go to state 17

state 10

    (26) funcion -> funcion_base . funcion
    (26) funcion -> . funcion_base funcion
    (27) funcion -> . epsilon
    (28) funcion_base -> . FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque
    (118) epsilon -> .

    FUNCTION        shift and go to state 12
    MAIN            reduce using rule 118 (epsilon -> .)

    funcion_base                   shift and go to state 10
    funcion                        shift and go to state 19
    epsilon                        shift and go to state 11

state 11

    (27) funcion -> epsilon .

    MAIN            reduce using rule 27 (funcion -> epsilon .)


state 12

    (28) funcion_base -> FUNCTION . funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque
    (31) funcion_ident -> . VOID ID
    (32) funcion_ident -> . INT ID
    (33) funcion_ident -> . FLOAT ID
    (34) funcion_ident -> . CHAR ID
    (35) funcion_ident -> . STRING ID

    VOID            shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    STRING          shift and go to state 25

    funcion_ident                  shift and go to state 20

state 13

    (10) declaracion -> declaracion_base declaracion .

    FUNCTION        reduce using rule 10 (declaracion -> declaracion_base declaracion .)
    MAIN            reduce using rule 10 (declaracion -> declaracion_base declaracion .)
    O_CBRACKET      reduce using rule 10 (declaracion -> declaracion_base declaracion .)


state 14

    (11) declaracion_base -> LET declaracion_prime . COLON declaracion_tipo SEMICOLON

    COLON           shift and go to state 26


state 15

    (12) declaracion_prime -> declaracion_variable .
    (13) declaracion_prime -> declaracion_variable . COMMA declaracion_prime

    COLON           reduce using rule 12 (declaracion_prime -> declaracion_variable .)
    COMMA           shift and go to state 27


state 16

    (14) declaracion_variable -> ID . O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (15) declaracion_variable -> ID . O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (16) declaracion_variable -> ID . O_ABRACKET CTE_INT C_ABRACKET
    (17) declaracion_variable -> ID .

    O_ABRACKET      shift and go to state 28
    COMMA           reduce using rule 17 (declaracion_variable -> ID .)
    COLON           reduce using rule 17 (declaracion_variable -> ID .)


state 17

    (1) programa -> PROGRAM ID SEMICOLON declaracion_global funcion main . bloque
    (3) bloque -> . O_CBRACKET bloque_prime C_CBRACKET

    O_CBRACKET      shift and go to state 30

    bloque                         shift and go to state 29

state 18

    (2) main -> MAIN . O_PARENTHESIS C_PARENTHESIS

    O_PARENTHESIS   shift and go to state 31


state 19

    (26) funcion -> funcion_base funcion .

    MAIN            reduce using rule 26 (funcion -> funcion_base funcion .)


state 20

    (28) funcion_base -> FUNCTION funcion_ident . O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque

    O_PARENTHESIS   shift and go to state 32


state 21

    (31) funcion_ident -> VOID . ID

    ID              shift and go to state 33


state 22

    (32) funcion_ident -> INT . ID

    ID              shift and go to state 34


state 23

    (33) funcion_ident -> FLOAT . ID

    ID              shift and go to state 35


state 24

    (34) funcion_ident -> CHAR . ID

    ID              shift and go to state 36


state 25

    (35) funcion_ident -> STRING . ID

    ID              shift and go to state 37


state 26

    (11) declaracion_base -> LET declaracion_prime COLON . declaracion_tipo SEMICOLON
    (18) declaracion_tipo -> . INT
    (19) declaracion_tipo -> . FLOAT
    (20) declaracion_tipo -> . CHAR
    (21) declaracion_tipo -> . STRING

    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    CHAR            shift and go to state 41
    STRING          shift and go to state 42

    declaracion_tipo               shift and go to state 38

state 27

    (13) declaracion_prime -> declaracion_variable COMMA . declaracion_prime
    (12) declaracion_prime -> . declaracion_variable
    (13) declaracion_prime -> . declaracion_variable COMMA declaracion_prime
    (14) declaracion_variable -> . ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (15) declaracion_variable -> . ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (16) declaracion_variable -> . ID O_ABRACKET CTE_INT C_ABRACKET
    (17) declaracion_variable -> . ID

    ID              shift and go to state 16

    declaracion_variable           shift and go to state 15
    declaracion_prime              shift and go to state 43

state 28

    (14) declaracion_variable -> ID O_ABRACKET . CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (15) declaracion_variable -> ID O_ABRACKET . CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (16) declaracion_variable -> ID O_ABRACKET . CTE_INT C_ABRACKET

    CTE_INT         shift and go to state 44


state 29

    (1) programa -> PROGRAM ID SEMICOLON declaracion_global funcion main bloque .

    $end            reduce using rule 1 (programa -> PROGRAM ID SEMICOLON declaracion_global funcion main bloque .)


state 30

    (3) bloque -> O_CBRACKET . bloque_prime C_CBRACKET
    (4) bloque_prime -> . estatuto bloque_prime
    (5) bloque_prime -> . epsilon
    (44) estatuto -> . asignacion SEMICOLON
    (45) estatuto -> . llamada SEMICOLON
    (46) estatuto -> . retorno SEMICOLON
    (47) estatuto -> . lectura SEMICOLON
    (48) estatuto -> . escritura SEMICOLON
    (49) estatuto -> . decision
    (50) estatuto -> . while
    (51) estatuto -> . for
    (118) epsilon -> .
    (52) asignacion -> . variable ASSIGN asignacion_expr
    (54) llamada -> . function_id O_PARENTHESIS llamada_prime C_PARENTHESIS
    (60) retorno -> . RETURN expr
    (61) lectura -> . READ O_PARENTHESIS lectura_prime C_PARENTHESIS
    (64) escritura -> . WRITE O_PARENTHESIS escritura_prime C_PARENTHESIS
    (70) decision -> . IF O_PARENTHESIS decision_expr C_PARENTHESIS bloque else
    (75) while -> . while_prime while_expr bloque
    (78) for -> . FOR for_asignacion for_to for_exp bloque
    (36) variable -> . var_array
    (37) variable -> . ID
    (55) function_id -> . ID
    (76) while_prime -> . WHILE
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (40) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (41) arr_id -> . ID

    C_CBRACKET      reduce using rule 118 (epsilon -> .)
    RETURN          shift and go to state 58
    READ            shift and go to state 59
    WRITE           shift and go to state 60
    IF              shift and go to state 61
    FOR             shift and go to state 63
    ID              shift and go to state 65
    WHILE           shift and go to state 66

    bloque_prime                   shift and go to state 45
    estatuto                       shift and go to state 46
    epsilon                        shift and go to state 47
    asignacion                     shift and go to state 48
    llamada                        shift and go to state 49
    retorno                        shift and go to state 50
    lectura                        shift and go to state 51
    escritura                      shift and go to state 52
    decision                       shift and go to state 53
    while                          shift and go to state 54
    for                            shift and go to state 55
    variable                       shift and go to state 56
    function_id                    shift and go to state 57
    while_prime                    shift and go to state 62
    var_array                      shift and go to state 64
    arr_id                         shift and go to state 67

state 31

    (2) main -> MAIN O_PARENTHESIS . C_PARENTHESIS

    C_PARENTHESIS   shift and go to state 68


state 32

    (28) funcion_base -> FUNCTION funcion_ident O_PARENTHESIS . funcion_prime C_PARENTHESIS declaracion_funcion bloque
    (29) funcion_prime -> . param_tipo
    (30) funcion_prime -> . param_tipo COMMA funcion_prime
    (22) param_tipo -> . INT ID
    (23) param_tipo -> . FLOAT ID
    (24) param_tipo -> . CHAR ID
    (25) param_tipo -> . STRING ID

    INT             shift and go to state 71
    FLOAT           shift and go to state 72
    CHAR            shift and go to state 73
    STRING          shift and go to state 74

    funcion_prime                  shift and go to state 69
    param_tipo                     shift and go to state 70

state 33

    (31) funcion_ident -> VOID ID .

    O_PARENTHESIS   reduce using rule 31 (funcion_ident -> VOID ID .)


state 34

    (32) funcion_ident -> INT ID .

    O_PARENTHESIS   reduce using rule 32 (funcion_ident -> INT ID .)


state 35

    (33) funcion_ident -> FLOAT ID .

    O_PARENTHESIS   reduce using rule 33 (funcion_ident -> FLOAT ID .)


state 36

    (34) funcion_ident -> CHAR ID .

    O_PARENTHESIS   reduce using rule 34 (funcion_ident -> CHAR ID .)


state 37

    (35) funcion_ident -> STRING ID .

    O_PARENTHESIS   reduce using rule 35 (funcion_ident -> STRING ID .)


state 38

    (11) declaracion_base -> LET declaracion_prime COLON declaracion_tipo . SEMICOLON

    SEMICOLON       shift and go to state 75


state 39

    (18) declaracion_tipo -> INT .

    SEMICOLON       reduce using rule 18 (declaracion_tipo -> INT .)


state 40

    (19) declaracion_tipo -> FLOAT .

    SEMICOLON       reduce using rule 19 (declaracion_tipo -> FLOAT .)


state 41

    (20) declaracion_tipo -> CHAR .

    SEMICOLON       reduce using rule 20 (declaracion_tipo -> CHAR .)


state 42

    (21) declaracion_tipo -> STRING .

    SEMICOLON       reduce using rule 21 (declaracion_tipo -> STRING .)


state 43

    (13) declaracion_prime -> declaracion_variable COMMA declaracion_prime .

    COLON           reduce using rule 13 (declaracion_prime -> declaracion_variable COMMA declaracion_prime .)


state 44

    (14) declaracion_variable -> ID O_ABRACKET CTE_INT . C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (15) declaracion_variable -> ID O_ABRACKET CTE_INT . C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (16) declaracion_variable -> ID O_ABRACKET CTE_INT . C_ABRACKET

    C_ABRACKET      shift and go to state 76


state 45

    (3) bloque -> O_CBRACKET bloque_prime . C_CBRACKET

    C_CBRACKET      shift and go to state 77


state 46

    (4) bloque_prime -> estatuto . bloque_prime
    (4) bloque_prime -> . estatuto bloque_prime
    (5) bloque_prime -> . epsilon
    (44) estatuto -> . asignacion SEMICOLON
    (45) estatuto -> . llamada SEMICOLON
    (46) estatuto -> . retorno SEMICOLON
    (47) estatuto -> . lectura SEMICOLON
    (48) estatuto -> . escritura SEMICOLON
    (49) estatuto -> . decision
    (50) estatuto -> . while
    (51) estatuto -> . for
    (118) epsilon -> .
    (52) asignacion -> . variable ASSIGN asignacion_expr
    (54) llamada -> . function_id O_PARENTHESIS llamada_prime C_PARENTHESIS
    (60) retorno -> . RETURN expr
    (61) lectura -> . READ O_PARENTHESIS lectura_prime C_PARENTHESIS
    (64) escritura -> . WRITE O_PARENTHESIS escritura_prime C_PARENTHESIS
    (70) decision -> . IF O_PARENTHESIS decision_expr C_PARENTHESIS bloque else
    (75) while -> . while_prime while_expr bloque
    (78) for -> . FOR for_asignacion for_to for_exp bloque
    (36) variable -> . var_array
    (37) variable -> . ID
    (55) function_id -> . ID
    (76) while_prime -> . WHILE
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (40) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (41) arr_id -> . ID

    C_CBRACKET      reduce using rule 118 (epsilon -> .)
    RETURN          shift and go to state 58
    READ            shift and go to state 59
    WRITE           shift and go to state 60
    IF              shift and go to state 61
    FOR             shift and go to state 63
    ID              shift and go to state 65
    WHILE           shift and go to state 66

    estatuto                       shift and go to state 46
    bloque_prime                   shift and go to state 78
    epsilon                        shift and go to state 47
    asignacion                     shift and go to state 48
    llamada                        shift and go to state 49
    retorno                        shift and go to state 50
    lectura                        shift and go to state 51
    escritura                      shift and go to state 52
    decision                       shift and go to state 53
    while                          shift and go to state 54
    for                            shift and go to state 55
    variable                       shift and go to state 56
    function_id                    shift and go to state 57
    while_prime                    shift and go to state 62
    var_array                      shift and go to state 64
    arr_id                         shift and go to state 67

state 47

    (5) bloque_prime -> epsilon .

    C_CBRACKET      reduce using rule 5 (bloque_prime -> epsilon .)


state 48

    (44) estatuto -> asignacion . SEMICOLON

    SEMICOLON       shift and go to state 79


state 49

    (45) estatuto -> llamada . SEMICOLON

    SEMICOLON       shift and go to state 80


state 50

    (46) estatuto -> retorno . SEMICOLON

    SEMICOLON       shift and go to state 81


state 51

    (47) estatuto -> lectura . SEMICOLON

    SEMICOLON       shift and go to state 82


state 52

    (48) estatuto -> escritura . SEMICOLON

    SEMICOLON       shift and go to state 83


state 53

    (49) estatuto -> decision .

    RETURN          reduce using rule 49 (estatuto -> decision .)
    READ            reduce using rule 49 (estatuto -> decision .)
    WRITE           reduce using rule 49 (estatuto -> decision .)
    IF              reduce using rule 49 (estatuto -> decision .)
    FOR             reduce using rule 49 (estatuto -> decision .)
    ID              reduce using rule 49 (estatuto -> decision .)
    WHILE           reduce using rule 49 (estatuto -> decision .)
    C_CBRACKET      reduce using rule 49 (estatuto -> decision .)


state 54

    (50) estatuto -> while .

    RETURN          reduce using rule 50 (estatuto -> while .)
    READ            reduce using rule 50 (estatuto -> while .)
    WRITE           reduce using rule 50 (estatuto -> while .)
    IF              reduce using rule 50 (estatuto -> while .)
    FOR             reduce using rule 50 (estatuto -> while .)
    ID              reduce using rule 50 (estatuto -> while .)
    WHILE           reduce using rule 50 (estatuto -> while .)
    C_CBRACKET      reduce using rule 50 (estatuto -> while .)


state 55

    (51) estatuto -> for .

    RETURN          reduce using rule 51 (estatuto -> for .)
    READ            reduce using rule 51 (estatuto -> for .)
    WRITE           reduce using rule 51 (estatuto -> for .)
    IF              reduce using rule 51 (estatuto -> for .)
    FOR             reduce using rule 51 (estatuto -> for .)
    ID              reduce using rule 51 (estatuto -> for .)
    WHILE           reduce using rule 51 (estatuto -> for .)
    C_CBRACKET      reduce using rule 51 (estatuto -> for .)


state 56

    (52) asignacion -> variable . ASSIGN asignacion_expr

    ASSIGN          shift and go to state 84


state 57

    (54) llamada -> function_id . O_PARENTHESIS llamada_prime C_PARENTHESIS

    O_PARENTHESIS   shift and go to state 85


state 58

    (60) retorno -> RETURN . expr
    (83) expr -> . or
    (84) or -> . and
    (85) or -> . and or_operador or
    (87) and -> . equal
    (88) and -> . equal and_operador and
    (90) equal -> . compare
    (91) equal -> . compare equal_operador compare
    (94) compare -> . exp
    (95) compare -> . exp compare_operador exp
    (100) exp -> . termino
    (101) exp -> . termino exp_operador exp
    (104) termino -> . factor
    (105) termino -> . factor termino_operador termino
    (109) factor -> . variable
    (110) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (111) factor -> . llamada retorno_llamada
    (112) factor -> . cte
    (113) factor -> . PLUS cte
    (114) factor -> . MINUS cte
    (36) variable -> . var_array
    (37) variable -> . ID
    (54) llamada -> . function_id O_PARENTHESIS llamada_prime C_PARENTHESIS
    (116) cte -> . CTE_INT
    (117) cte -> . CTE_FLOAT
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (40) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (55) function_id -> . ID
    (41) arr_id -> . ID

    O_PARENTHESIS   shift and go to state 95
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    ID              shift and go to state 65
    CTE_INT         shift and go to state 100
    CTE_FLOAT       shift and go to state 101

    expr                           shift and go to state 86
    or                             shift and go to state 87
    and                            shift and go to state 88
    equal                          shift and go to state 89
    compare                        shift and go to state 90
    exp                            shift and go to state 91
    termino                        shift and go to state 92
    factor                         shift and go to state 93
    variable                       shift and go to state 94
    llamada                        shift and go to state 96
    cte                            shift and go to state 97
    var_array                      shift and go to state 64
    function_id                    shift and go to state 57
    arr_id                         shift and go to state 67

state 59

    (61) lectura -> READ . O_PARENTHESIS lectura_prime C_PARENTHESIS

    O_PARENTHESIS   shift and go to state 102


state 60

    (64) escritura -> WRITE . O_PARENTHESIS escritura_prime C_PARENTHESIS

    O_PARENTHESIS   shift and go to state 103


state 61

    (70) decision -> IF . O_PARENTHESIS decision_expr C_PARENTHESIS bloque else

    O_PARENTHESIS   shift and go to state 104


state 62

    (75) while -> while_prime . while_expr bloque
    (77) while_expr -> . O_PARENTHESIS expr C_PARENTHESIS

    O_PARENTHESIS   shift and go to state 106

    while_expr                     shift and go to state 105

state 63

    (78) for -> FOR . for_asignacion for_to for_exp bloque
    (79) for_asignacion -> . variable ASSIGN for_asignacion_expr
    (36) variable -> . var_array
    (37) variable -> . ID
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (40) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (41) arr_id -> . ID

    ID              shift and go to state 109

    for_asignacion                 shift and go to state 107
    variable                       shift and go to state 108
    var_array                      shift and go to state 64
    arr_id                         shift and go to state 67

state 64

    (36) variable -> var_array .

    ASSIGN          reduce using rule 36 (variable -> var_array .)
    TIMES           reduce using rule 36 (variable -> var_array .)
    DIVIDE          reduce using rule 36 (variable -> var_array .)
    MODULE          reduce using rule 36 (variable -> var_array .)
    PLUS            reduce using rule 36 (variable -> var_array .)
    MINUS           reduce using rule 36 (variable -> var_array .)
    GREATER         reduce using rule 36 (variable -> var_array .)
    LESSER          reduce using rule 36 (variable -> var_array .)
    GREATER_EQUAL   reduce using rule 36 (variable -> var_array .)
    LESSER_EQUAL    reduce using rule 36 (variable -> var_array .)
    EQUAL           reduce using rule 36 (variable -> var_array .)
    NOT_EQUAL       reduce using rule 36 (variable -> var_array .)
    AND             reduce using rule 36 (variable -> var_array .)
    OR              reduce using rule 36 (variable -> var_array .)
    SEMICOLON       reduce using rule 36 (variable -> var_array .)
    COMMA           reduce using rule 36 (variable -> var_array .)
    C_PARENTHESIS   reduce using rule 36 (variable -> var_array .)
    C_ABRACKET      reduce using rule 36 (variable -> var_array .)
    TO              reduce using rule 36 (variable -> var_array .)
    O_CBRACKET      reduce using rule 36 (variable -> var_array .)


state 65

    (37) variable -> ID .
    (55) function_id -> ID .
    (41) arr_id -> ID .

    ASSIGN          reduce using rule 37 (variable -> ID .)
    TIMES           reduce using rule 37 (variable -> ID .)
    DIVIDE          reduce using rule 37 (variable -> ID .)
    MODULE          reduce using rule 37 (variable -> ID .)
    PLUS            reduce using rule 37 (variable -> ID .)
    MINUS           reduce using rule 37 (variable -> ID .)
    GREATER         reduce using rule 37 (variable -> ID .)
    LESSER          reduce using rule 37 (variable -> ID .)
    GREATER_EQUAL   reduce using rule 37 (variable -> ID .)
    LESSER_EQUAL    reduce using rule 37 (variable -> ID .)
    EQUAL           reduce using rule 37 (variable -> ID .)
    NOT_EQUAL       reduce using rule 37 (variable -> ID .)
    AND             reduce using rule 37 (variable -> ID .)
    OR              reduce using rule 37 (variable -> ID .)
    SEMICOLON       reduce using rule 37 (variable -> ID .)
    COMMA           reduce using rule 37 (variable -> ID .)
    C_PARENTHESIS   reduce using rule 37 (variable -> ID .)
    C_ABRACKET      reduce using rule 37 (variable -> ID .)
    TO              reduce using rule 37 (variable -> ID .)
    O_CBRACKET      reduce using rule 37 (variable -> ID .)
    O_PARENTHESIS   reduce using rule 55 (function_id -> ID .)
    O_ABRACKET      reduce using rule 41 (arr_id -> ID .)


state 66

    (76) while_prime -> WHILE .

    O_PARENTHESIS   reduce using rule 76 (while_prime -> WHILE .)


state 67

    (38) var_array -> arr_id . O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> arr_id . O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (40) var_array -> arr_id . O_ABRACKET exp arr_close_bracket

    O_ABRACKET      shift and go to state 110


state 68

    (2) main -> MAIN O_PARENTHESIS C_PARENTHESIS .

    O_CBRACKET      reduce using rule 2 (main -> MAIN O_PARENTHESIS C_PARENTHESIS .)


state 69

    (28) funcion_base -> FUNCTION funcion_ident O_PARENTHESIS funcion_prime . C_PARENTHESIS declaracion_funcion bloque

    C_PARENTHESIS   shift and go to state 111


state 70

    (29) funcion_prime -> param_tipo .
    (30) funcion_prime -> param_tipo . COMMA funcion_prime

    C_PARENTHESIS   reduce using rule 29 (funcion_prime -> param_tipo .)
    COMMA           shift and go to state 112


state 71

    (22) param_tipo -> INT . ID

    ID              shift and go to state 113


state 72

    (23) param_tipo -> FLOAT . ID

    ID              shift and go to state 114


state 73

    (24) param_tipo -> CHAR . ID

    ID              shift and go to state 115


state 74

    (25) param_tipo -> STRING . ID

    ID              shift and go to state 116


state 75

    (11) declaracion_base -> LET declaracion_prime COLON declaracion_tipo SEMICOLON .

    LET             reduce using rule 11 (declaracion_base -> LET declaracion_prime COLON declaracion_tipo SEMICOLON .)
    FUNCTION        reduce using rule 11 (declaracion_base -> LET declaracion_prime COLON declaracion_tipo SEMICOLON .)
    MAIN            reduce using rule 11 (declaracion_base -> LET declaracion_prime COLON declaracion_tipo SEMICOLON .)
    O_CBRACKET      reduce using rule 11 (declaracion_base -> LET declaracion_prime COLON declaracion_tipo SEMICOLON .)


state 76

    (14) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET . O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (15) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET . O_ABRACKET CTE_INT C_ABRACKET
    (16) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET .

    O_ABRACKET      shift and go to state 117
    COMMA           reduce using rule 16 (declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET .)
    COLON           reduce using rule 16 (declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET .)


state 77

    (3) bloque -> O_CBRACKET bloque_prime C_CBRACKET .

    $end            reduce using rule 3 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    RETURN          reduce using rule 3 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    READ            reduce using rule 3 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    WRITE           reduce using rule 3 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    IF              reduce using rule 3 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    FOR             reduce using rule 3 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    ID              reduce using rule 3 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    WHILE           reduce using rule 3 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    C_CBRACKET      reduce using rule 3 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    FUNCTION        reduce using rule 3 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    MAIN            reduce using rule 3 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)
    ELSE            reduce using rule 3 (bloque -> O_CBRACKET bloque_prime C_CBRACKET .)


state 78

    (4) bloque_prime -> estatuto bloque_prime .

    C_CBRACKET      reduce using rule 4 (bloque_prime -> estatuto bloque_prime .)


state 79

    (44) estatuto -> asignacion SEMICOLON .

    RETURN          reduce using rule 44 (estatuto -> asignacion SEMICOLON .)
    READ            reduce using rule 44 (estatuto -> asignacion SEMICOLON .)
    WRITE           reduce using rule 44 (estatuto -> asignacion SEMICOLON .)
    IF              reduce using rule 44 (estatuto -> asignacion SEMICOLON .)
    FOR             reduce using rule 44 (estatuto -> asignacion SEMICOLON .)
    ID              reduce using rule 44 (estatuto -> asignacion SEMICOLON .)
    WHILE           reduce using rule 44 (estatuto -> asignacion SEMICOLON .)
    C_CBRACKET      reduce using rule 44 (estatuto -> asignacion SEMICOLON .)


state 80

    (45) estatuto -> llamada SEMICOLON .

    RETURN          reduce using rule 45 (estatuto -> llamada SEMICOLON .)
    READ            reduce using rule 45 (estatuto -> llamada SEMICOLON .)
    WRITE           reduce using rule 45 (estatuto -> llamada SEMICOLON .)
    IF              reduce using rule 45 (estatuto -> llamada SEMICOLON .)
    FOR             reduce using rule 45 (estatuto -> llamada SEMICOLON .)
    ID              reduce using rule 45 (estatuto -> llamada SEMICOLON .)
    WHILE           reduce using rule 45 (estatuto -> llamada SEMICOLON .)
    C_CBRACKET      reduce using rule 45 (estatuto -> llamada SEMICOLON .)


state 81

    (46) estatuto -> retorno SEMICOLON .

    RETURN          reduce using rule 46 (estatuto -> retorno SEMICOLON .)
    READ            reduce using rule 46 (estatuto -> retorno SEMICOLON .)
    WRITE           reduce using rule 46 (estatuto -> retorno SEMICOLON .)
    IF              reduce using rule 46 (estatuto -> retorno SEMICOLON .)
    FOR             reduce using rule 46 (estatuto -> retorno SEMICOLON .)
    ID              reduce using rule 46 (estatuto -> retorno SEMICOLON .)
    WHILE           reduce using rule 46 (estatuto -> retorno SEMICOLON .)
    C_CBRACKET      reduce using rule 46 (estatuto -> retorno SEMICOLON .)


state 82

    (47) estatuto -> lectura SEMICOLON .

    RETURN          reduce using rule 47 (estatuto -> lectura SEMICOLON .)
    READ            reduce using rule 47 (estatuto -> lectura SEMICOLON .)
    WRITE           reduce using rule 47 (estatuto -> lectura SEMICOLON .)
    IF              reduce using rule 47 (estatuto -> lectura SEMICOLON .)
    FOR             reduce using rule 47 (estatuto -> lectura SEMICOLON .)
    ID              reduce using rule 47 (estatuto -> lectura SEMICOLON .)
    WHILE           reduce using rule 47 (estatuto -> lectura SEMICOLON .)
    C_CBRACKET      reduce using rule 47 (estatuto -> lectura SEMICOLON .)


state 83

    (48) estatuto -> escritura SEMICOLON .

    RETURN          reduce using rule 48 (estatuto -> escritura SEMICOLON .)
    READ            reduce using rule 48 (estatuto -> escritura SEMICOLON .)
    WRITE           reduce using rule 48 (estatuto -> escritura SEMICOLON .)
    IF              reduce using rule 48 (estatuto -> escritura SEMICOLON .)
    FOR             reduce using rule 48 (estatuto -> escritura SEMICOLON .)
    ID              reduce using rule 48 (estatuto -> escritura SEMICOLON .)
    WHILE           reduce using rule 48 (estatuto -> escritura SEMICOLON .)
    C_CBRACKET      reduce using rule 48 (estatuto -> escritura SEMICOLON .)


state 84

    (52) asignacion -> variable ASSIGN . asignacion_expr
    (53) asignacion_expr -> . expr
    (83) expr -> . or
    (84) or -> . and
    (85) or -> . and or_operador or
    (87) and -> . equal
    (88) and -> . equal and_operador and
    (90) equal -> . compare
    (91) equal -> . compare equal_operador compare
    (94) compare -> . exp
    (95) compare -> . exp compare_operador exp
    (100) exp -> . termino
    (101) exp -> . termino exp_operador exp
    (104) termino -> . factor
    (105) termino -> . factor termino_operador termino
    (109) factor -> . variable
    (110) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (111) factor -> . llamada retorno_llamada
    (112) factor -> . cte
    (113) factor -> . PLUS cte
    (114) factor -> . MINUS cte
    (36) variable -> . var_array
    (37) variable -> . ID
    (54) llamada -> . function_id O_PARENTHESIS llamada_prime C_PARENTHESIS
    (116) cte -> . CTE_INT
    (117) cte -> . CTE_FLOAT
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (40) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (55) function_id -> . ID
    (41) arr_id -> . ID

    O_PARENTHESIS   shift and go to state 95
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    ID              shift and go to state 65
    CTE_INT         shift and go to state 100
    CTE_FLOAT       shift and go to state 101

    variable                       shift and go to state 94
    asignacion_expr                shift and go to state 118
    expr                           shift and go to state 119
    or                             shift and go to state 87
    and                            shift and go to state 88
    equal                          shift and go to state 89
    compare                        shift and go to state 90
    exp                            shift and go to state 91
    termino                        shift and go to state 92
    factor                         shift and go to state 93
    llamada                        shift and go to state 96
    cte                            shift and go to state 97
    var_array                      shift and go to state 64
    function_id                    shift and go to state 57
    arr_id                         shift and go to state 67

state 85

    (54) llamada -> function_id O_PARENTHESIS . llamada_prime C_PARENTHESIS
    (56) llamada_prime -> . llamada_exp
    (57) llamada_prime -> . llamada_exp llamada_comma llamada_prime
    (58) llamada_exp -> . exp
    (100) exp -> . termino
    (101) exp -> . termino exp_operador exp
    (104) termino -> . factor
    (105) termino -> . factor termino_operador termino
    (109) factor -> . variable
    (110) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (111) factor -> . llamada retorno_llamada
    (112) factor -> . cte
    (113) factor -> . PLUS cte
    (114) factor -> . MINUS cte
    (36) variable -> . var_array
    (37) variable -> . ID
    (54) llamada -> . function_id O_PARENTHESIS llamada_prime C_PARENTHESIS
    (116) cte -> . CTE_INT
    (117) cte -> . CTE_FLOAT
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (40) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (55) function_id -> . ID
    (41) arr_id -> . ID

    O_PARENTHESIS   shift and go to state 95
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    ID              shift and go to state 65
    CTE_INT         shift and go to state 100
    CTE_FLOAT       shift and go to state 101

    function_id                    shift and go to state 57
    llamada_prime                  shift and go to state 120
    llamada_exp                    shift and go to state 121
    exp                            shift and go to state 122
    termino                        shift and go to state 92
    factor                         shift and go to state 93
    variable                       shift and go to state 94
    llamada                        shift and go to state 96
    cte                            shift and go to state 97
    var_array                      shift and go to state 64
    arr_id                         shift and go to state 67

state 86

    (60) retorno -> RETURN expr .

    SEMICOLON       reduce using rule 60 (retorno -> RETURN expr .)


state 87

    (83) expr -> or .

    SEMICOLON       reduce using rule 83 (expr -> or .)
    C_PARENTHESIS   reduce using rule 83 (expr -> or .)
    COMMA           reduce using rule 83 (expr -> or .)
    TO              reduce using rule 83 (expr -> or .)


state 88

    (84) or -> and .
    (85) or -> and . or_operador or
    (86) or_operador -> . OR

    SEMICOLON       reduce using rule 84 (or -> and .)
    C_PARENTHESIS   reduce using rule 84 (or -> and .)
    COMMA           reduce using rule 84 (or -> and .)
    TO              reduce using rule 84 (or -> and .)
    OR              shift and go to state 124

    or_operador                    shift and go to state 123

state 89

    (87) and -> equal .
    (88) and -> equal . and_operador and
    (89) and_operador -> . AND

    OR              reduce using rule 87 (and -> equal .)
    SEMICOLON       reduce using rule 87 (and -> equal .)
    C_PARENTHESIS   reduce using rule 87 (and -> equal .)
    COMMA           reduce using rule 87 (and -> equal .)
    TO              reduce using rule 87 (and -> equal .)
    AND             shift and go to state 126

    and_operador                   shift and go to state 125

state 90

    (90) equal -> compare .
    (91) equal -> compare . equal_operador compare
    (92) equal_operador -> . EQUAL
    (93) equal_operador -> . NOT_EQUAL

    AND             reduce using rule 90 (equal -> compare .)
    OR              reduce using rule 90 (equal -> compare .)
    SEMICOLON       reduce using rule 90 (equal -> compare .)
    C_PARENTHESIS   reduce using rule 90 (equal -> compare .)
    COMMA           reduce using rule 90 (equal -> compare .)
    TO              reduce using rule 90 (equal -> compare .)
    EQUAL           shift and go to state 128
    NOT_EQUAL       shift and go to state 129

    equal_operador                 shift and go to state 127

state 91

    (94) compare -> exp .
    (95) compare -> exp . compare_operador exp
    (96) compare_operador -> . GREATER
    (97) compare_operador -> . LESSER
    (98) compare_operador -> . GREATER_EQUAL
    (99) compare_operador -> . LESSER_EQUAL

    EQUAL           reduce using rule 94 (compare -> exp .)
    NOT_EQUAL       reduce using rule 94 (compare -> exp .)
    AND             reduce using rule 94 (compare -> exp .)
    OR              reduce using rule 94 (compare -> exp .)
    SEMICOLON       reduce using rule 94 (compare -> exp .)
    C_PARENTHESIS   reduce using rule 94 (compare -> exp .)
    COMMA           reduce using rule 94 (compare -> exp .)
    TO              reduce using rule 94 (compare -> exp .)
    GREATER         shift and go to state 131
    LESSER          shift and go to state 132
    GREATER_EQUAL   shift and go to state 133
    LESSER_EQUAL    shift and go to state 134

    compare_operador               shift and go to state 130

state 92

    (100) exp -> termino .
    (101) exp -> termino . exp_operador exp
    (102) exp_operador -> . PLUS
    (103) exp_operador -> . MINUS

    GREATER         reduce using rule 100 (exp -> termino .)
    LESSER          reduce using rule 100 (exp -> termino .)
    GREATER_EQUAL   reduce using rule 100 (exp -> termino .)
    LESSER_EQUAL    reduce using rule 100 (exp -> termino .)
    EQUAL           reduce using rule 100 (exp -> termino .)
    NOT_EQUAL       reduce using rule 100 (exp -> termino .)
    AND             reduce using rule 100 (exp -> termino .)
    OR              reduce using rule 100 (exp -> termino .)
    SEMICOLON       reduce using rule 100 (exp -> termino .)
    COMMA           reduce using rule 100 (exp -> termino .)
    C_PARENTHESIS   reduce using rule 100 (exp -> termino .)
    C_ABRACKET      reduce using rule 100 (exp -> termino .)
    TO              reduce using rule 100 (exp -> termino .)
    O_CBRACKET      reduce using rule 100 (exp -> termino .)
    PLUS            shift and go to state 136
    MINUS           shift and go to state 137

    exp_operador                   shift and go to state 135

state 93

    (104) termino -> factor .
    (105) termino -> factor . termino_operador termino
    (106) termino_operador -> . TIMES
    (107) termino_operador -> . DIVIDE
    (108) termino_operador -> . MODULE

    PLUS            reduce using rule 104 (termino -> factor .)
    MINUS           reduce using rule 104 (termino -> factor .)
    GREATER         reduce using rule 104 (termino -> factor .)
    LESSER          reduce using rule 104 (termino -> factor .)
    GREATER_EQUAL   reduce using rule 104 (termino -> factor .)
    LESSER_EQUAL    reduce using rule 104 (termino -> factor .)
    EQUAL           reduce using rule 104 (termino -> factor .)
    NOT_EQUAL       reduce using rule 104 (termino -> factor .)
    AND             reduce using rule 104 (termino -> factor .)
    OR              reduce using rule 104 (termino -> factor .)
    SEMICOLON       reduce using rule 104 (termino -> factor .)
    COMMA           reduce using rule 104 (termino -> factor .)
    C_PARENTHESIS   reduce using rule 104 (termino -> factor .)
    C_ABRACKET      reduce using rule 104 (termino -> factor .)
    TO              reduce using rule 104 (termino -> factor .)
    O_CBRACKET      reduce using rule 104 (termino -> factor .)
    TIMES           shift and go to state 139
    DIVIDE          shift and go to state 140
    MODULE          shift and go to state 141

    termino_operador               shift and go to state 138

state 94

    (109) factor -> variable .

    TIMES           reduce using rule 109 (factor -> variable .)
    DIVIDE          reduce using rule 109 (factor -> variable .)
    MODULE          reduce using rule 109 (factor -> variable .)
    PLUS            reduce using rule 109 (factor -> variable .)
    MINUS           reduce using rule 109 (factor -> variable .)
    GREATER         reduce using rule 109 (factor -> variable .)
    LESSER          reduce using rule 109 (factor -> variable .)
    GREATER_EQUAL   reduce using rule 109 (factor -> variable .)
    LESSER_EQUAL    reduce using rule 109 (factor -> variable .)
    EQUAL           reduce using rule 109 (factor -> variable .)
    NOT_EQUAL       reduce using rule 109 (factor -> variable .)
    AND             reduce using rule 109 (factor -> variable .)
    OR              reduce using rule 109 (factor -> variable .)
    SEMICOLON       reduce using rule 109 (factor -> variable .)
    COMMA           reduce using rule 109 (factor -> variable .)
    C_PARENTHESIS   reduce using rule 109 (factor -> variable .)
    C_ABRACKET      reduce using rule 109 (factor -> variable .)
    TO              reduce using rule 109 (factor -> variable .)
    O_CBRACKET      reduce using rule 109 (factor -> variable .)


state 95

    (110) factor -> O_PARENTHESIS . expr C_PARENTHESIS
    (83) expr -> . or
    (84) or -> . and
    (85) or -> . and or_operador or
    (87) and -> . equal
    (88) and -> . equal and_operador and
    (90) equal -> . compare
    (91) equal -> . compare equal_operador compare
    (94) compare -> . exp
    (95) compare -> . exp compare_operador exp
    (100) exp -> . termino
    (101) exp -> . termino exp_operador exp
    (104) termino -> . factor
    (105) termino -> . factor termino_operador termino
    (109) factor -> . variable
    (110) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (111) factor -> . llamada retorno_llamada
    (112) factor -> . cte
    (113) factor -> . PLUS cte
    (114) factor -> . MINUS cte
    (36) variable -> . var_array
    (37) variable -> . ID
    (54) llamada -> . function_id O_PARENTHESIS llamada_prime C_PARENTHESIS
    (116) cte -> . CTE_INT
    (117) cte -> . CTE_FLOAT
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (40) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (55) function_id -> . ID
    (41) arr_id -> . ID

    O_PARENTHESIS   shift and go to state 95
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    ID              shift and go to state 65
    CTE_INT         shift and go to state 100
    CTE_FLOAT       shift and go to state 101

    expr                           shift and go to state 142
    or                             shift and go to state 87
    and                            shift and go to state 88
    equal                          shift and go to state 89
    compare                        shift and go to state 90
    exp                            shift and go to state 91
    termino                        shift and go to state 92
    factor                         shift and go to state 93
    variable                       shift and go to state 94
    llamada                        shift and go to state 96
    cte                            shift and go to state 97
    var_array                      shift and go to state 64
    function_id                    shift and go to state 57
    arr_id                         shift and go to state 67

state 96

    (111) factor -> llamada . retorno_llamada
    (115) retorno_llamada -> . epsilon
    (118) epsilon -> .

    TIMES           reduce using rule 118 (epsilon -> .)
    DIVIDE          reduce using rule 118 (epsilon -> .)
    MODULE          reduce using rule 118 (epsilon -> .)
    PLUS            reduce using rule 118 (epsilon -> .)
    MINUS           reduce using rule 118 (epsilon -> .)
    GREATER         reduce using rule 118 (epsilon -> .)
    LESSER          reduce using rule 118 (epsilon -> .)
    GREATER_EQUAL   reduce using rule 118 (epsilon -> .)
    LESSER_EQUAL    reduce using rule 118 (epsilon -> .)
    EQUAL           reduce using rule 118 (epsilon -> .)
    NOT_EQUAL       reduce using rule 118 (epsilon -> .)
    AND             reduce using rule 118 (epsilon -> .)
    OR              reduce using rule 118 (epsilon -> .)
    SEMICOLON       reduce using rule 118 (epsilon -> .)
    COMMA           reduce using rule 118 (epsilon -> .)
    C_PARENTHESIS   reduce using rule 118 (epsilon -> .)
    C_ABRACKET      reduce using rule 118 (epsilon -> .)
    TO              reduce using rule 118 (epsilon -> .)
    O_CBRACKET      reduce using rule 118 (epsilon -> .)

    retorno_llamada                shift and go to state 143
    epsilon                        shift and go to state 144

state 97

    (112) factor -> cte .

    TIMES           reduce using rule 112 (factor -> cte .)
    DIVIDE          reduce using rule 112 (factor -> cte .)
    MODULE          reduce using rule 112 (factor -> cte .)
    PLUS            reduce using rule 112 (factor -> cte .)
    MINUS           reduce using rule 112 (factor -> cte .)
    GREATER         reduce using rule 112 (factor -> cte .)
    LESSER          reduce using rule 112 (factor -> cte .)
    GREATER_EQUAL   reduce using rule 112 (factor -> cte .)
    LESSER_EQUAL    reduce using rule 112 (factor -> cte .)
    EQUAL           reduce using rule 112 (factor -> cte .)
    NOT_EQUAL       reduce using rule 112 (factor -> cte .)
    AND             reduce using rule 112 (factor -> cte .)
    OR              reduce using rule 112 (factor -> cte .)
    SEMICOLON       reduce using rule 112 (factor -> cte .)
    COMMA           reduce using rule 112 (factor -> cte .)
    C_PARENTHESIS   reduce using rule 112 (factor -> cte .)
    C_ABRACKET      reduce using rule 112 (factor -> cte .)
    TO              reduce using rule 112 (factor -> cte .)
    O_CBRACKET      reduce using rule 112 (factor -> cte .)


state 98

    (113) factor -> PLUS . cte
    (116) cte -> . CTE_INT
    (117) cte -> . CTE_FLOAT

    CTE_INT         shift and go to state 100
    CTE_FLOAT       shift and go to state 101

    cte                            shift and go to state 145

state 99

    (114) factor -> MINUS . cte
    (116) cte -> . CTE_INT
    (117) cte -> . CTE_FLOAT

    CTE_INT         shift and go to state 100
    CTE_FLOAT       shift and go to state 101

    cte                            shift and go to state 146

state 100

    (116) cte -> CTE_INT .

    TIMES           reduce using rule 116 (cte -> CTE_INT .)
    DIVIDE          reduce using rule 116 (cte -> CTE_INT .)
    MODULE          reduce using rule 116 (cte -> CTE_INT .)
    PLUS            reduce using rule 116 (cte -> CTE_INT .)
    MINUS           reduce using rule 116 (cte -> CTE_INT .)
    GREATER         reduce using rule 116 (cte -> CTE_INT .)
    LESSER          reduce using rule 116 (cte -> CTE_INT .)
    GREATER_EQUAL   reduce using rule 116 (cte -> CTE_INT .)
    LESSER_EQUAL    reduce using rule 116 (cte -> CTE_INT .)
    EQUAL           reduce using rule 116 (cte -> CTE_INT .)
    NOT_EQUAL       reduce using rule 116 (cte -> CTE_INT .)
    AND             reduce using rule 116 (cte -> CTE_INT .)
    OR              reduce using rule 116 (cte -> CTE_INT .)
    SEMICOLON       reduce using rule 116 (cte -> CTE_INT .)
    COMMA           reduce using rule 116 (cte -> CTE_INT .)
    C_PARENTHESIS   reduce using rule 116 (cte -> CTE_INT .)
    C_ABRACKET      reduce using rule 116 (cte -> CTE_INT .)
    TO              reduce using rule 116 (cte -> CTE_INT .)
    O_CBRACKET      reduce using rule 116 (cte -> CTE_INT .)


state 101

    (117) cte -> CTE_FLOAT .

    TIMES           reduce using rule 117 (cte -> CTE_FLOAT .)
    DIVIDE          reduce using rule 117 (cte -> CTE_FLOAT .)
    MODULE          reduce using rule 117 (cte -> CTE_FLOAT .)
    PLUS            reduce using rule 117 (cte -> CTE_FLOAT .)
    MINUS           reduce using rule 117 (cte -> CTE_FLOAT .)
    GREATER         reduce using rule 117 (cte -> CTE_FLOAT .)
    LESSER          reduce using rule 117 (cte -> CTE_FLOAT .)
    GREATER_EQUAL   reduce using rule 117 (cte -> CTE_FLOAT .)
    LESSER_EQUAL    reduce using rule 117 (cte -> CTE_FLOAT .)
    EQUAL           reduce using rule 117 (cte -> CTE_FLOAT .)
    NOT_EQUAL       reduce using rule 117 (cte -> CTE_FLOAT .)
    AND             reduce using rule 117 (cte -> CTE_FLOAT .)
    OR              reduce using rule 117 (cte -> CTE_FLOAT .)
    SEMICOLON       reduce using rule 117 (cte -> CTE_FLOAT .)
    COMMA           reduce using rule 117 (cte -> CTE_FLOAT .)
    C_PARENTHESIS   reduce using rule 117 (cte -> CTE_FLOAT .)
    C_ABRACKET      reduce using rule 117 (cte -> CTE_FLOAT .)
    TO              reduce using rule 117 (cte -> CTE_FLOAT .)
    O_CBRACKET      reduce using rule 117 (cte -> CTE_FLOAT .)


state 102

    (61) lectura -> READ O_PARENTHESIS . lectura_prime C_PARENTHESIS
    (62) lectura_prime -> . variable
    (63) lectura_prime -> . variable COMMA lectura_prime
    (36) variable -> . var_array
    (37) variable -> . ID
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (40) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (41) arr_id -> . ID

    ID              shift and go to state 109

    lectura_prime                  shift and go to state 147
    variable                       shift and go to state 148
    var_array                      shift and go to state 64
    arr_id                         shift and go to state 67

state 103

    (64) escritura -> WRITE O_PARENTHESIS . escritura_prime C_PARENTHESIS
    (65) escritura_prime -> . expr
    (66) escritura_prime -> . escritura_string
    (67) escritura_prime -> . expr COMMA escritura_prime
    (68) escritura_prime -> . escritura_string COMMA escritura_prime
    (83) expr -> . or
    (69) escritura_string -> . CTE_STRING
    (84) or -> . and
    (85) or -> . and or_operador or
    (87) and -> . equal
    (88) and -> . equal and_operador and
    (90) equal -> . compare
    (91) equal -> . compare equal_operador compare
    (94) compare -> . exp
    (95) compare -> . exp compare_operador exp
    (100) exp -> . termino
    (101) exp -> . termino exp_operador exp
    (104) termino -> . factor
    (105) termino -> . factor termino_operador termino
    (109) factor -> . variable
    (110) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (111) factor -> . llamada retorno_llamada
    (112) factor -> . cte
    (113) factor -> . PLUS cte
    (114) factor -> . MINUS cte
    (36) variable -> . var_array
    (37) variable -> . ID
    (54) llamada -> . function_id O_PARENTHESIS llamada_prime C_PARENTHESIS
    (116) cte -> . CTE_INT
    (117) cte -> . CTE_FLOAT
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (40) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (55) function_id -> . ID
    (41) arr_id -> . ID

    CTE_STRING      shift and go to state 152
    O_PARENTHESIS   shift and go to state 95
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    ID              shift and go to state 65
    CTE_INT         shift and go to state 100
    CTE_FLOAT       shift and go to state 101

    escritura_prime                shift and go to state 149
    expr                           shift and go to state 150
    escritura_string               shift and go to state 151
    or                             shift and go to state 87
    and                            shift and go to state 88
    equal                          shift and go to state 89
    compare                        shift and go to state 90
    exp                            shift and go to state 91
    termino                        shift and go to state 92
    factor                         shift and go to state 93
    variable                       shift and go to state 94
    llamada                        shift and go to state 96
    cte                            shift and go to state 97
    var_array                      shift and go to state 64
    function_id                    shift and go to state 57
    arr_id                         shift and go to state 67

state 104

    (70) decision -> IF O_PARENTHESIS . decision_expr C_PARENTHESIS bloque else
    (71) decision_expr -> . expr
    (83) expr -> . or
    (84) or -> . and
    (85) or -> . and or_operador or
    (87) and -> . equal
    (88) and -> . equal and_operador and
    (90) equal -> . compare
    (91) equal -> . compare equal_operador compare
    (94) compare -> . exp
    (95) compare -> . exp compare_operador exp
    (100) exp -> . termino
    (101) exp -> . termino exp_operador exp
    (104) termino -> . factor
    (105) termino -> . factor termino_operador termino
    (109) factor -> . variable
    (110) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (111) factor -> . llamada retorno_llamada
    (112) factor -> . cte
    (113) factor -> . PLUS cte
    (114) factor -> . MINUS cte
    (36) variable -> . var_array
    (37) variable -> . ID
    (54) llamada -> . function_id O_PARENTHESIS llamada_prime C_PARENTHESIS
    (116) cte -> . CTE_INT
    (117) cte -> . CTE_FLOAT
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (40) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (55) function_id -> . ID
    (41) arr_id -> . ID

    O_PARENTHESIS   shift and go to state 95
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    ID              shift and go to state 65
    CTE_INT         shift and go to state 100
    CTE_FLOAT       shift and go to state 101

    decision_expr                  shift and go to state 153
    expr                           shift and go to state 154
    or                             shift and go to state 87
    and                            shift and go to state 88
    equal                          shift and go to state 89
    compare                        shift and go to state 90
    exp                            shift and go to state 91
    termino                        shift and go to state 92
    factor                         shift and go to state 93
    variable                       shift and go to state 94
    llamada                        shift and go to state 96
    cte                            shift and go to state 97
    var_array                      shift and go to state 64
    function_id                    shift and go to state 57
    arr_id                         shift and go to state 67

state 105

    (75) while -> while_prime while_expr . bloque
    (3) bloque -> . O_CBRACKET bloque_prime C_CBRACKET

    O_CBRACKET      shift and go to state 30

    bloque                         shift and go to state 155

state 106

    (77) while_expr -> O_PARENTHESIS . expr C_PARENTHESIS
    (83) expr -> . or
    (84) or -> . and
    (85) or -> . and or_operador or
    (87) and -> . equal
    (88) and -> . equal and_operador and
    (90) equal -> . compare
    (91) equal -> . compare equal_operador compare
    (94) compare -> . exp
    (95) compare -> . exp compare_operador exp
    (100) exp -> . termino
    (101) exp -> . termino exp_operador exp
    (104) termino -> . factor
    (105) termino -> . factor termino_operador termino
    (109) factor -> . variable
    (110) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (111) factor -> . llamada retorno_llamada
    (112) factor -> . cte
    (113) factor -> . PLUS cte
    (114) factor -> . MINUS cte
    (36) variable -> . var_array
    (37) variable -> . ID
    (54) llamada -> . function_id O_PARENTHESIS llamada_prime C_PARENTHESIS
    (116) cte -> . CTE_INT
    (117) cte -> . CTE_FLOAT
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (40) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (55) function_id -> . ID
    (41) arr_id -> . ID

    O_PARENTHESIS   shift and go to state 95
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    ID              shift and go to state 65
    CTE_INT         shift and go to state 100
    CTE_FLOAT       shift and go to state 101

    expr                           shift and go to state 156
    or                             shift and go to state 87
    and                            shift and go to state 88
    equal                          shift and go to state 89
    compare                        shift and go to state 90
    exp                            shift and go to state 91
    termino                        shift and go to state 92
    factor                         shift and go to state 93
    variable                       shift and go to state 94
    llamada                        shift and go to state 96
    cte                            shift and go to state 97
    var_array                      shift and go to state 64
    function_id                    shift and go to state 57
    arr_id                         shift and go to state 67

state 107

    (78) for -> FOR for_asignacion . for_to for_exp bloque
    (81) for_to -> . TO

    TO              shift and go to state 158

    for_to                         shift and go to state 157

state 108

    (79) for_asignacion -> variable . ASSIGN for_asignacion_expr

    ASSIGN          shift and go to state 159


state 109

    (37) variable -> ID .
    (41) arr_id -> ID .

    ASSIGN          reduce using rule 37 (variable -> ID .)
    COMMA           reduce using rule 37 (variable -> ID .)
    C_PARENTHESIS   reduce using rule 37 (variable -> ID .)
    O_ABRACKET      reduce using rule 41 (arr_id -> ID .)


state 110

    (38) var_array -> arr_id O_ABRACKET . exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> arr_id O_ABRACKET . exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (40) var_array -> arr_id O_ABRACKET . exp arr_close_bracket
    (100) exp -> . termino
    (101) exp -> . termino exp_operador exp
    (104) termino -> . factor
    (105) termino -> . factor termino_operador termino
    (109) factor -> . variable
    (110) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (111) factor -> . llamada retorno_llamada
    (112) factor -> . cte
    (113) factor -> . PLUS cte
    (114) factor -> . MINUS cte
    (36) variable -> . var_array
    (37) variable -> . ID
    (54) llamada -> . function_id O_PARENTHESIS llamada_prime C_PARENTHESIS
    (116) cte -> . CTE_INT
    (117) cte -> . CTE_FLOAT
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (40) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (55) function_id -> . ID
    (41) arr_id -> . ID

    O_PARENTHESIS   shift and go to state 95
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    ID              shift and go to state 65
    CTE_INT         shift and go to state 100
    CTE_FLOAT       shift and go to state 101

    arr_id                         shift and go to state 67
    exp                            shift and go to state 160
    termino                        shift and go to state 92
    factor                         shift and go to state 93
    variable                       shift and go to state 94
    llamada                        shift and go to state 96
    cte                            shift and go to state 97
    var_array                      shift and go to state 64
    function_id                    shift and go to state 57

state 111

    (28) funcion_base -> FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS . declaracion_funcion bloque
    (6) declaracion_funcion -> . declaracion
    (7) declaracion_funcion -> . epsilon
    (9) declaracion -> . declaracion_base
    (10) declaracion -> . declaracion_base declaracion
    (118) epsilon -> .
    (11) declaracion_base -> . LET declaracion_prime COLON declaracion_tipo SEMICOLON

    O_CBRACKET      reduce using rule 118 (epsilon -> .)
    LET             shift and go to state 8

    declaracion_funcion            shift and go to state 161
    declaracion                    shift and go to state 162
    epsilon                        shift and go to state 163
    declaracion_base               shift and go to state 7

state 112

    (30) funcion_prime -> param_tipo COMMA . funcion_prime
    (29) funcion_prime -> . param_tipo
    (30) funcion_prime -> . param_tipo COMMA funcion_prime
    (22) param_tipo -> . INT ID
    (23) param_tipo -> . FLOAT ID
    (24) param_tipo -> . CHAR ID
    (25) param_tipo -> . STRING ID

    INT             shift and go to state 71
    FLOAT           shift and go to state 72
    CHAR            shift and go to state 73
    STRING          shift and go to state 74

    param_tipo                     shift and go to state 70
    funcion_prime                  shift and go to state 164

state 113

    (22) param_tipo -> INT ID .

    COMMA           reduce using rule 22 (param_tipo -> INT ID .)
    C_PARENTHESIS   reduce using rule 22 (param_tipo -> INT ID .)


state 114

    (23) param_tipo -> FLOAT ID .

    COMMA           reduce using rule 23 (param_tipo -> FLOAT ID .)
    C_PARENTHESIS   reduce using rule 23 (param_tipo -> FLOAT ID .)


state 115

    (24) param_tipo -> CHAR ID .

    COMMA           reduce using rule 24 (param_tipo -> CHAR ID .)
    C_PARENTHESIS   reduce using rule 24 (param_tipo -> CHAR ID .)


state 116

    (25) param_tipo -> STRING ID .

    COMMA           reduce using rule 25 (param_tipo -> STRING ID .)
    C_PARENTHESIS   reduce using rule 25 (param_tipo -> STRING ID .)


state 117

    (14) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET . CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (15) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET . CTE_INT C_ABRACKET

    CTE_INT         shift and go to state 165


state 118

    (52) asignacion -> variable ASSIGN asignacion_expr .

    SEMICOLON       reduce using rule 52 (asignacion -> variable ASSIGN asignacion_expr .)


state 119

    (53) asignacion_expr -> expr .

    SEMICOLON       reduce using rule 53 (asignacion_expr -> expr .)


state 120

    (54) llamada -> function_id O_PARENTHESIS llamada_prime . C_PARENTHESIS

    C_PARENTHESIS   shift and go to state 166


state 121

    (56) llamada_prime -> llamada_exp .
    (57) llamada_prime -> llamada_exp . llamada_comma llamada_prime
    (59) llamada_comma -> . COMMA

    C_PARENTHESIS   reduce using rule 56 (llamada_prime -> llamada_exp .)
    COMMA           shift and go to state 168

    llamada_comma                  shift and go to state 167

state 122

    (58) llamada_exp -> exp .

    COMMA           reduce using rule 58 (llamada_exp -> exp .)
    C_PARENTHESIS   reduce using rule 58 (llamada_exp -> exp .)


state 123

    (85) or -> and or_operador . or
    (84) or -> . and
    (85) or -> . and or_operador or
    (87) and -> . equal
    (88) and -> . equal and_operador and
    (90) equal -> . compare
    (91) equal -> . compare equal_operador compare
    (94) compare -> . exp
    (95) compare -> . exp compare_operador exp
    (100) exp -> . termino
    (101) exp -> . termino exp_operador exp
    (104) termino -> . factor
    (105) termino -> . factor termino_operador termino
    (109) factor -> . variable
    (110) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (111) factor -> . llamada retorno_llamada
    (112) factor -> . cte
    (113) factor -> . PLUS cte
    (114) factor -> . MINUS cte
    (36) variable -> . var_array
    (37) variable -> . ID
    (54) llamada -> . function_id O_PARENTHESIS llamada_prime C_PARENTHESIS
    (116) cte -> . CTE_INT
    (117) cte -> . CTE_FLOAT
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (40) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (55) function_id -> . ID
    (41) arr_id -> . ID

    O_PARENTHESIS   shift and go to state 95
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    ID              shift and go to state 65
    CTE_INT         shift and go to state 100
    CTE_FLOAT       shift and go to state 101

    and                            shift and go to state 88
    or                             shift and go to state 169
    equal                          shift and go to state 89
    compare                        shift and go to state 90
    exp                            shift and go to state 91
    termino                        shift and go to state 92
    factor                         shift and go to state 93
    variable                       shift and go to state 94
    llamada                        shift and go to state 96
    cte                            shift and go to state 97
    var_array                      shift and go to state 64
    function_id                    shift and go to state 57
    arr_id                         shift and go to state 67

state 124

    (86) or_operador -> OR .

    O_PARENTHESIS   reduce using rule 86 (or_operador -> OR .)
    PLUS            reduce using rule 86 (or_operador -> OR .)
    MINUS           reduce using rule 86 (or_operador -> OR .)
    ID              reduce using rule 86 (or_operador -> OR .)
    CTE_INT         reduce using rule 86 (or_operador -> OR .)
    CTE_FLOAT       reduce using rule 86 (or_operador -> OR .)


state 125

    (88) and -> equal and_operador . and
    (87) and -> . equal
    (88) and -> . equal and_operador and
    (90) equal -> . compare
    (91) equal -> . compare equal_operador compare
    (94) compare -> . exp
    (95) compare -> . exp compare_operador exp
    (100) exp -> . termino
    (101) exp -> . termino exp_operador exp
    (104) termino -> . factor
    (105) termino -> . factor termino_operador termino
    (109) factor -> . variable
    (110) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (111) factor -> . llamada retorno_llamada
    (112) factor -> . cte
    (113) factor -> . PLUS cte
    (114) factor -> . MINUS cte
    (36) variable -> . var_array
    (37) variable -> . ID
    (54) llamada -> . function_id O_PARENTHESIS llamada_prime C_PARENTHESIS
    (116) cte -> . CTE_INT
    (117) cte -> . CTE_FLOAT
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (40) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (55) function_id -> . ID
    (41) arr_id -> . ID

    O_PARENTHESIS   shift and go to state 95
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    ID              shift and go to state 65
    CTE_INT         shift and go to state 100
    CTE_FLOAT       shift and go to state 101

    equal                          shift and go to state 89
    and                            shift and go to state 170
    compare                        shift and go to state 90
    exp                            shift and go to state 91
    termino                        shift and go to state 92
    factor                         shift and go to state 93
    variable                       shift and go to state 94
    llamada                        shift and go to state 96
    cte                            shift and go to state 97
    var_array                      shift and go to state 64
    function_id                    shift and go to state 57
    arr_id                         shift and go to state 67

state 126

    (89) and_operador -> AND .

    O_PARENTHESIS   reduce using rule 89 (and_operador -> AND .)
    PLUS            reduce using rule 89 (and_operador -> AND .)
    MINUS           reduce using rule 89 (and_operador -> AND .)
    ID              reduce using rule 89 (and_operador -> AND .)
    CTE_INT         reduce using rule 89 (and_operador -> AND .)
    CTE_FLOAT       reduce using rule 89 (and_operador -> AND .)


state 127

    (91) equal -> compare equal_operador . compare
    (94) compare -> . exp
    (95) compare -> . exp compare_operador exp
    (100) exp -> . termino
    (101) exp -> . termino exp_operador exp
    (104) termino -> . factor
    (105) termino -> . factor termino_operador termino
    (109) factor -> . variable
    (110) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (111) factor -> . llamada retorno_llamada
    (112) factor -> . cte
    (113) factor -> . PLUS cte
    (114) factor -> . MINUS cte
    (36) variable -> . var_array
    (37) variable -> . ID
    (54) llamada -> . function_id O_PARENTHESIS llamada_prime C_PARENTHESIS
    (116) cte -> . CTE_INT
    (117) cte -> . CTE_FLOAT
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (40) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (55) function_id -> . ID
    (41) arr_id -> . ID

    O_PARENTHESIS   shift and go to state 95
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    ID              shift and go to state 65
    CTE_INT         shift and go to state 100
    CTE_FLOAT       shift and go to state 101

    compare                        shift and go to state 171
    exp                            shift and go to state 91
    termino                        shift and go to state 92
    factor                         shift and go to state 93
    variable                       shift and go to state 94
    llamada                        shift and go to state 96
    cte                            shift and go to state 97
    var_array                      shift and go to state 64
    function_id                    shift and go to state 57
    arr_id                         shift and go to state 67

state 128

    (92) equal_operador -> EQUAL .

    O_PARENTHESIS   reduce using rule 92 (equal_operador -> EQUAL .)
    PLUS            reduce using rule 92 (equal_operador -> EQUAL .)
    MINUS           reduce using rule 92 (equal_operador -> EQUAL .)
    ID              reduce using rule 92 (equal_operador -> EQUAL .)
    CTE_INT         reduce using rule 92 (equal_operador -> EQUAL .)
    CTE_FLOAT       reduce using rule 92 (equal_operador -> EQUAL .)


state 129

    (93) equal_operador -> NOT_EQUAL .

    O_PARENTHESIS   reduce using rule 93 (equal_operador -> NOT_EQUAL .)
    PLUS            reduce using rule 93 (equal_operador -> NOT_EQUAL .)
    MINUS           reduce using rule 93 (equal_operador -> NOT_EQUAL .)
    ID              reduce using rule 93 (equal_operador -> NOT_EQUAL .)
    CTE_INT         reduce using rule 93 (equal_operador -> NOT_EQUAL .)
    CTE_FLOAT       reduce using rule 93 (equal_operador -> NOT_EQUAL .)


state 130

    (95) compare -> exp compare_operador . exp
    (100) exp -> . termino
    (101) exp -> . termino exp_operador exp
    (104) termino -> . factor
    (105) termino -> . factor termino_operador termino
    (109) factor -> . variable
    (110) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (111) factor -> . llamada retorno_llamada
    (112) factor -> . cte
    (113) factor -> . PLUS cte
    (114) factor -> . MINUS cte
    (36) variable -> . var_array
    (37) variable -> . ID
    (54) llamada -> . function_id O_PARENTHESIS llamada_prime C_PARENTHESIS
    (116) cte -> . CTE_INT
    (117) cte -> . CTE_FLOAT
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (40) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (55) function_id -> . ID
    (41) arr_id -> . ID

    O_PARENTHESIS   shift and go to state 95
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    ID              shift and go to state 65
    CTE_INT         shift and go to state 100
    CTE_FLOAT       shift and go to state 101

    exp                            shift and go to state 172
    termino                        shift and go to state 92
    factor                         shift and go to state 93
    variable                       shift and go to state 94
    llamada                        shift and go to state 96
    cte                            shift and go to state 97
    var_array                      shift and go to state 64
    function_id                    shift and go to state 57
    arr_id                         shift and go to state 67

state 131

    (96) compare_operador -> GREATER .

    O_PARENTHESIS   reduce using rule 96 (compare_operador -> GREATER .)
    PLUS            reduce using rule 96 (compare_operador -> GREATER .)
    MINUS           reduce using rule 96 (compare_operador -> GREATER .)
    ID              reduce using rule 96 (compare_operador -> GREATER .)
    CTE_INT         reduce using rule 96 (compare_operador -> GREATER .)
    CTE_FLOAT       reduce using rule 96 (compare_operador -> GREATER .)


state 132

    (97) compare_operador -> LESSER .

    O_PARENTHESIS   reduce using rule 97 (compare_operador -> LESSER .)
    PLUS            reduce using rule 97 (compare_operador -> LESSER .)
    MINUS           reduce using rule 97 (compare_operador -> LESSER .)
    ID              reduce using rule 97 (compare_operador -> LESSER .)
    CTE_INT         reduce using rule 97 (compare_operador -> LESSER .)
    CTE_FLOAT       reduce using rule 97 (compare_operador -> LESSER .)


state 133

    (98) compare_operador -> GREATER_EQUAL .

    O_PARENTHESIS   reduce using rule 98 (compare_operador -> GREATER_EQUAL .)
    PLUS            reduce using rule 98 (compare_operador -> GREATER_EQUAL .)
    MINUS           reduce using rule 98 (compare_operador -> GREATER_EQUAL .)
    ID              reduce using rule 98 (compare_operador -> GREATER_EQUAL .)
    CTE_INT         reduce using rule 98 (compare_operador -> GREATER_EQUAL .)
    CTE_FLOAT       reduce using rule 98 (compare_operador -> GREATER_EQUAL .)


state 134

    (99) compare_operador -> LESSER_EQUAL .

    O_PARENTHESIS   reduce using rule 99 (compare_operador -> LESSER_EQUAL .)
    PLUS            reduce using rule 99 (compare_operador -> LESSER_EQUAL .)
    MINUS           reduce using rule 99 (compare_operador -> LESSER_EQUAL .)
    ID              reduce using rule 99 (compare_operador -> LESSER_EQUAL .)
    CTE_INT         reduce using rule 99 (compare_operador -> LESSER_EQUAL .)
    CTE_FLOAT       reduce using rule 99 (compare_operador -> LESSER_EQUAL .)


state 135

    (101) exp -> termino exp_operador . exp
    (100) exp -> . termino
    (101) exp -> . termino exp_operador exp
    (104) termino -> . factor
    (105) termino -> . factor termino_operador termino
    (109) factor -> . variable
    (110) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (111) factor -> . llamada retorno_llamada
    (112) factor -> . cte
    (113) factor -> . PLUS cte
    (114) factor -> . MINUS cte
    (36) variable -> . var_array
    (37) variable -> . ID
    (54) llamada -> . function_id O_PARENTHESIS llamada_prime C_PARENTHESIS
    (116) cte -> . CTE_INT
    (117) cte -> . CTE_FLOAT
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (40) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (55) function_id -> . ID
    (41) arr_id -> . ID

    O_PARENTHESIS   shift and go to state 95
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    ID              shift and go to state 65
    CTE_INT         shift and go to state 100
    CTE_FLOAT       shift and go to state 101

    termino                        shift and go to state 92
    exp                            shift and go to state 173
    factor                         shift and go to state 93
    variable                       shift and go to state 94
    llamada                        shift and go to state 96
    cte                            shift and go to state 97
    var_array                      shift and go to state 64
    function_id                    shift and go to state 57
    arr_id                         shift and go to state 67

state 136

    (102) exp_operador -> PLUS .

    O_PARENTHESIS   reduce using rule 102 (exp_operador -> PLUS .)
    PLUS            reduce using rule 102 (exp_operador -> PLUS .)
    MINUS           reduce using rule 102 (exp_operador -> PLUS .)
    ID              reduce using rule 102 (exp_operador -> PLUS .)
    CTE_INT         reduce using rule 102 (exp_operador -> PLUS .)
    CTE_FLOAT       reduce using rule 102 (exp_operador -> PLUS .)


state 137

    (103) exp_operador -> MINUS .

    O_PARENTHESIS   reduce using rule 103 (exp_operador -> MINUS .)
    PLUS            reduce using rule 103 (exp_operador -> MINUS .)
    MINUS           reduce using rule 103 (exp_operador -> MINUS .)
    ID              reduce using rule 103 (exp_operador -> MINUS .)
    CTE_INT         reduce using rule 103 (exp_operador -> MINUS .)
    CTE_FLOAT       reduce using rule 103 (exp_operador -> MINUS .)


state 138

    (105) termino -> factor termino_operador . termino
    (104) termino -> . factor
    (105) termino -> . factor termino_operador termino
    (109) factor -> . variable
    (110) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (111) factor -> . llamada retorno_llamada
    (112) factor -> . cte
    (113) factor -> . PLUS cte
    (114) factor -> . MINUS cte
    (36) variable -> . var_array
    (37) variable -> . ID
    (54) llamada -> . function_id O_PARENTHESIS llamada_prime C_PARENTHESIS
    (116) cte -> . CTE_INT
    (117) cte -> . CTE_FLOAT
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (40) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (55) function_id -> . ID
    (41) arr_id -> . ID

    O_PARENTHESIS   shift and go to state 95
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    ID              shift and go to state 65
    CTE_INT         shift and go to state 100
    CTE_FLOAT       shift and go to state 101

    factor                         shift and go to state 93
    termino                        shift and go to state 174
    variable                       shift and go to state 94
    llamada                        shift and go to state 96
    cte                            shift and go to state 97
    var_array                      shift and go to state 64
    function_id                    shift and go to state 57
    arr_id                         shift and go to state 67

state 139

    (106) termino_operador -> TIMES .

    O_PARENTHESIS   reduce using rule 106 (termino_operador -> TIMES .)
    PLUS            reduce using rule 106 (termino_operador -> TIMES .)
    MINUS           reduce using rule 106 (termino_operador -> TIMES .)
    ID              reduce using rule 106 (termino_operador -> TIMES .)
    CTE_INT         reduce using rule 106 (termino_operador -> TIMES .)
    CTE_FLOAT       reduce using rule 106 (termino_operador -> TIMES .)


state 140

    (107) termino_operador -> DIVIDE .

    O_PARENTHESIS   reduce using rule 107 (termino_operador -> DIVIDE .)
    PLUS            reduce using rule 107 (termino_operador -> DIVIDE .)
    MINUS           reduce using rule 107 (termino_operador -> DIVIDE .)
    ID              reduce using rule 107 (termino_operador -> DIVIDE .)
    CTE_INT         reduce using rule 107 (termino_operador -> DIVIDE .)
    CTE_FLOAT       reduce using rule 107 (termino_operador -> DIVIDE .)


state 141

    (108) termino_operador -> MODULE .

    O_PARENTHESIS   reduce using rule 108 (termino_operador -> MODULE .)
    PLUS            reduce using rule 108 (termino_operador -> MODULE .)
    MINUS           reduce using rule 108 (termino_operador -> MODULE .)
    ID              reduce using rule 108 (termino_operador -> MODULE .)
    CTE_INT         reduce using rule 108 (termino_operador -> MODULE .)
    CTE_FLOAT       reduce using rule 108 (termino_operador -> MODULE .)


state 142

    (110) factor -> O_PARENTHESIS expr . C_PARENTHESIS

    C_PARENTHESIS   shift and go to state 175


state 143

    (111) factor -> llamada retorno_llamada .

    TIMES           reduce using rule 111 (factor -> llamada retorno_llamada .)
    DIVIDE          reduce using rule 111 (factor -> llamada retorno_llamada .)
    MODULE          reduce using rule 111 (factor -> llamada retorno_llamada .)
    PLUS            reduce using rule 111 (factor -> llamada retorno_llamada .)
    MINUS           reduce using rule 111 (factor -> llamada retorno_llamada .)
    GREATER         reduce using rule 111 (factor -> llamada retorno_llamada .)
    LESSER          reduce using rule 111 (factor -> llamada retorno_llamada .)
    GREATER_EQUAL   reduce using rule 111 (factor -> llamada retorno_llamada .)
    LESSER_EQUAL    reduce using rule 111 (factor -> llamada retorno_llamada .)
    EQUAL           reduce using rule 111 (factor -> llamada retorno_llamada .)
    NOT_EQUAL       reduce using rule 111 (factor -> llamada retorno_llamada .)
    AND             reduce using rule 111 (factor -> llamada retorno_llamada .)
    OR              reduce using rule 111 (factor -> llamada retorno_llamada .)
    SEMICOLON       reduce using rule 111 (factor -> llamada retorno_llamada .)
    COMMA           reduce using rule 111 (factor -> llamada retorno_llamada .)
    C_PARENTHESIS   reduce using rule 111 (factor -> llamada retorno_llamada .)
    C_ABRACKET      reduce using rule 111 (factor -> llamada retorno_llamada .)
    TO              reduce using rule 111 (factor -> llamada retorno_llamada .)
    O_CBRACKET      reduce using rule 111 (factor -> llamada retorno_llamada .)


state 144

    (115) retorno_llamada -> epsilon .

    TIMES           reduce using rule 115 (retorno_llamada -> epsilon .)
    DIVIDE          reduce using rule 115 (retorno_llamada -> epsilon .)
    MODULE          reduce using rule 115 (retorno_llamada -> epsilon .)
    PLUS            reduce using rule 115 (retorno_llamada -> epsilon .)
    MINUS           reduce using rule 115 (retorno_llamada -> epsilon .)
    GREATER         reduce using rule 115 (retorno_llamada -> epsilon .)
    LESSER          reduce using rule 115 (retorno_llamada -> epsilon .)
    GREATER_EQUAL   reduce using rule 115 (retorno_llamada -> epsilon .)
    LESSER_EQUAL    reduce using rule 115 (retorno_llamada -> epsilon .)
    EQUAL           reduce using rule 115 (retorno_llamada -> epsilon .)
    NOT_EQUAL       reduce using rule 115 (retorno_llamada -> epsilon .)
    AND             reduce using rule 115 (retorno_llamada -> epsilon .)
    OR              reduce using rule 115 (retorno_llamada -> epsilon .)
    SEMICOLON       reduce using rule 115 (retorno_llamada -> epsilon .)
    COMMA           reduce using rule 115 (retorno_llamada -> epsilon .)
    C_PARENTHESIS   reduce using rule 115 (retorno_llamada -> epsilon .)
    C_ABRACKET      reduce using rule 115 (retorno_llamada -> epsilon .)
    TO              reduce using rule 115 (retorno_llamada -> epsilon .)
    O_CBRACKET      reduce using rule 115 (retorno_llamada -> epsilon .)


state 145

    (113) factor -> PLUS cte .

    TIMES           reduce using rule 113 (factor -> PLUS cte .)
    DIVIDE          reduce using rule 113 (factor -> PLUS cte .)
    MODULE          reduce using rule 113 (factor -> PLUS cte .)
    PLUS            reduce using rule 113 (factor -> PLUS cte .)
    MINUS           reduce using rule 113 (factor -> PLUS cte .)
    GREATER         reduce using rule 113 (factor -> PLUS cte .)
    LESSER          reduce using rule 113 (factor -> PLUS cte .)
    GREATER_EQUAL   reduce using rule 113 (factor -> PLUS cte .)
    LESSER_EQUAL    reduce using rule 113 (factor -> PLUS cte .)
    EQUAL           reduce using rule 113 (factor -> PLUS cte .)
    NOT_EQUAL       reduce using rule 113 (factor -> PLUS cte .)
    AND             reduce using rule 113 (factor -> PLUS cte .)
    OR              reduce using rule 113 (factor -> PLUS cte .)
    SEMICOLON       reduce using rule 113 (factor -> PLUS cte .)
    COMMA           reduce using rule 113 (factor -> PLUS cte .)
    C_PARENTHESIS   reduce using rule 113 (factor -> PLUS cte .)
    C_ABRACKET      reduce using rule 113 (factor -> PLUS cte .)
    TO              reduce using rule 113 (factor -> PLUS cte .)
    O_CBRACKET      reduce using rule 113 (factor -> PLUS cte .)


state 146

    (114) factor -> MINUS cte .

    TIMES           reduce using rule 114 (factor -> MINUS cte .)
    DIVIDE          reduce using rule 114 (factor -> MINUS cte .)
    MODULE          reduce using rule 114 (factor -> MINUS cte .)
    PLUS            reduce using rule 114 (factor -> MINUS cte .)
    MINUS           reduce using rule 114 (factor -> MINUS cte .)
    GREATER         reduce using rule 114 (factor -> MINUS cte .)
    LESSER          reduce using rule 114 (factor -> MINUS cte .)
    GREATER_EQUAL   reduce using rule 114 (factor -> MINUS cte .)
    LESSER_EQUAL    reduce using rule 114 (factor -> MINUS cte .)
    EQUAL           reduce using rule 114 (factor -> MINUS cte .)
    NOT_EQUAL       reduce using rule 114 (factor -> MINUS cte .)
    AND             reduce using rule 114 (factor -> MINUS cte .)
    OR              reduce using rule 114 (factor -> MINUS cte .)
    SEMICOLON       reduce using rule 114 (factor -> MINUS cte .)
    COMMA           reduce using rule 114 (factor -> MINUS cte .)
    C_PARENTHESIS   reduce using rule 114 (factor -> MINUS cte .)
    C_ABRACKET      reduce using rule 114 (factor -> MINUS cte .)
    TO              reduce using rule 114 (factor -> MINUS cte .)
    O_CBRACKET      reduce using rule 114 (factor -> MINUS cte .)


state 147

    (61) lectura -> READ O_PARENTHESIS lectura_prime . C_PARENTHESIS

    C_PARENTHESIS   shift and go to state 176


state 148

    (62) lectura_prime -> variable .
    (63) lectura_prime -> variable . COMMA lectura_prime

    C_PARENTHESIS   reduce using rule 62 (lectura_prime -> variable .)
    COMMA           shift and go to state 177


state 149

    (64) escritura -> WRITE O_PARENTHESIS escritura_prime . C_PARENTHESIS

    C_PARENTHESIS   shift and go to state 178


state 150

    (65) escritura_prime -> expr .
    (67) escritura_prime -> expr . COMMA escritura_prime

    C_PARENTHESIS   reduce using rule 65 (escritura_prime -> expr .)
    COMMA           shift and go to state 179


state 151

    (66) escritura_prime -> escritura_string .
    (68) escritura_prime -> escritura_string . COMMA escritura_prime

    C_PARENTHESIS   reduce using rule 66 (escritura_prime -> escritura_string .)
    COMMA           shift and go to state 180


state 152

    (69) escritura_string -> CTE_STRING .

    COMMA           reduce using rule 69 (escritura_string -> CTE_STRING .)
    C_PARENTHESIS   reduce using rule 69 (escritura_string -> CTE_STRING .)


state 153

    (70) decision -> IF O_PARENTHESIS decision_expr . C_PARENTHESIS bloque else

    C_PARENTHESIS   shift and go to state 181


state 154

    (71) decision_expr -> expr .

    C_PARENTHESIS   reduce using rule 71 (decision_expr -> expr .)


state 155

    (75) while -> while_prime while_expr bloque .

    RETURN          reduce using rule 75 (while -> while_prime while_expr bloque .)
    READ            reduce using rule 75 (while -> while_prime while_expr bloque .)
    WRITE           reduce using rule 75 (while -> while_prime while_expr bloque .)
    IF              reduce using rule 75 (while -> while_prime while_expr bloque .)
    FOR             reduce using rule 75 (while -> while_prime while_expr bloque .)
    ID              reduce using rule 75 (while -> while_prime while_expr bloque .)
    WHILE           reduce using rule 75 (while -> while_prime while_expr bloque .)
    C_CBRACKET      reduce using rule 75 (while -> while_prime while_expr bloque .)


state 156

    (77) while_expr -> O_PARENTHESIS expr . C_PARENTHESIS

    C_PARENTHESIS   shift and go to state 182


state 157

    (78) for -> FOR for_asignacion for_to . for_exp bloque
    (82) for_exp -> . exp
    (100) exp -> . termino
    (101) exp -> . termino exp_operador exp
    (104) termino -> . factor
    (105) termino -> . factor termino_operador termino
    (109) factor -> . variable
    (110) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (111) factor -> . llamada retorno_llamada
    (112) factor -> . cte
    (113) factor -> . PLUS cte
    (114) factor -> . MINUS cte
    (36) variable -> . var_array
    (37) variable -> . ID
    (54) llamada -> . function_id O_PARENTHESIS llamada_prime C_PARENTHESIS
    (116) cte -> . CTE_INT
    (117) cte -> . CTE_FLOAT
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (40) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (55) function_id -> . ID
    (41) arr_id -> . ID

    O_PARENTHESIS   shift and go to state 95
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    ID              shift and go to state 65
    CTE_INT         shift and go to state 100
    CTE_FLOAT       shift and go to state 101

    for_exp                        shift and go to state 183
    exp                            shift and go to state 184
    termino                        shift and go to state 92
    factor                         shift and go to state 93
    variable                       shift and go to state 94
    llamada                        shift and go to state 96
    cte                            shift and go to state 97
    var_array                      shift and go to state 64
    function_id                    shift and go to state 57
    arr_id                         shift and go to state 67

state 158

    (81) for_to -> TO .

    O_PARENTHESIS   reduce using rule 81 (for_to -> TO .)
    PLUS            reduce using rule 81 (for_to -> TO .)
    MINUS           reduce using rule 81 (for_to -> TO .)
    ID              reduce using rule 81 (for_to -> TO .)
    CTE_INT         reduce using rule 81 (for_to -> TO .)
    CTE_FLOAT       reduce using rule 81 (for_to -> TO .)


state 159

    (79) for_asignacion -> variable ASSIGN . for_asignacion_expr
    (80) for_asignacion_expr -> . expr
    (83) expr -> . or
    (84) or -> . and
    (85) or -> . and or_operador or
    (87) and -> . equal
    (88) and -> . equal and_operador and
    (90) equal -> . compare
    (91) equal -> . compare equal_operador compare
    (94) compare -> . exp
    (95) compare -> . exp compare_operador exp
    (100) exp -> . termino
    (101) exp -> . termino exp_operador exp
    (104) termino -> . factor
    (105) termino -> . factor termino_operador termino
    (109) factor -> . variable
    (110) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (111) factor -> . llamada retorno_llamada
    (112) factor -> . cte
    (113) factor -> . PLUS cte
    (114) factor -> . MINUS cte
    (36) variable -> . var_array
    (37) variable -> . ID
    (54) llamada -> . function_id O_PARENTHESIS llamada_prime C_PARENTHESIS
    (116) cte -> . CTE_INT
    (117) cte -> . CTE_FLOAT
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (40) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (55) function_id -> . ID
    (41) arr_id -> . ID

    O_PARENTHESIS   shift and go to state 95
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    ID              shift and go to state 65
    CTE_INT         shift and go to state 100
    CTE_FLOAT       shift and go to state 101

    variable                       shift and go to state 94
    for_asignacion_expr            shift and go to state 185
    expr                           shift and go to state 186
    or                             shift and go to state 87
    and                            shift and go to state 88
    equal                          shift and go to state 89
    compare                        shift and go to state 90
    exp                            shift and go to state 91
    termino                        shift and go to state 92
    factor                         shift and go to state 93
    llamada                        shift and go to state 96
    cte                            shift and go to state 97
    var_array                      shift and go to state 64
    function_id                    shift and go to state 57
    arr_id                         shift and go to state 67

state 160

    (38) var_array -> arr_id O_ABRACKET exp . arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> arr_id O_ABRACKET exp . arr_close_bracket arr_open_bracket exp arr_close_bracket
    (40) var_array -> arr_id O_ABRACKET exp . arr_close_bracket
    (42) arr_close_bracket -> . C_ABRACKET

    C_ABRACKET      shift and go to state 188

    arr_close_bracket              shift and go to state 187

state 161

    (28) funcion_base -> FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion . bloque
    (3) bloque -> . O_CBRACKET bloque_prime C_CBRACKET

    O_CBRACKET      shift and go to state 30

    bloque                         shift and go to state 189

state 162

    (6) declaracion_funcion -> declaracion .

    O_CBRACKET      reduce using rule 6 (declaracion_funcion -> declaracion .)


state 163

    (7) declaracion_funcion -> epsilon .

    O_CBRACKET      reduce using rule 7 (declaracion_funcion -> epsilon .)


state 164

    (30) funcion_prime -> param_tipo COMMA funcion_prime .

    C_PARENTHESIS   reduce using rule 30 (funcion_prime -> param_tipo COMMA funcion_prime .)


state 165

    (14) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT . C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET
    (15) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT . C_ABRACKET

    C_ABRACKET      shift and go to state 190


state 166

    (54) llamada -> function_id O_PARENTHESIS llamada_prime C_PARENTHESIS .

    SEMICOLON       reduce using rule 54 (llamada -> function_id O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    TIMES           reduce using rule 54 (llamada -> function_id O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    DIVIDE          reduce using rule 54 (llamada -> function_id O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    MODULE          reduce using rule 54 (llamada -> function_id O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    PLUS            reduce using rule 54 (llamada -> function_id O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    MINUS           reduce using rule 54 (llamada -> function_id O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    GREATER         reduce using rule 54 (llamada -> function_id O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    LESSER          reduce using rule 54 (llamada -> function_id O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    GREATER_EQUAL   reduce using rule 54 (llamada -> function_id O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    LESSER_EQUAL    reduce using rule 54 (llamada -> function_id O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    EQUAL           reduce using rule 54 (llamada -> function_id O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    NOT_EQUAL       reduce using rule 54 (llamada -> function_id O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    AND             reduce using rule 54 (llamada -> function_id O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    OR              reduce using rule 54 (llamada -> function_id O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    COMMA           reduce using rule 54 (llamada -> function_id O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    C_PARENTHESIS   reduce using rule 54 (llamada -> function_id O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    C_ABRACKET      reduce using rule 54 (llamada -> function_id O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    TO              reduce using rule 54 (llamada -> function_id O_PARENTHESIS llamada_prime C_PARENTHESIS .)
    O_CBRACKET      reduce using rule 54 (llamada -> function_id O_PARENTHESIS llamada_prime C_PARENTHESIS .)


state 167

    (57) llamada_prime -> llamada_exp llamada_comma . llamada_prime
    (56) llamada_prime -> . llamada_exp
    (57) llamada_prime -> . llamada_exp llamada_comma llamada_prime
    (58) llamada_exp -> . exp
    (100) exp -> . termino
    (101) exp -> . termino exp_operador exp
    (104) termino -> . factor
    (105) termino -> . factor termino_operador termino
    (109) factor -> . variable
    (110) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (111) factor -> . llamada retorno_llamada
    (112) factor -> . cte
    (113) factor -> . PLUS cte
    (114) factor -> . MINUS cte
    (36) variable -> . var_array
    (37) variable -> . ID
    (54) llamada -> . function_id O_PARENTHESIS llamada_prime C_PARENTHESIS
    (116) cte -> . CTE_INT
    (117) cte -> . CTE_FLOAT
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (40) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (55) function_id -> . ID
    (41) arr_id -> . ID

    O_PARENTHESIS   shift and go to state 95
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    ID              shift and go to state 65
    CTE_INT         shift and go to state 100
    CTE_FLOAT       shift and go to state 101

    llamada_exp                    shift and go to state 121
    llamada_prime                  shift and go to state 191
    exp                            shift and go to state 122
    termino                        shift and go to state 92
    factor                         shift and go to state 93
    variable                       shift and go to state 94
    llamada                        shift and go to state 96
    cte                            shift and go to state 97
    var_array                      shift and go to state 64
    function_id                    shift and go to state 57
    arr_id                         shift and go to state 67

state 168

    (59) llamada_comma -> COMMA .

    O_PARENTHESIS   reduce using rule 59 (llamada_comma -> COMMA .)
    PLUS            reduce using rule 59 (llamada_comma -> COMMA .)
    MINUS           reduce using rule 59 (llamada_comma -> COMMA .)
    ID              reduce using rule 59 (llamada_comma -> COMMA .)
    CTE_INT         reduce using rule 59 (llamada_comma -> COMMA .)
    CTE_FLOAT       reduce using rule 59 (llamada_comma -> COMMA .)


state 169

    (85) or -> and or_operador or .

    SEMICOLON       reduce using rule 85 (or -> and or_operador or .)
    C_PARENTHESIS   reduce using rule 85 (or -> and or_operador or .)
    COMMA           reduce using rule 85 (or -> and or_operador or .)
    TO              reduce using rule 85 (or -> and or_operador or .)


state 170

    (88) and -> equal and_operador and .

    OR              reduce using rule 88 (and -> equal and_operador and .)
    SEMICOLON       reduce using rule 88 (and -> equal and_operador and .)
    C_PARENTHESIS   reduce using rule 88 (and -> equal and_operador and .)
    COMMA           reduce using rule 88 (and -> equal and_operador and .)
    TO              reduce using rule 88 (and -> equal and_operador and .)


state 171

    (91) equal -> compare equal_operador compare .

    AND             reduce using rule 91 (equal -> compare equal_operador compare .)
    OR              reduce using rule 91 (equal -> compare equal_operador compare .)
    SEMICOLON       reduce using rule 91 (equal -> compare equal_operador compare .)
    C_PARENTHESIS   reduce using rule 91 (equal -> compare equal_operador compare .)
    COMMA           reduce using rule 91 (equal -> compare equal_operador compare .)
    TO              reduce using rule 91 (equal -> compare equal_operador compare .)


state 172

    (95) compare -> exp compare_operador exp .

    EQUAL           reduce using rule 95 (compare -> exp compare_operador exp .)
    NOT_EQUAL       reduce using rule 95 (compare -> exp compare_operador exp .)
    AND             reduce using rule 95 (compare -> exp compare_operador exp .)
    OR              reduce using rule 95 (compare -> exp compare_operador exp .)
    SEMICOLON       reduce using rule 95 (compare -> exp compare_operador exp .)
    C_PARENTHESIS   reduce using rule 95 (compare -> exp compare_operador exp .)
    COMMA           reduce using rule 95 (compare -> exp compare_operador exp .)
    TO              reduce using rule 95 (compare -> exp compare_operador exp .)


state 173

    (101) exp -> termino exp_operador exp .

    GREATER         reduce using rule 101 (exp -> termino exp_operador exp .)
    LESSER          reduce using rule 101 (exp -> termino exp_operador exp .)
    GREATER_EQUAL   reduce using rule 101 (exp -> termino exp_operador exp .)
    LESSER_EQUAL    reduce using rule 101 (exp -> termino exp_operador exp .)
    EQUAL           reduce using rule 101 (exp -> termino exp_operador exp .)
    NOT_EQUAL       reduce using rule 101 (exp -> termino exp_operador exp .)
    AND             reduce using rule 101 (exp -> termino exp_operador exp .)
    OR              reduce using rule 101 (exp -> termino exp_operador exp .)
    SEMICOLON       reduce using rule 101 (exp -> termino exp_operador exp .)
    COMMA           reduce using rule 101 (exp -> termino exp_operador exp .)
    C_PARENTHESIS   reduce using rule 101 (exp -> termino exp_operador exp .)
    C_ABRACKET      reduce using rule 101 (exp -> termino exp_operador exp .)
    TO              reduce using rule 101 (exp -> termino exp_operador exp .)
    O_CBRACKET      reduce using rule 101 (exp -> termino exp_operador exp .)


state 174

    (105) termino -> factor termino_operador termino .

    PLUS            reduce using rule 105 (termino -> factor termino_operador termino .)
    MINUS           reduce using rule 105 (termino -> factor termino_operador termino .)
    GREATER         reduce using rule 105 (termino -> factor termino_operador termino .)
    LESSER          reduce using rule 105 (termino -> factor termino_operador termino .)
    GREATER_EQUAL   reduce using rule 105 (termino -> factor termino_operador termino .)
    LESSER_EQUAL    reduce using rule 105 (termino -> factor termino_operador termino .)
    EQUAL           reduce using rule 105 (termino -> factor termino_operador termino .)
    NOT_EQUAL       reduce using rule 105 (termino -> factor termino_operador termino .)
    AND             reduce using rule 105 (termino -> factor termino_operador termino .)
    OR              reduce using rule 105 (termino -> factor termino_operador termino .)
    SEMICOLON       reduce using rule 105 (termino -> factor termino_operador termino .)
    COMMA           reduce using rule 105 (termino -> factor termino_operador termino .)
    C_PARENTHESIS   reduce using rule 105 (termino -> factor termino_operador termino .)
    C_ABRACKET      reduce using rule 105 (termino -> factor termino_operador termino .)
    TO              reduce using rule 105 (termino -> factor termino_operador termino .)
    O_CBRACKET      reduce using rule 105 (termino -> factor termino_operador termino .)


state 175

    (110) factor -> O_PARENTHESIS expr C_PARENTHESIS .

    TIMES           reduce using rule 110 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    DIVIDE          reduce using rule 110 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    MODULE          reduce using rule 110 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    PLUS            reduce using rule 110 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    MINUS           reduce using rule 110 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    GREATER         reduce using rule 110 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    LESSER          reduce using rule 110 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    GREATER_EQUAL   reduce using rule 110 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    LESSER_EQUAL    reduce using rule 110 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    EQUAL           reduce using rule 110 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    NOT_EQUAL       reduce using rule 110 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    AND             reduce using rule 110 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    OR              reduce using rule 110 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    SEMICOLON       reduce using rule 110 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    COMMA           reduce using rule 110 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    C_PARENTHESIS   reduce using rule 110 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    C_ABRACKET      reduce using rule 110 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    TO              reduce using rule 110 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)
    O_CBRACKET      reduce using rule 110 (factor -> O_PARENTHESIS expr C_PARENTHESIS .)


state 176

    (61) lectura -> READ O_PARENTHESIS lectura_prime C_PARENTHESIS .

    SEMICOLON       reduce using rule 61 (lectura -> READ O_PARENTHESIS lectura_prime C_PARENTHESIS .)


state 177

    (63) lectura_prime -> variable COMMA . lectura_prime
    (62) lectura_prime -> . variable
    (63) lectura_prime -> . variable COMMA lectura_prime
    (36) variable -> . var_array
    (37) variable -> . ID
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (40) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (41) arr_id -> . ID

    ID              shift and go to state 109

    variable                       shift and go to state 148
    lectura_prime                  shift and go to state 192
    var_array                      shift and go to state 64
    arr_id                         shift and go to state 67

state 178

    (64) escritura -> WRITE O_PARENTHESIS escritura_prime C_PARENTHESIS .

    SEMICOLON       reduce using rule 64 (escritura -> WRITE O_PARENTHESIS escritura_prime C_PARENTHESIS .)


state 179

    (67) escritura_prime -> expr COMMA . escritura_prime
    (65) escritura_prime -> . expr
    (66) escritura_prime -> . escritura_string
    (67) escritura_prime -> . expr COMMA escritura_prime
    (68) escritura_prime -> . escritura_string COMMA escritura_prime
    (83) expr -> . or
    (69) escritura_string -> . CTE_STRING
    (84) or -> . and
    (85) or -> . and or_operador or
    (87) and -> . equal
    (88) and -> . equal and_operador and
    (90) equal -> . compare
    (91) equal -> . compare equal_operador compare
    (94) compare -> . exp
    (95) compare -> . exp compare_operador exp
    (100) exp -> . termino
    (101) exp -> . termino exp_operador exp
    (104) termino -> . factor
    (105) termino -> . factor termino_operador termino
    (109) factor -> . variable
    (110) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (111) factor -> . llamada retorno_llamada
    (112) factor -> . cte
    (113) factor -> . PLUS cte
    (114) factor -> . MINUS cte
    (36) variable -> . var_array
    (37) variable -> . ID
    (54) llamada -> . function_id O_PARENTHESIS llamada_prime C_PARENTHESIS
    (116) cte -> . CTE_INT
    (117) cte -> . CTE_FLOAT
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (40) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (55) function_id -> . ID
    (41) arr_id -> . ID

    CTE_STRING      shift and go to state 152
    O_PARENTHESIS   shift and go to state 95
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    ID              shift and go to state 65
    CTE_INT         shift and go to state 100
    CTE_FLOAT       shift and go to state 101

    expr                           shift and go to state 150
    escritura_prime                shift and go to state 193
    escritura_string               shift and go to state 151
    or                             shift and go to state 87
    and                            shift and go to state 88
    equal                          shift and go to state 89
    compare                        shift and go to state 90
    exp                            shift and go to state 91
    termino                        shift and go to state 92
    factor                         shift and go to state 93
    variable                       shift and go to state 94
    llamada                        shift and go to state 96
    cte                            shift and go to state 97
    var_array                      shift and go to state 64
    function_id                    shift and go to state 57
    arr_id                         shift and go to state 67

state 180

    (68) escritura_prime -> escritura_string COMMA . escritura_prime
    (65) escritura_prime -> . expr
    (66) escritura_prime -> . escritura_string
    (67) escritura_prime -> . expr COMMA escritura_prime
    (68) escritura_prime -> . escritura_string COMMA escritura_prime
    (83) expr -> . or
    (69) escritura_string -> . CTE_STRING
    (84) or -> . and
    (85) or -> . and or_operador or
    (87) and -> . equal
    (88) and -> . equal and_operador and
    (90) equal -> . compare
    (91) equal -> . compare equal_operador compare
    (94) compare -> . exp
    (95) compare -> . exp compare_operador exp
    (100) exp -> . termino
    (101) exp -> . termino exp_operador exp
    (104) termino -> . factor
    (105) termino -> . factor termino_operador termino
    (109) factor -> . variable
    (110) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (111) factor -> . llamada retorno_llamada
    (112) factor -> . cte
    (113) factor -> . PLUS cte
    (114) factor -> . MINUS cte
    (36) variable -> . var_array
    (37) variable -> . ID
    (54) llamada -> . function_id O_PARENTHESIS llamada_prime C_PARENTHESIS
    (116) cte -> . CTE_INT
    (117) cte -> . CTE_FLOAT
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (40) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (55) function_id -> . ID
    (41) arr_id -> . ID

    CTE_STRING      shift and go to state 152
    O_PARENTHESIS   shift and go to state 95
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    ID              shift and go to state 65
    CTE_INT         shift and go to state 100
    CTE_FLOAT       shift and go to state 101

    escritura_string               shift and go to state 151
    escritura_prime                shift and go to state 194
    expr                           shift and go to state 150
    or                             shift and go to state 87
    and                            shift and go to state 88
    equal                          shift and go to state 89
    compare                        shift and go to state 90
    exp                            shift and go to state 91
    termino                        shift and go to state 92
    factor                         shift and go to state 93
    variable                       shift and go to state 94
    llamada                        shift and go to state 96
    cte                            shift and go to state 97
    var_array                      shift and go to state 64
    function_id                    shift and go to state 57
    arr_id                         shift and go to state 67

state 181

    (70) decision -> IF O_PARENTHESIS decision_expr C_PARENTHESIS . bloque else
    (3) bloque -> . O_CBRACKET bloque_prime C_CBRACKET

    O_CBRACKET      shift and go to state 30

    bloque                         shift and go to state 195

state 182

    (77) while_expr -> O_PARENTHESIS expr C_PARENTHESIS .

    O_CBRACKET      reduce using rule 77 (while_expr -> O_PARENTHESIS expr C_PARENTHESIS .)


state 183

    (78) for -> FOR for_asignacion for_to for_exp . bloque
    (3) bloque -> . O_CBRACKET bloque_prime C_CBRACKET

    O_CBRACKET      shift and go to state 30

    bloque                         shift and go to state 196

state 184

    (82) for_exp -> exp .

    O_CBRACKET      reduce using rule 82 (for_exp -> exp .)


state 185

    (79) for_asignacion -> variable ASSIGN for_asignacion_expr .

    TO              reduce using rule 79 (for_asignacion -> variable ASSIGN for_asignacion_expr .)


state 186

    (80) for_asignacion_expr -> expr .

    TO              reduce using rule 80 (for_asignacion_expr -> expr .)


state 187

    (38) var_array -> arr_id O_ABRACKET exp arr_close_bracket . arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> arr_id O_ABRACKET exp arr_close_bracket . arr_open_bracket exp arr_close_bracket
    (40) var_array -> arr_id O_ABRACKET exp arr_close_bracket .
    (43) arr_open_bracket -> . O_ABRACKET

    ASSIGN          reduce using rule 40 (var_array -> arr_id O_ABRACKET exp arr_close_bracket .)
    TIMES           reduce using rule 40 (var_array -> arr_id O_ABRACKET exp arr_close_bracket .)
    DIVIDE          reduce using rule 40 (var_array -> arr_id O_ABRACKET exp arr_close_bracket .)
    MODULE          reduce using rule 40 (var_array -> arr_id O_ABRACKET exp arr_close_bracket .)
    PLUS            reduce using rule 40 (var_array -> arr_id O_ABRACKET exp arr_close_bracket .)
    MINUS           reduce using rule 40 (var_array -> arr_id O_ABRACKET exp arr_close_bracket .)
    GREATER         reduce using rule 40 (var_array -> arr_id O_ABRACKET exp arr_close_bracket .)
    LESSER          reduce using rule 40 (var_array -> arr_id O_ABRACKET exp arr_close_bracket .)
    GREATER_EQUAL   reduce using rule 40 (var_array -> arr_id O_ABRACKET exp arr_close_bracket .)
    LESSER_EQUAL    reduce using rule 40 (var_array -> arr_id O_ABRACKET exp arr_close_bracket .)
    EQUAL           reduce using rule 40 (var_array -> arr_id O_ABRACKET exp arr_close_bracket .)
    NOT_EQUAL       reduce using rule 40 (var_array -> arr_id O_ABRACKET exp arr_close_bracket .)
    AND             reduce using rule 40 (var_array -> arr_id O_ABRACKET exp arr_close_bracket .)
    OR              reduce using rule 40 (var_array -> arr_id O_ABRACKET exp arr_close_bracket .)
    SEMICOLON       reduce using rule 40 (var_array -> arr_id O_ABRACKET exp arr_close_bracket .)
    COMMA           reduce using rule 40 (var_array -> arr_id O_ABRACKET exp arr_close_bracket .)
    C_PARENTHESIS   reduce using rule 40 (var_array -> arr_id O_ABRACKET exp arr_close_bracket .)
    C_ABRACKET      reduce using rule 40 (var_array -> arr_id O_ABRACKET exp arr_close_bracket .)
    TO              reduce using rule 40 (var_array -> arr_id O_ABRACKET exp arr_close_bracket .)
    O_CBRACKET      reduce using rule 40 (var_array -> arr_id O_ABRACKET exp arr_close_bracket .)
    O_ABRACKET      shift and go to state 197

    arr_open_bracket               shift and go to state 198

state 188

    (42) arr_close_bracket -> C_ABRACKET .

    O_ABRACKET      reduce using rule 42 (arr_close_bracket -> C_ABRACKET .)
    ASSIGN          reduce using rule 42 (arr_close_bracket -> C_ABRACKET .)
    TIMES           reduce using rule 42 (arr_close_bracket -> C_ABRACKET .)
    DIVIDE          reduce using rule 42 (arr_close_bracket -> C_ABRACKET .)
    MODULE          reduce using rule 42 (arr_close_bracket -> C_ABRACKET .)
    PLUS            reduce using rule 42 (arr_close_bracket -> C_ABRACKET .)
    MINUS           reduce using rule 42 (arr_close_bracket -> C_ABRACKET .)
    GREATER         reduce using rule 42 (arr_close_bracket -> C_ABRACKET .)
    LESSER          reduce using rule 42 (arr_close_bracket -> C_ABRACKET .)
    GREATER_EQUAL   reduce using rule 42 (arr_close_bracket -> C_ABRACKET .)
    LESSER_EQUAL    reduce using rule 42 (arr_close_bracket -> C_ABRACKET .)
    EQUAL           reduce using rule 42 (arr_close_bracket -> C_ABRACKET .)
    NOT_EQUAL       reduce using rule 42 (arr_close_bracket -> C_ABRACKET .)
    AND             reduce using rule 42 (arr_close_bracket -> C_ABRACKET .)
    OR              reduce using rule 42 (arr_close_bracket -> C_ABRACKET .)
    SEMICOLON       reduce using rule 42 (arr_close_bracket -> C_ABRACKET .)
    COMMA           reduce using rule 42 (arr_close_bracket -> C_ABRACKET .)
    C_PARENTHESIS   reduce using rule 42 (arr_close_bracket -> C_ABRACKET .)
    C_ABRACKET      reduce using rule 42 (arr_close_bracket -> C_ABRACKET .)
    TO              reduce using rule 42 (arr_close_bracket -> C_ABRACKET .)
    O_CBRACKET      reduce using rule 42 (arr_close_bracket -> C_ABRACKET .)


state 189

    (28) funcion_base -> FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque .

    FUNCTION        reduce using rule 28 (funcion_base -> FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque .)
    MAIN            reduce using rule 28 (funcion_base -> FUNCTION funcion_ident O_PARENTHESIS funcion_prime C_PARENTHESIS declaracion_funcion bloque .)


state 190

    (14) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET . O_ABRACKET CTE_INT C_ABRACKET
    (15) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET .

    O_ABRACKET      shift and go to state 199
    COMMA           reduce using rule 15 (declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET .)
    COLON           reduce using rule 15 (declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET .)


state 191

    (57) llamada_prime -> llamada_exp llamada_comma llamada_prime .

    C_PARENTHESIS   reduce using rule 57 (llamada_prime -> llamada_exp llamada_comma llamada_prime .)


state 192

    (63) lectura_prime -> variable COMMA lectura_prime .

    C_PARENTHESIS   reduce using rule 63 (lectura_prime -> variable COMMA lectura_prime .)


state 193

    (67) escritura_prime -> expr COMMA escritura_prime .

    C_PARENTHESIS   reduce using rule 67 (escritura_prime -> expr COMMA escritura_prime .)


state 194

    (68) escritura_prime -> escritura_string COMMA escritura_prime .

    C_PARENTHESIS   reduce using rule 68 (escritura_prime -> escritura_string COMMA escritura_prime .)


state 195

    (70) decision -> IF O_PARENTHESIS decision_expr C_PARENTHESIS bloque . else
    (72) else -> . else_prime bloque
    (73) else -> . epsilon
    (74) else_prime -> . ELSE
    (118) epsilon -> .

    ELSE            shift and go to state 203
    RETURN          reduce using rule 118 (epsilon -> .)
    READ            reduce using rule 118 (epsilon -> .)
    WRITE           reduce using rule 118 (epsilon -> .)
    IF              reduce using rule 118 (epsilon -> .)
    FOR             reduce using rule 118 (epsilon -> .)
    ID              reduce using rule 118 (epsilon -> .)
    WHILE           reduce using rule 118 (epsilon -> .)
    C_CBRACKET      reduce using rule 118 (epsilon -> .)

    else                           shift and go to state 200
    else_prime                     shift and go to state 201
    epsilon                        shift and go to state 202

state 196

    (78) for -> FOR for_asignacion for_to for_exp bloque .

    RETURN          reduce using rule 78 (for -> FOR for_asignacion for_to for_exp bloque .)
    READ            reduce using rule 78 (for -> FOR for_asignacion for_to for_exp bloque .)
    WRITE           reduce using rule 78 (for -> FOR for_asignacion for_to for_exp bloque .)
    IF              reduce using rule 78 (for -> FOR for_asignacion for_to for_exp bloque .)
    FOR             reduce using rule 78 (for -> FOR for_asignacion for_to for_exp bloque .)
    ID              reduce using rule 78 (for -> FOR for_asignacion for_to for_exp bloque .)
    WHILE           reduce using rule 78 (for -> FOR for_asignacion for_to for_exp bloque .)
    C_CBRACKET      reduce using rule 78 (for -> FOR for_asignacion for_to for_exp bloque .)


state 197

    (43) arr_open_bracket -> O_ABRACKET .

    O_PARENTHESIS   reduce using rule 43 (arr_open_bracket -> O_ABRACKET .)
    PLUS            reduce using rule 43 (arr_open_bracket -> O_ABRACKET .)
    MINUS           reduce using rule 43 (arr_open_bracket -> O_ABRACKET .)
    ID              reduce using rule 43 (arr_open_bracket -> O_ABRACKET .)
    CTE_INT         reduce using rule 43 (arr_open_bracket -> O_ABRACKET .)
    CTE_FLOAT       reduce using rule 43 (arr_open_bracket -> O_ABRACKET .)


state 198

    (38) var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket . exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket . exp arr_close_bracket
    (100) exp -> . termino
    (101) exp -> . termino exp_operador exp
    (104) termino -> . factor
    (105) termino -> . factor termino_operador termino
    (109) factor -> . variable
    (110) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (111) factor -> . llamada retorno_llamada
    (112) factor -> . cte
    (113) factor -> . PLUS cte
    (114) factor -> . MINUS cte
    (36) variable -> . var_array
    (37) variable -> . ID
    (54) llamada -> . function_id O_PARENTHESIS llamada_prime C_PARENTHESIS
    (116) cte -> . CTE_INT
    (117) cte -> . CTE_FLOAT
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (40) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (55) function_id -> . ID
    (41) arr_id -> . ID

    O_PARENTHESIS   shift and go to state 95
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    ID              shift and go to state 65
    CTE_INT         shift and go to state 100
    CTE_FLOAT       shift and go to state 101

    arr_id                         shift and go to state 67
    exp                            shift and go to state 204
    termino                        shift and go to state 92
    factor                         shift and go to state 93
    variable                       shift and go to state 94
    llamada                        shift and go to state 96
    cte                            shift and go to state 97
    var_array                      shift and go to state 64
    function_id                    shift and go to state 57

state 199

    (14) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET . CTE_INT C_ABRACKET

    CTE_INT         shift and go to state 205


state 200

    (70) decision -> IF O_PARENTHESIS decision_expr C_PARENTHESIS bloque else .

    RETURN          reduce using rule 70 (decision -> IF O_PARENTHESIS decision_expr C_PARENTHESIS bloque else .)
    READ            reduce using rule 70 (decision -> IF O_PARENTHESIS decision_expr C_PARENTHESIS bloque else .)
    WRITE           reduce using rule 70 (decision -> IF O_PARENTHESIS decision_expr C_PARENTHESIS bloque else .)
    IF              reduce using rule 70 (decision -> IF O_PARENTHESIS decision_expr C_PARENTHESIS bloque else .)
    FOR             reduce using rule 70 (decision -> IF O_PARENTHESIS decision_expr C_PARENTHESIS bloque else .)
    ID              reduce using rule 70 (decision -> IF O_PARENTHESIS decision_expr C_PARENTHESIS bloque else .)
    WHILE           reduce using rule 70 (decision -> IF O_PARENTHESIS decision_expr C_PARENTHESIS bloque else .)
    C_CBRACKET      reduce using rule 70 (decision -> IF O_PARENTHESIS decision_expr C_PARENTHESIS bloque else .)


state 201

    (72) else -> else_prime . bloque
    (3) bloque -> . O_CBRACKET bloque_prime C_CBRACKET

    O_CBRACKET      shift and go to state 30

    bloque                         shift and go to state 206

state 202

    (73) else -> epsilon .

    RETURN          reduce using rule 73 (else -> epsilon .)
    READ            reduce using rule 73 (else -> epsilon .)
    WRITE           reduce using rule 73 (else -> epsilon .)
    IF              reduce using rule 73 (else -> epsilon .)
    FOR             reduce using rule 73 (else -> epsilon .)
    ID              reduce using rule 73 (else -> epsilon .)
    WHILE           reduce using rule 73 (else -> epsilon .)
    C_CBRACKET      reduce using rule 73 (else -> epsilon .)


state 203

    (74) else_prime -> ELSE .

    O_CBRACKET      reduce using rule 74 (else_prime -> ELSE .)


state 204

    (38) var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp . arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp . arr_close_bracket
    (42) arr_close_bracket -> . C_ABRACKET

    C_ABRACKET      shift and go to state 188

    arr_close_bracket              shift and go to state 207

state 205

    (14) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT . C_ABRACKET

    C_ABRACKET      shift and go to state 208


state 206

    (72) else -> else_prime bloque .

    RETURN          reduce using rule 72 (else -> else_prime bloque .)
    READ            reduce using rule 72 (else -> else_prime bloque .)
    WRITE           reduce using rule 72 (else -> else_prime bloque .)
    IF              reduce using rule 72 (else -> else_prime bloque .)
    FOR             reduce using rule 72 (else -> else_prime bloque .)
    ID              reduce using rule 72 (else -> else_prime bloque .)
    WHILE           reduce using rule 72 (else -> else_prime bloque .)
    C_CBRACKET      reduce using rule 72 (else -> else_prime bloque .)


state 207

    (38) var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket . arr_open_bracket exp arr_close_bracket
    (39) var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .
    (43) arr_open_bracket -> . O_ABRACKET

    ASSIGN          reduce using rule 39 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    TIMES           reduce using rule 39 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    DIVIDE          reduce using rule 39 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    MODULE          reduce using rule 39 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    PLUS            reduce using rule 39 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    MINUS           reduce using rule 39 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    GREATER         reduce using rule 39 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    LESSER          reduce using rule 39 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    GREATER_EQUAL   reduce using rule 39 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    LESSER_EQUAL    reduce using rule 39 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    EQUAL           reduce using rule 39 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    NOT_EQUAL       reduce using rule 39 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    AND             reduce using rule 39 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    OR              reduce using rule 39 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    SEMICOLON       reduce using rule 39 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    COMMA           reduce using rule 39 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    C_PARENTHESIS   reduce using rule 39 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    C_ABRACKET      reduce using rule 39 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    TO              reduce using rule 39 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    O_CBRACKET      reduce using rule 39 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    O_ABRACKET      shift and go to state 197

    arr_open_bracket               shift and go to state 209

state 208

    (14) declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET .

    COMMA           reduce using rule 14 (declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET .)
    COLON           reduce using rule 14 (declaracion_variable -> ID O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET O_ABRACKET CTE_INT C_ABRACKET .)


state 209

    (38) var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket . exp arr_close_bracket
    (100) exp -> . termino
    (101) exp -> . termino exp_operador exp
    (104) termino -> . factor
    (105) termino -> . factor termino_operador termino
    (109) factor -> . variable
    (110) factor -> . O_PARENTHESIS expr C_PARENTHESIS
    (111) factor -> . llamada retorno_llamada
    (112) factor -> . cte
    (113) factor -> . PLUS cte
    (114) factor -> . MINUS cte
    (36) variable -> . var_array
    (37) variable -> . ID
    (54) llamada -> . function_id O_PARENTHESIS llamada_prime C_PARENTHESIS
    (116) cte -> . CTE_INT
    (117) cte -> . CTE_FLOAT
    (38) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (39) var_array -> . arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket
    (40) var_array -> . arr_id O_ABRACKET exp arr_close_bracket
    (55) function_id -> . ID
    (41) arr_id -> . ID

    O_PARENTHESIS   shift and go to state 95
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99
    ID              shift and go to state 65
    CTE_INT         shift and go to state 100
    CTE_FLOAT       shift and go to state 101

    arr_id                         shift and go to state 67
    exp                            shift and go to state 210
    termino                        shift and go to state 92
    factor                         shift and go to state 93
    variable                       shift and go to state 94
    llamada                        shift and go to state 96
    cte                            shift and go to state 97
    var_array                      shift and go to state 64
    function_id                    shift and go to state 57

state 210

    (38) var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp . arr_close_bracket
    (42) arr_close_bracket -> . C_ABRACKET

    C_ABRACKET      shift and go to state 188

    arr_close_bracket              shift and go to state 211

state 211

    (38) var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .

    ASSIGN          reduce using rule 38 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    TIMES           reduce using rule 38 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    DIVIDE          reduce using rule 38 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    MODULE          reduce using rule 38 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    PLUS            reduce using rule 38 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    MINUS           reduce using rule 38 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    GREATER         reduce using rule 38 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    LESSER          reduce using rule 38 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    GREATER_EQUAL   reduce using rule 38 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    LESSER_EQUAL    reduce using rule 38 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    EQUAL           reduce using rule 38 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    NOT_EQUAL       reduce using rule 38 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    AND             reduce using rule 38 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    OR              reduce using rule 38 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    SEMICOLON       reduce using rule 38 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    COMMA           reduce using rule 38 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    C_PARENTHESIS   reduce using rule 38 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    C_ABRACKET      reduce using rule 38 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    TO              reduce using rule 38 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)
    O_CBRACKET      reduce using rule 38 (var_array -> arr_id O_ABRACKET exp arr_close_bracket arr_open_bracket exp arr_close_bracket arr_open_bracket exp arr_close_bracket .)

